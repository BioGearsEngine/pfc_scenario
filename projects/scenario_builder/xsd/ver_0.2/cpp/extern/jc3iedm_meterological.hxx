// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EXTERN_JC3IEDM_METEROLOGICAL_HXX
#define EXTERN_JC3IEDM_METEROLOGICAL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace oo_2_0
{
  class AngleOptionalTypeRangeAngle7_4;
  class DatetimeOptionalTypeFix18;
  class DimensionOptionalType12_3;
  class DimensionMandatoryType12_3;
  class QuantityOptionalType8_4;
  class RateOptionalType4_1;
  class RateOptionalType8_4;
  class RatioOptionalTypeRangeRatio6_5;
  class RatioOptionalTypeRangeRatio7_6;
  class TemperatureTypeRangeTemperature5_1;
  class Atmosphere;
  class CloudCover;
  class Icing;
  class Light;
  class Precipitation;
  class Visibility;
  class Wind;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "jc3iedm-3.1-codes-20061208.hxx"

namespace oo_2_0
{
  class AngleOptionalTypeRangeAngle7_4: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    AngleOptionalTypeRangeAngle7_4 (const ::xml_schema::decimal&);

    AngleOptionalTypeRangeAngle7_4 (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    AngleOptionalTypeRangeAngle7_4 (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    AngleOptionalTypeRangeAngle7_4 (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    AngleOptionalTypeRangeAngle7_4 (const AngleOptionalTypeRangeAngle7_4& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual AngleOptionalTypeRangeAngle7_4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AngleOptionalTypeRangeAngle7_4 ();
  };

  class DatetimeOptionalTypeFix18: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    DatetimeOptionalTypeFix18 ();

    DatetimeOptionalTypeFix18 (const char*);

    DatetimeOptionalTypeFix18 (const ::std::string&);

    DatetimeOptionalTypeFix18 (const ::xml_schema::string&);

    DatetimeOptionalTypeFix18 (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DatetimeOptionalTypeFix18 (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DatetimeOptionalTypeFix18 (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DatetimeOptionalTypeFix18 (const DatetimeOptionalTypeFix18& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual DatetimeOptionalTypeFix18*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DatetimeOptionalTypeFix18 ();
  };

  class DimensionOptionalType12_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    DimensionOptionalType12_3 (const ::xml_schema::decimal&);

    DimensionOptionalType12_3 (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DimensionOptionalType12_3 (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DimensionOptionalType12_3 (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    DimensionOptionalType12_3 (const DimensionOptionalType12_3& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual DimensionOptionalType12_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DimensionOptionalType12_3 ();
  };

  class DimensionMandatoryType12_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    DimensionMandatoryType12_3 (const ::xml_schema::decimal&);

    DimensionMandatoryType12_3 (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    DimensionMandatoryType12_3 (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    DimensionMandatoryType12_3 (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    DimensionMandatoryType12_3 (const DimensionMandatoryType12_3& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual DimensionMandatoryType12_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DimensionMandatoryType12_3 ();
  };

  class QuantityOptionalType8_4: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    QuantityOptionalType8_4 (const ::xml_schema::decimal&);

    QuantityOptionalType8_4 (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    QuantityOptionalType8_4 (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    QuantityOptionalType8_4 (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    QuantityOptionalType8_4 (const QuantityOptionalType8_4& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual QuantityOptionalType8_4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~QuantityOptionalType8_4 ();
  };

  class RateOptionalType4_1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    RateOptionalType4_1 (const ::xml_schema::decimal&);

    RateOptionalType4_1 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType4_1 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType4_1 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType4_1 (const RateOptionalType4_1& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual RateOptionalType4_1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RateOptionalType4_1 ();
  };

  class RateOptionalType8_4: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    RateOptionalType8_4 (const ::xml_schema::decimal&);

    RateOptionalType8_4 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType8_4 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType8_4 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RateOptionalType8_4 (const RateOptionalType8_4& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual RateOptionalType8_4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RateOptionalType8_4 ();
  };

  class RatioOptionalTypeRangeRatio6_5: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    RatioOptionalTypeRangeRatio6_5 (const ::xml_schema::decimal&);

    RatioOptionalTypeRangeRatio6_5 (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio6_5 (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio6_5 (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio6_5 (const RatioOptionalTypeRangeRatio6_5& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual RatioOptionalTypeRangeRatio6_5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RatioOptionalTypeRangeRatio6_5 ();
  };

  class RatioOptionalTypeRangeRatio7_6: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    RatioOptionalTypeRangeRatio7_6 (const ::xml_schema::decimal&);

    RatioOptionalTypeRangeRatio7_6 (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio7_6 (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio7_6 (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    RatioOptionalTypeRangeRatio7_6 (const RatioOptionalTypeRangeRatio7_6& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual RatioOptionalTypeRangeRatio7_6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RatioOptionalTypeRangeRatio7_6 ();
  };

  class TemperatureTypeRangeTemperature5_1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    TemperatureTypeRangeTemperature5_1 (const ::xml_schema::decimal&);

    TemperatureTypeRangeTemperature5_1 (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    TemperatureTypeRangeTemperature5_1 (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    TemperatureTypeRangeTemperature5_1 (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    TemperatureTypeRangeTemperature5_1 (const TemperatureTypeRangeTemperature5_1& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    virtual TemperatureTypeRangeTemperature5_1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TemperatureTypeRangeTemperature5_1 ();
  };

  class Atmosphere: public ::xml_schema::type
  {
    public:
    // HumidityRatio
    //
    typedef ::oo_2_0::RatioOptionalTypeRangeRatio6_5 HumidityRatio_type;
    typedef ::xsd::cxx::tree::optional< HumidityRatio_type > HumidityRatio_optional;
    typedef ::xsd::cxx::tree::traits< HumidityRatio_type, char > HumidityRatio_traits;

    const HumidityRatio_optional&
    HumidityRatio () const;

    HumidityRatio_optional&
    HumidityRatio ();

    void
    HumidityRatio (const HumidityRatio_type& x);

    void
    HumidityRatio (const HumidityRatio_optional& x);

    void
    HumidityRatio (::std::unique_ptr< HumidityRatio_type > p);

    // InversionLayerCode
    //
    typedef ::oo_2_0::AtmosphereInversionLayerCode InversionLayerCode_type;
    typedef ::xsd::cxx::tree::optional< InversionLayerCode_type > InversionLayerCode_optional;
    typedef ::xsd::cxx::tree::traits< InversionLayerCode_type, char > InversionLayerCode_traits;

    const InversionLayerCode_optional&
    InversionLayerCode () const;

    InversionLayerCode_optional&
    InversionLayerCode ();

    void
    InversionLayerCode (const InversionLayerCode_type& x);

    void
    InversionLayerCode (const InversionLayerCode_optional& x);

    void
    InversionLayerCode (::std::unique_ptr< InversionLayerCode_type > p);

    // PressureQuantity
    //
    typedef ::oo_2_0::QuantityOptionalType8_4 PressureQuantity_type;
    typedef ::xsd::cxx::tree::optional< PressureQuantity_type > PressureQuantity_optional;
    typedef ::xsd::cxx::tree::traits< PressureQuantity_type, char > PressureQuantity_traits;

    const PressureQuantity_optional&
    PressureQuantity () const;

    PressureQuantity_optional&
    PressureQuantity ();

    void
    PressureQuantity (const PressureQuantity_type& x);

    void
    PressureQuantity (const PressureQuantity_optional& x);

    void
    PressureQuantity (::std::unique_ptr< PressureQuantity_type > p);

    // Temperature
    //
    typedef ::oo_2_0::TemperatureTypeRangeTemperature5_1 Temperature_type;
    typedef ::xsd::cxx::tree::optional< Temperature_type > Temperature_optional;
    typedef ::xsd::cxx::tree::traits< Temperature_type, char > Temperature_traits;

    const Temperature_optional&
    Temperature () const;

    Temperature_optional&
    Temperature ();

    void
    Temperature (const Temperature_type& x);

    void
    Temperature (const Temperature_optional& x);

    void
    Temperature (::std::unique_ptr< Temperature_type > p);

    // TemperatureGradientCode
    //
    typedef ::oo_2_0::AtmosphereTemperatureGradientCode TemperatureGradientCode_type;
    typedef ::xsd::cxx::tree::optional< TemperatureGradientCode_type > TemperatureGradientCode_optional;
    typedef ::xsd::cxx::tree::traits< TemperatureGradientCode_type, char > TemperatureGradientCode_traits;

    const TemperatureGradientCode_optional&
    TemperatureGradientCode () const;

    TemperatureGradientCode_optional&
    TemperatureGradientCode ();

    void
    TemperatureGradientCode (const TemperatureGradientCode_type& x);

    void
    TemperatureGradientCode (const TemperatureGradientCode_optional& x);

    void
    TemperatureGradientCode (::std::unique_ptr< TemperatureGradientCode_type > p);

    // Constructors.
    //
    Atmosphere ();

    Atmosphere (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Atmosphere (const Atmosphere& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Atmosphere*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Atmosphere&
    operator= (const Atmosphere& x);

    virtual 
    ~Atmosphere ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    HumidityRatio_optional HumidityRatio_;
    InversionLayerCode_optional InversionLayerCode_;
    PressureQuantity_optional PressureQuantity_;
    Temperature_optional Temperature_;
    TemperatureGradientCode_optional TemperatureGradientCode_;
  };

  class CloudCover: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::CloudCoverCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_type&
    CategoryCode () const;

    CategoryCode_type&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // BaseDimension
    //
    typedef ::oo_2_0::DimensionOptionalType12_3 BaseDimension_type;
    typedef ::xsd::cxx::tree::optional< BaseDimension_type > BaseDimension_optional;
    typedef ::xsd::cxx::tree::traits< BaseDimension_type, char > BaseDimension_traits;

    const BaseDimension_optional&
    BaseDimension () const;

    BaseDimension_optional&
    BaseDimension ();

    void
    BaseDimension (const BaseDimension_type& x);

    void
    BaseDimension (const BaseDimension_optional& x);

    void
    BaseDimension (::std::unique_ptr< BaseDimension_type > p);

    // TopDimension
    //
    typedef ::oo_2_0::DimensionOptionalType12_3 TopDimension_type;
    typedef ::xsd::cxx::tree::optional< TopDimension_type > TopDimension_optional;
    typedef ::xsd::cxx::tree::traits< TopDimension_type, char > TopDimension_traits;

    const TopDimension_optional&
    TopDimension () const;

    TopDimension_optional&
    TopDimension ();

    void
    TopDimension (const TopDimension_type& x);

    void
    TopDimension (const TopDimension_optional& x);

    void
    TopDimension (::std::unique_ptr< TopDimension_type > p);

    // AverageCoverageCode
    //
    typedef ::oo_2_0::CloudCoverAverageCoverageCode AverageCoverageCode_type;
    typedef ::xsd::cxx::tree::optional< AverageCoverageCode_type > AverageCoverageCode_optional;
    typedef ::xsd::cxx::tree::traits< AverageCoverageCode_type, char > AverageCoverageCode_traits;

    const AverageCoverageCode_optional&
    AverageCoverageCode () const;

    AverageCoverageCode_optional&
    AverageCoverageCode ();

    void
    AverageCoverageCode (const AverageCoverageCode_type& x);

    void
    AverageCoverageCode (const AverageCoverageCode_optional& x);

    void
    AverageCoverageCode (::std::unique_ptr< AverageCoverageCode_type > p);

    // LightRefractionRatio
    //
    typedef ::oo_2_0::RatioOptionalTypeRangeRatio7_6 LightRefractionRatio_type;
    typedef ::xsd::cxx::tree::optional< LightRefractionRatio_type > LightRefractionRatio_optional;
    typedef ::xsd::cxx::tree::traits< LightRefractionRatio_type, char > LightRefractionRatio_traits;

    const LightRefractionRatio_optional&
    LightRefractionRatio () const;

    LightRefractionRatio_optional&
    LightRefractionRatio ();

    void
    LightRefractionRatio (const LightRefractionRatio_type& x);

    void
    LightRefractionRatio (const LightRefractionRatio_optional& x);

    void
    LightRefractionRatio (::std::unique_ptr< LightRefractionRatio_type > p);

    // Constructors.
    //
    CloudCover (const CategoryCode_type&);

    CloudCover (::std::unique_ptr< CategoryCode_type >);

    CloudCover (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    CloudCover (const CloudCover& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual CloudCover*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CloudCover&
    operator= (const CloudCover& x);

    virtual 
    ~CloudCover ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< CategoryCode_type > CategoryCode_;
    BaseDimension_optional BaseDimension_;
    TopDimension_optional TopDimension_;
    AverageCoverageCode_optional AverageCoverageCode_;
    LightRefractionRatio_optional LightRefractionRatio_;
  };

  class Icing: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::IcingCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::optional< CategoryCode_type > CategoryCode_optional;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_optional&
    CategoryCode () const;

    CategoryCode_optional&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (const CategoryCode_optional& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // SeverityQualifierCode
    //
    typedef ::oo_2_0::IcingSeverityQualifierCode SeverityQualifierCode_type;
    typedef ::xsd::cxx::tree::optional< SeverityQualifierCode_type > SeverityQualifierCode_optional;
    typedef ::xsd::cxx::tree::traits< SeverityQualifierCode_type, char > SeverityQualifierCode_traits;

    const SeverityQualifierCode_optional&
    SeverityQualifierCode () const;

    SeverityQualifierCode_optional&
    SeverityQualifierCode ();

    void
    SeverityQualifierCode (const SeverityQualifierCode_type& x);

    void
    SeverityQualifierCode (const SeverityQualifierCode_optional& x);

    void
    SeverityQualifierCode (::std::unique_ptr< SeverityQualifierCode_type > p);

    // Constructors.
    //
    Icing ();

    Icing (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Icing (const Icing& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Icing*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Icing&
    operator= (const Icing& x);

    virtual 
    ~Icing ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CategoryCode_optional CategoryCode_;
    SeverityQualifierCode_optional SeverityQualifierCode_;
  };

  class Light: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::LightCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::optional< CategoryCode_type > CategoryCode_optional;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_optional&
    CategoryCode () const;

    CategoryCode_optional&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (const CategoryCode_optional& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // UpDatetime
    //
    typedef ::oo_2_0::DatetimeOptionalTypeFix18 UpDatetime_type;
    typedef ::xsd::cxx::tree::optional< UpDatetime_type > UpDatetime_optional;
    typedef ::xsd::cxx::tree::traits< UpDatetime_type, char > UpDatetime_traits;

    const UpDatetime_optional&
    UpDatetime () const;

    UpDatetime_optional&
    UpDatetime ();

    void
    UpDatetime (const UpDatetime_type& x);

    void
    UpDatetime (const UpDatetime_optional& x);

    void
    UpDatetime (::std::unique_ptr< UpDatetime_type > p);

    // DownDatetime
    //
    typedef ::oo_2_0::DatetimeOptionalTypeFix18 DownDatetime_type;
    typedef ::xsd::cxx::tree::optional< DownDatetime_type > DownDatetime_optional;
    typedef ::xsd::cxx::tree::traits< DownDatetime_type, char > DownDatetime_traits;

    const DownDatetime_optional&
    DownDatetime () const;

    DownDatetime_optional&
    DownDatetime ();

    void
    DownDatetime (const DownDatetime_type& x);

    void
    DownDatetime (const DownDatetime_optional& x);

    void
    DownDatetime (::std::unique_ptr< DownDatetime_type > p);

    // MoonPhaseCode
    //
    typedef ::oo_2_0::LightMoonPhaseCode MoonPhaseCode_type;
    typedef ::xsd::cxx::tree::optional< MoonPhaseCode_type > MoonPhaseCode_optional;
    typedef ::xsd::cxx::tree::traits< MoonPhaseCode_type, char > MoonPhaseCode_traits;

    const MoonPhaseCode_optional&
    MoonPhaseCode () const;

    MoonPhaseCode_optional&
    MoonPhaseCode ();

    void
    MoonPhaseCode (const MoonPhaseCode_type& x);

    void
    MoonPhaseCode (const MoonPhaseCode_optional& x);

    void
    MoonPhaseCode (::std::unique_ptr< MoonPhaseCode_type > p);

    // Constructors.
    //
    Light ();

    Light (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Light (const Light& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Light*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Light&
    operator= (const Light& x);

    virtual 
    ~Light ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CategoryCode_optional CategoryCode_;
    UpDatetime_optional UpDatetime_;
    DownDatetime_optional DownDatetime_;
    MoonPhaseCode_optional MoonPhaseCode_;
  };

  class Precipitation: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::PrecipitationCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_type&
    CategoryCode () const;

    CategoryCode_type&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // Rate
    //
    typedef ::oo_2_0::RateOptionalType4_1 Rate_type;
    typedef ::xsd::cxx::tree::optional< Rate_type > Rate_optional;
    typedef ::xsd::cxx::tree::traits< Rate_type, char > Rate_traits;

    const Rate_optional&
    Rate () const;

    Rate_optional&
    Rate ();

    void
    Rate (const Rate_type& x);

    void
    Rate (const Rate_optional& x);

    void
    Rate (::std::unique_ptr< Rate_type > p);

    // Constructors.
    //
    Precipitation (const CategoryCode_type&);

    Precipitation (::std::unique_ptr< CategoryCode_type >);

    Precipitation (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    Precipitation (const Precipitation& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual Precipitation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Precipitation&
    operator= (const Precipitation& x);

    virtual 
    ~Precipitation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< CategoryCode_type > CategoryCode_;
    Rate_optional Rate_;
  };

  class Visibility: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::VisibilityCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::optional< CategoryCode_type > CategoryCode_optional;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_optional&
    CategoryCode () const;

    CategoryCode_optional&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (const CategoryCode_optional& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // RangeDimension
    //
    typedef ::oo_2_0::DimensionMandatoryType12_3 RangeDimension_type;
    typedef ::xsd::cxx::tree::traits< RangeDimension_type, char > RangeDimension_traits;

    const RangeDimension_type&
    RangeDimension () const;

    RangeDimension_type&
    RangeDimension ();

    void
    RangeDimension (const RangeDimension_type& x);

    void
    RangeDimension (::std::unique_ptr< RangeDimension_type > p);

    // Constructors.
    //
    Visibility (const RangeDimension_type&);

    Visibility (::std::unique_ptr< RangeDimension_type >);

    Visibility (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Visibility (const Visibility& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Visibility*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Visibility&
    operator= (const Visibility& x);

    virtual 
    ~Visibility ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CategoryCode_optional CategoryCode_;
    ::xsd::cxx::tree::one< RangeDimension_type > RangeDimension_;
  };

  class Wind: public ::xml_schema::type
  {
    public:
    // CategoryCode
    //
    typedef ::oo_2_0::WindCategoryCode CategoryCode_type;
    typedef ::xsd::cxx::tree::optional< CategoryCode_type > CategoryCode_optional;
    typedef ::xsd::cxx::tree::traits< CategoryCode_type, char > CategoryCode_traits;

    const CategoryCode_optional&
    CategoryCode () const;

    CategoryCode_optional&
    CategoryCode ();

    void
    CategoryCode (const CategoryCode_type& x);

    void
    CategoryCode (const CategoryCode_optional& x);

    void
    CategoryCode (::std::unique_ptr< CategoryCode_type > p);

    // AirStabilityCategoryCode
    //
    typedef ::oo_2_0::WindAirStabilityCategoryCode AirStabilityCategoryCode_type;
    typedef ::xsd::cxx::tree::optional< AirStabilityCategoryCode_type > AirStabilityCategoryCode_optional;
    typedef ::xsd::cxx::tree::traits< AirStabilityCategoryCode_type, char > AirStabilityCategoryCode_traits;

    const AirStabilityCategoryCode_optional&
    AirStabilityCategoryCode () const;

    AirStabilityCategoryCode_optional&
    AirStabilityCategoryCode ();

    void
    AirStabilityCategoryCode (const AirStabilityCategoryCode_type& x);

    void
    AirStabilityCategoryCode (const AirStabilityCategoryCode_optional& x);

    void
    AirStabilityCategoryCode (::std::unique_ptr< AirStabilityCategoryCode_type > p);

    // AltitudeLayerCode
    //
    typedef ::oo_2_0::WindAltitudeLayerCode AltitudeLayerCode_type;
    typedef ::xsd::cxx::tree::optional< AltitudeLayerCode_type > AltitudeLayerCode_optional;
    typedef ::xsd::cxx::tree::traits< AltitudeLayerCode_type, char > AltitudeLayerCode_traits;

    const AltitudeLayerCode_optional&
    AltitudeLayerCode () const;

    AltitudeLayerCode_optional&
    AltitudeLayerCode ();

    void
    AltitudeLayerCode (const AltitudeLayerCode_type& x);

    void
    AltitudeLayerCode (const AltitudeLayerCode_optional& x);

    void
    AltitudeLayerCode (::std::unique_ptr< AltitudeLayerCode_type > p);

    // DirectionAngle
    //
    typedef ::oo_2_0::AngleOptionalTypeRangeAngle7_4 DirectionAngle_type;
    typedef ::xsd::cxx::tree::optional< DirectionAngle_type > DirectionAngle_optional;
    typedef ::xsd::cxx::tree::traits< DirectionAngle_type, char > DirectionAngle_traits;

    const DirectionAngle_optional&
    DirectionAngle () const;

    DirectionAngle_optional&
    DirectionAngle ();

    void
    DirectionAngle (const DirectionAngle_type& x);

    void
    DirectionAngle (const DirectionAngle_optional& x);

    void
    DirectionAngle (::std::unique_ptr< DirectionAngle_type > p);

    // EffectiveDownwindDirectionAngle
    //
    typedef ::oo_2_0::AngleOptionalTypeRangeAngle7_4 EffectiveDownwindDirectionAngle_type;
    typedef ::xsd::cxx::tree::optional< EffectiveDownwindDirectionAngle_type > EffectiveDownwindDirectionAngle_optional;
    typedef ::xsd::cxx::tree::traits< EffectiveDownwindDirectionAngle_type, char > EffectiveDownwindDirectionAngle_traits;

    const EffectiveDownwindDirectionAngle_optional&
    EffectiveDownwindDirectionAngle () const;

    EffectiveDownwindDirectionAngle_optional&
    EffectiveDownwindDirectionAngle ();

    void
    EffectiveDownwindDirectionAngle (const EffectiveDownwindDirectionAngle_type& x);

    void
    EffectiveDownwindDirectionAngle (const EffectiveDownwindDirectionAngle_optional& x);

    void
    EffectiveDownwindDirectionAngle (::std::unique_ptr< EffectiveDownwindDirectionAngle_type > p);

    // SpeedRate
    //
    typedef ::oo_2_0::RateOptionalType8_4 SpeedRate_type;
    typedef ::xsd::cxx::tree::optional< SpeedRate_type > SpeedRate_optional;
    typedef ::xsd::cxx::tree::traits< SpeedRate_type, char > SpeedRate_traits;

    const SpeedRate_optional&
    SpeedRate () const;

    SpeedRate_optional&
    SpeedRate ();

    void
    SpeedRate (const SpeedRate_type& x);

    void
    SpeedRate (const SpeedRate_optional& x);

    void
    SpeedRate (::std::unique_ptr< SpeedRate_type > p);

    // NuclearYieldQualifierCode
    //
    typedef ::oo_2_0::NuclearYieldGroupCode NuclearYieldQualifierCode_type;
    typedef ::xsd::cxx::tree::optional< NuclearYieldQualifierCode_type > NuclearYieldQualifierCode_optional;
    typedef ::xsd::cxx::tree::traits< NuclearYieldQualifierCode_type, char > NuclearYieldQualifierCode_traits;

    const NuclearYieldQualifierCode_optional&
    NuclearYieldQualifierCode () const;

    NuclearYieldQualifierCode_optional&
    NuclearYieldQualifierCode ();

    void
    NuclearYieldQualifierCode (const NuclearYieldQualifierCode_type& x);

    void
    NuclearYieldQualifierCode (const NuclearYieldQualifierCode_optional& x);

    void
    NuclearYieldQualifierCode (::std::unique_ptr< NuclearYieldQualifierCode_type > p);

    // Constructors.
    //
    Wind ();

    Wind (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Wind (const Wind& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Wind*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Wind&
    operator= (const Wind& x);

    virtual 
    ~Wind ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CategoryCode_optional CategoryCode_;
    AirStabilityCategoryCode_optional AirStabilityCategoryCode_;
    AltitudeLayerCode_optional AltitudeLayerCode_;
    DirectionAngle_optional DirectionAngle_;
    EffectiveDownwindDirectionAngle_optional EffectiveDownwindDirectionAngle_;
    SpeedRate_optional SpeedRate_;
    NuclearYieldQualifierCode_optional NuclearYieldQualifierCode_;
  };
}

#include <iosfwd>

namespace oo_2_0
{
  ::std::ostream&
  operator<< (::std::ostream&, const AngleOptionalTypeRangeAngle7_4&);

  ::std::ostream&
  operator<< (::std::ostream&, const DatetimeOptionalTypeFix18&);

  ::std::ostream&
  operator<< (::std::ostream&, const DimensionOptionalType12_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const DimensionMandatoryType12_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const QuantityOptionalType8_4&);

  ::std::ostream&
  operator<< (::std::ostream&, const RateOptionalType4_1&);

  ::std::ostream&
  operator<< (::std::ostream&, const RateOptionalType8_4&);

  ::std::ostream&
  operator<< (::std::ostream&, const RatioOptionalTypeRangeRatio6_5&);

  ::std::ostream&
  operator<< (::std::ostream&, const RatioOptionalTypeRangeRatio7_6&);

  ::std::ostream&
  operator<< (::std::ostream&, const TemperatureTypeRangeTemperature5_1&);

  ::std::ostream&
  operator<< (::std::ostream&, const Atmosphere&);

  ::std::ostream&
  operator<< (::std::ostream&, const CloudCover&);

  ::std::ostream&
  operator<< (::std::ostream&, const Icing&);

  ::std::ostream&
  operator<< (::std::ostream&, const Light&);

  ::std::ostream&
  operator<< (::std::ostream&, const Precipitation&);

  ::std::ostream&
  operator<< (::std::ostream&, const Visibility&);

  ::std::ostream&
  operator<< (::std::ostream&, const Wind&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace oo_2_0
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace oo_2_0
{
  void
  operator<< (::xercesc::DOMElement&, const AngleOptionalTypeRangeAngle7_4&);

  void
  operator<< (::xercesc::DOMAttr&, const AngleOptionalTypeRangeAngle7_4&);

  void
  operator<< (::xml_schema::list_stream&,
              const AngleOptionalTypeRangeAngle7_4&);

  void
  operator<< (::xercesc::DOMElement&, const DatetimeOptionalTypeFix18&);

  void
  operator<< (::xercesc::DOMAttr&, const DatetimeOptionalTypeFix18&);

  void
  operator<< (::xml_schema::list_stream&,
              const DatetimeOptionalTypeFix18&);

  void
  operator<< (::xercesc::DOMElement&, const DimensionOptionalType12_3&);

  void
  operator<< (::xercesc::DOMAttr&, const DimensionOptionalType12_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const DimensionOptionalType12_3&);

  void
  operator<< (::xercesc::DOMElement&, const DimensionMandatoryType12_3&);

  void
  operator<< (::xercesc::DOMAttr&, const DimensionMandatoryType12_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const DimensionMandatoryType12_3&);

  void
  operator<< (::xercesc::DOMElement&, const QuantityOptionalType8_4&);

  void
  operator<< (::xercesc::DOMAttr&, const QuantityOptionalType8_4&);

  void
  operator<< (::xml_schema::list_stream&,
              const QuantityOptionalType8_4&);

  void
  operator<< (::xercesc::DOMElement&, const RateOptionalType4_1&);

  void
  operator<< (::xercesc::DOMAttr&, const RateOptionalType4_1&);

  void
  operator<< (::xml_schema::list_stream&,
              const RateOptionalType4_1&);

  void
  operator<< (::xercesc::DOMElement&, const RateOptionalType8_4&);

  void
  operator<< (::xercesc::DOMAttr&, const RateOptionalType8_4&);

  void
  operator<< (::xml_schema::list_stream&,
              const RateOptionalType8_4&);

  void
  operator<< (::xercesc::DOMElement&, const RatioOptionalTypeRangeRatio6_5&);

  void
  operator<< (::xercesc::DOMAttr&, const RatioOptionalTypeRangeRatio6_5&);

  void
  operator<< (::xml_schema::list_stream&,
              const RatioOptionalTypeRangeRatio6_5&);

  void
  operator<< (::xercesc::DOMElement&, const RatioOptionalTypeRangeRatio7_6&);

  void
  operator<< (::xercesc::DOMAttr&, const RatioOptionalTypeRangeRatio7_6&);

  void
  operator<< (::xml_schema::list_stream&,
              const RatioOptionalTypeRangeRatio7_6&);

  void
  operator<< (::xercesc::DOMElement&, const TemperatureTypeRangeTemperature5_1&);

  void
  operator<< (::xercesc::DOMAttr&, const TemperatureTypeRangeTemperature5_1&);

  void
  operator<< (::xml_schema::list_stream&,
              const TemperatureTypeRangeTemperature5_1&);

  void
  operator<< (::xercesc::DOMElement&, const Atmosphere&);

  void
  operator<< (::xercesc::DOMElement&, const CloudCover&);

  void
  operator<< (::xercesc::DOMElement&, const Icing&);

  void
  operator<< (::xercesc::DOMElement&, const Light&);

  void
  operator<< (::xercesc::DOMElement&, const Precipitation&);

  void
  operator<< (::xercesc::DOMElement&, const Visibility&);

  void
  operator<< (::xercesc::DOMElement&, const Wind&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EXTERN_JC3IEDM_METEROLOGICAL_HXX
