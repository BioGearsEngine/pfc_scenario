// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MSDL_CODES_1_0_0_HXX
#define MSDL_CODES_1_0_0_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace msdl_1
{
  class enumAnchorPointType;
  class enumAirFormationType;
  class enumBaseAffiliation;
  class enumCombatEffectivenessType;
  class enumCommandRelationshipType;
  class enumCommunicationNetType;
  class enumCommunicationServiceType;
  class enumCoordinateSystemType;
  class enumEchelon;
  class enumForceOwnerType;
  class enumFormationLocationType;
  class enumFormationType;
  class enumGroundFormationType;
  class enumModelResolutionType;
  class enumMOPPLevelType;
  class enumOrientationType;
  class enumOverlayType;
  class enumReinforcedReducedType;
  class enumSubsurfaceFormationType;
  class enumSupportRelationType;
  class enumSupportRoleType;
  class enumSurfaceFormationType;
  class enumSymbolClassType;
  class enumSymbologyStandardType;
  class enumFrameShapeModifierType;
  class enumWeaponControlStatusType;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace msdl_1
{
  class enumAnchorPointType: public ::xml_schema::string
  {
    public:
    enum value
    {
      COORDINATE,
      POINT_TACTICAL_GRAPHIC
    };

    enumAnchorPointType (value v);

    enumAnchorPointType (const char* v);

    enumAnchorPointType (const ::std::string& v);

    enumAnchorPointType (const ::xml_schema::string& v);

    enumAnchorPointType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumAnchorPointType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumAnchorPointType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumAnchorPointType (const enumAnchorPointType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual enumAnchorPointType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumAnchorPointType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumAnchorPointType_convert ();
    }

    protected:
    value
    _xsd_enumAnchorPointType_convert () const;

    public:
    static const char* const _xsd_enumAnchorPointType_literals_[2];
    static const value _xsd_enumAnchorPointType_indexes_[2];
  };

  class enumAirFormationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      NOT_SPECIFIED
    };

    enumAirFormationType (value v);

    enumAirFormationType (const char* v);

    enumAirFormationType (const ::std::string& v);

    enumAirFormationType (const ::xml_schema::string& v);

    enumAirFormationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    enumAirFormationType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    enumAirFormationType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    enumAirFormationType (const enumAirFormationType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual enumAirFormationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumAirFormationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumAirFormationType_convert ();
    }

    protected:
    value
    _xsd_enumAirFormationType_convert () const;

    public:
    static const char* const _xsd_enumAirFormationType_literals_[1];
    static const value _xsd_enumAirFormationType_indexes_[1];
  };

  class enumBaseAffiliation: public ::xml_schema::string
  {
    public:
    enum value
    {
      HOSTILE,
      FRIEND,
      NEUTRAL,
      UNKNOWN
    };

    enumBaseAffiliation (value v);

    enumBaseAffiliation (const char* v);

    enumBaseAffiliation (const ::std::string& v);

    enumBaseAffiliation (const ::xml_schema::string& v);

    enumBaseAffiliation (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumBaseAffiliation (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumBaseAffiliation (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumBaseAffiliation (const enumBaseAffiliation& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual enumBaseAffiliation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumBaseAffiliation&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumBaseAffiliation_convert ();
    }

    protected:
    value
    _xsd_enumBaseAffiliation_convert () const;

    public:
    static const char* const _xsd_enumBaseAffiliation_literals_[4];
    static const value _xsd_enumBaseAffiliation_indexes_[4];
  };

  class enumCombatEffectivenessType: public ::xml_schema::string
  {
    public:
    enum value
    {
      GREEN,
      AMBER,
      RED,
      BLACK,
      WHITE
    };

    enumCombatEffectivenessType (value v);

    enumCombatEffectivenessType (const char* v);

    enumCombatEffectivenessType (const ::std::string& v);

    enumCombatEffectivenessType (const ::xml_schema::string& v);

    enumCombatEffectivenessType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCombatEffectivenessType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCombatEffectivenessType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCombatEffectivenessType (const enumCombatEffectivenessType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual enumCombatEffectivenessType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumCombatEffectivenessType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumCombatEffectivenessType_convert ();
    }

    protected:
    value
    _xsd_enumCombatEffectivenessType_convert () const;

    public:
    static const char* const _xsd_enumCombatEffectivenessType_literals_[5];
    static const value _xsd_enumCombatEffectivenessType_indexes_[5];
  };

  class enumCommandRelationshipType: public ::xml_schema::string
  {
    public:
    enum value
    {
      ORGANIC,
      ATTACHED,
      OPCON,
      TACON,
      ADCON,
      NONE
    };

    enumCommandRelationshipType (value v);

    enumCommandRelationshipType (const char* v);

    enumCommandRelationshipType (const ::std::string& v);

    enumCommandRelationshipType (const ::xml_schema::string& v);

    enumCommandRelationshipType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCommandRelationshipType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCommandRelationshipType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumCommandRelationshipType (const enumCommandRelationshipType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual enumCommandRelationshipType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumCommandRelationshipType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumCommandRelationshipType_convert ();
    }

    protected:
    value
    _xsd_enumCommandRelationshipType_convert () const;

    public:
    static const char* const _xsd_enumCommandRelationshipType_literals_[6];
    static const value _xsd_enumCommandRelationshipType_indexes_[6];
  };

  class enumCommunicationNetType: public ::xml_schema::string
  {
    public:
    enum value
    {
      OTHER,
      COMMAND_NET,
      OPERATIONS_INTELLIGENCE_NET,
      ADMIN_LOGISTICS_NET,
      FIRE_SUPPORT_NET
    };

    enumCommunicationNetType (value v);

    enumCommunicationNetType (const char* v);

    enumCommunicationNetType (const ::std::string& v);

    enumCommunicationNetType (const ::xml_schema::string& v);

    enumCommunicationNetType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCommunicationNetType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCommunicationNetType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCommunicationNetType (const enumCommunicationNetType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual enumCommunicationNetType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumCommunicationNetType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumCommunicationNetType_convert ();
    }

    protected:
    value
    _xsd_enumCommunicationNetType_convert () const;

    public:
    static const char* const _xsd_enumCommunicationNetType_literals_[5];
    static const value _xsd_enumCommunicationNetType_indexes_[5];
  };

  class enumCommunicationServiceType: public ::xml_schema::string
  {
    public:
    enum value
    {
      DATTRF,
      FAX,
      IFF,
      IMAGE,
      MCI,
      MHS,
      TDL,
      VIDSVC,
      VOCSVC,
      NOS
    };

    enumCommunicationServiceType (value v);

    enumCommunicationServiceType (const char* v);

    enumCommunicationServiceType (const ::std::string& v);

    enumCommunicationServiceType (const ::xml_schema::string& v);

    enumCommunicationServiceType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    enumCommunicationServiceType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    enumCommunicationServiceType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    enumCommunicationServiceType (const enumCommunicationServiceType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual enumCommunicationServiceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumCommunicationServiceType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumCommunicationServiceType_convert ();
    }

    protected:
    value
    _xsd_enumCommunicationServiceType_convert () const;

    public:
    static const char* const _xsd_enumCommunicationServiceType_literals_[10];
    static const value _xsd_enumCommunicationServiceType_indexes_[10];
  };

  class enumCoordinateSystemType: public ::xml_schema::string
  {
    public:
    enum value
    {
      MGRS,
      GDC,
      UTM,
      GCC
    };

    enumCoordinateSystemType (value v);

    enumCoordinateSystemType (const char* v);

    enumCoordinateSystemType (const ::std::string& v);

    enumCoordinateSystemType (const ::xml_schema::string& v);

    enumCoordinateSystemType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCoordinateSystemType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCoordinateSystemType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumCoordinateSystemType (const enumCoordinateSystemType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual enumCoordinateSystemType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumCoordinateSystemType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumCoordinateSystemType_convert ();
    }

    protected:
    value
    _xsd_enumCoordinateSystemType_convert () const;

    public:
    static const char* const _xsd_enumCoordinateSystemType_literals_[4];
    static const value _xsd_enumCoordinateSystemType_indexes_[4];
  };

  class enumEchelon: public ::xml_schema::string
  {
    public:
    enum value
    {
      NONE,
      TEAM,
      CREW,
      SQUAD,
      SECTION,
      PLATOON,
      DETACHMENT,
      COMPANY,
      BATTERY,
      TROOP,
      BATTALION,
      SQUADRON,
      REGIMENT,
      GROUP,
      BRIGADE,
      DIVISION,
      CORPS,
      ARMY,
      ARMYGROUP,
      FRONT,
      REGION
    };

    enumEchelon (value v);

    enumEchelon (const char* v);

    enumEchelon (const ::std::string& v);

    enumEchelon (const ::xml_schema::string& v);

    enumEchelon (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    enumEchelon (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    enumEchelon (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    enumEchelon (const enumEchelon& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual enumEchelon*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumEchelon&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumEchelon_convert ();
    }

    protected:
    value
    _xsd_enumEchelon_convert () const;

    public:
    static const char* const _xsd_enumEchelon_literals_[21];
    static const value _xsd_enumEchelon_indexes_[21];
  };

  class enumForceOwnerType: public ::xml_schema::string
  {
    public:
    enum value
    {
      UNIT,
      FORCE_SIDE
    };

    enumForceOwnerType (value v);

    enumForceOwnerType (const char* v);

    enumForceOwnerType (const ::std::string& v);

    enumForceOwnerType (const ::xml_schema::string& v);

    enumForceOwnerType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    enumForceOwnerType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    enumForceOwnerType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    enumForceOwnerType (const enumForceOwnerType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual enumForceOwnerType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumForceOwnerType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumForceOwnerType_convert ();
    }

    protected:
    value
    _xsd_enumForceOwnerType_convert () const;

    public:
    static const char* const _xsd_enumForceOwnerType_literals_[2];
    static const value _xsd_enumForceOwnerType_indexes_[2];
  };

  class enumFormationLocationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      LEAD_ELEMENT,
      CENTER_OF_MASS
    };

    enumFormationLocationType (value v);

    enumFormationLocationType (const char* v);

    enumFormationLocationType (const ::std::string& v);

    enumFormationLocationType (const ::xml_schema::string& v);

    enumFormationLocationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumFormationLocationType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumFormationLocationType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumFormationLocationType (const enumFormationLocationType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual enumFormationLocationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumFormationLocationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumFormationLocationType_convert ();
    }

    protected:
    value
    _xsd_enumFormationLocationType_convert () const;

    public:
    static const char* const _xsd_enumFormationLocationType_literals_[2];
    static const value _xsd_enumFormationLocationType_indexes_[2];
  };

  class enumFormationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      GROUND,
      AIR,
      SURFACE,
      SUBSURFACE
    };

    enumFormationType (value v);

    enumFormationType (const char* v);

    enumFormationType (const ::std::string& v);

    enumFormationType (const ::xml_schema::string& v);

    enumFormationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumFormationType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumFormationType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumFormationType (const enumFormationType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual enumFormationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumFormationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumFormationType_convert ();
    }

    protected:
    value
    _xsd_enumFormationType_convert () const;

    public:
    static const char* const _xsd_enumFormationType_literals_[4];
    static const value _xsd_enumFormationType_indexes_[4];
  };

  class enumGroundFormationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      COLUMN,
      STAGGERED_COLUMN,
      ECHELON_LEFT,
      ECHELON_RIGHT,
      LINE,
      WEDGE,
      VEE,
      ASSAULT_VEE,
      FSE_COLUMN,
      STACK,
      NONE
    };

    enumGroundFormationType (value v);

    enumGroundFormationType (const char* v);

    enumGroundFormationType (const ::std::string& v);

    enumGroundFormationType (const ::xml_schema::string& v);

    enumGroundFormationType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumGroundFormationType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumGroundFormationType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumGroundFormationType (const enumGroundFormationType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual enumGroundFormationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumGroundFormationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumGroundFormationType_convert ();
    }

    protected:
    value
    _xsd_enumGroundFormationType_convert () const;

    public:
    static const char* const _xsd_enumGroundFormationType_literals_[11];
    static const value _xsd_enumGroundFormationType_indexes_[11];
  };

  class enumModelResolutionType: public ::xml_schema::string
  {
    public:
    enum value
    {
      NONE,
      MINIMAL,
      STANDARD,
      ENHANCED,
      HIGH,
      NOT_SPECIFIED
    };

    enumModelResolutionType (value v);

    enumModelResolutionType (const char* v);

    enumModelResolutionType (const ::std::string& v);

    enumModelResolutionType (const ::xml_schema::string& v);

    enumModelResolutionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumModelResolutionType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumModelResolutionType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumModelResolutionType (const enumModelResolutionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual enumModelResolutionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumModelResolutionType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumModelResolutionType_convert ();
    }

    protected:
    value
    _xsd_enumModelResolutionType_convert () const;

    public:
    static const char* const _xsd_enumModelResolutionType_literals_[6];
    static const value _xsd_enumModelResolutionType_indexes_[6];
  };

  class enumMOPPLevelType: public ::xml_schema::string
  {
    public:
    enum value
    {
      LEVEL_0,
      LEVEL_1,
      LEVEL_2,
      LEVEL_3,
      LEVEL_4
    };

    enumMOPPLevelType (value v);

    enumMOPPLevelType (const char* v);

    enumMOPPLevelType (const ::std::string& v);

    enumMOPPLevelType (const ::xml_schema::string& v);

    enumMOPPLevelType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumMOPPLevelType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumMOPPLevelType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    enumMOPPLevelType (const enumMOPPLevelType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual enumMOPPLevelType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumMOPPLevelType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumMOPPLevelType_convert ();
    }

    protected:
    value
    _xsd_enumMOPPLevelType_convert () const;

    public:
    static const char* const _xsd_enumMOPPLevelType_literals_[5];
    static const value _xsd_enumMOPPLevelType_indexes_[5];
  };

  class enumOrientationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      ORIENT_RIGHT,
      ORIENT_LEFT
    };

    enumOrientationType (value v);

    enumOrientationType (const char* v);

    enumOrientationType (const ::std::string& v);

    enumOrientationType (const ::xml_schema::string& v);

    enumOrientationType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumOrientationType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumOrientationType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumOrientationType (const enumOrientationType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual enumOrientationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumOrientationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumOrientationType_convert ();
    }

    protected:
    value
    _xsd_enumOrientationType_convert () const;

    public:
    static const char* const _xsd_enumOrientationType_literals_[2];
    static const value _xsd_enumOrientationType_indexes_[2];
  };

  class enumOverlayType: public ::xml_schema::string
  {
    public:
    enum value
    {
      OPERATIONS,
      FIRE_SUPPORT,
      MODIFIED_COMBINED_OBSTACLES,
      INTEL,
      RECON_SURVEILLANCE,
      OBSTACLE,
      AIR_DEFENSE,
      LOGISTICS,
      A2C2,
      USER_DEFINED
    };

    enumOverlayType (value v);

    enumOverlayType (const char* v);

    enumOverlayType (const ::std::string& v);

    enumOverlayType (const ::xml_schema::string& v);

    enumOverlayType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enumOverlayType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enumOverlayType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enumOverlayType (const enumOverlayType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual enumOverlayType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumOverlayType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumOverlayType_convert ();
    }

    protected:
    value
    _xsd_enumOverlayType_convert () const;

    public:
    static const char* const _xsd_enumOverlayType_literals_[10];
    static const value _xsd_enumOverlayType_indexes_[10];
  };

  class enumReinforcedReducedType: public ::xml_schema::string
  {
    public:
    enum value
    {
      R,
      D,
      RD
    };

    enumReinforcedReducedType (value v);

    enumReinforcedReducedType (const char* v);

    enumReinforcedReducedType (const ::std::string& v);

    enumReinforcedReducedType (const ::xml_schema::string& v);

    enumReinforcedReducedType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumReinforcedReducedType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumReinforcedReducedType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumReinforcedReducedType (const enumReinforcedReducedType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual enumReinforcedReducedType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumReinforcedReducedType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumReinforcedReducedType_convert ();
    }

    protected:
    value
    _xsd_enumReinforcedReducedType_convert () const;

    public:
    static const char* const _xsd_enumReinforcedReducedType_literals_[3];
    static const value _xsd_enumReinforcedReducedType_indexes_[3];
  };

  class enumSubsurfaceFormationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      NOT_SPECIFIED
    };

    enumSubsurfaceFormationType (value v);

    enumSubsurfaceFormationType (const char* v);

    enumSubsurfaceFormationType (const ::std::string& v);

    enumSubsurfaceFormationType (const ::xml_schema::string& v);

    enumSubsurfaceFormationType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumSubsurfaceFormationType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumSubsurfaceFormationType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumSubsurfaceFormationType (const enumSubsurfaceFormationType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual enumSubsurfaceFormationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSubsurfaceFormationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSubsurfaceFormationType_convert ();
    }

    protected:
    value
    _xsd_enumSubsurfaceFormationType_convert () const;

    public:
    static const char* const _xsd_enumSubsurfaceFormationType_literals_[1];
    static const value _xsd_enumSubsurfaceFormationType_indexes_[1];
  };

  class enumSupportRelationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      GS,
      DS,
      R,
      GSR,
      NONE
    };

    enumSupportRelationType (value v);

    enumSupportRelationType (const char* v);

    enumSupportRelationType (const ::std::string& v);

    enumSupportRelationType (const ::xml_schema::string& v);

    enumSupportRelationType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumSupportRelationType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumSupportRelationType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    enumSupportRelationType (const enumSupportRelationType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual enumSupportRelationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSupportRelationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSupportRelationType_convert ();
    }

    protected:
    value
    _xsd_enumSupportRelationType_convert () const;

    public:
    static const char* const _xsd_enumSupportRelationType_literals_[5];
    static const value _xsd_enumSupportRelationType_indexes_[5];
  };

  class enumSupportRoleType: public ::xml_schema::string
  {
    public:
    enum value
    {
      FIRES,
      INTELLIGENCE,
      ENGINEER,
      CHEMICAL,
      NOT_SPECIFIED
    };

    enumSupportRoleType (value v);

    enumSupportRoleType (const char* v);

    enumSupportRoleType (const ::std::string& v);

    enumSupportRoleType (const ::xml_schema::string& v);

    enumSupportRoleType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSupportRoleType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSupportRoleType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSupportRoleType (const enumSupportRoleType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual enumSupportRoleType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSupportRoleType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSupportRoleType_convert ();
    }

    protected:
    value
    _xsd_enumSupportRoleType_convert () const;

    public:
    static const char* const _xsd_enumSupportRoleType_literals_[5];
    static const value _xsd_enumSupportRoleType_indexes_[5];
  };

  class enumSurfaceFormationType: public ::xml_schema::string
  {
    public:
    enum value
    {
      NOT_SPECIFIED
    };

    enumSurfaceFormationType (value v);

    enumSurfaceFormationType (const char* v);

    enumSurfaceFormationType (const ::std::string& v);

    enumSurfaceFormationType (const ::xml_schema::string& v);

    enumSurfaceFormationType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumSurfaceFormationType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumSurfaceFormationType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    enumSurfaceFormationType (const enumSurfaceFormationType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual enumSurfaceFormationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSurfaceFormationType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSurfaceFormationType_convert ();
    }

    protected:
    value
    _xsd_enumSurfaceFormationType_convert () const;

    public:
    static const char* const _xsd_enumSurfaceFormationType_literals_[1];
    static const value _xsd_enumSurfaceFormationType_indexes_[1];
  };

  class enumSymbolClassType: public ::xml_schema::string
  {
    public:
    enum value
    {
      POINT,
      LINE,
      AREA,
      BOUNDARY,
      NBC_EVENT,
      TASK
    };

    enumSymbolClassType (value v);

    enumSymbolClassType (const char* v);

    enumSymbolClassType (const ::std::string& v);

    enumSymbolClassType (const ::xml_schema::string& v);

    enumSymbolClassType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSymbolClassType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSymbolClassType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    enumSymbolClassType (const enumSymbolClassType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual enumSymbolClassType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSymbolClassType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSymbolClassType_convert ();
    }

    protected:
    value
    _xsd_enumSymbolClassType_convert () const;

    public:
    static const char* const _xsd_enumSymbolClassType_literals_[6];
    static const value _xsd_enumSymbolClassType_indexes_[6];
  };

  class enumSymbologyStandardType: public ::xml_schema::string
  {
    public:
    enum value
    {
      MILSTD_2525B,
      NATO_APP_6
    };

    enumSymbologyStandardType (value v);

    enumSymbologyStandardType (const char* v);

    enumSymbologyStandardType (const ::std::string& v);

    enumSymbologyStandardType (const ::xml_schema::string& v);

    enumSymbologyStandardType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumSymbologyStandardType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumSymbologyStandardType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    enumSymbologyStandardType (const enumSymbologyStandardType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual enumSymbologyStandardType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumSymbologyStandardType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumSymbologyStandardType_convert ();
    }

    protected:
    value
    _xsd_enumSymbologyStandardType_convert () const;

    public:
    static const char* const _xsd_enumSymbologyStandardType_literals_[2];
    static const value _xsd_enumSymbologyStandardType_indexes_[2];
  };

  class enumFrameShapeModifierType: public ::xml_schema::string
  {
    public:
    enum value
    {
      PENDING,
      ASSUMED_FRIEND,
      SUSPECT,
      EXERCISE_PENDING,
      EXERCISE_UNKNOWN,
      EXERCISE_FRIEND,
      EXERCISE_NEUTRAL,
      EXERCISE_ASSUMED_FRIEND,
      JOKER,
      FAKER
    };

    enumFrameShapeModifierType (value v);

    enumFrameShapeModifierType (const char* v);

    enumFrameShapeModifierType (const ::std::string& v);

    enumFrameShapeModifierType (const ::xml_schema::string& v);

    enumFrameShapeModifierType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    enumFrameShapeModifierType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    enumFrameShapeModifierType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    enumFrameShapeModifierType (const enumFrameShapeModifierType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual enumFrameShapeModifierType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumFrameShapeModifierType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumFrameShapeModifierType_convert ();
    }

    protected:
    value
    _xsd_enumFrameShapeModifierType_convert () const;

    public:
    static const char* const _xsd_enumFrameShapeModifierType_literals_[10];
    static const value _xsd_enumFrameShapeModifierType_indexes_[10];
  };

  class enumWeaponControlStatusType: public ::xml_schema::string
  {
    public:
    enum value
    {
      WEAPONS_FREE,
      WEAPONS_TIGHT,
      WEAPONS_HOLD
    };

    enumWeaponControlStatusType (value v);

    enumWeaponControlStatusType (const char* v);

    enumWeaponControlStatusType (const ::std::string& v);

    enumWeaponControlStatusType (const ::xml_schema::string& v);

    enumWeaponControlStatusType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumWeaponControlStatusType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumWeaponControlStatusType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enumWeaponControlStatusType (const enumWeaponControlStatusType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual enumWeaponControlStatusType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enumWeaponControlStatusType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enumWeaponControlStatusType_convert ();
    }

    protected:
    value
    _xsd_enumWeaponControlStatusType_convert () const;

    public:
    static const char* const _xsd_enumWeaponControlStatusType_literals_[3];
    static const value _xsd_enumWeaponControlStatusType_indexes_[3];
  };
}

#include <iosfwd>

namespace msdl_1
{
  ::std::ostream&
  operator<< (::std::ostream&, enumAnchorPointType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumAnchorPointType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumAirFormationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumAirFormationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumBaseAffiliation::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumBaseAffiliation&);

  ::std::ostream&
  operator<< (::std::ostream&, enumCombatEffectivenessType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumCombatEffectivenessType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumCommandRelationshipType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumCommandRelationshipType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumCommunicationNetType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumCommunicationNetType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumCommunicationServiceType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumCommunicationServiceType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumCoordinateSystemType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumCoordinateSystemType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumEchelon::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumEchelon&);

  ::std::ostream&
  operator<< (::std::ostream&, enumForceOwnerType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumForceOwnerType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumFormationLocationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumFormationLocationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumFormationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumFormationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumGroundFormationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumGroundFormationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumModelResolutionType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumModelResolutionType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumMOPPLevelType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumMOPPLevelType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumOrientationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumOrientationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumOverlayType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumOverlayType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumReinforcedReducedType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumReinforcedReducedType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSubsurfaceFormationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSubsurfaceFormationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSupportRelationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSupportRelationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSupportRoleType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSupportRoleType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSurfaceFormationType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSurfaceFormationType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSymbolClassType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSymbolClassType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumSymbologyStandardType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumSymbologyStandardType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumFrameShapeModifierType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumFrameShapeModifierType&);

  ::std::ostream&
  operator<< (::std::ostream&, enumWeaponControlStatusType::value);

  ::std::ostream&
  operator<< (::std::ostream&, const enumWeaponControlStatusType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace msdl_1
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace msdl_1
{
  void
  operator<< (::xercesc::DOMElement&, const enumAnchorPointType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumAnchorPointType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumAnchorPointType&);

  void
  operator<< (::xercesc::DOMElement&, const enumAirFormationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumAirFormationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumAirFormationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumBaseAffiliation&);

  void
  operator<< (::xercesc::DOMAttr&, const enumBaseAffiliation&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumBaseAffiliation&);

  void
  operator<< (::xercesc::DOMElement&, const enumCombatEffectivenessType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumCombatEffectivenessType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumCombatEffectivenessType&);

  void
  operator<< (::xercesc::DOMElement&, const enumCommandRelationshipType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumCommandRelationshipType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumCommandRelationshipType&);

  void
  operator<< (::xercesc::DOMElement&, const enumCommunicationNetType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumCommunicationNetType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumCommunicationNetType&);

  void
  operator<< (::xercesc::DOMElement&, const enumCommunicationServiceType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumCommunicationServiceType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumCommunicationServiceType&);

  void
  operator<< (::xercesc::DOMElement&, const enumCoordinateSystemType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumCoordinateSystemType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumCoordinateSystemType&);

  void
  operator<< (::xercesc::DOMElement&, const enumEchelon&);

  void
  operator<< (::xercesc::DOMAttr&, const enumEchelon&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumEchelon&);

  void
  operator<< (::xercesc::DOMElement&, const enumForceOwnerType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumForceOwnerType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumForceOwnerType&);

  void
  operator<< (::xercesc::DOMElement&, const enumFormationLocationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumFormationLocationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumFormationLocationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumFormationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumFormationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumFormationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumGroundFormationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumGroundFormationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumGroundFormationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumModelResolutionType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumModelResolutionType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumModelResolutionType&);

  void
  operator<< (::xercesc::DOMElement&, const enumMOPPLevelType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumMOPPLevelType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumMOPPLevelType&);

  void
  operator<< (::xercesc::DOMElement&, const enumOrientationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumOrientationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumOrientationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumOverlayType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumOverlayType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumOverlayType&);

  void
  operator<< (::xercesc::DOMElement&, const enumReinforcedReducedType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumReinforcedReducedType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumReinforcedReducedType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSubsurfaceFormationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSubsurfaceFormationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSubsurfaceFormationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSupportRelationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSupportRelationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSupportRelationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSupportRoleType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSupportRoleType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSupportRoleType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSurfaceFormationType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSurfaceFormationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSurfaceFormationType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSymbolClassType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSymbolClassType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSymbolClassType&);

  void
  operator<< (::xercesc::DOMElement&, const enumSymbologyStandardType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumSymbologyStandardType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumSymbologyStandardType&);

  void
  operator<< (::xercesc::DOMElement&, const enumFrameShapeModifierType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumFrameShapeModifierType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumFrameShapeModifierType&);

  void
  operator<< (::xercesc::DOMElement&, const enumWeaponControlStatusType&);

  void
  operator<< (::xercesc::DOMAttr&, const enumWeaponControlStatusType&);

  void
  operator<< (::xml_schema::list_stream&,
              const enumWeaponControlStatusType&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MSDL_CODES_1_0_0_HXX
