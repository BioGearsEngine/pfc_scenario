// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "JC3IEDM-3.1-Codes-20061208.hxx"

namespace oo_2_0
{
  // AbsolutePointCategoryCode
  // 

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (value v)
  : ::xml_schema::token (_xsd_AbsolutePointCategoryCode_literals_[v])
  {
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const AbsolutePointCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AbsolutePointCategoryCode& AbsolutePointCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AbsolutePointCategoryCode_literals_[v]);

    return *this;
  }


  // ActionAircraftEmploymentApproachOffsetCode
  // 

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (value v)
  : ::xml_schema::token (_xsd_ActionAircraftEmploymentApproachOffsetCode_literals_[v])
  {
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ActionAircraftEmploymentApproachOffsetCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionAircraftEmploymentApproachOffsetCode& ActionAircraftEmploymentApproachOffsetCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionAircraftEmploymentApproachOffsetCode_literals_[v]);

    return *this;
  }


  // ActionAircraftEmploymentCrewCompositionCode
  // 

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (value v)
  : ::xml_schema::token (_xsd_ActionAircraftEmploymentCrewCompositionCode_literals_[v])
  {
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ActionAircraftEmploymentCrewCompositionCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionAircraftEmploymentCrewCompositionCode& ActionAircraftEmploymentCrewCompositionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionAircraftEmploymentCrewCompositionCode_literals_[v]);

    return *this;
  }


  // ActionAircraftEmploymentDeplanementMethodCode
  // 

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (value v)
  : ::xml_schema::token (_xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_[v])
  {
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ActionAircraftEmploymentDeplanementMethodCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionAircraftEmploymentDeplanementMethodCode& ActionAircraftEmploymentDeplanementMethodCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_[v]);

    return *this;
  }


  // ActionAircraftEmploymentGeneralRoleCode
  // 

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (value v)
  : ::xml_schema::token (_xsd_ActionAircraftEmploymentGeneralRoleCode_literals_[v])
  {
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ActionAircraftEmploymentGeneralRoleCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionAircraftEmploymentGeneralRoleCode& ActionAircraftEmploymentGeneralRoleCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionAircraftEmploymentGeneralRoleCode_literals_[v]);

    return *this;
  }


  // ActionAircraftEmploymentInflightReportRequirementIndicatorCode
  // 

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_[v])
  {
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ActionAircraftEmploymentInflightReportRequirementIndicatorCode& v,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode& ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_[v]);

    return *this;
  }


  // ActionCategoryCode
  // 

  ActionCategoryCode::
  ActionCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionCategoryCode_literals_[v])
  {
  }

  ActionCategoryCode::
  ActionCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionCategoryCode::
  ActionCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionCategoryCode::
  ActionCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionCategoryCode::
  ActionCategoryCode (const ActionCategoryCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionCategoryCode& ActionCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionCategoryCode_literals_[v]);

    return *this;
  }


  // ActionContextCategoryCode
  // 

  ActionContextCategoryCode::
  ActionContextCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionContextCategoryCode_literals_[v])
  {
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ActionContextCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionContextCategoryCode& ActionContextCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionContextCategoryCode_literals_[v]);

    return *this;
  }


  // ActionEffectCategoryCode
  // 

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionEffectCategoryCode_literals_[v])
  {
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ActionEffectCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEffectCategoryCode& ActionEffectCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEffectCategoryCode_literals_[v]);

    return *this;
  }


  // ActionEffectDescriptionCode
  // 

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (value v)
  : ::xml_schema::token (_xsd_ActionEffectDescriptionCode_literals_[v])
  {
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ActionEffectDescriptionCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEffectDescriptionCode& ActionEffectDescriptionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEffectDescriptionCode_literals_[v]);

    return *this;
  }


  // ActionEffectSeverityCode
  // 

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (value v)
  : ::xml_schema::token (_xsd_ActionEffectSeverityCode_literals_[v])
  {
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ActionEffectSeverityCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEffectSeverityCode& ActionEffectSeverityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEffectSeverityCode_literals_[v]);

    return *this;
  }


  // ActionElectronicWarfareEmploymentCategoryCode
  // 

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_[v])
  {
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ActionElectronicWarfareEmploymentCategoryCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionElectronicWarfareEmploymentCategoryCode& ActionElectronicWarfareEmploymentCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_[v]);

    return *this;
  }


  // ActionEventCategoryCode
  // 

  ActionEventCategoryCode::
  ActionEventCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionEventCategoryCode_literals_[v])
  {
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ActionEventCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEventCategoryCode& ActionEventCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEventCategoryCode_literals_[v]);

    return *this;
  }


  // ActionEventDetailClassificationCode
  // 

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (value v)
  : ::xml_schema::token (_xsd_ActionEventDetailClassificationCode_literals_[v])
  {
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ActionEventDetailClassificationCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEventDetailClassificationCode& ActionEventDetailClassificationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEventDetailClassificationCode_literals_[v]);

    return *this;
  }


  // ActionEventDetailCrimeIndicatorCode
  // 

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ActionEventDetailCrimeIndicatorCode_literals_[v])
  {
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ActionEventDetailCrimeIndicatorCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionEventDetailCrimeIndicatorCode& ActionEventDetailCrimeIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionEventDetailCrimeIndicatorCode_literals_[v]);

    return *this;
  }


  // ActionFunctionalAssociationCategoryCode
  // 

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionFunctionalAssociationCategoryCode_literals_[v])
  {
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ActionFunctionalAssociationCategoryCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionFunctionalAssociationCategoryCode& ActionFunctionalAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionFunctionalAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode
  // 

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (value v)
  : ::xml_schema::token (_xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_[v])
  {
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& v,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_[v]);

    return *this;
  }


  // ActionMaritimeEmploymentVesselTransitInstructionCode
  // 

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (value v)
  : ::xml_schema::token (_xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_[v])
  {
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ActionMaritimeEmploymentVesselTransitInstructionCode& v,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode& ActionMaritimeEmploymentVesselTransitInstructionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveCategoryCode
  // 

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveCategoryCode_literals_[v])
  {
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ActionObjectiveCategoryCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveCategoryCode& ActionObjectiveCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveCategoryCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveItemCategoryCode
  // 

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveItemCategoryCode_literals_[v])
  {
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ActionObjectiveItemCategoryCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveItemCategoryCode& ActionObjectiveItemCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveItemCategoryCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveItemMarkingMethodCode
  // 

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveItemMarkingMethodCode_literals_[v])
  {
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ActionObjectiveItemMarkingMethodCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveItemMarkingMethodCode& ActionObjectiveItemMarkingMethodCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveItemMarkingMethodCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveItemMarkingPanelShapeCode
  // 

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_[v])
  {
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ActionObjectiveItemMarkingPanelShapeCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveItemMarkingPanelShapeCode& ActionObjectiveItemMarkingPanelShapeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveItemMarkingRecognitionSignalColourCode
  // 

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_[v])
  {
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ActionObjectiveItemMarkingRecognitionSignalColourCode& v,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode& ActionObjectiveItemMarkingRecognitionSignalColourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveItemPrimacyCode
  // 

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveItemPrimacyCode_literals_[v])
  {
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ActionObjectiveItemPrimacyCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveItemPrimacyCode& ActionObjectiveItemPrimacyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveItemPrimacyCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveQualifierCode
  // 

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveQualifierCode_literals_[v])
  {
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ActionObjectiveQualifierCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveQualifierCode& ActionObjectiveQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveQualifierCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveTypeCategoryCode
  // 

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveTypeCategoryCode_literals_[v])
  {
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ActionObjectiveTypeCategoryCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveTypeCategoryCode& ActionObjectiveTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveTypeCategoryCode_literals_[v]);

    return *this;
  }


  // ActionObjectiveTypeImageryProductImageTypeCode
  // 

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (value v)
  : ::xml_schema::token (_xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_[v])
  {
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ActionObjectiveTypeImageryProductImageTypeCode& v,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionObjectiveTypeImageryProductImageTypeCode& ActionObjectiveTypeImageryProductImageTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_[v]);

    return *this;
  }


  // ActionReconnaissanceEmploymentImageCoverageModeCode
  // 

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (value v)
  : ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_[v])
  {
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ActionReconnaissanceEmploymentImageCoverageModeCode& v,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode& ActionReconnaissanceEmploymentImageCoverageModeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_[v]);

    return *this;
  }


  // ActionReconnaissanceEmploymentImageViewQualifierCode
  // 

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (value v)
  : ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_[v])
  {
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ActionReconnaissanceEmploymentImageViewQualifierCode& v,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode& ActionReconnaissanceEmploymentImageViewQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_[v]);

    return *this;
  }


  // ActionReconnaissanceEmploymentTypeOfCoverageCode
  // 

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (value v)
  : ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_[v])
  {
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ActionReconnaissanceEmploymentTypeOfCoverageCode& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode& ActionReconnaissanceEmploymentTypeOfCoverageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_[v]);

    return *this;
  }


  // ActionCitationAssociationCategoryCode
  // 

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionCitationAssociationCategoryCode_literals_[v])
  {
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ActionCitationAssociationCategoryCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionCitationAssociationCategoryCode& ActionCitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionCitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ActionResourceCategoryCode
  // 

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceCategoryCode_literals_[v])
  {
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ActionResourceCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceCategoryCode& ActionResourceCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceCategoryCode_literals_[v]);

    return *this;
  }


  // ActionResourceCriticalityIndicatorCode
  // 

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceCriticalityIndicatorCode_literals_[v])
  {
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ActionResourceCriticalityIndicatorCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceCriticalityIndicatorCode& ActionResourceCriticalityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceCriticalityIndicatorCode_literals_[v]);

    return *this;
  }


  // ActionResourceEmploymentCategoryCode
  // 

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceEmploymentCategoryCode_literals_[v])
  {
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ActionResourceEmploymentCategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceEmploymentCategoryCode& ActionResourceEmploymentCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceEmploymentCategoryCode_literals_[v]);

    return *this;
  }


  // ActionResourceEmploymentMethodOfControlCode
  // 

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceEmploymentMethodOfControlCode_literals_[v])
  {
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ActionResourceEmploymentMethodOfControlCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceEmploymentMethodOfControlCode& ActionResourceEmploymentMethodOfControlCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceEmploymentMethodOfControlCode_literals_[v]);

    return *this;
  }


  // ActionResourceEmploymentTrajectoryFireCode
  // 

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceEmploymentTrajectoryFireCode_literals_[v])
  {
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ActionResourceEmploymentTrajectoryFireCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceEmploymentTrajectoryFireCode& ActionResourceEmploymentTrajectoryFireCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceEmploymentTrajectoryFireCode_literals_[v]);

    return *this;
  }


  // ActionResourceQualifierCode
  // 

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (value v)
  : ::xml_schema::token (_xsd_ActionResourceQualifierCode_literals_[v])
  {
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ActionResourceQualifierCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionResourceQualifierCode& ActionResourceQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionResourceQualifierCode_literals_[v]);

    return *this;
  }


  // ActionTaskActivityCode
  // 

  ActionTaskActivityCode::
  ActionTaskActivityCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskActivityCode_literals_[v])
  {
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ActionTaskActivityCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskActivityCode& ActionTaskActivityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskActivityCode_literals_[v]);

    return *this;
  }


  // ActionTaskCategoryCode
  // 

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskCategoryCode_literals_[v])
  {
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ActionTaskCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskCategoryCode& ActionTaskCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskCategoryCode_literals_[v]);

    return *this;
  }


  // ActionTaskEndQualifierCode
  // 

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskEndQualifierCode_literals_[v])
  {
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ActionTaskEndQualifierCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskEndQualifierCode& ActionTaskEndQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskEndQualifierCode_literals_[v]);

    return *this;
  }


  // ActionTaskEntailedSafetyDegreeCode
  // 

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskEntailedSafetyDegreeCode_literals_[v])
  {
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ActionTaskEntailedSafetyDegreeCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskEntailedSafetyDegreeCode& ActionTaskEntailedSafetyDegreeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskEntailedSafetyDegreeCode_literals_[v]);

    return *this;
  }


  // ActionTaskMeteorologicalImpactCode
  // 

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskMeteorologicalImpactCode_literals_[v])
  {
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ActionTaskMeteorologicalImpactCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskMeteorologicalImpactCode& ActionTaskMeteorologicalImpactCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskMeteorologicalImpactCode_literals_[v]);

    return *this;
  }


  // ActionTaskOperationalLevelCode
  // 

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskOperationalLevelCode_literals_[v])
  {
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ActionTaskOperationalLevelCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskOperationalLevelCode& ActionTaskOperationalLevelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskOperationalLevelCode_literals_[v]);

    return *this;
  }


  // ActionTaskOvertCovertCode
  // 

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskOvertCovertCode_literals_[v])
  {
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ActionTaskOvertCovertCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskOvertCovertCode& ActionTaskOvertCovertCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskOvertCovertCode_literals_[v]);

    return *this;
  }


  // ActionTaskPriorityCode
  // 

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskPriorityCode_literals_[v])
  {
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ActionTaskPriorityCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskPriorityCode& ActionTaskPriorityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskPriorityCode_literals_[v]);

    return *this;
  }


  // ActionTaskStartQualifierCode
  // 

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStartQualifierCode_literals_[v])
  {
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ActionTaskStartQualifierCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStartQualifierCode& ActionTaskStartQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStartQualifierCode_literals_[v]);

    return *this;
  }


  // ActionTaskStatusAmendTimingCode
  // 

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStatusAmendTimingCode_literals_[v])
  {
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ActionTaskStatusAmendTimingCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStatusAmendTimingCode& ActionTaskStatusAmendTimingCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStatusAmendTimingCode_literals_[v]);

    return *this;
  }


  // ActionTaskStatusApprovalIndicatorCode
  // 

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStatusApprovalIndicatorCode_literals_[v])
  {
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ActionTaskStatusApprovalIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStatusApprovalIndicatorCode& ActionTaskStatusApprovalIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStatusApprovalIndicatorCode_literals_[v]);

    return *this;
  }


  // ActionTaskStatusCategoryCode
  // 

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStatusCategoryCode_literals_[v])
  {
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ActionTaskStatusCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStatusCategoryCode& ActionTaskStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStatusCategoryCode_literals_[v]);

    return *this;
  }


  // ActionTaskStatusPlanningIndicatorCode
  // 

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStatusPlanningIndicatorCode_literals_[v])
  {
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ActionTaskStatusPlanningIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStatusPlanningIndicatorCode& ActionTaskStatusPlanningIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStatusPlanningIndicatorCode_literals_[v]);

    return *this;
  }


  // ActionTaskStatusProgressCode
  // 

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskStatusProgressCode_literals_[v])
  {
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ActionTaskStatusProgressCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskStatusProgressCode& ActionTaskStatusProgressCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskStatusProgressCode_literals_[v]);

    return *this;
  }


  // ActionTaskTimingDayCode
  // 

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskTimingDayCode_literals_[v])
  {
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ActionTaskTimingDayCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskTimingDayCode& ActionTaskTimingDayCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskTimingDayCode_literals_[v]);

    return *this;
  }


  // ActionTaskTimingHourCode
  // 

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (value v)
  : ::xml_schema::token (_xsd_ActionTaskTimingHourCode_literals_[v])
  {
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ActionTaskTimingHourCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTaskTimingHourCode& ActionTaskTimingHourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTaskTimingHourCode_literals_[v]);

    return *this;
  }


  // ActionTemporalAssociationCategoryCode
  // 

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ActionTemporalAssociationCategoryCode_literals_[v])
  {
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ActionTemporalAssociationCategoryCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ActionTemporalAssociationCategoryCode& ActionTemporalAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ActionTemporalAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // AddressCategoryCode
  // 

  AddressCategoryCode::
  AddressCategoryCode (value v)
  : ::xml_schema::token (_xsd_AddressCategoryCode_literals_[v])
  {
  }

  AddressCategoryCode::
  AddressCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AddressCategoryCode::
  AddressCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AddressCategoryCode::
  AddressCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AddressCategoryCode::
  AddressCategoryCode (const AddressCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AddressCategoryCode& AddressCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AddressCategoryCode_literals_[v]);

    return *this;
  }


  // AffiliationCategoryCode
  // 

  AffiliationCategoryCode::
  AffiliationCategoryCode (value v)
  : ::xml_schema::token (_xsd_AffiliationCategoryCode_literals_[v])
  {
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const AffiliationCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AffiliationCategoryCode& AffiliationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AffiliationCategoryCode_literals_[v]);

    return *this;
  }


  // AffiliationEthnicGroupCode
  // 

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (value v)
  : ::xml_schema::token (_xsd_AffiliationEthnicGroupCode_literals_[v])
  {
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const AffiliationEthnicGroupCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AffiliationEthnicGroupCode& AffiliationEthnicGroupCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AffiliationEthnicGroupCode_literals_[v]);

    return *this;
  }


  // AffiliationFunctionalGroupCode
  // 

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (value v)
  : ::xml_schema::token (_xsd_AffiliationFunctionalGroupCode_literals_[v])
  {
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const AffiliationFunctionalGroupCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AffiliationFunctionalGroupCode& AffiliationFunctionalGroupCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AffiliationFunctionalGroupCode_literals_[v]);

    return *this;
  }


  // AffiliationGeopoliticalCode
  // 

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (value v)
  : ::xml_schema::token (_xsd_AffiliationGeopoliticalCode_literals_[v])
  {
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const AffiliationGeopoliticalCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AffiliationGeopoliticalCode& AffiliationGeopoliticalCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AffiliationGeopoliticalCode_literals_[v]);

    return *this;
  }


  // AffiliationReligionCode
  // 

  AffiliationReligionCode::
  AffiliationReligionCode (value v)
  : ::xml_schema::token (_xsd_AffiliationReligionCode_literals_[v])
  {
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const AffiliationReligionCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AffiliationReligionCode& AffiliationReligionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AffiliationReligionCode_literals_[v]);

    return *this;
  }


  // AirRouteSegmentCivilMilitaryCode
  // 

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (value v)
  : ::xml_schema::token (_xsd_AirRouteSegmentCivilMilitaryCode_literals_[v])
  {
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const AirRouteSegmentCivilMilitaryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirRouteSegmentCivilMilitaryCode& AirRouteSegmentCivilMilitaryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirRouteSegmentCivilMilitaryCode_literals_[v]);

    return *this;
  }


  // AirRouteSegmentInternationalRouteCode
  // 

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (value v)
  : ::xml_schema::token (_xsd_AirRouteSegmentInternationalRouteCode_literals_[v])
  {
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const AirRouteSegmentInternationalRouteCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirRouteSegmentInternationalRouteCode& AirRouteSegmentInternationalRouteCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirRouteSegmentInternationalRouteCode_literals_[v]);

    return *this;
  }


  // AirRouteSegmentRequiredNavigationPerformanceCode
  // 

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (value v)
  : ::xml_schema::token (_xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_[v])
  {
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const AirRouteSegmentRequiredNavigationPerformanceCode& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirRouteSegmentRequiredNavigationPerformanceCode& AirRouteSegmentRequiredNavigationPerformanceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_[v]);

    return *this;
  }


  // AircraftTypeAirframeDesignCode
  // 

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeAirframeDesignCode_literals_[v])
  {
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const AircraftTypeAirframeDesignCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeAirframeDesignCode& AircraftTypeAirframeDesignCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeAirframeDesignCode_literals_[v]);

    return *this;
  }


  // AircraftTypeCategoryCode
  // 

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeCategoryCode_literals_[v])
  {
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const AircraftTypeCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeCategoryCode& AircraftTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeCategoryCode_literals_[v]);

    return *this;
  }


  // AircraftTypeDesignRangeCode
  // 

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeDesignRangeCode_literals_[v])
  {
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const AircraftTypeDesignRangeCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeDesignRangeCode& AircraftTypeDesignRangeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeDesignRangeCode_literals_[v]);

    return *this;
  }


  // AircraftTypeDesignRoleCode
  // 

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeDesignRoleCode_literals_[v])
  {
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const AircraftTypeDesignRoleCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeDesignRoleCode& AircraftTypeDesignRoleCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeDesignRoleCode_literals_[v]);

    return *this;
  }


  // AircraftTypeLoadCategoryCode
  // 

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeLoadCategoryCode_literals_[v])
  {
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const AircraftTypeLoadCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeLoadCategoryCode& AircraftTypeLoadCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeLoadCategoryCode_literals_[v]);

    return *this;
  }


  // AircraftTypeMainPurposeCode
  // 

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeMainPurposeCode_literals_[v])
  {
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const AircraftTypeMainPurposeCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeMainPurposeCode& AircraftTypeMainPurposeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeMainPurposeCode_literals_[v]);

    return *this;
  }


  // AircraftTypeManningCode
  // 

  AircraftTypeManningCode::
  AircraftTypeManningCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeManningCode_literals_[v])
  {
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const AircraftTypeManningCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeManningCode& AircraftTypeManningCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeManningCode_literals_[v]);

    return *this;
  }


  // AircraftTypeMilitaryCivilianCode
  // 

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeMilitaryCivilianCode_literals_[v])
  {
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const AircraftTypeMilitaryCivilianCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeMilitaryCivilianCode& AircraftTypeMilitaryCivilianCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeMilitaryCivilianCode_literals_[v]);

    return *this;
  }


  // AircraftTypeModelCode
  // 

  AircraftTypeModelCode::
  AircraftTypeModelCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeModelCode_literals_[v])
  {
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const AircraftTypeModelCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeModelCode& AircraftTypeModelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeModelCode_literals_[v]);

    return *this;
  }


  // AircraftTypeTakeoffAndLandingCode
  // 

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeTakeoffAndLandingCode_literals_[v])
  {
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const AircraftTypeTakeoffAndLandingCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeTakeoffAndLandingCode& AircraftTypeTakeoffAndLandingCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeTakeoffAndLandingCode_literals_[v]);

    return *this;
  }


  // AircraftTypeTrainingCategoryCode
  // 

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeTrainingCategoryCode_literals_[v])
  {
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const AircraftTypeTrainingCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeTrainingCategoryCode& AircraftTypeTrainingCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeTrainingCategoryCode_literals_[v]);

    return *this;
  }


  // AircraftTypeWeatherQualifierCode
  // 

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (value v)
  : ::xml_schema::token (_xsd_AircraftTypeWeatherQualifierCode_literals_[v])
  {
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const AircraftTypeWeatherQualifierCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AircraftTypeWeatherQualifierCode& AircraftTypeWeatherQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AircraftTypeWeatherQualifierCode_literals_[v]);

    return *this;
  }


  // AirfieldAirTrafficControlPresenceIndicatorCode
  // 

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (value v)
  : ::xml_schema::token (_xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_[v])
  {
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const AirfieldAirTrafficControlPresenceIndicatorCode& v,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldAirTrafficControlPresenceIndicatorCode& AirfieldAirTrafficControlPresenceIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_[v]);

    return *this;
  }


  // AirfieldInstrumentLandingSystemPresenceIndicatorCode
  // 

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (value v)
  : ::xml_schema::token (_xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_[v])
  {
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const AirfieldInstrumentLandingSystemPresenceIndicatorCode& v,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode& AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_[v]);

    return *this;
  }


  // AirfieldStatusDayOperationsCode
  // 

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (value v)
  : ::xml_schema::token (_xsd_AirfieldStatusDayOperationsCode_literals_[v])
  {
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const AirfieldStatusDayOperationsCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldStatusDayOperationsCode& AirfieldStatusDayOperationsCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldStatusDayOperationsCode_literals_[v]);

    return *this;
  }


  // AirfieldStatusEvaluationIndicatorCode
  // 

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (value v)
  : ::xml_schema::token (_xsd_AirfieldStatusEvaluationIndicatorCode_literals_[v])
  {
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const AirfieldStatusEvaluationIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldStatusEvaluationIndicatorCode& AirfieldStatusEvaluationIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldStatusEvaluationIndicatorCode_literals_[v]);

    return *this;
  }


  // AirfieldStatusFlightSupportCategoryCode
  // 

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (value v)
  : ::xml_schema::token (_xsd_AirfieldStatusFlightSupportCategoryCode_literals_[v])
  {
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const AirfieldStatusFlightSupportCategoryCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldStatusFlightSupportCategoryCode& AirfieldStatusFlightSupportCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldStatusFlightSupportCategoryCode_literals_[v]);

    return *this;
  }


  // AirfieldTypeUseCategoryCode
  // 

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (value v)
  : ::xml_schema::token (_xsd_AirfieldTypeUseCategoryCode_literals_[v])
  {
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const AirfieldTypeUseCategoryCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldTypeUseCategoryCode& AirfieldTypeUseCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldTypeUseCategoryCode_literals_[v]);

    return *this;
  }


  // AirfieldVisualNavigationalAidIndicatorCode
  // 

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (value v)
  : ::xml_schema::token (_xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_[v])
  {
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const AirfieldVisualNavigationalAidIndicatorCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AirfieldVisualNavigationalAidIndicatorCode& AirfieldVisualNavigationalAidIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_[v]);

    return *this;
  }


  // AmmunitionTypeCategoryCode
  // 

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_AmmunitionTypeCategoryCode_literals_[v])
  {
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const AmmunitionTypeCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AmmunitionTypeCategoryCode& AmmunitionTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AmmunitionTypeCategoryCode_literals_[v]);

    return *this;
  }


  // AmmunitionTypeExerciseMineFlareColourCode
  // 

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (value v)
  : ::xml_schema::token (_xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_[v])
  {
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const AmmunitionTypeExerciseMineFlareColourCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AmmunitionTypeExerciseMineFlareColourCode& AmmunitionTypeExerciseMineFlareColourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_[v]);

    return *this;
  }


  // AmmunitionTypeMineMaritimeFiringCode
  // 

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (value v)
  : ::xml_schema::token (_xsd_AmmunitionTypeMineMaritimeFiringCode_literals_[v])
  {
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const AmmunitionTypeMineMaritimeFiringCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AmmunitionTypeMineMaritimeFiringCode& AmmunitionTypeMineMaritimeFiringCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AmmunitionTypeMineMaritimeFiringCode_literals_[v]);

    return *this;
  }


  // AnchorageBottomTypeCode
  // 

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (value v)
  : ::xml_schema::token (_xsd_AnchorageBottomTypeCode_literals_[v])
  {
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const AnchorageBottomTypeCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AnchorageBottomTypeCode& AnchorageBottomTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AnchorageBottomTypeCode_literals_[v]);

    return *this;
  }


  // AnchorageMooringsTypeCode
  // 

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (value v)
  : ::xml_schema::token (_xsd_AnchorageMooringsTypeCode_literals_[v])
  {
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const AnchorageMooringsTypeCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AnchorageMooringsTypeCode& AnchorageMooringsTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AnchorageMooringsTypeCode_literals_[v]);

    return *this;
  }


  // AnglePrecisionCode
  // 

  AnglePrecisionCode::
  AnglePrecisionCode (value v)
  : ::xml_schema::token (_xsd_AnglePrecisionCode_literals_[v])
  {
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const AnglePrecisionCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AnglePrecisionCode& AnglePrecisionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AnglePrecisionCode_literals_[v]);

    return *this;
  }


  // ApproachDirectionCategoryCode
  // 

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (value v)
  : ::xml_schema::token (_xsd_ApproachDirectionCategoryCode_literals_[v])
  {
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ApproachDirectionCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ApproachDirectionCategoryCode& ApproachDirectionCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ApproachDirectionCategoryCode_literals_[v]);

    return *this;
  }


  // AssociationStatusCategoryCode
  // 

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_AssociationStatusCategoryCode_literals_[v])
  {
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const AssociationStatusCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AssociationStatusCategoryCode& AssociationStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AssociationStatusCategoryCode_literals_[v]);

    return *this;
  }


  // AtmosphereInversionLayerCode
  // 

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (value v)
  : ::xml_schema::token (_xsd_AtmosphereInversionLayerCode_literals_[v])
  {
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const AtmosphereInversionLayerCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AtmosphereInversionLayerCode& AtmosphereInversionLayerCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AtmosphereInversionLayerCode_literals_[v]);

    return *this;
  }


  // AtmospherePressureSystemCategoryCode
  // 

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (value v)
  : ::xml_schema::token (_xsd_AtmospherePressureSystemCategoryCode_literals_[v])
  {
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const AtmospherePressureSystemCategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AtmospherePressureSystemCategoryCode& AtmospherePressureSystemCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AtmospherePressureSystemCategoryCode_literals_[v]);

    return *this;
  }


  // AtmosphereTemperatureGradientCode
  // 

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (value v)
  : ::xml_schema::token (_xsd_AtmosphereTemperatureGradientCode_literals_[v])
  {
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const AtmosphereTemperatureGradientCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  AtmosphereTemperatureGradientCode& AtmosphereTemperatureGradientCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_AtmosphereTemperatureGradientCode_literals_[v]);

    return *this;
  }


  // BerthMajorVesselClassCode
  // 

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (value v)
  : ::xml_schema::token (_xsd_BerthMajorVesselClassCode_literals_[v])
  {
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const BerthMajorVesselClassCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BerthMajorVesselClassCode& BerthMajorVesselClassCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BerthMajorVesselClassCode_literals_[v]);

    return *this;
  }


  // BerthRailAvailabilityIndicatorCode
  // 

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_BerthRailAvailabilityIndicatorCode_literals_[v])
  {
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const BerthRailAvailabilityIndicatorCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BerthRailAvailabilityIndicatorCode& BerthRailAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BerthRailAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // BerthRollOnRollOffIndicatorCode
  // 

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (value v)
  : ::xml_schema::token (_xsd_BerthRollOnRollOffIndicatorCode_literals_[v])
  {
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const BerthRollOnRollOffIndicatorCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BerthRollOnRollOffIndicatorCode& BerthRollOnRollOffIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BerthRollOnRollOffIndicatorCode_literals_[v]);

    return *this;
  }


  // BiologicalMaterielTypeCategoryCode
  // 

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_BiologicalMaterielTypeCategoryCode_literals_[v])
  {
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const BiologicalMaterielTypeCategoryCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BiologicalMaterielTypeCategoryCode& BiologicalMaterielTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BiologicalMaterielTypeCategoryCode_literals_[v]);

    return *this;
  }


  // BiologicalMaterielTypeSubcategoryCode
  // 

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_BiologicalMaterielTypeSubcategoryCode_literals_[v])
  {
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const BiologicalMaterielTypeSubcategoryCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BiologicalMaterielTypeSubcategoryCode& BiologicalMaterielTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BiologicalMaterielTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // BridgeTypeDesignTypeCode
  // 

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (value v)
  : ::xml_schema::token (_xsd_BridgeTypeDesignTypeCode_literals_[v])
  {
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const BridgeTypeDesignTypeCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BridgeTypeDesignTypeCode& BridgeTypeDesignTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BridgeTypeDesignTypeCode_literals_[v]);

    return *this;
  }


  // BridgeUsageCode
  // 

  BridgeUsageCode::
  BridgeUsageCode (value v)
  : ::xml_schema::token (_xsd_BridgeUsageCode_literals_[v])
  {
  }

  BridgeUsageCode::
  BridgeUsageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  BridgeUsageCode::
  BridgeUsageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  BridgeUsageCode::
  BridgeUsageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  BridgeUsageCode::
  BridgeUsageCode (const BridgeUsageCode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  BridgeUsageCode& BridgeUsageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_BridgeUsageCode_literals_[v]);

    return *this;
  }


  // CandidateTargetDetailAssociationCategoryCode
  // 

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetDetailAssociationCategoryCode_literals_[v])
  {
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const CandidateTargetDetailAssociationCategoryCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetDetailAssociationCategoryCode& CandidateTargetDetailAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetDetailAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // CandidateTargetDetailAuthorisationApprovalCode
  // 

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_[v])
  {
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const CandidateTargetDetailAuthorisationApprovalCode& v,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetDetailAuthorisationApprovalCode& CandidateTargetDetailAuthorisationApprovalCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_[v]);

    return *this;
  }


  // CandidateTargetDetailCategoryCode
  // 

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetDetailCategoryCode_literals_[v])
  {
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const CandidateTargetDetailCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetDetailCategoryCode& CandidateTargetDetailCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetDetailCategoryCode_literals_[v]);

    return *this;
  }


  // CandidateTargetDetailFocusTypeCode
  // 

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetDetailFocusTypeCode_literals_[v])
  {
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const CandidateTargetDetailFocusTypeCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetDetailFocusTypeCode& CandidateTargetDetailFocusTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetDetailFocusTypeCode_literals_[v]);

    return *this;
  }


  // CandidateTargetDetailSchemeCode
  // 

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetDetailSchemeCode_literals_[v])
  {
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const CandidateTargetDetailSchemeCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetDetailSchemeCode& CandidateTargetDetailSchemeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetDetailSchemeCode_literals_[v]);

    return *this;
  }


  // CandidateTargetListAssociationCategoryCode
  // 

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetListAssociationCategoryCode_literals_[v])
  {
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const CandidateTargetListAssociationCategoryCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetListAssociationCategoryCode& CandidateTargetListAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetListAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // CandidateTargetListAuthorisationIndicatorCode
  // 

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (value v)
  : ::xml_schema::token (_xsd_CandidateTargetListAuthorisationIndicatorCode_literals_[v])
  {
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const CandidateTargetListAuthorisationIndicatorCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CandidateTargetListAuthorisationIndicatorCode& CandidateTargetListAuthorisationIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CandidateTargetListAuthorisationIndicatorCode_literals_[v]);

    return *this;
  }


  // CapabilityCategoryCode
  // 

  CapabilityCategoryCode::
  CapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_CapabilityCategoryCode_literals_[v])
  {
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const CapabilityCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CapabilityCategoryCode& CapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // CapabilityDayNightCode
  // 

  CapabilityDayNightCode::
  CapabilityDayNightCode (value v)
  : ::xml_schema::token (_xsd_CapabilityDayNightCode_literals_[v])
  {
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const CapabilityDayNightCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CapabilityDayNightCode& CapabilityDayNightCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CapabilityDayNightCode_literals_[v]);

    return *this;
  }


  // CapabilityCitationAssociationCategoryCode
  // 

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_CapabilityCitationAssociationCategoryCode_literals_[v])
  {
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const CapabilityCitationAssociationCategoryCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CapabilityCitationAssociationCategoryCode& CapabilityCitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CapabilityCitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // CapabilityUnitOfMeasureCode
  // 

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (value v)
  : ::xml_schema::token (_xsd_CapabilityUnitOfMeasureCode_literals_[v])
  {
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const CapabilityUnitOfMeasureCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CapabilityUnitOfMeasureCode& CapabilityUnitOfMeasureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CapabilityUnitOfMeasureCode_literals_[v]);

    return *this;
  }


  // CargoCategoryCode
  // 

  CargoCategoryCode::
  CargoCategoryCode (value v)
  : ::xml_schema::token (_xsd_CargoCategoryCode_literals_[v])
  {
  }

  CargoCategoryCode::
  CargoCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CargoCategoryCode::
  CargoCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CargoCategoryCode::
  CargoCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CargoCategoryCode::
  CargoCategoryCode (const CargoCategoryCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CargoCategoryCode& CargoCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CargoCategoryCode_literals_[v]);

    return *this;
  }


  // CasualtyGroupCode
  // 

  CasualtyGroupCode::
  CasualtyGroupCode (value v)
  : ::xml_schema::token (_xsd_CasualtyGroupCode_literals_[v])
  {
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const CasualtyGroupCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CasualtyGroupCode& CasualtyGroupCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CasualtyGroupCode_literals_[v]);

    return *this;
  }


  // CbrnEquipmentTypeCategoryCode
  // 

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_CbrnEquipmentTypeCategoryCode_literals_[v])
  {
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const CbrnEquipmentTypeCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEquipmentTypeCategoryCode& CbrnEquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // CbrnEventAlarmResultIndicatorCode
  // 

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (value v)
  : ::xml_schema::token (_xsd_CbrnEventAlarmResultIndicatorCode_literals_[v])
  {
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const CbrnEventAlarmResultIndicatorCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEventAlarmResultIndicatorCode& CbrnEventAlarmResultIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEventAlarmResultIndicatorCode_literals_[v]);

    return *this;
  }


  // CbrnEventCategoryCode
  // 

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (value v)
  : ::xml_schema::token (_xsd_CbrnEventCategoryCode_literals_[v])
  {
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const CbrnEventCategoryCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEventCategoryCode& CbrnEventCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEventCategoryCode_literals_[v]);

    return *this;
  }


  // CbrnEventConfirmationTestIndicatorCode
  // 

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (value v)
  : ::xml_schema::token (_xsd_CbrnEventConfirmationTestIndicatorCode_literals_[v])
  {
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const CbrnEventConfirmationTestIndicatorCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEventConfirmationTestIndicatorCode& CbrnEventConfirmationTestIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEventConfirmationTestIndicatorCode_literals_[v]);

    return *this;
  }


  // CbrnEventMaterielContainerTypeCode
  // 

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (value v)
  : ::xml_schema::token (_xsd_CbrnEventMaterielContainerTypeCode_literals_[v])
  {
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const CbrnEventMaterielContainerTypeCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEventMaterielContainerTypeCode& CbrnEventMaterielContainerTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEventMaterielContainerTypeCode_literals_[v]);

    return *this;
  }


  // CbrnEventSubcategoryCode
  // 

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_CbrnEventSubcategoryCode_literals_[v])
  {
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const CbrnEventSubcategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CbrnEventSubcategoryCode& CbrnEventSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CbrnEventSubcategoryCode_literals_[v]);

    return *this;
  }


  // ChemicalBiologicalEventCategoryCode
  // 

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (value v)
  : ::xml_schema::token (_xsd_ChemicalBiologicalEventCategoryCode_literals_[v])
  {
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ChemicalBiologicalEventCategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ChemicalBiologicalEventCategoryCode& ChemicalBiologicalEventCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ChemicalBiologicalEventCategoryCode_literals_[v]);

    return *this;
  }


  // ChemicalBiologicalEventSpillSizeCode
  // 

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (value v)
  : ::xml_schema::token (_xsd_ChemicalBiologicalEventSpillSizeCode_literals_[v])
  {
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ChemicalBiologicalEventSpillSizeCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ChemicalBiologicalEventSpillSizeCode& ChemicalBiologicalEventSpillSizeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ChemicalBiologicalEventSpillSizeCode_literals_[v]);

    return *this;
  }


  // ChemicalMaterielTypeCategoryCode
  // 

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ChemicalMaterielTypeCategoryCode_literals_[v])
  {
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ChemicalMaterielTypeCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ChemicalMaterielTypeCategoryCode& ChemicalMaterielTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ChemicalMaterielTypeCategoryCode_literals_[v]);

    return *this;
  }


  // ChemicalMaterielTypeSubcategoryCode
  // 

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_ChemicalMaterielTypeSubcategoryCode_literals_[v])
  {
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ChemicalMaterielTypeSubcategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ChemicalMaterielTypeSubcategoryCode& ChemicalMaterielTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ChemicalMaterielTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // CivilianPostTypeCategoryCode
  // 

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_CivilianPostTypeCategoryCode_literals_[v])
  {
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const CivilianPostTypeCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CivilianPostTypeCategoryCode& CivilianPostTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CivilianPostTypeCategoryCode_literals_[v]);

    return *this;
  }


  // CloudCoverAverageCoverageCode
  // 

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (value v)
  : ::xml_schema::token (_xsd_CloudCoverAverageCoverageCode_literals_[v])
  {
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const CloudCoverAverageCoverageCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CloudCoverAverageCoverageCode& CloudCoverAverageCoverageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CloudCoverAverageCoverageCode_literals_[v]);

    return *this;
  }


  // CloudCoverCategoryCode
  // 

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (value v)
  : ::xml_schema::token (_xsd_CloudCoverCategoryCode_literals_[v])
  {
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const CloudCoverCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CloudCoverCategoryCode& CloudCoverCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CloudCoverCategoryCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeCategoryCode
  // 

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeCategoryCode_literals_[v])
  {
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ConsumableMaterielTypeCategoryCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeCategoryCode& ConsumableMaterielTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeCategoryCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeHazardCode
  // 

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeHazardCode_literals_[v])
  {
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ConsumableMaterielTypeHazardCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeHazardCode& ConsumableMaterielTypeHazardCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeHazardCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeIssuingElementCode
  // 

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeIssuingElementCode_literals_[v])
  {
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ConsumableMaterielTypeIssuingElementCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeIssuingElementCode& ConsumableMaterielTypeIssuingElementCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeIssuingElementCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeIssuingUnitOfMeasureCode
  // 

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_[v])
  {
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ConsumableMaterielTypeIssuingUnitOfMeasureCode& v,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode& ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypePerishabilityIndicatorCode
  // 

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_[v])
  {
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ConsumableMaterielTypePerishabilityIndicatorCode& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypePerishabilityIndicatorCode& ConsumableMaterielTypePerishabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeSubcategoryCode
  // 

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeSubcategoryCode_literals_[v])
  {
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ConsumableMaterielTypeSubcategoryCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeSubcategoryCode& ConsumableMaterielTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // ConsumableMaterielTypeUnitedNationsNumberCode
  // 

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (value v)
  : ::xml_schema::token (_xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_[v])
  {
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ConsumableMaterielTypeUnitedNationsNumberCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ConsumableMaterielTypeUnitedNationsNumberCode& ConsumableMaterielTypeUnitedNationsNumberCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_[v]);

    return *this;
  }


  // ContextAssessmentLimitingFactorsCode
  // 

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (value v)
  : ::xml_schema::token (_xsd_ContextAssessmentLimitingFactorsCode_literals_[v])
  {
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ContextAssessmentLimitingFactorsCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextAssessmentLimitingFactorsCode& ContextAssessmentLimitingFactorsCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextAssessmentLimitingFactorsCode_literals_[v]);

    return *this;
  }


  // ContextAssociationCategoryCode
  // 

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ContextAssociationCategoryCode_literals_[v])
  {
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ContextAssociationCategoryCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextAssociationCategoryCode& ContextAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ContextCategoryCode
  // 

  ContextCategoryCode::
  ContextCategoryCode (value v)
  : ::xml_schema::token (_xsd_ContextCategoryCode_literals_[v])
  {
  }

  ContextCategoryCode::
  ContextCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextCategoryCode::
  ContextCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextCategoryCode::
  ContextCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextCategoryCode::
  ContextCategoryCode (const ContextCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextCategoryCode& ContextCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextCategoryCode_literals_[v]);

    return *this;
  }


  // ContextElementStatusCategoryCode
  // 

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_ContextElementStatusCategoryCode_literals_[v])
  {
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ContextElementStatusCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextElementStatusCategoryCode& ContextElementStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextElementStatusCategoryCode_literals_[v]);

    return *this;
  }


  // ContextObjectItemAssociationCategoryCode
  // 

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ContextObjectItemAssociationCategoryCode_literals_[v])
  {
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ContextObjectItemAssociationCategoryCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextObjectItemAssociationCategoryCode& ContextObjectItemAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextObjectItemAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ContextReportingDataAssociationCategoryCode
  // 

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ContextReportingDataAssociationCategoryCode_literals_[v])
  {
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ContextReportingDataAssociationCategoryCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ContextReportingDataAssociationCategoryCode& ContextReportingDataAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ContextReportingDataAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ControlFeatureCategoryCode
  // 

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (value v)
  : ::xml_schema::token (_xsd_ControlFeatureCategoryCode_literals_[v])
  {
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ControlFeatureCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ControlFeatureCategoryCode& ControlFeatureCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ControlFeatureCategoryCode_literals_[v]);

    return *this;
  }


  // ControlFeatureStatusCbrnThreatLevelCode
  // 

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (value v)
  : ::xml_schema::token (_xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_[v])
  {
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ControlFeatureStatusCbrnThreatLevelCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ControlFeatureStatusCbrnThreatLevelCode& ControlFeatureStatusCbrnThreatLevelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_[v]);

    return *this;
  }


  // ControlFeatureStatusInvestigationStatusCode
  // 

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (value v)
  : ::xml_schema::token (_xsd_ControlFeatureStatusInvestigationStatusCode_literals_[v])
  {
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ControlFeatureStatusInvestigationStatusCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ControlFeatureStatusInvestigationStatusCode& ControlFeatureStatusInvestigationStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ControlFeatureStatusInvestigationStatusCode_literals_[v]);

    return *this;
  }


  // ControlFeatureStatusSecurityStatusCode
  // 

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (value v)
  : ::xml_schema::token (_xsd_ControlFeatureStatusSecurityStatusCode_literals_[v])
  {
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ControlFeatureStatusSecurityStatusCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ControlFeatureStatusSecurityStatusCode& ControlFeatureStatusSecurityStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ControlFeatureStatusSecurityStatusCode_literals_[v]);

    return *this;
  }


  // ControlFeatureTypeCategoryCode
  // 

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ControlFeatureTypeCategoryCode_literals_[v])
  {
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ControlFeatureTypeCategoryCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ControlFeatureTypeCategoryCode& ControlFeatureTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ControlFeatureTypeCategoryCode_literals_[v]);

    return *this;
  }


  // DemolitionStatusCode
  // 

  DemolitionStatusCode::
  DemolitionStatusCode (value v)
  : ::xml_schema::token (_xsd_DemolitionStatusCode_literals_[v])
  {
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const DemolitionStatusCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  DemolitionStatusCode& DemolitionStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_DemolitionStatusCode_literals_[v]);

    return *this;
  }


  // DirectionCode
  // 

  DirectionCode::
  DirectionCode (value v)
  : ::xml_schema::token (_xsd_DirectionCode_literals_[v])
  {
  }

  DirectionCode::
  DirectionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  DirectionCode::
  DirectionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  DirectionCode::
  DirectionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  DirectionCode::
  DirectionCode (const DirectionCode& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  DirectionCode& DirectionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_DirectionCode_literals_[v]);

    return *this;
  }


  // DistancePrecisionCode
  // 

  DistancePrecisionCode::
  DistancePrecisionCode (value v)
  : ::xml_schema::token (_xsd_DistancePrecisionCode_literals_[v])
  {
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const DistancePrecisionCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  DistancePrecisionCode& DistancePrecisionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_DistancePrecisionCode_literals_[v]);

    return *this;
  }


  // DryDockMarineRailwaySizeCode
  // 

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (value v)
  : ::xml_schema::token (_xsd_DryDockMarineRailwaySizeCode_literals_[v])
  {
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const DryDockMarineRailwaySizeCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  DryDockMarineRailwaySizeCode& DryDockMarineRailwaySizeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_DryDockMarineRailwaySizeCode_literals_[v]);

    return *this;
  }


  // ElectronicEquipmentTypeCategoryCode
  // 

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ElectronicEquipmentTypeCategoryCode_literals_[v])
  {
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ElectronicEquipmentTypeCategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ElectronicEquipmentTypeCategoryCode& ElectronicEquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ElectronicEquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // ElectronicEquipmentTypeSubcategoryCode
  // 

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_ElectronicEquipmentTypeSubcategoryCode_literals_[v])
  {
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ElectronicEquipmentTypeSubcategoryCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ElectronicEquipmentTypeSubcategoryCode& ElectronicEquipmentTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ElectronicEquipmentTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // EngineeringCapabilityCategoryCode
  // 

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_EngineeringCapabilityCategoryCode_literals_[v])
  {
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const EngineeringCapabilityCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  EngineeringCapabilityCategoryCode& EngineeringCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_EngineeringCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // EngineeringCapabilityDescriptorCode
  // 

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_EngineeringCapabilityDescriptorCode_literals_[v])
  {
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const EngineeringCapabilityDescriptorCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  EngineeringCapabilityDescriptorCode& EngineeringCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_EngineeringCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // EngineeringEquipmentTypeCategoryCode
  // 

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_EngineeringEquipmentTypeCategoryCode_literals_[v])
  {
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const EngineeringEquipmentTypeCategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  EngineeringEquipmentTypeCategoryCode& EngineeringEquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_EngineeringEquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // EquipmentTypeCategoryCode
  // 

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_EquipmentTypeCategoryCode_literals_[v])
  {
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const EquipmentTypeCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  EquipmentTypeCategoryCode& EquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_EquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // EvacuationDestinationCode
  // 

  EvacuationDestinationCode::
  EvacuationDestinationCode (value v)
  : ::xml_schema::token (_xsd_EvacuationDestinationCode_literals_[v])
  {
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const EvacuationDestinationCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  EvacuationDestinationCode& EvacuationDestinationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_EvacuationDestinationCode_literals_[v]);

    return *this;
  }


  // ExecutiveMilitaryOrganisationTypeCategoryCode
  // 

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_[v])
  {
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ExecutiveMilitaryOrganisationTypeCategoryCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode& ExecutiveMilitaryOrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // FacilityCategoryCode
  // 

  FacilityCategoryCode::
  FacilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_FacilityCategoryCode_literals_[v])
  {
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const FacilityCategoryCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityCategoryCode& FacilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityCategoryCode_literals_[v]);

    return *this;
  }


  // FacilityPrimaryConstructionMaterialCode
  // 

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (value v)
  : ::xml_schema::token (_xsd_FacilityPrimaryConstructionMaterialCode_literals_[v])
  {
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const FacilityPrimaryConstructionMaterialCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityPrimaryConstructionMaterialCode& FacilityPrimaryConstructionMaterialCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityPrimaryConstructionMaterialCode_literals_[v]);

    return *this;
  }


  // FacilityStatusCategoryCode
  // 

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusCategoryCode_literals_[v])
  {
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const FacilityStatusCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusCategoryCode& FacilityStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusCategoryCode_literals_[v]);

    return *this;
  }


  // FacilityStatusEnemyActivityConditionCode
  // 

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusEnemyActivityConditionCode_literals_[v])
  {
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const FacilityStatusEnemyActivityConditionCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusEnemyActivityConditionCode& FacilityStatusEnemyActivityConditionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusEnemyActivityConditionCode_literals_[v]);

    return *this;
  }


  // FacilityStatusOccupationProgramIndicatorCode
  // 

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusOccupationProgramIndicatorCode_literals_[v])
  {
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const FacilityStatusOccupationProgramIndicatorCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusOccupationProgramIndicatorCode& FacilityStatusOccupationProgramIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusOccupationProgramIndicatorCode_literals_[v]);

    return *this;
  }


  // FacilityStatusOperationalStatusCode
  // 

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusOperationalStatusCode_literals_[v])
  {
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const FacilityStatusOperationalStatusCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusOperationalStatusCode& FacilityStatusOperationalStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusOperationalStatusCode_literals_[v]);

    return *this;
  }


  // FacilityStatusOperationalStatusQualifierCode
  // 

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusOperationalStatusQualifierCode_literals_[v])
  {
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const FacilityStatusOperationalStatusQualifierCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusOperationalStatusQualifierCode& FacilityStatusOperationalStatusQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusOperationalStatusQualifierCode_literals_[v]);

    return *this;
  }


  // FacilityStatusReserveIndicatorCode
  // 

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusReserveIndicatorCode_literals_[v])
  {
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const FacilityStatusReserveIndicatorCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusReserveIndicatorCode& FacilityStatusReserveIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusReserveIndicatorCode_literals_[v]);

    return *this;
  }


  // FacilityStatusSecurityStatusCode
  // 

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (value v)
  : ::xml_schema::token (_xsd_FacilityStatusSecurityStatusCode_literals_[v])
  {
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const FacilityStatusSecurityStatusCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityStatusSecurityStatusCode& FacilityStatusSecurityStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityStatusSecurityStatusCode_literals_[v]);

    return *this;
  }


  // FacilityTypeCategoryCode
  // 

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_FacilityTypeCategoryCode_literals_[v])
  {
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const FacilityTypeCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FacilityTypeCategoryCode& FacilityTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FacilityTypeCategoryCode_literals_[v]);

    return *this;
  }


  // FeatureCategoryCode
  // 

  FeatureCategoryCode::
  FeatureCategoryCode (value v)
  : ::xml_schema::token (_xsd_FeatureCategoryCode_literals_[v])
  {
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const FeatureCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FeatureCategoryCode& FeatureCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FeatureCategoryCode_literals_[v]);

    return *this;
  }


  // FeatureTypeCategoryCode
  // 

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_FeatureTypeCategoryCode_literals_[v])
  {
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const FeatureTypeCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FeatureTypeCategoryCode& FeatureTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FeatureTypeCategoryCode_literals_[v]);

    return *this;
  }


  // FeintIndicatorCode
  // 

  FeintIndicatorCode::
  FeintIndicatorCode (value v)
  : ::xml_schema::token (_xsd_FeintIndicatorCode_literals_[v])
  {
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const FeintIndicatorCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FeintIndicatorCode& FeintIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FeintIndicatorCode_literals_[v]);

    return *this;
  }


  // FireCapabilityCategoryCode
  // 

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_FireCapabilityCategoryCode_literals_[v])
  {
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const FireCapabilityCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FireCapabilityCategoryCode& FireCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FireCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // FireCapabilityDescriptorCode
  // 

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_FireCapabilityDescriptorCode_literals_[v])
  {
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const FireCapabilityDescriptorCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FireCapabilityDescriptorCode& FireCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FireCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // FireCapabilityWeaponTypeCode
  // 

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (value v)
  : ::xml_schema::token (_xsd_FireCapabilityWeaponTypeCode_literals_[v])
  {
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const FireCapabilityWeaponTypeCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  FireCapabilityWeaponTypeCode& FireCapabilityWeaponTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_FireCapabilityWeaponTypeCode_literals_[v]);

    return *this;
  }


  // GenderCode
  // 

  GenderCode::
  GenderCode (value v)
  : ::xml_schema::token (_xsd_GenderCode_literals_[v])
  {
  }

  GenderCode::
  GenderCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GenderCode::
  GenderCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GenderCode::
  GenderCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GenderCode::
  GenderCode (const GenderCode& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GenderCode& GenderCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GenderCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureBottomHardnessCode
  // 

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureBottomHardnessCode_literals_[v])
  {
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const GeographicFeatureBottomHardnessCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureBottomHardnessCode& GeographicFeatureBottomHardnessCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureBottomHardnessCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureSolidSurfaceCompositionCode
  // 

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_[v])
  {
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const GeographicFeatureSolidSurfaceCompositionCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureSolidSurfaceCompositionCode& GeographicFeatureSolidSurfaceCompositionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureStatusCategoryCode
  // 

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureStatusCategoryCode_literals_[v])
  {
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const GeographicFeatureStatusCategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureStatusCategoryCode& GeographicFeatureStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureStatusCategoryCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureStatusSurfaceRecirculationIndicatorCode
  // 

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_[v])
  {
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const GeographicFeatureStatusSurfaceRecirculationIndicatorCode& v,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode& GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureSurfaceCategoryCode
  // 

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureSurfaceCategoryCode_literals_[v])
  {
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const GeographicFeatureSurfaceCategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureSurfaceCategoryCode& GeographicFeatureSurfaceCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureSurfaceCategoryCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureTerrainCode
  // 

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureTerrainCode_literals_[v])
  {
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const GeographicFeatureTerrainCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureTerrainCode& GeographicFeatureTerrainCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureTerrainCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureTypeCategoryCode
  // 

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureTypeCategoryCode_literals_[v])
  {
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const GeographicFeatureTypeCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureTypeCategoryCode& GeographicFeatureTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureTypeCategoryCode_literals_[v]);

    return *this;
  }


  // GeographicFeatureTypeSubcategoryCode
  // 

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_GeographicFeatureTypeSubcategoryCode_literals_[v])
  {
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const GeographicFeatureTypeSubcategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeographicFeatureTypeSubcategoryCode& GeographicFeatureTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeographicFeatureTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // GeometricVolumeCategoryCode
  // 

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (value v)
  : ::xml_schema::token (_xsd_GeometricVolumeCategoryCode_literals_[v])
  {
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const GeometricVolumeCategoryCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GeometricVolumeCategoryCode& GeometricVolumeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GeometricVolumeCategoryCode_literals_[v]);

    return *this;
  }


  // GovernmentOrganisationTypeCategoryCode
  // 

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_GovernmentOrganisationTypeCategoryCode_literals_[v])
  {
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const GovernmentOrganisationTypeCategoryCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GovernmentOrganisationTypeCategoryCode& GovernmentOrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GovernmentOrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // GroupCharacteristicAgeGroupCode
  // 

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (value v)
  : ::xml_schema::token (_xsd_GroupCharacteristicAgeGroupCode_literals_[v])
  {
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const GroupCharacteristicAgeGroupCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GroupCharacteristicAgeGroupCode& GroupCharacteristicAgeGroupCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GroupCharacteristicAgeGroupCode_literals_[v]);

    return *this;
  }


  // GroupCharacteristicMaladyCode
  // 

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (value v)
  : ::xml_schema::token (_xsd_GroupCharacteristicMaladyCode_literals_[v])
  {
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const GroupCharacteristicMaladyCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GroupCharacteristicMaladyCode& GroupCharacteristicMaladyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GroupCharacteristicMaladyCode_literals_[v]);

    return *this;
  }


  // GroupCharacteristicMaladyTransmissibilityIndicatorCode
  // 

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_[v])
  {
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const GroupCharacteristicMaladyTransmissibilityIndicatorCode& v,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode& GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_[v]);

    return *this;
  }


  // GroupCharacteristicTriageCode
  // 

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (value v)
  : ::xml_schema::token (_xsd_GroupCharacteristicTriageCode_literals_[v])
  {
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const GroupCharacteristicTriageCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GroupCharacteristicTriageCode& GroupCharacteristicTriageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GroupCharacteristicTriageCode_literals_[v]);

    return *this;
  }


  // GroupOrganisationTypeCategoryCode
  // 

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_GroupOrganisationTypeCategoryCode_literals_[v])
  {
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const GroupOrganisationTypeCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  GroupOrganisationTypeCategoryCode& GroupOrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_GroupOrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // HandlingCapabilityActionCode
  // 

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (value v)
  : ::xml_schema::token (_xsd_HandlingCapabilityActionCode_literals_[v])
  {
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const HandlingCapabilityActionCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HandlingCapabilityActionCode& HandlingCapabilityActionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HandlingCapabilityActionCode_literals_[v]);

    return *this;
  }


  // HandlingCapabilityDescriptorCode
  // 

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_HandlingCapabilityDescriptorCode_literals_[v])
  {
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const HandlingCapabilityDescriptorCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HandlingCapabilityDescriptorCode& HandlingCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HandlingCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // HarbourAirportNearIndicatorCode
  // 

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourAirportNearIndicatorCode_literals_[v])
  {
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const HarbourAirportNearIndicatorCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourAirportNearIndicatorCode& HarbourAirportNearIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourAirportNearIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourBiologicallySecureAvailabilityIndicatorCode
  // 

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const HarbourBiologicallySecureAvailabilityIndicatorCode& v,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode& HarbourBiologicallySecureAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourConvoyMarshallingIndicatorCode
  // 

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourConvoyMarshallingIndicatorCode_literals_[v])
  {
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const HarbourConvoyMarshallingIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourConvoyMarshallingIndicatorCode& HarbourConvoyMarshallingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourConvoyMarshallingIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourDegaussingIndicatorCode
  // 

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourDegaussingIndicatorCode_literals_[v])
  {
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const HarbourDegaussingIndicatorCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourDegaussingIndicatorCode& HarbourDegaussingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourDegaussingIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourDirtyBallastIndicatorCode
  // 

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourDirtyBallastIndicatorCode_literals_[v])
  {
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const HarbourDirtyBallastIndicatorCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourDirtyBallastIndicatorCode& HarbourDirtyBallastIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourDirtyBallastIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourEntranceRestrictionsIceIndicatorCode
  // 

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_[v])
  {
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const HarbourEntranceRestrictionsIceIndicatorCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourEntranceRestrictionsIceIndicatorCode& HarbourEntranceRestrictionsIceIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourEntranceRestrictionsSwellIndicatorCode
  // 

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_[v])
  {
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const HarbourEntranceRestrictionsSwellIndicatorCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourEntranceRestrictionsSwellIndicatorCode& HarbourEntranceRestrictionsSwellIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourEstimatedTimeOfArrivalIndicatorCode
  // 

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_[v])
  {
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const HarbourEstimatedTimeOfArrivalIndicatorCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode& HarbourEstimatedTimeOfArrivalIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourFireFightingCapabilityCode
  // 

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (value v)
  : ::xml_schema::token (_xsd_HarbourFireFightingCapabilityCode_literals_[v])
  {
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const HarbourFireFightingCapabilityCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourFireFightingCapabilityCode& HarbourFireFightingCapabilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourFireFightingCapabilityCode_literals_[v]);

    return *this;
  }


  // HarbourFireFightingIndicatorCode
  // 

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourFireFightingIndicatorCode_literals_[v])
  {
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const HarbourFireFightingIndicatorCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourFireFightingIndicatorCode& HarbourFireFightingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourFireFightingIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourFirstPortOfEntryIndicatorCode
  // 

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourFirstPortOfEntryIndicatorCode_literals_[v])
  {
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const HarbourFirstPortOfEntryIndicatorCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourFirstPortOfEntryIndicatorCode& HarbourFirstPortOfEntryIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourFirstPortOfEntryIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourFreshWaterAvailabilityIndicatorCode
  // 

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const HarbourFreshWaterAvailabilityIndicatorCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourFreshWaterAvailabilityIndicatorCode& HarbourFreshWaterAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourLashIndicatorCode
  // 

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourLashIndicatorCode_literals_[v])
  {
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const HarbourLashIndicatorCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourLashIndicatorCode& HarbourLashIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourLashIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourLighterageAvailabilityIndicatorCode
  // 

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourLighterageAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const HarbourLighterageAvailabilityIndicatorCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourLighterageAvailabilityIndicatorCode& HarbourLighterageAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourLighterageAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourOverheadLimitsIndicatorCode
  // 

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourOverheadLimitsIndicatorCode_literals_[v])
  {
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const HarbourOverheadLimitsIndicatorCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourOverheadLimitsIndicatorCode& HarbourOverheadLimitsIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourOverheadLimitsIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourPassengerHandlingIndicatorCode
  // 

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourPassengerHandlingIndicatorCode_literals_[v])
  {
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const HarbourPassengerHandlingIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourPassengerHandlingIndicatorCode& HarbourPassengerHandlingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourPassengerHandlingIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourPersistenceCode
  // 

  HarbourPersistenceCode::
  HarbourPersistenceCode (value v)
  : ::xml_schema::token (_xsd_HarbourPersistenceCode_literals_[v])
  {
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const HarbourPersistenceCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourPersistenceCode& HarbourPersistenceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourPersistenceCode_literals_[v]);

    return *this;
  }


  // HarbourPilotageAvailabilityIndicatorCode
  // 

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourPilotageAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const HarbourPilotageAvailabilityIndicatorCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourPilotageAvailabilityIndicatorCode& HarbourPilotageAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourPilotageAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourPilotageRequirementIndicatorCode
  // 

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourPilotageRequirementIndicatorCode_literals_[v])
  {
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const HarbourPilotageRequirementIndicatorCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourPilotageRequirementIndicatorCode& HarbourPilotageRequirementIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourPilotageRequirementIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourRefuellingAvailabilityIndicatorCode
  // 

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const HarbourRefuellingAvailabilityIndicatorCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourRefuellingAvailabilityIndicatorCode& HarbourRefuellingAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourRefuellingTypeCode
  // 

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (value v)
  : ::xml_schema::token (_xsd_HarbourRefuellingTypeCode_literals_[v])
  {
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const HarbourRefuellingTypeCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourRefuellingTypeCode& HarbourRefuellingTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourRefuellingTypeCode_literals_[v]);

    return *this;
  }


  // HarbourShelterQualityCode
  // 

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (value v)
  : ::xml_schema::token (_xsd_HarbourShelterQualityCode_literals_[v])
  {
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const HarbourShelterQualityCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourShelterQualityCode& HarbourShelterQualityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourShelterQualityCode_literals_[v]);

    return *this;
  }


  // HarbourTankerFacilitiesIndicatorCode
  // 

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourTankerFacilitiesIndicatorCode_literals_[v])
  {
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const HarbourTankerFacilitiesIndicatorCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourTankerFacilitiesIndicatorCode& HarbourTankerFacilitiesIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourTankerFacilitiesIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourTransitAccommodationIndicatorCode
  // 

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourTransitAccommodationIndicatorCode_literals_[v])
  {
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const HarbourTransitAccommodationIndicatorCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourTransitAccommodationIndicatorCode& HarbourTransitAccommodationIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourTransitAccommodationIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourTugAvailabilityIndicatorCode
  // 

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourTugAvailabilityIndicatorCode_literals_[v])
  {
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const HarbourTugAvailabilityIndicatorCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourTugAvailabilityIndicatorCode& HarbourTugAvailabilityIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourTugAvailabilityIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourTurningAreaIndicatorCode
  // 

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (value v)
  : ::xml_schema::token (_xsd_HarbourTurningAreaIndicatorCode_literals_[v])
  {
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const HarbourTurningAreaIndicatorCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourTurningAreaIndicatorCode& HarbourTurningAreaIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourTurningAreaIndicatorCode_literals_[v]);

    return *this;
  }


  // HarbourTypeCategoryCode
  // 

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_HarbourTypeCategoryCode_literals_[v])
  {
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const HarbourTypeCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourTypeCategoryCode& HarbourTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourTypeCategoryCode_literals_[v]);

    return *this;
  }


  // HarbourVehicleHandlingTypeCode
  // 

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (value v)
  : ::xml_schema::token (_xsd_HarbourVehicleHandlingTypeCode_literals_[v])
  {
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const HarbourVehicleHandlingTypeCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HarbourVehicleHandlingTypeCode& HarbourVehicleHandlingTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HarbourVehicleHandlingTypeCode_literals_[v]);

    return *this;
  }


  // HoldingRequiredCalculationMethodCode
  // 

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (value v)
  : ::xml_schema::token (_xsd_HoldingRequiredCalculationMethodCode_literals_[v])
  {
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const HoldingRequiredCalculationMethodCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HoldingRequiredCalculationMethodCode& HoldingRequiredCalculationMethodCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HoldingRequiredCalculationMethodCode_literals_[v]);

    return *this;
  }


  // HoldingTransferReasonCode
  // 

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (value v)
  : ::xml_schema::token (_xsd_HoldingTransferReasonCode_literals_[v])
  {
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const HoldingTransferReasonCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  HoldingTransferReasonCode& HoldingTransferReasonCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_HoldingTransferReasonCode_literals_[v]);

    return *this;
  }


  // IcingCategoryCode
  // 

  IcingCategoryCode::
  IcingCategoryCode (value v)
  : ::xml_schema::token (_xsd_IcingCategoryCode_literals_[v])
  {
  }

  IcingCategoryCode::
  IcingCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  IcingCategoryCode::
  IcingCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  IcingCategoryCode::
  IcingCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  IcingCategoryCode::
  IcingCategoryCode (const IcingCategoryCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  IcingCategoryCode& IcingCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_IcingCategoryCode_literals_[v]);

    return *this;
  }


  // IcingSeverityQualifierCode
  // 

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (value v)
  : ::xml_schema::token (_xsd_IcingSeverityQualifierCode_literals_[v])
  {
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const IcingSeverityQualifierCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  IcingSeverityQualifierCode& IcingSeverityQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_IcingSeverityQualifierCode_literals_[v]);

    return *this;
  }


  // JettyRailServedIndicatorCode
  // 

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (value v)
  : ::xml_schema::token (_xsd_JettyRailServedIndicatorCode_literals_[v])
  {
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const JettyRailServedIndicatorCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  JettyRailServedIndicatorCode& JettyRailServedIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_JettyRailServedIndicatorCode_literals_[v]);

    return *this;
  }


  // LanguageCategoryCode
  // 

  LanguageCategoryCode::
  LanguageCategoryCode (value v)
  : ::xml_schema::token (_xsd_LanguageCategoryCode_literals_[v])
  {
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const LanguageCategoryCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LanguageCategoryCode& LanguageCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LanguageCategoryCode_literals_[v]);

    return *this;
  }


  // LanguageSkillProficiencyCode
  // 

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (value v)
  : ::xml_schema::token (_xsd_LanguageSkillProficiencyCode_literals_[v])
  {
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const LanguageSkillProficiencyCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LanguageSkillProficiencyCode& LanguageSkillProficiencyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LanguageSkillProficiencyCode_literals_[v]);

    return *this;
  }


  // LightCategoryCode
  // 

  LightCategoryCode::
  LightCategoryCode (value v)
  : ::xml_schema::token (_xsd_LightCategoryCode_literals_[v])
  {
  }

  LightCategoryCode::
  LightCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LightCategoryCode::
  LightCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LightCategoryCode::
  LightCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LightCategoryCode::
  LightCategoryCode (const LightCategoryCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LightCategoryCode& LightCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LightCategoryCode_literals_[v]);

    return *this;
  }


  // LightMoonPhaseCode
  // 

  LightMoonPhaseCode::
  LightMoonPhaseCode (value v)
  : ::xml_schema::token (_xsd_LightMoonPhaseCode_literals_[v])
  {
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const LightMoonPhaseCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LightMoonPhaseCode& LightMoonPhaseCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LightMoonPhaseCode_literals_[v]);

    return *this;
  }


  // LiquidSurfaceStatusSeaStateCode
  // 

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (value v)
  : ::xml_schema::token (_xsd_LiquidSurfaceStatusSeaStateCode_literals_[v])
  {
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const LiquidSurfaceStatusSeaStateCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LiquidSurfaceStatusSeaStateCode& LiquidSurfaceStatusSeaStateCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LiquidSurfaceStatusSeaStateCode_literals_[v]);

    return *this;
  }


  // LiquidSurfaceStatusSurfaceConditionCode
  // 

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (value v)
  : ::xml_schema::token (_xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_[v])
  {
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const LiquidSurfaceStatusSurfaceConditionCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LiquidSurfaceStatusSurfaceConditionCode& LiquidSurfaceStatusSurfaceConditionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_[v]);

    return *this;
  }


  // LocationCategoryCode
  // 

  LocationCategoryCode::
  LocationCategoryCode (value v)
  : ::xml_schema::token (_xsd_LocationCategoryCode_literals_[v])
  {
  }

  LocationCategoryCode::
  LocationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  LocationCategoryCode::
  LocationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  LocationCategoryCode::
  LocationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  LocationCategoryCode::
  LocationCategoryCode (const LocationCategoryCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  LocationCategoryCode& LocationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_LocationCategoryCode_literals_[v]);

    return *this;
  }


  // MainActivityCode
  // 

  MainActivityCode::
  MainActivityCode (value v)
  : ::xml_schema::token (_xsd_MainActivityCode_literals_[v])
  {
  }

  MainActivityCode::
  MainActivityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MainActivityCode::
  MainActivityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MainActivityCode::
  MainActivityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MainActivityCode::
  MainActivityCode (const MainActivityCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MainActivityCode& MainActivityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MainActivityCode_literals_[v]);

    return *this;
  }


  // MaintenanceCapabilityCategoryCode
  // 

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_MaintenanceCapabilityCategoryCode_literals_[v])
  {
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const MaintenanceCapabilityCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaintenanceCapabilityCategoryCode& MaintenanceCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaintenanceCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // MaintenanceCapabilityLevelCode
  // 

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (value v)
  : ::xml_schema::token (_xsd_MaintenanceCapabilityLevelCode_literals_[v])
  {
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const MaintenanceCapabilityLevelCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaintenanceCapabilityLevelCode& MaintenanceCapabilityLevelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaintenanceCapabilityLevelCode_literals_[v]);

    return *this;
  }


  // MaritimeEquipmentTypeCategoryCode
  // 

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MaritimeEquipmentTypeCategoryCode_literals_[v])
  {
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const MaritimeEquipmentTypeCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaritimeEquipmentTypeCategoryCode& MaritimeEquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaritimeEquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MaritimeEquipmentTypeSubcategoryCode
  // 

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_MaritimeEquipmentTypeSubcategoryCode_literals_[v])
  {
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const MaritimeEquipmentTypeSubcategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaritimeEquipmentTypeSubcategoryCode& MaritimeEquipmentTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaritimeEquipmentTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // MaterielCategoryCode
  // 

  MaterielCategoryCode::
  MaterielCategoryCode (value v)
  : ::xml_schema::token (_xsd_MaterielCategoryCode_literals_[v])
  {
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const MaterielCategoryCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielCategoryCode& MaterielCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielCategoryCode_literals_[v]);

    return *this;
  }


  // MaterielStatusBodyColourCode
  // 

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusBodyColourCode_literals_[v])
  {
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const MaterielStatusBodyColourCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusBodyColourCode& MaterielStatusBodyColourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusBodyColourCode_literals_[v]);

    return *this;
  }


  // MaterielStatusBuoyMalfunctionCode
  // 

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusBuoyMalfunctionCode_literals_[v])
  {
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const MaterielStatusBuoyMalfunctionCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusBuoyMalfunctionCode& MaterielStatusBuoyMalfunctionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusBuoyMalfunctionCode_literals_[v]);

    return *this;
  }


  // MaterielStatusCategoryCode
  // 

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusCategoryCode_literals_[v])
  {
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const MaterielStatusCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusCategoryCode& MaterielStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusCategoryCode_literals_[v]);

    return *this;
  }


  // MaterielStatusImoCompliantIndicatorCode
  // 

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusImoCompliantIndicatorCode_literals_[v])
  {
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const MaterielStatusImoCompliantIndicatorCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusImoCompliantIndicatorCode& MaterielStatusImoCompliantIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusImoCompliantIndicatorCode_literals_[v]);

    return *this;
  }


  // MaterielStatusMarkingCode
  // 

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusMarkingCode_literals_[v])
  {
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const MaterielStatusMarkingCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusMarkingCode& MaterielStatusMarkingCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusMarkingCode_literals_[v]);

    return *this;
  }


  // MaterielStatusMarkingColourCode
  // 

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusMarkingColourCode_literals_[v])
  {
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const MaterielStatusMarkingColourCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusMarkingColourCode& MaterielStatusMarkingColourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusMarkingColourCode_literals_[v]);

    return *this;
  }


  // MaterielStatusOperationalStatusCode
  // 

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusOperationalStatusCode_literals_[v])
  {
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const MaterielStatusOperationalStatusCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusOperationalStatusCode& MaterielStatusOperationalStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusOperationalStatusCode_literals_[v]);

    return *this;
  }


  // MaterielStatusOperationalStatusModeCode
  // 

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusOperationalStatusModeCode_literals_[v])
  {
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const MaterielStatusOperationalStatusModeCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusOperationalStatusModeCode& MaterielStatusOperationalStatusModeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusOperationalStatusModeCode_literals_[v]);

    return *this;
  }


  // MaterielStatusOperationalStatusQualifierCode
  // 

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusOperationalStatusQualifierCode_literals_[v])
  {
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const MaterielStatusOperationalStatusQualifierCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusOperationalStatusQualifierCode& MaterielStatusOperationalStatusQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusOperationalStatusQualifierCode_literals_[v]);

    return *this;
  }


  // MaterielStatusReserveIndicatorCode
  // 

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusReserveIndicatorCode_literals_[v])
  {
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const MaterielStatusReserveIndicatorCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusReserveIndicatorCode& MaterielStatusReserveIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusReserveIndicatorCode_literals_[v]);

    return *this;
  }


  // MaterielStatusSafetyStatusCode
  // 

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (value v)
  : ::xml_schema::token (_xsd_MaterielStatusSafetyStatusCode_literals_[v])
  {
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const MaterielStatusSafetyStatusCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielStatusSafetyStatusCode& MaterielStatusSafetyStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielStatusSafetyStatusCode_literals_[v]);

    return *this;
  }


  // MaterielTypeCategoryCode
  // 

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MaterielTypeCategoryCode_literals_[v])
  {
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const MaterielTypeCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielTypeCategoryCode& MaterielTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MaterielTypeSupplyClassCode
  // 

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (value v)
  : ::xml_schema::token (_xsd_MaterielTypeSupplyClassCode_literals_[v])
  {
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const MaterielTypeSupplyClassCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MaterielTypeSupplyClassCode& MaterielTypeSupplyClassCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MaterielTypeSupplyClassCode_literals_[v]);

    return *this;
  }


  // MedicalFacilityStatusIntervalCasualtyTypeCode
  // 

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (value v)
  : ::xml_schema::token (_xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_[v])
  {
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const MedicalFacilityStatusIntervalCasualtyTypeCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode& MedicalFacilityStatusIntervalCasualtyTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_[v]);

    return *this;
  }


  // MedicalFacilityStatusPendingSurgeryTriageCode
  // 

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (value v)
  : ::xml_schema::token (_xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_[v])
  {
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const MedicalFacilityStatusPendingSurgeryTriageCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MedicalFacilityStatusPendingSurgeryTriageCode& MedicalFacilityStatusPendingSurgeryTriageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_[v]);

    return *this;
  }


  // MeteorologicFeatureCategoryCode
  // 

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (value v)
  : ::xml_schema::token (_xsd_MeteorologicFeatureCategoryCode_literals_[v])
  {
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const MeteorologicFeatureCategoryCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MeteorologicFeatureCategoryCode& MeteorologicFeatureCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MeteorologicFeatureCategoryCode_literals_[v]);

    return *this;
  }


  // MeteorologicFeatureInterpretationCode
  // 

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (value v)
  : ::xml_schema::token (_xsd_MeteorologicFeatureInterpretationCode_literals_[v])
  {
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const MeteorologicFeatureInterpretationCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MeteorologicFeatureInterpretationCode& MeteorologicFeatureInterpretationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MeteorologicFeatureInterpretationCode_literals_[v]);

    return *this;
  }


  // MeteorologicFeatureSourceCode
  // 

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (value v)
  : ::xml_schema::token (_xsd_MeteorologicFeatureSourceCode_literals_[v])
  {
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const MeteorologicFeatureSourceCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MeteorologicFeatureSourceCode& MeteorologicFeatureSourceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MeteorologicFeatureSourceCode_literals_[v]);

    return *this;
  }


  // MilitaryObstacleCategoryCode
  // 

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (value v)
  : ::xml_schema::token (_xsd_MilitaryObstacleCategoryCode_literals_[v])
  {
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const MilitaryObstacleCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryObstacleCategoryCode& MilitaryObstacleCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryObstacleCategoryCode_literals_[v]);

    return *this;
  }


  // MilitaryObstacleTypeCategoryCode
  // 

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MilitaryObstacleTypeCategoryCode_literals_[v])
  {
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const MilitaryObstacleTypeCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryObstacleTypeCategoryCode& MilitaryObstacleTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryObstacleTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MilitaryObstacleTypeSubcategoryCode
  // 

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_MilitaryObstacleTypeSubcategoryCode_literals_[v])
  {
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const MilitaryObstacleTypeSubcategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryObstacleTypeSubcategoryCode& MilitaryObstacleTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryObstacleTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // MilitaryOrganisationTypeCategoryCode
  // 

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MilitaryOrganisationTypeCategoryCode_literals_[v])
  {
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const MilitaryOrganisationTypeCategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryOrganisationTypeCategoryCode& MilitaryOrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryOrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MilitaryOrganisationTypeServiceCode
  // 

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (value v)
  : ::xml_schema::token (_xsd_MilitaryOrganisationTypeServiceCode_literals_[v])
  {
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const MilitaryOrganisationTypeServiceCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryOrganisationTypeServiceCode& MilitaryOrganisationTypeServiceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryOrganisationTypeServiceCode_literals_[v]);

    return *this;
  }


  // MilitaryPostTypeCategoryCode
  // 

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MilitaryPostTypeCategoryCode_literals_[v])
  {
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const MilitaryPostTypeCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryPostTypeCategoryCode& MilitaryPostTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryPostTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MilitaryPostTypeRankCode
  // 

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (value v)
  : ::xml_schema::token (_xsd_MilitaryPostTypeRankCode_literals_[v])
  {
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const MilitaryPostTypeRankCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MilitaryPostTypeRankCode& MilitaryPostTypeRankCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MilitaryPostTypeRankCode_literals_[v]);

    return *this;
  }


  // MinePresenceCode
  // 

  MinePresenceCode::
  MinePresenceCode (value v)
  : ::xml_schema::token (_xsd_MinePresenceCode_literals_[v])
  {
  }

  MinePresenceCode::
  MinePresenceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinePresenceCode::
  MinePresenceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinePresenceCode::
  MinePresenceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinePresenceCode::
  MinePresenceCode (const MinePresenceCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinePresenceCode& MinePresenceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinePresenceCode_literals_[v]);

    return *this;
  }


  // MineStatusAirDropEffectCode
  // 

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (value v)
  : ::xml_schema::token (_xsd_MineStatusAirDropEffectCode_literals_[v])
  {
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const MineStatusAirDropEffectCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MineStatusAirDropEffectCode& MineStatusAirDropEffectCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MineStatusAirDropEffectCode_literals_[v]);

    return *this;
  }


  // MineStatusCode
  // 

  MineStatusCode::
  MineStatusCode (value v)
  : ::xml_schema::token (_xsd_MineStatusCode_literals_[v])
  {
  }

  MineStatusCode::
  MineStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusCode::
  MineStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusCode::
  MineStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusCode::
  MineStatusCode (const MineStatusCode& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MineStatusCode& MineStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MineStatusCode_literals_[v]);

    return *this;
  }


  // MineStatusMaritimeMineQualifierCode
  // 

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (value v)
  : ::xml_schema::token (_xsd_MineStatusMaritimeMineQualifierCode_literals_[v])
  {
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const MineStatusMaritimeMineQualifierCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MineStatusMaritimeMineQualifierCode& MineStatusMaritimeMineQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MineStatusMaritimeMineQualifierCode_literals_[v]);

    return *this;
  }


  // MinefieldCategoryCode
  // 

  MinefieldCategoryCode::
  MinefieldCategoryCode (value v)
  : ::xml_schema::token (_xsd_MinefieldCategoryCode_literals_[v])
  {
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const MinefieldCategoryCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldCategoryCode& MinefieldCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldCategoryCode_literals_[v]);

    return *this;
  }


  // MinefieldLandDepthPlacementCode
  // 

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (value v)
  : ::xml_schema::token (_xsd_MinefieldLandDepthPlacementCode_literals_[v])
  {
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const MinefieldLandDepthPlacementCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldLandDepthPlacementCode& MinefieldLandDepthPlacementCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldLandDepthPlacementCode_literals_[v]);

    return *this;
  }


  // MinefieldLandFunctionCode
  // 

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (value v)
  : ::xml_schema::token (_xsd_MinefieldLandFunctionCode_literals_[v])
  {
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const MinefieldLandFunctionCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldLandFunctionCode& MinefieldLandFunctionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldLandFunctionCode_literals_[v]);

    return *this;
  }


  // MinefieldLandPatternCode
  // 

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (value v)
  : ::xml_schema::token (_xsd_MinefieldLandPatternCode_literals_[v])
  {
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const MinefieldLandPatternCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldLandPatternCode& MinefieldLandPatternCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldLandPatternCode_literals_[v]);

    return *this;
  }


  // MinefieldLandPersistenceCode
  // 

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (value v)
  : ::xml_schema::token (_xsd_MinefieldLandPersistenceCode_literals_[v])
  {
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const MinefieldLandPersistenceCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldLandPersistenceCode& MinefieldLandPersistenceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldLandPersistenceCode_literals_[v]);

    return *this;
  }


  // MinefieldLandStoppingPowerCode
  // 

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (value v)
  : ::xml_schema::token (_xsd_MinefieldLandStoppingPowerCode_literals_[v])
  {
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const MinefieldLandStoppingPowerCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldLandStoppingPowerCode& MinefieldLandStoppingPowerCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldLandStoppingPowerCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeBottomNaturalCamouflageCode
  // 

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_[v])
  {
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const MinefieldMaritimeBottomNaturalCamouflageCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeBottomNaturalCamouflageCode& MinefieldMaritimeBottomNaturalCamouflageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeDepthPlacementCode
  // 

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeDepthPlacementCode_literals_[v])
  {
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const MinefieldMaritimeDepthPlacementCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeDepthPlacementCode& MinefieldMaritimeDepthPlacementCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeDepthPlacementCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeFunctionCode
  // 

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeFunctionCode_literals_[v])
  {
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const MinefieldMaritimeFunctionCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeFunctionCode& MinefieldMaritimeFunctionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeFunctionCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusCode
  // 

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const MinefieldMaritimeStatusCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusCode& MinefieldMaritimeStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusColourCode
  // 

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusColourCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const MinefieldMaritimeStatusColourCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusColourCode& MinefieldMaritimeStatusColourCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusColourCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusExpectedLevelMcmCode
  // 

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const MinefieldMaritimeStatusExpectedLevelMcmCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode& MinefieldMaritimeStatusExpectedLevelMcmCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusMineDetectionCode
  // 

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusMineDetectionCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const MinefieldMaritimeStatusMineDetectionCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusMineDetectionCode& MinefieldMaritimeStatusMineDetectionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusMineDetectionCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusMineZoneRiskCode
  // 

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const MinefieldMaritimeStatusMineZoneRiskCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusMineZoneRiskCode& MinefieldMaritimeStatusMineZoneRiskCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeStatusSeedingCode
  // 

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeStatusSeedingCode_literals_[v])
  {
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const MinefieldMaritimeStatusSeedingCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeStatusSeedingCode& MinefieldMaritimeStatusSeedingCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeStatusSeedingCode_literals_[v]);

    return *this;
  }


  // MinefieldMaritimeSubfunctionCode
  // 

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (value v)
  : ::xml_schema::token (_xsd_MinefieldMaritimeSubfunctionCode_literals_[v])
  {
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const MinefieldMaritimeSubfunctionCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MinefieldMaritimeSubfunctionCode& MinefieldMaritimeSubfunctionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MinefieldMaritimeSubfunctionCode_literals_[v]);

    return *this;
  }


  // MiscellaneousEquipmentTypeCategoryCode
  // 

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_MiscellaneousEquipmentTypeCategoryCode_literals_[v])
  {
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const MiscellaneousEquipmentTypeCategoryCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MiscellaneousEquipmentTypeCategoryCode& MiscellaneousEquipmentTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MiscellaneousEquipmentTypeCategoryCode_literals_[v]);

    return *this;
  }


  // MiscellaneousEquipmentTypeSubcategoryCode
  // 

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_[v])
  {
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const MiscellaneousEquipmentTypeSubcategoryCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MiscellaneousEquipmentTypeSubcategoryCode& MiscellaneousEquipmentTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // MissionPrimacyCode
  // 

  MissionPrimacyCode::
  MissionPrimacyCode (value v)
  : ::xml_schema::token (_xsd_MissionPrimacyCode_literals_[v])
  {
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const MissionPrimacyCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MissionPrimacyCode& MissionPrimacyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MissionPrimacyCode_literals_[v]);

    return *this;
  }


  // MobilityCapabilityCategoryCode
  // 

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_MobilityCapabilityCategoryCode_literals_[v])
  {
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const MobilityCapabilityCategoryCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MobilityCapabilityCategoryCode& MobilityCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MobilityCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // MobilityCapabilityDescriptorCode
  // 

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_MobilityCapabilityDescriptorCode_literals_[v])
  {
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const MobilityCapabilityDescriptorCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MobilityCapabilityDescriptorCode& MobilityCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MobilityCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // MobilityCapabilityTerrainTypeCode
  // 

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (value v)
  : ::xml_schema::token (_xsd_MobilityCapabilityTerrainTypeCode_literals_[v])
  {
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const MobilityCapabilityTerrainTypeCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MobilityCapabilityTerrainTypeCode& MobilityCapabilityTerrainTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MobilityCapabilityTerrainTypeCode_literals_[v]);

    return *this;
  }


  // MobilityCode
  // 

  MobilityCode::
  MobilityCode (value v)
  : ::xml_schema::token (_xsd_MobilityCode_literals_[v])
  {
  }

  MobilityCode::
  MobilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCode::
  MobilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCode::
  MobilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  MobilityCode::
  MobilityCode (const MobilityCode& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  MobilityCode& MobilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_MobilityCode_literals_[v]);

    return *this;
  }


  // ModeOfTransportationCode
  // 

  ModeOfTransportationCode::
  ModeOfTransportationCode (value v)
  : ::xml_schema::token (_xsd_ModeOfTransportationCode_literals_[v])
  {
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ModeOfTransportationCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ModeOfTransportationCode& ModeOfTransportationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ModeOfTransportationCode_literals_[v]);

    return *this;
  }


  // NetworkArchitectureCode
  // 

  NetworkArchitectureCode::
  NetworkArchitectureCode (value v)
  : ::xml_schema::token (_xsd_NetworkArchitectureCode_literals_[v])
  {
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const NetworkArchitectureCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkArchitectureCode& NetworkArchitectureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkArchitectureCode_literals_[v]);

    return *this;
  }


  // NetworkCapacityBandwidthCode
  // 

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (value v)
  : ::xml_schema::token (_xsd_NetworkCapacityBandwidthCode_literals_[v])
  {
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const NetworkCapacityBandwidthCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkCapacityBandwidthCode& NetworkCapacityBandwidthCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkCapacityBandwidthCode_literals_[v]);

    return *this;
  }


  // NetworkCapacityProtocolCode
  // 

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (value v)
  : ::xml_schema::token (_xsd_NetworkCapacityProtocolCode_literals_[v])
  {
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const NetworkCapacityProtocolCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkCapacityProtocolCode& NetworkCapacityProtocolCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkCapacityProtocolCode_literals_[v]);

    return *this;
  }


  // NetworkCategoryCode
  // 

  NetworkCategoryCode::
  NetworkCategoryCode (value v)
  : ::xml_schema::token (_xsd_NetworkCategoryCode_literals_[v])
  {
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const NetworkCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkCategoryCode& NetworkCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkCategoryCode_literals_[v]);

    return *this;
  }


  // NetworkFrequencyBandCode
  // 

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (value v)
  : ::xml_schema::token (_xsd_NetworkFrequencyBandCode_literals_[v])
  {
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const NetworkFrequencyBandCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkFrequencyBandCode& NetworkFrequencyBandCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkFrequencyBandCode_literals_[v]);

    return *this;
  }


  // NetworkFrequencyModulationCode
  // 

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (value v)
  : ::xml_schema::token (_xsd_NetworkFrequencyModulationCode_literals_[v])
  {
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const NetworkFrequencyModulationCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkFrequencyModulationCode& NetworkFrequencyModulationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkFrequencyModulationCode_literals_[v]);

    return *this;
  }


  // NetworkMeansCode
  // 

  NetworkMeansCode::
  NetworkMeansCode (value v)
  : ::xml_schema::token (_xsd_NetworkMeansCode_literals_[v])
  {
  }

  NetworkMeansCode::
  NetworkMeansCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkMeansCode::
  NetworkMeansCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkMeansCode::
  NetworkMeansCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkMeansCode::
  NetworkMeansCode (const NetworkMeansCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkMeansCode& NetworkMeansCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkMeansCode_literals_[v]);

    return *this;
  }


  // NetworkServiceCategoryCode
  // 

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (value v)
  : ::xml_schema::token (_xsd_NetworkServiceCategoryCode_literals_[v])
  {
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const NetworkServiceCategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkServiceCategoryCode& NetworkServiceCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkServiceCategoryCode_literals_[v]);

    return *this;
  }


  // NetworkServiceCryptographicIndicatorCode
  // 

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (value v)
  : ::xml_schema::token (_xsd_NetworkServiceCryptographicIndicatorCode_literals_[v])
  {
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const NetworkServiceCryptographicIndicatorCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkServiceCryptographicIndicatorCode& NetworkServiceCryptographicIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkServiceCryptographicIndicatorCode_literals_[v]);

    return *this;
  }


  // NetworkServiceStatusIndicatorCode
  // 

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (value v)
  : ::xml_schema::token (_xsd_NetworkServiceStatusIndicatorCode_literals_[v])
  {
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const NetworkServiceStatusIndicatorCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkServiceStatusIndicatorCode& NetworkServiceStatusIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkServiceStatusIndicatorCode_literals_[v]);

    return *this;
  }


  // NetworkServiceSubcategoryCode
  // 

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_NetworkServiceSubcategoryCode_literals_[v])
  {
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const NetworkServiceSubcategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkServiceSubcategoryCode& NetworkServiceSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkServiceSubcategoryCode_literals_[v]);

    return *this;
  }


  // NetworkSubcategoryCode
  // 

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_NetworkSubcategoryCode_literals_[v])
  {
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const NetworkSubcategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NetworkSubcategoryCode& NetworkSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NetworkSubcategoryCode_literals_[v]);

    return *this;
  }


  // NuclearEventCategoryCode
  // 

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (value v)
  : ::xml_schema::token (_xsd_NuclearEventCategoryCode_literals_[v])
  {
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const NuclearEventCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NuclearEventCategoryCode& NuclearEventCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NuclearEventCategoryCode_literals_[v]);

    return *this;
  }


  // NuclearWeaponEventCraterPresenceCode
  // 

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (value v)
  : ::xml_schema::token (_xsd_NuclearWeaponEventCraterPresenceCode_literals_[v])
  {
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const NuclearWeaponEventCraterPresenceCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NuclearWeaponEventCraterPresenceCode& NuclearWeaponEventCraterPresenceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NuclearWeaponEventCraterPresenceCode_literals_[v]);

    return *this;
  }


  // NuclearYieldGroupCode
  // 

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (value v)
  : ::xml_schema::token (_xsd_NuclearYieldGroupCode_literals_[v])
  {
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const NuclearYieldGroupCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  NuclearYieldGroupCode& NuclearYieldGroupCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_NuclearYieldGroupCode_literals_[v]);

    return *this;
  }


  // ObjectItemAddressAuthorisationIndicatorCode
  // 

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_[v])
  {
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ObjectItemAddressAuthorisationIndicatorCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAddressAuthorisationIndicatorCode& ObjectItemAddressAuthorisationIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_[v]);

    return *this;
  }


  // ObjectItemAddressPrimacyCode
  // 

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAddressPrimacyCode_literals_[v])
  {
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ObjectItemAddressPrimacyCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAddressPrimacyCode& ObjectItemAddressPrimacyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAddressPrimacyCode_literals_[v]);

    return *this;
  }


  // ObjectItemAddressTransmitReceiveCode
  // 

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAddressTransmitReceiveCode_literals_[v])
  {
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ObjectItemAddressTransmitReceiveCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAddressTransmitReceiveCode& ObjectItemAddressTransmitReceiveCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAddressTransmitReceiveCode_literals_[v]);

    return *this;
  }


  // ObjectItemAliasCategoryCode
  // 

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAliasCategoryCode_literals_[v])
  {
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ObjectItemAliasCategoryCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAliasCategoryCode& ObjectItemAliasCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAliasCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemAssociationCategoryCode
  // 

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAssociationCategoryCode_literals_[v])
  {
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ObjectItemAssociationCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAssociationCategoryCode& ObjectItemAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemAssociationSubcategoryCode
  // 

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemAssociationSubcategoryCode_literals_[v])
  {
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ObjectItemAssociationSubcategoryCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemAssociationSubcategoryCode& ObjectItemAssociationSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemAssociationSubcategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemCategoryCode
  // 

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemCategoryCode_literals_[v])
  {
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ObjectItemCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemCategoryCode& ObjectItemCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemGroupAccountDetailQualifierCode
  // 

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemGroupAccountDetailQualifierCode_literals_[v])
  {
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ObjectItemGroupAccountDetailQualifierCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemGroupAccountDetailQualifierCode& ObjectItemGroupAccountDetailQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemGroupAccountDetailQualifierCode_literals_[v]);

    return *this;
  }


  // ObjectItemHostilityStatusCode
  // 

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemHostilityStatusCode_literals_[v])
  {
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ObjectItemHostilityStatusCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemHostilityStatusCode& ObjectItemHostilityStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemHostilityStatusCode_literals_[v]);

    return *this;
  }


  // ObjectItemLocationMeaningCode
  // 

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemLocationMeaningCode_literals_[v])
  {
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ObjectItemLocationMeaningCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemLocationMeaningCode& ObjectItemLocationMeaningCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemLocationMeaningCode_literals_[v]);

    return *this;
  }


  // ObjectItemLocationRelativeSpeedCode
  // 

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemLocationRelativeSpeedCode_literals_[v])
  {
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ObjectItemLocationRelativeSpeedCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemLocationRelativeSpeedCode& ObjectItemLocationRelativeSpeedCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemLocationRelativeSpeedCode_literals_[v]);

    return *this;
  }


  // ObjectItemCitationAssociationCategoryCode
  // 

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemCitationAssociationCategoryCode_literals_[v])
  {
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ObjectItemCitationAssociationCategoryCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemCitationAssociationCategoryCode& ObjectItemCitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemCitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemStatusBoobyTrapPresenceCode
  // 

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_[v])
  {
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ObjectItemStatusBoobyTrapPresenceCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemStatusBoobyTrapPresenceCode& ObjectItemStatusBoobyTrapPresenceCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_[v]);

    return *this;
  }


  // ObjectItemStatusCategoryCode
  // 

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemStatusCategoryCode_literals_[v])
  {
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ObjectItemStatusCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemStatusCategoryCode& ObjectItemStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemStatusCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectItemStatusEmissionControlCode
  // 

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (value v)
  : ::xml_schema::token (_xsd_ObjectItemStatusEmissionControlCode_literals_[v])
  {
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ObjectItemStatusEmissionControlCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectItemStatusEmissionControlCode& ObjectItemStatusEmissionControlCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectItemStatusEmissionControlCode_literals_[v]);

    return *this;
  }


  // ObjectTypeCategoryCode
  // 

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeCategoryCode_literals_[v])
  {
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ObjectTypeCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeCategoryCode& ObjectTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectTypeDecoyIndicatorCode
  // 

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeDecoyIndicatorCode_literals_[v])
  {
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ObjectTypeDecoyIndicatorCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeDecoyIndicatorCode& ObjectTypeDecoyIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeDecoyIndicatorCode_literals_[v]);

    return *this;
  }


  // ObjectTypeEstablishmentCategoryCode
  // 

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeEstablishmentCategoryCode_literals_[v])
  {
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ObjectTypeEstablishmentCategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeEstablishmentCategoryCode& ObjectTypeEstablishmentCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeEstablishmentCategoryCode_literals_[v]);

    return *this;
  }


  // ObjectTypeEstablishmentEnvironmentConditionCode
  // 

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_[v])
  {
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ObjectTypeEstablishmentEnvironmentConditionCode& v,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeEstablishmentEnvironmentConditionCode& ObjectTypeEstablishmentEnvironmentConditionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_[v]);

    return *this;
  }


  // ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode
  // 

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_[v])
  {
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& v,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_[v]);

    return *this;
  }


  // ObjectTypeEstablishmentOperationalModeCode
  // 

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeEstablishmentOperationalModeCode_literals_[v])
  {
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ObjectTypeEstablishmentOperationalModeCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeEstablishmentOperationalModeCode& ObjectTypeEstablishmentOperationalModeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeEstablishmentOperationalModeCode_literals_[v]);

    return *this;
  }


  // ObjectTypeCitationAssociationCategoryCode
  // 

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_ObjectTypeCitationAssociationCategoryCode_literals_[v])
  {
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ObjectTypeCitationAssociationCategoryCode& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ObjectTypeCitationAssociationCategoryCode& ObjectTypeCitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ObjectTypeCitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // OperationalCapabilityCategoryCode
  // 

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_OperationalCapabilityCategoryCode_literals_[v])
  {
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const OperationalCapabilityCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OperationalCapabilityCategoryCode& OperationalCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OperationalCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // OperationalCapabilityLevelCode
  // 

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (value v)
  : ::xml_schema::token (_xsd_OperationalCapabilityLevelCode_literals_[v])
  {
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const OperationalCapabilityLevelCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OperationalCapabilityLevelCode& OperationalCapabilityLevelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OperationalCapabilityLevelCode_literals_[v]);

    return *this;
  }


  // OperationalCapabilityQualifierCode
  // 

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (value v)
  : ::xml_schema::token (_xsd_OperationalCapabilityQualifierCode_literals_[v])
  {
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const OperationalCapabilityQualifierCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OperationalCapabilityQualifierCode& OperationalCapabilityQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OperationalCapabilityQualifierCode_literals_[v]);

    return *this;
  }


  // OperationalInformationGroupCategoryCode
  // 

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (value v)
  : ::xml_schema::token (_xsd_OperationalInformationGroupCategoryCode_literals_[v])
  {
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const OperationalInformationGroupCategoryCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OperationalInformationGroupCategoryCode& OperationalInformationGroupCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OperationalInformationGroupCategoryCode_literals_[v]);

    return *this;
  }


  // OperationalInformationGroupOrganisationAssociationCategoryCode
  // 

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_[v])
  {
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const OperationalInformationGroupOrganisationAssociationCategoryCode& v,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode& OperationalInformationGroupOrganisationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // OrbitAreaAlignmentCode
  // 

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (value v)
  : ::xml_schema::token (_xsd_OrbitAreaAlignmentCode_literals_[v])
  {
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const OrbitAreaAlignmentCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrbitAreaAlignmentCode& OrbitAreaAlignmentCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrbitAreaAlignmentCode_literals_[v]);

    return *this;
  }


  // OrderCategoryCode
  // 

  OrderCategoryCode::
  OrderCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrderCategoryCode_literals_[v])
  {
  }

  OrderCategoryCode::
  OrderCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrderCategoryCode::
  OrderCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrderCategoryCode::
  OrderCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrderCategoryCode::
  OrderCategoryCode (const OrderCategoryCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrderCategoryCode& OrderCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrderCategoryCode_literals_[v]);

    return *this;
  }


  // OrderStatusExecutionStateCode
  // 

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (value v)
  : ::xml_schema::token (_xsd_OrderStatusExecutionStateCode_literals_[v])
  {
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const OrderStatusExecutionStateCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrderStatusExecutionStateCode& OrderStatusExecutionStateCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrderStatusExecutionStateCode_literals_[v]);

    return *this;
  }


  // OrganisationActionAssociationCategoryCode
  // 

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationActionAssociationCategoryCode_literals_[v])
  {
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const OrganisationActionAssociationCategoryCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationActionAssociationCategoryCode& OrganisationActionAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationActionAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationActionTaskRuleOfEngagementStatusCategoryCode
  // 

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_[v])
  {
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const OrganisationActionTaskRuleOfEngagementStatusCategoryCode& v,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode& OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationCategoryCode
  // 

  OrganisationCategoryCode::
  OrganisationCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationCategoryCode_literals_[v])
  {
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const OrganisationCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationCategoryCode& OrganisationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationMaterielTypeAssociationReportableTypeCode
  // 

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (value v)
  : ::xml_schema::token (_xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_[v])
  {
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const OrganisationMaterielTypeAssociationReportableTypeCode& v,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationMaterielTypeAssociationReportableTypeCode& OrganisationMaterielTypeAssociationReportableTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_[v]);

    return *this;
  }


  // OrganisationPlanOrderAssociationCategoryCode
  // 

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationPlanOrderAssociationCategoryCode_literals_[v])
  {
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const OrganisationPlanOrderAssociationCategoryCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationPlanOrderAssociationCategoryCode& OrganisationPlanOrderAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationPlanOrderAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationCitationAssociationCategoryCode
  // 

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationCitationAssociationCategoryCode_literals_[v])
  {
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const OrganisationCitationAssociationCategoryCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationCitationAssociationCategoryCode& OrganisationCitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationCitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusAvailabilityCode
  // 

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusAvailabilityCode_literals_[v])
  {
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const OrganisationStatusAvailabilityCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusAvailabilityCode& OrganisationStatusAvailabilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusAvailabilityCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusCbrnDressStateCode
  // 

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusCbrnDressStateCode_literals_[v])
  {
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const OrganisationStatusCbrnDressStateCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusCbrnDressStateCode& OrganisationStatusCbrnDressStateCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusCbrnDressStateCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusCommandAndControlRoleCode
  // 

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusCommandAndControlRoleCode_literals_[v])
  {
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const OrganisationStatusCommandAndControlRoleCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusCommandAndControlRoleCode& OrganisationStatusCommandAndControlRoleCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusCommandAndControlRoleCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusCommitmentStatusCode
  // 

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusCommitmentStatusCode_literals_[v])
  {
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const OrganisationStatusCommitmentStatusCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusCommitmentStatusCode& OrganisationStatusCommitmentStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusCommitmentStatusCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusFireModeCode
  // 

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusFireModeCode_literals_[v])
  {
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const OrganisationStatusFireModeCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusFireModeCode& OrganisationStatusFireModeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusFireModeCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusOperationalStatusCode
  // 

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusOperationalStatusCode_literals_[v])
  {
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const OrganisationStatusOperationalStatusCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusOperationalStatusCode& OrganisationStatusOperationalStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusOperationalStatusCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusOperationalStatusQualifierCode
  // 

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusOperationalStatusQualifierCode_literals_[v])
  {
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const OrganisationStatusOperationalStatusQualifierCode& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusOperationalStatusQualifierCode& OrganisationStatusOperationalStatusQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusOperationalStatusQualifierCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusReadinessCode
  // 

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusReadinessCode_literals_[v])
  {
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const OrganisationStatusReadinessCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusReadinessCode& OrganisationStatusReadinessCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusReadinessCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusReinforcementCode
  // 

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusReinforcementCode_literals_[v])
  {
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const OrganisationStatusReinforcementCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusReinforcementCode& OrganisationStatusReinforcementCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusReinforcementCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusReserveIndicatorCode
  // 

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusReserveIndicatorCode_literals_[v])
  {
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const OrganisationStatusReserveIndicatorCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusReserveIndicatorCode& OrganisationStatusReserveIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusReserveIndicatorCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusTrainingCode
  // 

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusTrainingCode_literals_[v])
  {
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const OrganisationStatusTrainingCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusTrainingCode& OrganisationStatusTrainingCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusTrainingCode_literals_[v]);

    return *this;
  }


  // OrganisationStatusUsageStatusCode
  // 

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (value v)
  : ::xml_schema::token (_xsd_OrganisationStatusUsageStatusCode_literals_[v])
  {
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const OrganisationStatusUsageStatusCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationStatusUsageStatusCode& OrganisationStatusUsageStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationStatusUsageStatusCode_literals_[v]);

    return *this;
  }


  // OrganisationTypeCategoryCode
  // 

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationTypeCategoryCode_literals_[v])
  {
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const OrganisationTypeCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationTypeCategoryCode& OrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationTypeCommandAndControlCategoryCode
  // 

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (value v)
  : ::xml_schema::token (_xsd_OrganisationTypeCommandAndControlCategoryCode_literals_[v])
  {
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const OrganisationTypeCommandAndControlCategoryCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationTypeCommandAndControlCategoryCode& OrganisationTypeCommandAndControlCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationTypeCommandAndControlCategoryCode_literals_[v]);

    return *this;
  }


  // OrganisationTypeCommandFunctionIndicatorCode
  // 

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (value v)
  : ::xml_schema::token (_xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_[v])
  {
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const OrganisationTypeCommandFunctionIndicatorCode& v,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  OrganisationTypeCommandFunctionIndicatorCode& OrganisationTypeCommandFunctionIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_[v]);

    return *this;
  }


  // PersistencyCode
  // 

  PersistencyCode::
  PersistencyCode (value v)
  : ::xml_schema::token (_xsd_PersistencyCode_literals_[v])
  {
  }

  PersistencyCode::
  PersistencyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersistencyCode::
  PersistencyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersistencyCode::
  PersistencyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersistencyCode::
  PersistencyCode (const PersistencyCode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersistencyCode& PersistencyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersistencyCode_literals_[v]);

    return *this;
  }


  // PersonBloodTypeCode
  // 

  PersonBloodTypeCode::
  PersonBloodTypeCode (value v)
  : ::xml_schema::token (_xsd_PersonBloodTypeCode_literals_[v])
  {
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const PersonBloodTypeCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonBloodTypeCode& PersonBloodTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonBloodTypeCode_literals_[v]);

    return *this;
  }


  // PersonIdentificationDocumentCode
  // 

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (value v)
  : ::xml_schema::token (_xsd_PersonIdentificationDocumentCode_literals_[v])
  {
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const PersonIdentificationDocumentCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonIdentificationDocumentCode& PersonIdentificationDocumentCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonIdentificationDocumentCode_literals_[v]);

    return *this;
  }


  // PersonLanguageSkillGeneralProficiencyCode
  // 

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (value v)
  : ::xml_schema::token (_xsd_PersonLanguageSkillGeneralProficiencyCode_literals_[v])
  {
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const PersonLanguageSkillGeneralProficiencyCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonLanguageSkillGeneralProficiencyCode& PersonLanguageSkillGeneralProficiencyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonLanguageSkillGeneralProficiencyCode_literals_[v]);

    return *this;
  }


  // PersonProfessingIndicatorCode
  // 

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_PersonProfessingIndicatorCode_literals_[v])
  {
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const PersonProfessingIndicatorCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonProfessingIndicatorCode& PersonProfessingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonProfessingIndicatorCode_literals_[v]);

    return *this;
  }


  // PersonStatusDutyStatusCode
  // 

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (value v)
  : ::xml_schema::token (_xsd_PersonStatusDutyStatusCode_literals_[v])
  {
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const PersonStatusDutyStatusCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonStatusDutyStatusCode& PersonStatusDutyStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonStatusDutyStatusCode_literals_[v]);

    return *this;
  }


  // PersonStatusPhysicalStatusCode
  // 

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (value v)
  : ::xml_schema::token (_xsd_PersonStatusPhysicalStatusCode_literals_[v])
  {
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const PersonStatusPhysicalStatusCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonStatusPhysicalStatusCode& PersonStatusPhysicalStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonStatusPhysicalStatusCode_literals_[v]);

    return *this;
  }


  // PersonStatusPhysicalStatusQualifierCode
  // 

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (value v)
  : ::xml_schema::token (_xsd_PersonStatusPhysicalStatusQualifierCode_literals_[v])
  {
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const PersonStatusPhysicalStatusQualifierCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonStatusPhysicalStatusQualifierCode& PersonStatusPhysicalStatusQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonStatusPhysicalStatusQualifierCode_literals_[v]);

    return *this;
  }


  // PersonStatusReserveIndicatorCode
  // 

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (value v)
  : ::xml_schema::token (_xsd_PersonStatusReserveIndicatorCode_literals_[v])
  {
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const PersonStatusReserveIndicatorCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonStatusReserveIndicatorCode& PersonStatusReserveIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonStatusReserveIndicatorCode_literals_[v]);

    return *this;
  }


  // PersonTypeCategoryCode
  // 

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_PersonTypeCategoryCode_literals_[v])
  {
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const PersonTypeCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonTypeCategoryCode& PersonTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonTypeCategoryCode_literals_[v]);

    return *this;
  }


  // PersonTypeRankCode
  // 

  PersonTypeRankCode::
  PersonTypeRankCode (value v)
  : ::xml_schema::token (_xsd_PersonTypeRankCode_literals_[v])
  {
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const PersonTypeRankCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonTypeRankCode& PersonTypeRankCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonTypeRankCode_literals_[v]);

    return *this;
  }


  // PersonTypeSubcategoryCode
  // 

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_PersonTypeSubcategoryCode_literals_[v])
  {
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const PersonTypeSubcategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PersonTypeSubcategoryCode& PersonTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PersonTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // PhysicalAddressCategoryCode
  // 

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (value v)
  : ::xml_schema::token (_xsd_PhysicalAddressCategoryCode_literals_[v])
  {
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const PhysicalAddressCategoryCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PhysicalAddressCategoryCode& PhysicalAddressCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PhysicalAddressCategoryCode_literals_[v]);

    return *this;
  }


  // PlanCategoryCode
  // 

  PlanCategoryCode::
  PlanCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanCategoryCode_literals_[v])
  {
  }

  PlanCategoryCode::
  PlanCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanCategoryCode::
  PlanCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanCategoryCode::
  PlanCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanCategoryCode::
  PlanCategoryCode (const PlanCategoryCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanCategoryCode& PlanCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderAssociationCategoryCode
  // 

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderAssociationCategoryCode_literals_[v])
  {
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const PlanOrderAssociationCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderAssociationCategoryCode& PlanOrderAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderCategoryCode
  // 

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderCategoryCode_literals_[v])
  {
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const PlanOrderCategoryCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderCategoryCode& PlanOrderCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderComponentContentCitationCategoryCode
  // 

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderComponentContentCitationCategoryCode_literals_[v])
  {
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const PlanOrderComponentContentCitationCategoryCode& v,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderComponentContentCitationCategoryCode& PlanOrderComponentContentCitationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderComponentContentCitationCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderComponentStructureCategoryCode
  // 

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderComponentStructureCategoryCode_literals_[v])
  {
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const PlanOrderComponentStructureCategoryCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderComponentStructureCategoryCode& PlanOrderComponentStructureCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderComponentStructureCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderDistributionAcknowledgementCode
  // 

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderDistributionAcknowledgementCode_literals_[v])
  {
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const PlanOrderDistributionAcknowledgementCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderDistributionAcknowledgementCode& PlanOrderDistributionAcknowledgementCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderDistributionAcknowledgementCode_literals_[v]);

    return *this;
  }


  // PlanOrderDistributionCategoryCode
  // 

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderDistributionCategoryCode_literals_[v])
  {
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const PlanOrderDistributionCategoryCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderDistributionCategoryCode& PlanOrderDistributionCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderDistributionCategoryCode_literals_[v]);

    return *this;
  }


  // PlanOrderHeaderContentTimeZoneCode
  // 

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (value v)
  : ::xml_schema::token (_xsd_PlanOrderHeaderContentTimeZoneCode_literals_[v])
  {
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const PlanOrderHeaderContentTimeZoneCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanOrderHeaderContentTimeZoneCode& PlanOrderHeaderContentTimeZoneCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanOrderHeaderContentTimeZoneCode_literals_[v]);

    return *this;
  }


  // PlanStatusDevelopmentStatusCode
  // 

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (value v)
  : ::xml_schema::token (_xsd_PlanStatusDevelopmentStatusCode_literals_[v])
  {
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const PlanStatusDevelopmentStatusCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanStatusDevelopmentStatusCode& PlanStatusDevelopmentStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanStatusDevelopmentStatusCode_literals_[v]);

    return *this;
  }


  // PlanStatusStateCode
  // 

  PlanStatusStateCode::
  PlanStatusStateCode (value v)
  : ::xml_schema::token (_xsd_PlanStatusStateCode_literals_[v])
  {
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const PlanStatusStateCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PlanStatusStateCode& PlanStatusStateCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PlanStatusStateCode_literals_[v]);

    return *this;
  }


  // PointCategoryCode
  // 

  PointCategoryCode::
  PointCategoryCode (value v)
  : ::xml_schema::token (_xsd_PointCategoryCode_literals_[v])
  {
  }

  PointCategoryCode::
  PointCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PointCategoryCode::
  PointCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PointCategoryCode::
  PointCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PointCategoryCode::
  PointCategoryCode (const PointCategoryCode& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PointCategoryCode& PointCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PointCategoryCode_literals_[v]);

    return *this;
  }


  // PrecipitationCategoryCode
  // 

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (value v)
  : ::xml_schema::token (_xsd_PrecipitationCategoryCode_literals_[v])
  {
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const PrecipitationCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PrecipitationCategoryCode& PrecipitationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PrecipitationCategoryCode_literals_[v]);

    return *this;
  }


  // PrivateSectorOrganisationTypeCategoryCode
  // 

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_PrivateSectorOrganisationTypeCategoryCode_literals_[v])
  {
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const PrivateSectorOrganisationTypeCategoryCode& v,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  PrivateSectorOrganisationTypeCategoryCode& PrivateSectorOrganisationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_PrivateSectorOrganisationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // QuayContainerHandlingTypeCode
  // 

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (value v)
  : ::xml_schema::token (_xsd_QuayContainerHandlingTypeCode_literals_[v])
  {
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const QuayContainerHandlingTypeCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  QuayContainerHandlingTypeCode& QuayContainerHandlingTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_QuayContainerHandlingTypeCode_literals_[v]);

    return *this;
  }


  // QuayCraneOffloadingTypeCode
  // 

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (value v)
  : ::xml_schema::token (_xsd_QuayCraneOffloadingTypeCode_literals_[v])
  {
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const QuayCraneOffloadingTypeCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  QuayCraneOffloadingTypeCode& QuayCraneOffloadingTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_QuayCraneOffloadingTypeCode_literals_[v]);

    return *this;
  }


  // QuayRailServedIndicatorCode
  // 

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (value v)
  : ::xml_schema::token (_xsd_QuayRailServedIndicatorCode_literals_[v])
  {
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const QuayRailServedIndicatorCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  QuayRailServedIndicatorCode& QuayRailServedIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_QuayRailServedIndicatorCode_literals_[v]);

    return *this;
  }


  // QuayStorageCode
  // 

  QuayStorageCode::
  QuayStorageCode (value v)
  : ::xml_schema::token (_xsd_QuayStorageCode_literals_[v])
  {
  }

  QuayStorageCode::
  QuayStorageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  QuayStorageCode::
  QuayStorageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  QuayStorageCode::
  QuayStorageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  QuayStorageCode::
  QuayStorageCode (const QuayStorageCode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  QuayStorageCode& QuayStorageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_QuayStorageCode_literals_[v]);

    return *this;
  }


  // RadioactiveEventCategoryCode
  // 

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (value v)
  : ::xml_schema::token (_xsd_RadioactiveEventCategoryCode_literals_[v])
  {
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const RadioactiveEventCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RadioactiveEventCategoryCode& RadioactiveEventCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RadioactiveEventCategoryCode_literals_[v]);

    return *this;
  }


  // RadioactiveEventDoseRateTrendCode
  // 

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (value v)
  : ::xml_schema::token (_xsd_RadioactiveEventDoseRateTrendCode_literals_[v])
  {
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const RadioactiveEventDoseRateTrendCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RadioactiveEventDoseRateTrendCode& RadioactiveEventDoseRateTrendCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RadioactiveEventDoseRateTrendCode_literals_[v]);

    return *this;
  }


  // RadioactiveEventRelativeDecayRateCode
  // 

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (value v)
  : ::xml_schema::token (_xsd_RadioactiveEventRelativeDecayRateCode_literals_[v])
  {
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const RadioactiveEventRelativeDecayRateCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RadioactiveEventRelativeDecayRateCode& RadioactiveEventRelativeDecayRateCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RadioactiveEventRelativeDecayRateCode_literals_[v]);

    return *this;
  }


  // RadioactiveMaterielTypeCategoryCode
  // 

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_RadioactiveMaterielTypeCategoryCode_literals_[v])
  {
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const RadioactiveMaterielTypeCategoryCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RadioactiveMaterielTypeCategoryCode& RadioactiveMaterielTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RadioactiveMaterielTypeCategoryCode_literals_[v]);

    return *this;
  }


  // RadioactiveMaterielTypePrimaryRadiationCode
  // 

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (value v)
  : ::xml_schema::token (_xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_[v])
  {
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const RadioactiveMaterielTypePrimaryRadiationCode& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RadioactiveMaterielTypePrimaryRadiationCode& RadioactiveMaterielTypePrimaryRadiationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_[v]);

    return *this;
  }


  // RailcarTypeCategoryCode
  // 

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_RailcarTypeCategoryCode_literals_[v])
  {
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const RailcarTypeCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailcarTypeCategoryCode& RailcarTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailcarTypeCategoryCode_literals_[v]);

    return *this;
  }


  // RailcarTypeSubcategoryCode
  // 

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_RailcarTypeSubcategoryCode_literals_[v])
  {
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const RailcarTypeSubcategoryCode& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailcarTypeSubcategoryCode& RailcarTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailcarTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // RailwaySignalSystemCode
  // 

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (value v)
  : ::xml_schema::token (_xsd_RailwaySignalSystemCode_literals_[v])
  {
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const RailwaySignalSystemCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailwaySignalSystemCode& RailwaySignalSystemCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailwaySignalSystemCode_literals_[v]);

    return *this;
  }


  // RailwaySignalSystemEfficiencyCode
  // 

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (value v)
  : ::xml_schema::token (_xsd_RailwaySignalSystemEfficiencyCode_literals_[v])
  {
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const RailwaySignalSystemEfficiencyCode& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailwaySignalSystemEfficiencyCode& RailwaySignalSystemEfficiencyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailwaySignalSystemEfficiencyCode_literals_[v]);

    return *this;
  }


  // RailwayTrackGaugeCode
  // 

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (value v)
  : ::xml_schema::token (_xsd_RailwayTrackGaugeCode_literals_[v])
  {
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const RailwayTrackGaugeCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailwayTrackGaugeCode& RailwayTrackGaugeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailwayTrackGaugeCode_literals_[v]);

    return *this;
  }


  // RailwayTractionSystemCode
  // 

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (value v)
  : ::xml_schema::token (_xsd_RailwayTractionSystemCode_literals_[v])
  {
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const RailwayTractionSystemCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RailwayTractionSystemCode& RailwayTractionSystemCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RailwayTractionSystemCode_literals_[v]);

    return *this;
  }


  // CitationAssociationCategoryCode
  // 

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (value v)
  : ::xml_schema::token (_xsd_CitationAssociationCategoryCode_literals_[v])
  {
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const CitationAssociationCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationAssociationCategoryCode& CitationAssociationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationAssociationCategoryCode_literals_[v]);

    return *this;
  }


  // CitationContentCategoryCode
  // 

  CitationContentCategoryCode::
  CitationContentCategoryCode (value v)
  : ::xml_schema::token (_xsd_CitationContentCategoryCode_literals_[v])
  {
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const CitationContentCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationContentCategoryCode& CitationContentCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationContentCategoryCode_literals_[v]);

    return *this;
  }


  // CitationLifecycleCode
  // 

  CitationLifecycleCode::
  CitationLifecycleCode (value v)
  : ::xml_schema::token (_xsd_CitationLifecycleCode_literals_[v])
  {
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const CitationLifecycleCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationLifecycleCode& CitationLifecycleCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationLifecycleCode_literals_[v]);

    return *this;
  }


  // CitationMediumTypeCode
  // 

  CitationMediumTypeCode::
  CitationMediumTypeCode (value v)
  : ::xml_schema::token (_xsd_CitationMediumTypeCode_literals_[v])
  {
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const CitationMediumTypeCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationMediumTypeCode& CitationMediumTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationMediumTypeCode_literals_[v]);

    return *this;
  }


  // CitationTransmittalTypeCode
  // 

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (value v)
  : ::xml_schema::token (_xsd_CitationTransmittalTypeCode_literals_[v])
  {
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const CitationTransmittalTypeCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationTransmittalTypeCode& CitationTransmittalTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationTransmittalTypeCode_literals_[v]);

    return *this;
  }


  // CitationVerificationCode
  // 

  CitationVerificationCode::
  CitationVerificationCode (value v)
  : ::xml_schema::token (_xsd_CitationVerificationCode_literals_[v])
  {
  }

  CitationVerificationCode::
  CitationVerificationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  CitationVerificationCode::
  CitationVerificationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  CitationVerificationCode::
  CitationVerificationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  CitationVerificationCode::
  CitationVerificationCode (const CitationVerificationCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  CitationVerificationCode& CitationVerificationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_CitationVerificationCode_literals_[v]);

    return *this;
  }


  // RelativeCoordinateSystemCitationCategoryCode
  // 

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (value v)
  : ::xml_schema::token (_xsd_RelativeCoordinateSystemCitationCategoryCode_literals_[v])
  {
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const RelativeCoordinateSystemCitationCategoryCode& v,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RelativeCoordinateSystemCitationCategoryCode& RelativeCoordinateSystemCitationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RelativeCoordinateSystemCitationCategoryCode_literals_[v]);

    return *this;
  }


  // ReleaseCategoryCode
  // 

  ReleaseCategoryCode::
  ReleaseCategoryCode (value v)
  : ::xml_schema::token (_xsd_ReleaseCategoryCode_literals_[v])
  {
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ReleaseCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReleaseCategoryCode& ReleaseCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReleaseCategoryCode_literals_[v]);

    return *this;
  }


  // ReportingDataAccuracyCode
  // 

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataAccuracyCode_literals_[v])
  {
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ReportingDataAccuracyCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataAccuracyCode& ReportingDataAccuracyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataAccuracyCode_literals_[v]);

    return *this;
  }


  // ReportingDataCategoryCode
  // 

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataCategoryCode_literals_[v])
  {
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ReportingDataCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataCategoryCode& ReportingDataCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataCategoryCode_literals_[v]);

    return *this;
  }


  // ReportingDataCountingIndicatorCode
  // 

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataCountingIndicatorCode_literals_[v])
  {
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ReportingDataCountingIndicatorCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataCountingIndicatorCode& ReportingDataCountingIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataCountingIndicatorCode_literals_[v]);

    return *this;
  }


  // ReportingDataCredibilityCode
  // 

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataCredibilityCode_literals_[v])
  {
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ReportingDataCredibilityCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataCredibilityCode& ReportingDataCredibilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataCredibilityCode_literals_[v]);

    return *this;
  }


  // ReportingDataEntityCategoryCode
  // 

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataEntityCategoryCode_literals_[v])
  {
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ReportingDataEntityCategoryCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataEntityCategoryCode& ReportingDataEntityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataEntityCategoryCode_literals_[v]);

    return *this;
  }


  // ReportingDataRealDataExerciseUseOnlyCode
  // 

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_[v])
  {
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ReportingDataRealDataExerciseUseOnlyCode& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataRealDataExerciseUseOnlyCode& ReportingDataRealDataExerciseUseOnlyCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_[v]);

    return *this;
  }


  // ReportingDataReliabilityCode
  // 

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataReliabilityCode_literals_[v])
  {
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ReportingDataReliabilityCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataReliabilityCode& ReportingDataReliabilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataReliabilityCode_literals_[v]);

    return *this;
  }


  // ReportingDataSourceTypeCode
  // 

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataSourceTypeCode_literals_[v])
  {
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ReportingDataSourceTypeCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataSourceTypeCode& ReportingDataSourceTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataSourceTypeCode_literals_[v]);

    return *this;
  }


  // ReportingDataTimingCategoryCode
  // 

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (value v)
  : ::xml_schema::token (_xsd_ReportingDataTimingCategoryCode_literals_[v])
  {
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ReportingDataTimingCategoryCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  ReportingDataTimingCategoryCode& ReportingDataTimingCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_ReportingDataTimingCategoryCode_literals_[v]);

    return *this;
  }


  // RequestAnswerCategoryCode
  // 

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (value v)
  : ::xml_schema::token (_xsd_RequestAnswerCategoryCode_literals_[v])
  {
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const RequestAnswerCategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RequestAnswerCategoryCode& RequestAnswerCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RequestAnswerCategoryCode_literals_[v]);

    return *this;
  }


  // RequestCategoryCode
  // 

  RequestCategoryCode::
  RequestCategoryCode (value v)
  : ::xml_schema::token (_xsd_RequestCategoryCode_literals_[v])
  {
  }

  RequestCategoryCode::
  RequestCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RequestCategoryCode::
  RequestCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RequestCategoryCode::
  RequestCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RequestCategoryCode::
  RequestCategoryCode (const RequestCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RequestCategoryCode& RequestCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RequestCategoryCode_literals_[v]);

    return *this;
  }


  // RequestImmediateInterestIndicatorCode
  // 

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (value v)
  : ::xml_schema::token (_xsd_RequestImmediateInterestIndicatorCode_literals_[v])
  {
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const RequestImmediateInterestIndicatorCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RequestImmediateInterestIndicatorCode& RequestImmediateInterestIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RequestImmediateInterestIndicatorCode_literals_[v]);

    return *this;
  }


  // RoadCategoryCode
  // 

  RoadCategoryCode::
  RoadCategoryCode (value v)
  : ::xml_schema::token (_xsd_RoadCategoryCode_literals_[v])
  {
  }

  RoadCategoryCode::
  RoadCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RoadCategoryCode::
  RoadCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RoadCategoryCode::
  RoadCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RoadCategoryCode::
  RoadCategoryCode (const RoadCategoryCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RoadCategoryCode& RoadCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RoadCategoryCode_literals_[v]);

    return *this;
  }


  // RoadQualityCode
  // 

  RoadQualityCode::
  RoadQualityCode (value v)
  : ::xml_schema::token (_xsd_RoadQualityCode_literals_[v])
  {
  }

  RoadQualityCode::
  RoadQualityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RoadQualityCode::
  RoadQualityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RoadQualityCode::
  RoadQualityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RoadQualityCode::
  RoadQualityCode (const RoadQualityCode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RoadQualityCode& RoadQualityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RoadQualityCode_literals_[v]);

    return *this;
  }


  // RoadShoulderWidthCode
  // 

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (value v)
  : ::xml_schema::token (_xsd_RoadShoulderWidthCode_literals_[v])
  {
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const RoadShoulderWidthCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RoadShoulderWidthCode& RoadShoulderWidthCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RoadShoulderWidthCode_literals_[v]);

    return *this;
  }


  // RoadWeatherConditionCategoryCode
  // 

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (value v)
  : ::xml_schema::token (_xsd_RoadWeatherConditionCategoryCode_literals_[v])
  {
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const RoadWeatherConditionCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RoadWeatherConditionCategoryCode& RoadWeatherConditionCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RoadWeatherConditionCategoryCode_literals_[v]);

    return *this;
  }


  // RouteDirectionUsageCode
  // 

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (value v)
  : ::xml_schema::token (_xsd_RouteDirectionUsageCode_literals_[v])
  {
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const RouteDirectionUsageCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RouteDirectionUsageCode& RouteDirectionUsageCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RouteDirectionUsageCode_literals_[v]);

    return *this;
  }


  // RouteSegmentCategoryCode
  // 

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (value v)
  : ::xml_schema::token (_xsd_RouteSegmentCategoryCode_literals_[v])
  {
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const RouteSegmentCategoryCode& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RouteSegmentCategoryCode& RouteSegmentCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RouteSegmentCategoryCode_literals_[v]);

    return *this;
  }


  // RouteTypeCategoryCode
  // 

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_RouteTypeCategoryCode_literals_[v])
  {
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const RouteTypeCategoryCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RouteTypeCategoryCode& RouteTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RouteTypeCategoryCode_literals_[v]);

    return *this;
  }


  // RunwayLightingPresenceIndicatorCode
  // 

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (value v)
  : ::xml_schema::token (_xsd_RunwayLightingPresenceIndicatorCode_literals_[v])
  {
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const RunwayLightingPresenceIndicatorCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RunwayLightingPresenceIndicatorCode& RunwayLightingPresenceIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RunwayLightingPresenceIndicatorCode_literals_[v]);

    return *this;
  }


  // RunwayPavementEvaluationMethodCode
  // 

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (value v)
  : ::xml_schema::token (_xsd_RunwayPavementEvaluationMethodCode_literals_[v])
  {
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const RunwayPavementEvaluationMethodCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RunwayPavementEvaluationMethodCode& RunwayPavementEvaluationMethodCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RunwayPavementEvaluationMethodCode_literals_[v]);

    return *this;
  }


  // RunwayPavementMaximumTyrePressureCode
  // 

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (value v)
  : ::xml_schema::token (_xsd_RunwayPavementMaximumTyrePressureCode_literals_[v])
  {
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const RunwayPavementMaximumTyrePressureCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RunwayPavementMaximumTyrePressureCode& RunwayPavementMaximumTyrePressureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RunwayPavementMaximumTyrePressureCode_literals_[v]);

    return *this;
  }


  // RunwayPavementSubgradeCategoryCode
  // 

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (value v)
  : ::xml_schema::token (_xsd_RunwayPavementSubgradeCategoryCode_literals_[v])
  {
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const RunwayPavementSubgradeCategoryCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RunwayPavementSubgradeCategoryCode& RunwayPavementSubgradeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RunwayPavementSubgradeCategoryCode_literals_[v]);

    return *this;
  }


  // RunwayPavementTypeCode
  // 

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (value v)
  : ::xml_schema::token (_xsd_RunwayPavementTypeCode_literals_[v])
  {
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const RunwayPavementTypeCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  RunwayPavementTypeCode& RunwayPavementTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_RunwayPavementTypeCode_literals_[v]);

    return *this;
  }


  // SecurityClassificationLevelCode
  // 

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (value v)
  : ::xml_schema::token (_xsd_SecurityClassificationLevelCode_literals_[v])
  {
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const SecurityClassificationLevelCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SecurityClassificationLevelCode& SecurityClassificationLevelCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SecurityClassificationLevelCode_literals_[v]);

    return *this;
  }


  // SolidSurfaceStatusCode
  // 

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (value v)
  : ::xml_schema::token (_xsd_SolidSurfaceStatusCode_literals_[v])
  {
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const SolidSurfaceStatusCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SolidSurfaceStatusCode& SolidSurfaceStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SolidSurfaceStatusCode_literals_[v]);

    return *this;
  }


  // SolidSurfaceStatusSurfaceConditionCode
  // 

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (value v)
  : ::xml_schema::token (_xsd_SolidSurfaceStatusSurfaceConditionCode_literals_[v])
  {
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const SolidSurfaceStatusSurfaceConditionCode& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SolidSurfaceStatusSurfaceConditionCode& SolidSurfaceStatusSurfaceConditionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SolidSurfaceStatusSurfaceConditionCode_literals_[v]);

    return *this;
  }


  // SolidSurfaceStatusSurfaceFirmnessCode
  // 

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (value v)
  : ::xml_schema::token (_xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_[v])
  {
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const SolidSurfaceStatusSurfaceFirmnessCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SolidSurfaceStatusSurfaceFirmnessCode& SolidSurfaceStatusSurfaceFirmnessCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_[v]);

    return *this;
  }


  // SpeedPrecisionCode
  // 

  SpeedPrecisionCode::
  SpeedPrecisionCode (value v)
  : ::xml_schema::token (_xsd_SpeedPrecisionCode_literals_[v])
  {
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const SpeedPrecisionCode& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SpeedPrecisionCode& SpeedPrecisionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SpeedPrecisionCode_literals_[v]);

    return *this;
  }


  // StorageCapabilityConditionCode
  // 

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (value v)
  : ::xml_schema::token (_xsd_StorageCapabilityConditionCode_literals_[v])
  {
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const StorageCapabilityConditionCode& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  StorageCapabilityConditionCode& StorageCapabilityConditionCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_StorageCapabilityConditionCode_literals_[v]);

    return *this;
  }


  // StorageCapabilityDescriptorCode
  // 

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_StorageCapabilityDescriptorCode_literals_[v])
  {
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const StorageCapabilityDescriptorCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  StorageCapabilityDescriptorCode& StorageCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_StorageCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // SubsurfaceVesselTypeCategoryCode
  // 

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_SubsurfaceVesselTypeCategoryCode_literals_[v])
  {
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const SubsurfaceVesselTypeCategoryCode& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SubsurfaceVesselTypeCategoryCode& SubsurfaceVesselTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SubsurfaceVesselTypeCategoryCode_literals_[v]);

    return *this;
  }


  // SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode
  // 

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (value v)
  : ::xml_schema::token (_xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_[v])
  {
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& v,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_[v]);

    return *this;
  }


  // SupportCapabilityCategoryCode
  // 

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_SupportCapabilityCategoryCode_literals_[v])
  {
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const SupportCapabilityCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SupportCapabilityCategoryCode& SupportCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SupportCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // SupportCapabilityDescriptorCode
  // 

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_SupportCapabilityDescriptorCode_literals_[v])
  {
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const SupportCapabilityDescriptorCode& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SupportCapabilityDescriptorCode& SupportCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SupportCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // SurfaceCategoryCode
  // 

  SurfaceCategoryCode::
  SurfaceCategoryCode (value v)
  : ::xml_schema::token (_xsd_SurfaceCategoryCode_literals_[v])
  {
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const SurfaceCategoryCode& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SurfaceCategoryCode& SurfaceCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SurfaceCategoryCode_literals_[v]);

    return *this;
  }


  // SurfaceVesselTypeCategoryCode
  // 

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_SurfaceVesselTypeCategoryCode_literals_[v])
  {
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const SurfaceVesselTypeCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SurfaceVesselTypeCategoryCode& SurfaceVesselTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SurfaceVesselTypeCategoryCode_literals_[v]);

    return *this;
  }


  // SurveillanceCapabilityCategoryCode
  // 

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_SurveillanceCapabilityCategoryCode_literals_[v])
  {
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const SurveillanceCapabilityCategoryCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SurveillanceCapabilityCategoryCode& SurveillanceCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SurveillanceCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // SurveillanceCapabilityDescriptorCode
  // 

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_SurveillanceCapabilityDescriptorCode_literals_[v])
  {
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const SurveillanceCapabilityDescriptorCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  SurveillanceCapabilityDescriptorCode& SurveillanceCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_SurveillanceCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // TargetEngagementAuthorityCode
  // 

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (value v)
  : ::xml_schema::token (_xsd_TargetEngagementAuthorityCode_literals_[v])
  {
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const TargetEngagementAuthorityCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  TargetEngagementAuthorityCode& TargetEngagementAuthorityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_TargetEngagementAuthorityCode_literals_[v]);

    return *this;
  }


  // TargetPersonnelProtectionCategoryCode
  // 

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (value v)
  : ::xml_schema::token (_xsd_TargetPersonnelProtectionCategoryCode_literals_[v])
  {
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const TargetPersonnelProtectionCategoryCode& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  TargetPersonnelProtectionCategoryCode& TargetPersonnelProtectionCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_TargetPersonnelProtectionCategoryCode_literals_[v]);

    return *this;
  }


  // TaskFormationTypeCategoryCode
  // 

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_TaskFormationTypeCategoryCode_literals_[v])
  {
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const TaskFormationTypeCategoryCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  TaskFormationTypeCategoryCode& TaskFormationTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_TaskFormationTypeCategoryCode_literals_[v]);

    return *this;
  }


  // TransmissionCapabilityCategoryCode
  // 

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_TransmissionCapabilityCategoryCode_literals_[v])
  {
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const TransmissionCapabilityCategoryCode& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  TransmissionCapabilityCategoryCode& TransmissionCapabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_TransmissionCapabilityCategoryCode_literals_[v]);

    return *this;
  }


  // TransmissionCapabilityDescriptorCode
  // 

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (value v)
  : ::xml_schema::token (_xsd_TransmissionCapabilityDescriptorCode_literals_[v])
  {
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const TransmissionCapabilityDescriptorCode& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  TransmissionCapabilityDescriptorCode& TransmissionCapabilityDescriptorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_TransmissionCapabilityDescriptorCode_literals_[v]);

    return *this;
  }


  // UnitTypeArmCategoryCode
  // 

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeArmCategoryCode_literals_[v])
  {
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const UnitTypeArmCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeArmCategoryCode& UnitTypeArmCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeArmCategoryCode_literals_[v]);

    return *this;
  }


  // UnitTypeArmSpecialisationCode
  // 

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeArmSpecialisationCode_literals_[v])
  {
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const UnitTypeArmSpecialisationCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeArmSpecialisationCode& UnitTypeArmSpecialisationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeArmSpecialisationCode_literals_[v]);

    return *this;
  }


  // UnitTypeCategoryCode
  // 

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeCategoryCode_literals_[v])
  {
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const UnitTypeCategoryCode& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeCategoryCode& UnitTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeCategoryCode_literals_[v]);

    return *this;
  }


  // UnitTypeGeneralMobilityCode
  // 

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeGeneralMobilityCode_literals_[v])
  {
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const UnitTypeGeneralMobilityCode& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeGeneralMobilityCode& UnitTypeGeneralMobilityCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeGeneralMobilityCode_literals_[v]);

    return *this;
  }


  // UnitTypeQualifierCode
  // 

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeQualifierCode_literals_[v])
  {
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const UnitTypeQualifierCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeQualifierCode& UnitTypeQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeQualifierCode_literals_[v]);

    return *this;
  }


  // UnitTypeSizeCode
  // 

  UnitTypeSizeCode::
  UnitTypeSizeCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeSizeCode_literals_[v])
  {
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const UnitTypeSizeCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeSizeCode& UnitTypeSizeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeSizeCode_literals_[v]);

    return *this;
  }


  // UnitTypeSupplementarySpecialisationCode
  // 

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (value v)
  : ::xml_schema::token (_xsd_UnitTypeSupplementarySpecialisationCode_literals_[v])
  {
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const UnitTypeSupplementarySpecialisationCode& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UnitTypeSupplementarySpecialisationCode& UnitTypeSupplementarySpecialisationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UnitTypeSupplementarySpecialisationCode_literals_[v]);

    return *this;
  }


  // UsageStatusCode
  // 

  UsageStatusCode::
  UsageStatusCode (value v)
  : ::xml_schema::token (_xsd_UsageStatusCode_literals_[v])
  {
  }

  UsageStatusCode::
  UsageStatusCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UsageStatusCode::
  UsageStatusCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UsageStatusCode::
  UsageStatusCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UsageStatusCode::
  UsageStatusCode (const UsageStatusCode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UsageStatusCode& UsageStatusCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UsageStatusCode_literals_[v]);

    return *this;
  }


  // UxoStatusExposureCode
  // 

  UxoStatusExposureCode::
  UxoStatusExposureCode (value v)
  : ::xml_schema::token (_xsd_UxoStatusExposureCode_literals_[v])
  {
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const UxoStatusExposureCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UxoStatusExposureCode& UxoStatusExposureCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UxoStatusExposureCode_literals_[v]);

    return *this;
  }


  // UxoStatusQualifierCode
  // 

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (value v)
  : ::xml_schema::token (_xsd_UxoStatusQualifierCode_literals_[v])
  {
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const UxoStatusQualifierCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  UxoStatusQualifierCode& UxoStatusQualifierCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_UxoStatusQualifierCode_literals_[v]);

    return *this;
  }


  // VegetationCategoryCode
  // 

  VegetationCategoryCode::
  VegetationCategoryCode (value v)
  : ::xml_schema::token (_xsd_VegetationCategoryCode_literals_[v])
  {
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const VegetationCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VegetationCategoryCode& VegetationCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VegetationCategoryCode_literals_[v]);

    return *this;
  }


  // VegetationSubcategoryCode
  // 

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_VegetationSubcategoryCode_literals_[v])
  {
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const VegetationSubcategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VegetationSubcategoryCode& VegetationSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VegetationSubcategoryCode_literals_[v]);

    return *this;
  }


  // VehicleTypeCategoryCode
  // 

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_VehicleTypeCategoryCode_literals_[v])
  {
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const VehicleTypeCategoryCode& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VehicleTypeCategoryCode& VehicleTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VehicleTypeCategoryCode_literals_[v]);

    return *this;
  }


  // VerticalDistanceCitationCode
  // 

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (value v)
  : ::xml_schema::token (_xsd_VerticalDistanceCitationCode_literals_[v])
  {
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const VerticalDistanceCitationCode& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VerticalDistanceCitationCode& VerticalDistanceCitationCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VerticalDistanceCitationCode_literals_[v]);

    return *this;
  }


  // VesselTypeCategoryCode
  // 

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_VesselTypeCategoryCode_literals_[v])
  {
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const VesselTypeCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VesselTypeCategoryCode& VesselTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VesselTypeCategoryCode_literals_[v]);

    return *this;
  }


  // VesselTypePropulsionTypeCode
  // 

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (value v)
  : ::xml_schema::token (_xsd_VesselTypePropulsionTypeCode_literals_[v])
  {
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const VesselTypePropulsionTypeCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VesselTypePropulsionTypeCode& VesselTypePropulsionTypeCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VesselTypePropulsionTypeCode_literals_[v]);

    return *this;
  }


  // VisibilityCategoryCode
  // 

  VisibilityCategoryCode::
  VisibilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_VisibilityCategoryCode_literals_[v])
  {
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const VisibilityCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  VisibilityCategoryCode& VisibilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_VisibilityCategoryCode_literals_[v]);

    return *this;
  }


  // WeaponTypeCategoryCode
  // 

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (value v)
  : ::xml_schema::token (_xsd_WeaponTypeCategoryCode_literals_[v])
  {
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const WeaponTypeCategoryCode& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WeaponTypeCategoryCode& WeaponTypeCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WeaponTypeCategoryCode_literals_[v]);

    return *this;
  }


  // WeaponTypeFireGuidanceIndicatorCode
  // 

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (value v)
  : ::xml_schema::token (_xsd_WeaponTypeFireGuidanceIndicatorCode_literals_[v])
  {
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const WeaponTypeFireGuidanceIndicatorCode& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WeaponTypeFireGuidanceIndicatorCode& WeaponTypeFireGuidanceIndicatorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WeaponTypeFireGuidanceIndicatorCode_literals_[v]);

    return *this;
  }


  // WeaponTypeSubcategoryCode
  // 

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (value v)
  : ::xml_schema::token (_xsd_WeaponTypeSubcategoryCode_literals_[v])
  {
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const WeaponTypeSubcategoryCode& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WeaponTypeSubcategoryCode& WeaponTypeSubcategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WeaponTypeSubcategoryCode_literals_[v]);

    return *this;
  }


  // WindAirStabilityCategoryCode
  // 

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (value v)
  : ::xml_schema::token (_xsd_WindAirStabilityCategoryCode_literals_[v])
  {
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const WindAirStabilityCategoryCode& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WindAirStabilityCategoryCode& WindAirStabilityCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WindAirStabilityCategoryCode_literals_[v]);

    return *this;
  }


  // WindAltitudeLayerCode
  // 

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (value v)
  : ::xml_schema::token (_xsd_WindAltitudeLayerCode_literals_[v])
  {
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const WindAltitudeLayerCode& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WindAltitudeLayerCode& WindAltitudeLayerCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WindAltitudeLayerCode_literals_[v]);

    return *this;
  }


  // WindCategoryCode
  // 

  WindCategoryCode::
  WindCategoryCode (value v)
  : ::xml_schema::token (_xsd_WindCategoryCode_literals_[v])
  {
  }

  WindCategoryCode::
  WindCategoryCode (const char* v)
  : ::xml_schema::token (v)
  {
  }

  WindCategoryCode::
  WindCategoryCode (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  WindCategoryCode::
  WindCategoryCode (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  WindCategoryCode::
  WindCategoryCode (const WindCategoryCode& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  WindCategoryCode& WindCategoryCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_WindCategoryCode_literals_[v]);

    return *this;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oo_2_0
{
  // AbsolutePointCategoryCode
  //

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AbsolutePointCategoryCode_convert ();
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AbsolutePointCategoryCode_convert ();
  }

  AbsolutePointCategoryCode::
  AbsolutePointCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AbsolutePointCategoryCode_convert ();
  }

  AbsolutePointCategoryCode* AbsolutePointCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AbsolutePointCategoryCode (*this, f, c);
  }

  AbsolutePointCategoryCode::value AbsolutePointCategoryCode::
  _xsd_AbsolutePointCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AbsolutePointCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AbsolutePointCategoryCode_indexes_,
                      _xsd_AbsolutePointCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AbsolutePointCategoryCode_indexes_ + 2 || _xsd_AbsolutePointCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AbsolutePointCategoryCode::
  _xsd_AbsolutePointCategoryCode_literals_[2] =
  {
    "CARTPT",
    "GEOGPT"
  };

  const AbsolutePointCategoryCode::value AbsolutePointCategoryCode::
  _xsd_AbsolutePointCategoryCode_indexes_[2] =
  {
    ::oo_2_0::AbsolutePointCategoryCode::CARTPT,
    ::oo_2_0::AbsolutePointCategoryCode::GEOGPT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbsolutePointCategoryCode >
  _xsd_AbsolutePointCategoryCode_type_factory_init (
    "AbsolutePointCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionAircraftEmploymentApproachOffsetCode
  //

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionAircraftEmploymentApproachOffsetCode_convert ();
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionAircraftEmploymentApproachOffsetCode_convert ();
  }

  ActionAircraftEmploymentApproachOffsetCode::
  ActionAircraftEmploymentApproachOffsetCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionAircraftEmploymentApproachOffsetCode_convert ();
  }

  ActionAircraftEmploymentApproachOffsetCode* ActionAircraftEmploymentApproachOffsetCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionAircraftEmploymentApproachOffsetCode (*this, f, c);
  }

  ActionAircraftEmploymentApproachOffsetCode::value ActionAircraftEmploymentApproachOffsetCode::
  _xsd_ActionAircraftEmploymentApproachOffsetCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionAircraftEmploymentApproachOffsetCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionAircraftEmploymentApproachOffsetCode_indexes_,
                      _xsd_ActionAircraftEmploymentApproachOffsetCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionAircraftEmploymentApproachOffsetCode_indexes_ + 3 || _xsd_ActionAircraftEmploymentApproachOffsetCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionAircraftEmploymentApproachOffsetCode::
  _xsd_ActionAircraftEmploymentApproachOffsetCode_literals_[3] =
  {
    "LEFT",
    "RIGHT",
    "RL"
  };

  const ActionAircraftEmploymentApproachOffsetCode::value ActionAircraftEmploymentApproachOffsetCode::
  _xsd_ActionAircraftEmploymentApproachOffsetCode_indexes_[3] =
  {
    ::oo_2_0::ActionAircraftEmploymentApproachOffsetCode::LEFT,
    ::oo_2_0::ActionAircraftEmploymentApproachOffsetCode::RIGHT,
    ::oo_2_0::ActionAircraftEmploymentApproachOffsetCode::RL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionAircraftEmploymentApproachOffsetCode >
  _xsd_ActionAircraftEmploymentApproachOffsetCode_type_factory_init (
    "ActionAircraftEmploymentApproachOffsetCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionAircraftEmploymentCrewCompositionCode
  //

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionAircraftEmploymentCrewCompositionCode_convert ();
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionAircraftEmploymentCrewCompositionCode_convert ();
  }

  ActionAircraftEmploymentCrewCompositionCode::
  ActionAircraftEmploymentCrewCompositionCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionAircraftEmploymentCrewCompositionCode_convert ();
  }

  ActionAircraftEmploymentCrewCompositionCode* ActionAircraftEmploymentCrewCompositionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionAircraftEmploymentCrewCompositionCode (*this, f, c);
  }

  ActionAircraftEmploymentCrewCompositionCode::value ActionAircraftEmploymentCrewCompositionCode::
  _xsd_ActionAircraftEmploymentCrewCompositionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionAircraftEmploymentCrewCompositionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionAircraftEmploymentCrewCompositionCode_indexes_,
                      _xsd_ActionAircraftEmploymentCrewCompositionCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionAircraftEmploymentCrewCompositionCode_indexes_ + 3 || _xsd_ActionAircraftEmploymentCrewCompositionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionAircraftEmploymentCrewCompositionCode::
  _xsd_ActionAircraftEmploymentCrewCompositionCode_literals_[3] =
  {
    "AUGMNT",
    "BASIC",
    "COMRCL"
  };

  const ActionAircraftEmploymentCrewCompositionCode::value ActionAircraftEmploymentCrewCompositionCode::
  _xsd_ActionAircraftEmploymentCrewCompositionCode_indexes_[3] =
  {
    ::oo_2_0::ActionAircraftEmploymentCrewCompositionCode::AUGMNT,
    ::oo_2_0::ActionAircraftEmploymentCrewCompositionCode::BASIC,
    ::oo_2_0::ActionAircraftEmploymentCrewCompositionCode::COMRCL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionAircraftEmploymentCrewCompositionCode >
  _xsd_ActionAircraftEmploymentCrewCompositionCode_type_factory_init (
    "ActionAircraftEmploymentCrewCompositionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionAircraftEmploymentDeplanementMethodCode
  //

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionAircraftEmploymentDeplanementMethodCode_convert ();
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionAircraftEmploymentDeplanementMethodCode_convert ();
  }

  ActionAircraftEmploymentDeplanementMethodCode::
  ActionAircraftEmploymentDeplanementMethodCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionAircraftEmploymentDeplanementMethodCode_convert ();
  }

  ActionAircraftEmploymentDeplanementMethodCode* ActionAircraftEmploymentDeplanementMethodCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionAircraftEmploymentDeplanementMethodCode (*this, f, c);
  }

  ActionAircraftEmploymentDeplanementMethodCode::value ActionAircraftEmploymentDeplanementMethodCode::
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionAircraftEmploymentDeplanementMethodCode_indexes_,
                      _xsd_ActionAircraftEmploymentDeplanementMethodCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_ActionAircraftEmploymentDeplanementMethodCode_indexes_ + 13 || _xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionAircraftEmploymentDeplanementMethodCode::
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_[13] =
  {
    "ABSEIL",
    "GRAVTY",
    "HOVER",
    "LAND",
    "PARAUT",
    "PARCHT",
    "PAREXT",
    "PARGLD",
    "PARLAE",
    "PARMAN",
    "ROPE",
    "WEDGE",
    "WINCH"
  };

  const ActionAircraftEmploymentDeplanementMethodCode::value ActionAircraftEmploymentDeplanementMethodCode::
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_indexes_[13] =
  {
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::ABSEIL,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::GRAVTY,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::HOVER,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::LAND,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PARAUT,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PARCHT,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PAREXT,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PARGLD,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PARLAE,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::PARMAN,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::ROPE,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::WEDGE,
    ::oo_2_0::ActionAircraftEmploymentDeplanementMethodCode::WINCH
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionAircraftEmploymentDeplanementMethodCode >
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_type_factory_init (
    "ActionAircraftEmploymentDeplanementMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionAircraftEmploymentGeneralRoleCode
  //

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionAircraftEmploymentGeneralRoleCode_convert ();
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionAircraftEmploymentGeneralRoleCode_convert ();
  }

  ActionAircraftEmploymentGeneralRoleCode::
  ActionAircraftEmploymentGeneralRoleCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionAircraftEmploymentGeneralRoleCode_convert ();
  }

  ActionAircraftEmploymentGeneralRoleCode* ActionAircraftEmploymentGeneralRoleCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionAircraftEmploymentGeneralRoleCode (*this, f, c);
  }

  ActionAircraftEmploymentGeneralRoleCode::value ActionAircraftEmploymentGeneralRoleCode::
  _xsd_ActionAircraftEmploymentGeneralRoleCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionAircraftEmploymentGeneralRoleCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionAircraftEmploymentGeneralRoleCode_indexes_,
                      _xsd_ActionAircraftEmploymentGeneralRoleCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ActionAircraftEmploymentGeneralRoleCode_indexes_ + 6 || _xsd_ActionAircraftEmploymentGeneralRoleCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionAircraftEmploymentGeneralRoleCode::
  _xsd_ActionAircraftEmploymentGeneralRoleCode_literals_[6] =
  {
    "DEF",
    "NKN",
    "NOS",
    "OFF",
    "SUPPRT",
    "SWING"
  };

  const ActionAircraftEmploymentGeneralRoleCode::value ActionAircraftEmploymentGeneralRoleCode::
  _xsd_ActionAircraftEmploymentGeneralRoleCode_indexes_[6] =
  {
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::DEF,
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::NKN,
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::NOS,
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::OFF,
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::SUPPRT,
    ::oo_2_0::ActionAircraftEmploymentGeneralRoleCode::SWING
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionAircraftEmploymentGeneralRoleCode >
  _xsd_ActionAircraftEmploymentGeneralRoleCode_type_factory_init (
    "ActionAircraftEmploymentGeneralRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionAircraftEmploymentInflightReportRequirementIndicatorCode
  //

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_convert ();
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ::xercesc::DOMAttr& a,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_convert ();
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  ActionAircraftEmploymentInflightReportRequirementIndicatorCode (const ::std::string& s,
                                                                  const ::xercesc::DOMElement* e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_convert ();
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode* ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionAircraftEmploymentInflightReportRequirementIndicatorCode (*this, f, c);
  }

  ActionAircraftEmploymentInflightReportRequirementIndicatorCode::value ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_indexes_,
                      _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_indexes_ + 2 || _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ActionAircraftEmploymentInflightReportRequirementIndicatorCode::value ActionAircraftEmploymentInflightReportRequirementIndicatorCode::
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ActionAircraftEmploymentInflightReportRequirementIndicatorCode::NO,
    ::oo_2_0::ActionAircraftEmploymentInflightReportRequirementIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionAircraftEmploymentInflightReportRequirementIndicatorCode >
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_type_factory_init (
    "ActionAircraftEmploymentInflightReportRequirementIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionCategoryCode
  //

  ActionCategoryCode::
  ActionCategoryCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionCategoryCode_convert ();
  }

  ActionCategoryCode::
  ActionCategoryCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionCategoryCode_convert ();
  }

  ActionCategoryCode::
  ActionCategoryCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionCategoryCode_convert ();
  }

  ActionCategoryCode* ActionCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionCategoryCode (*this, f, c);
  }

  ActionCategoryCode::value ActionCategoryCode::
  _xsd_ActionCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionCategoryCode_indexes_,
                      _xsd_ActionCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionCategoryCode_indexes_ + 2 || _xsd_ActionCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionCategoryCode::
  _xsd_ActionCategoryCode_literals_[2] =
  {
    "ACTEV",
    "ACTTA"
  };

  const ActionCategoryCode::value ActionCategoryCode::
  _xsd_ActionCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionCategoryCode::ACTEV,
    ::oo_2_0::ActionCategoryCode::ACTTA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionCategoryCode >
  _xsd_ActionCategoryCode_type_factory_init (
    "ActionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionContextCategoryCode
  //

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionContextCategoryCode_convert ();
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionContextCategoryCode_convert ();
  }

  ActionContextCategoryCode::
  ActionContextCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionContextCategoryCode_convert ();
  }

  ActionContextCategoryCode* ActionContextCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionContextCategoryCode (*this, f, c);
  }

  ActionContextCategoryCode::value ActionContextCategoryCode::
  _xsd_ActionContextCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionContextCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionContextCategoryCode_indexes_,
                      _xsd_ActionContextCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_ActionContextCategoryCode_indexes_ + 10 || _xsd_ActionContextCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionContextCategoryCode::
  _xsd_ActionContextCategoryCode_literals_[10] =
  {
    "DES",
    "FINACT",
    "FINPLA",
    "INIACT",
    "INIPLA",
    "INTACT",
    "INTPLA",
    "ISINCL",
    "MAX",
    "MIN"
  };

  const ActionContextCategoryCode::value ActionContextCategoryCode::
  _xsd_ActionContextCategoryCode_indexes_[10] =
  {
    ::oo_2_0::ActionContextCategoryCode::DES,
    ::oo_2_0::ActionContextCategoryCode::FINACT,
    ::oo_2_0::ActionContextCategoryCode::FINPLA,
    ::oo_2_0::ActionContextCategoryCode::INIACT,
    ::oo_2_0::ActionContextCategoryCode::INIPLA,
    ::oo_2_0::ActionContextCategoryCode::INTACT,
    ::oo_2_0::ActionContextCategoryCode::INTPLA,
    ::oo_2_0::ActionContextCategoryCode::ISINCL,
    ::oo_2_0::ActionContextCategoryCode::MAX,
    ::oo_2_0::ActionContextCategoryCode::MIN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionContextCategoryCode >
  _xsd_ActionContextCategoryCode_type_factory_init (
    "ActionContextCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEffectCategoryCode
  //

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEffectCategoryCode_convert ();
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEffectCategoryCode_convert ();
  }

  ActionEffectCategoryCode::
  ActionEffectCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEffectCategoryCode_convert ();
  }

  ActionEffectCategoryCode* ActionEffectCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEffectCategoryCode (*this, f, c);
  }

  ActionEffectCategoryCode::value ActionEffectCategoryCode::
  _xsd_ActionEffectCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEffectCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEffectCategoryCode_indexes_,
                      _xsd_ActionEffectCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionEffectCategoryCode_indexes_ + 2 || _xsd_ActionEffectCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEffectCategoryCode::
  _xsd_ActionEffectCategoryCode_literals_[2] =
  {
    "AEITEM",
    "AETYPE"
  };

  const ActionEffectCategoryCode::value ActionEffectCategoryCode::
  _xsd_ActionEffectCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionEffectCategoryCode::AEITEM,
    ::oo_2_0::ActionEffectCategoryCode::AETYPE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEffectCategoryCode >
  _xsd_ActionEffectCategoryCode_type_factory_init (
    "ActionEffectCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEffectDescriptionCode
  //

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEffectDescriptionCode_convert ();
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEffectDescriptionCode_convert ();
  }

  ActionEffectDescriptionCode::
  ActionEffectDescriptionCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEffectDescriptionCode_convert ();
  }

  ActionEffectDescriptionCode* ActionEffectDescriptionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEffectDescriptionCode (*this, f, c);
  }

  ActionEffectDescriptionCode::value ActionEffectDescriptionCode::
  _xsd_ActionEffectDescriptionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEffectDescriptionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEffectDescriptionCode_indexes_,
                      _xsd_ActionEffectDescriptionCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_ActionEffectDescriptionCode_indexes_ + 25 || _xsd_ActionEffectDescriptionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEffectDescriptionCode::
  _xsd_ActionEffectDescriptionCode_literals_[25] =
  {
    "BURN",
    "CAPTRD",
    "CONS",
    "DSTRYK",
    "FKIL",
    "FLIG",
    "IDNT",
    "ILLUMN",
    "INTREC",
    "KILL",
    "LDAM",
    "LGTRST",
    "LOST",
    "MKIL",
    "MODDAM",
    "NBCAS",
    "NKN",
    "NORSTN",
    "NOS",
    "NUTRLD",
    "SDAM",
    "SUPRSD",
    "VLNRST",
    "VRBPRT",
    "WNDD"
  };

  const ActionEffectDescriptionCode::value ActionEffectDescriptionCode::
  _xsd_ActionEffectDescriptionCode_indexes_[25] =
  {
    ::oo_2_0::ActionEffectDescriptionCode::BURN,
    ::oo_2_0::ActionEffectDescriptionCode::CAPTRD,
    ::oo_2_0::ActionEffectDescriptionCode::CONS,
    ::oo_2_0::ActionEffectDescriptionCode::DSTRYK,
    ::oo_2_0::ActionEffectDescriptionCode::FKIL,
    ::oo_2_0::ActionEffectDescriptionCode::FLIG,
    ::oo_2_0::ActionEffectDescriptionCode::IDNT,
    ::oo_2_0::ActionEffectDescriptionCode::ILLUMN,
    ::oo_2_0::ActionEffectDescriptionCode::INTREC,
    ::oo_2_0::ActionEffectDescriptionCode::KILL,
    ::oo_2_0::ActionEffectDescriptionCode::LDAM,
    ::oo_2_0::ActionEffectDescriptionCode::LGTRST,
    ::oo_2_0::ActionEffectDescriptionCode::LOST,
    ::oo_2_0::ActionEffectDescriptionCode::MKIL,
    ::oo_2_0::ActionEffectDescriptionCode::MODDAM,
    ::oo_2_0::ActionEffectDescriptionCode::NBCAS,
    ::oo_2_0::ActionEffectDescriptionCode::NKN,
    ::oo_2_0::ActionEffectDescriptionCode::NORSTN,
    ::oo_2_0::ActionEffectDescriptionCode::NOS,
    ::oo_2_0::ActionEffectDescriptionCode::NUTRLD,
    ::oo_2_0::ActionEffectDescriptionCode::SDAM,
    ::oo_2_0::ActionEffectDescriptionCode::SUPRSD,
    ::oo_2_0::ActionEffectDescriptionCode::VLNRST,
    ::oo_2_0::ActionEffectDescriptionCode::VRBPRT,
    ::oo_2_0::ActionEffectDescriptionCode::WNDD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEffectDescriptionCode >
  _xsd_ActionEffectDescriptionCode_type_factory_init (
    "ActionEffectDescriptionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEffectSeverityCode
  //

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEffectSeverityCode_convert ();
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEffectSeverityCode_convert ();
  }

  ActionEffectSeverityCode::
  ActionEffectSeverityCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEffectSeverityCode_convert ();
  }

  ActionEffectSeverityCode* ActionEffectSeverityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEffectSeverityCode (*this, f, c);
  }

  ActionEffectSeverityCode::value ActionEffectSeverityCode::
  _xsd_ActionEffectSeverityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEffectSeverityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEffectSeverityCode_indexes_,
                      _xsd_ActionEffectSeverityCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ActionEffectSeverityCode_indexes_ + 5 || _xsd_ActionEffectSeverityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEffectSeverityCode::
  _xsd_ActionEffectSeverityCode_literals_[5] =
  {
    "MINDSR",
    "NKN",
    "NODSRP",
    "SEVDSR",
    "TOTDSR"
  };

  const ActionEffectSeverityCode::value ActionEffectSeverityCode::
  _xsd_ActionEffectSeverityCode_indexes_[5] =
  {
    ::oo_2_0::ActionEffectSeverityCode::MINDSR,
    ::oo_2_0::ActionEffectSeverityCode::NKN,
    ::oo_2_0::ActionEffectSeverityCode::NODSRP,
    ::oo_2_0::ActionEffectSeverityCode::SEVDSR,
    ::oo_2_0::ActionEffectSeverityCode::TOTDSR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEffectSeverityCode >
  _xsd_ActionEffectSeverityCode_type_factory_init (
    "ActionEffectSeverityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionElectronicWarfareEmploymentCategoryCode
  //

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionElectronicWarfareEmploymentCategoryCode_convert ();
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionElectronicWarfareEmploymentCategoryCode_convert ();
  }

  ActionElectronicWarfareEmploymentCategoryCode::
  ActionElectronicWarfareEmploymentCategoryCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionElectronicWarfareEmploymentCategoryCode_convert ();
  }

  ActionElectronicWarfareEmploymentCategoryCode* ActionElectronicWarfareEmploymentCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionElectronicWarfareEmploymentCategoryCode (*this, f, c);
  }

  ActionElectronicWarfareEmploymentCategoryCode::value ActionElectronicWarfareEmploymentCategoryCode::
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionElectronicWarfareEmploymentCategoryCode_indexes_,
                      _xsd_ActionElectronicWarfareEmploymentCategoryCode_indexes_ + 38,
                      *this,
                      c));

    if (i == _xsd_ActionElectronicWarfareEmploymentCategoryCode_indexes_ + 38 || _xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionElectronicWarfareEmploymentCategoryCode::
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_[38] =
  {
    "ACOUST",
    "CHAFBL",
    "CHAFBU",
    "CHAFCO",
    "CHAFSE",
    "CONCEL",
    "CONTRL",
    "CRYPTO",
    "DCFLAC",
    "DCFLPK",
    "DCFLTA",
    "DCFLTR",
    "DCMLFL",
    "ELECCO",
    "EWSELF",
    "INVGNM",
    "JAMBAR",
    "JAMCOM",
    "JAMDEC",
    "JAMREP",
    "JAMSPT",
    "JAMSWL",
    "JAMSWP",
    "JAMTRS",
    "NUISNC",
    "PADDNG",
    "PILL",
    "PLNMSG",
    "RANGGT",
    "RFLCCR",
    "RLLCGL",
    "ROUTNG",
    "SCANRT",
    "SIMAMP",
    "SIMFRC",
    "SIMRIV",
    "SIMTAC",
    "SIMUNT"
  };

  const ActionElectronicWarfareEmploymentCategoryCode::value ActionElectronicWarfareEmploymentCategoryCode::
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_indexes_[38] =
  {
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::ACOUST,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CHAFBL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CHAFBU,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CHAFCO,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CHAFSE,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CONCEL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CONTRL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::CRYPTO,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::DCFLAC,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::DCFLPK,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::DCFLTA,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::DCFLTR,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::DCMLFL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::ELECCO,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::EWSELF,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::INVGNM,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMBAR,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMCOM,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMDEC,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMREP,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMSPT,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMSWL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMSWP,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::JAMTRS,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::NUISNC,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::PADDNG,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::PILL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::PLNMSG,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::RANGGT,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::RFLCCR,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::RLLCGL,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::ROUTNG,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SCANRT,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SIMAMP,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SIMFRC,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SIMRIV,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SIMTAC,
    ::oo_2_0::ActionElectronicWarfareEmploymentCategoryCode::SIMUNT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionElectronicWarfareEmploymentCategoryCode >
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_type_factory_init (
    "ActionElectronicWarfareEmploymentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEventCategoryCode
  //

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEventCategoryCode_convert ();
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEventCategoryCode_convert ();
  }

  ActionEventCategoryCode::
  ActionEventCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEventCategoryCode_convert ();
  }

  ActionEventCategoryCode* ActionEventCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEventCategoryCode (*this, f, c);
  }

  ActionEventCategoryCode::value ActionEventCategoryCode::
  _xsd_ActionEventCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEventCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEventCategoryCode_indexes_,
                      _xsd_ActionEventCategoryCode_indexes_ + 347,
                      *this,
                      c));

    if (i == _xsd_ActionEventCategoryCode_indexes_ + 347 || _xsd_ActionEventCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEventCategoryCode::
  _xsd_ActionEventCategoryCode_literals_[347] =
  {
    "ABDICA",
    "ACCAIR",
    "ACCDNT",
    "ACCMNE",
    "ACCTRF",
    "ACCWPN",
    "ACCWRK",
    "ACRLOS",
    "ADVANC",
    "AERENG",
    "AERSHO",
    "AIRCRS",
    "AIRLAU",
    "AIRLND",
    "AIRVIO",
    "ALRCAN",
    "AMBUSH",
    "AMPH",
    "ARASLT",
    "ARBNAS",
    "ARMPRD",
    "ARMTRD",
    "ARRLGL",
    "ARROBS",
    "ARSON",
    "ARTFIR",
    "ASSMBL",
    "ASSNTN",
    "ASTCRM",
    "ATMPOL",
    "ATMRDR",
    "ATRAPE",
    "ATRBRY",
    "ATSCDE",
    "ATTACK",
    "ATTDVR",
    "ATTEL",
    "ATTMN",
    "ATTSPT",
    "AVOIDN",
    "BBYTRD",
    "BCESC",
    "BCFRCD",
    "BCILGL",
    "BCNTPL",
    "BCPLND",
    "BCSRVL",
    "BLDUP",
    "BLOCKN",
    "BLYLND",
    "BMBACC",
    "BMBDLB",
    "BOMBNG",
    "BORINC",
    "BORRAI",
    "BREACH",
    "BRNOBJ",
    "BYPASS",
    "CANLSE",
    "CAPTUR",
    "CARLNC",
    "CARREC",
    "CBRN",
    "CDWDEX",
    "CEREMN",
    "CIVDIS",
    "CIVDMI",
    "CIVDML",
    "CIVUNR",
    "CIVWAR",
    "CLRAIR",
    "CLRLND",
    "CLROBS",
    "CLRRAD",
    "CNDCNF",
    "CNDMED",
    "CNDRCR",
    "CNDSCL",
    "CNDSPT",
    "CNFSTN",
    "CNFWPS",
    "CNPRFR",
    "CNRDSV",
    "CNRWPS",
    "CNSLDT",
    "COLMID",
    "COLOBS",
    "COMACT",
    "COMDEA",
    "COMDIS",
    "COMINT",
    "COMOUT",
    "COMRES",
    "CONSTN",
    "CONTAN",
    "COOPER",
    "COUPDE",
    "COVERN",
    "CRIMIN",
    "CRMHMN",
    "CROSSN",
    "CTRATK",
    "CTRBYF",
    "CTRFIR",
    "DAZZLE",
    "DCPTEL",
    "DCPTIN",
    "DEACST",
    "DEASPL",
    "DEFEAT",
    "DEFEND",
    "DEFLCT",
    "DELAYN",
    "DEMO",
    "DENYNG",
    "DEPLOY",
    "DEPORT",
    "DISEAS",
    "DISENG",
    "DIVRSN",
    "DLBATK",
    "DMNSTR",
    "DRGCNS",
    "DRGDST",
    "DRGMNF",
    "DRGOPR",
    "DRGSTR",
    "DRGTRN",
    "DROUGH",
    "DRVSHT",
    "DSRPTN",
    "DSTRBT",
    "DSTRYN",
    "DTHNAT",
    "EARTHQ",
    "EARWAR",
    "ELCEMS",
    "ELCVIO",
    "ELCWAR",
    "ENGAGE",
    "ENMCON",
    "ENVLPN",
    "EPEDEM",
    "EQPFAI",
    "ESCPNG",
    "ESCRTN",
    "EVACTN",
    "EXECTN",
    "EXPLOS",
    "EXPLTN",
    "FAMINE",
    "FIRE",
    "FIX",
    "FIXACO",
    "FIXELM",
    "FIXELO",
    "FLOOD",
    "FOLASS",
    "FOLSPT",
    "FRCLND",
    "FRFGTN",
    "FRNDFR",
    "GENCHS",
    "GENOCD",
    "GOVCOL",
    "GUARDN",
    "GUNATA",
    "HARASS",
    "HASTY",
    "HIDING",
    "HIJACK",
    "HJCKBT",
    "HJCKLV",
    "HJCKPL",
    "HLDDEF",
    "HLDOFF",
    "HOLIDY",
    "HRVIOL",
    "HSTTKN",
    "HUNTNG",
    "IDENT",
    "ILLUMN",
    "INDESP",
    "INDFIR",
    "INDSHO",
    "INFLTN",
    "INTCPN",
    "INTDCT",
    "INTMDN",
    "INVASI",
    "ISOLTN",
    "ISSMDA",
    "ISSMDD",
    "ISSPRS",
    "JAMMNG",
    "KIDNAP",
    "LABSTR",
    "LEAGR",
    "LOCELC",
    "LOCTNG",
    "LOOTNG",
    "LTRBME",
    "LTRBMI",
    "MAINTN",
    "MARKNG",
    "MARLAW",
    "MASFOR",
    "MEDEVC",
    "MILMOB",
    "MINLAY",
    "MISSIG",
    "MISSTG",
    "MOVING",
    "MRTFIR",
    "MURDER",
    "MUTASS",
    "NATDIS",
    "NATELC",
    "NATEMG",
    "NAVGUN",
    "NAVPLF",
    "NETSEI",
    "NOS",
    "NTRCHM",
    "NTRCOM",
    "NTREXP",
    "OBSCUR",
    "OBSRNG",
    "OCCPNG",
    "OFFCOF",
    "ORGCRM",
    "PCKTNG",
    "PEAAGR",
    "PEACON",
    "PENTRT",
    "PETSPL",
    "POISON",
    "POLDEM",
    "POLEXE",
    "POWEXC",
    "POWRET",
    "PROCUR",
    "PROTEL",
    "PRVACC",
    "PRVAGR",
    "PRVBDD",
    "PRVCMP",
    "PRVCNS",
    "PRVDCN",
    "PRVEDU",
    "PRVHLT",
    "PRVHSN",
    "PRVINF",
    "PRVLND",
    "PRVRPR",
    "PRVSCY",
    "PRVSHL",
    "PRVSTG",
    "PRVTRS",
    "PRXBMB",
    "PSTLNC",
    "PSYOP",
    "PTRLNG",
    "PUBMDA",
    "PUBMDD",
    "PUBPRS",
    "PURSNG",
    "RACIAL",
    "RAPE",
    "RECCE",
    "RECCEF",
    "RECNSN",
    "RECPRN",
    "RECVRN",
    "REDPLN",
    "REFMVM",
    "REINFN",
    "RELDEM",
    "RELVIO",
    "RELWAR",
    "REORGN",
    "REPAIR",
    "RESPLN",
    "RESTNG",
    "RETAIN",
    "RETIRE",
    "REVOLU",
    "RIOT",
    "RKTFIR",
    "RLFPLC",
    "RNDZVS",
    "ROBERY",
    "SABOTG",
    "SCRNNG",
    "SECCMP",
    "SECCOU",
    "SECRNG",
    "SECVIO",
    "SEIZNG",
    "SHOTNG",
    "SINKIN",
    "SNPATK",
    "SPACAC",
    "SPYING",
    "SRVADV",
    "SRVBRD",
    "SRVBRK",
    "SRVFLK",
    "SRVINP",
    "SRVMNB",
    "SRVRGD",
    "SRVRSF",
    "STAWAR",
    "STNGUP",
    "STRFAR",
    "STRIKE",
    "SUICDE",
    "SUPRSN",
    "SUPRTN",
    "SURREN",
    "SURVEL",
    "SUSHOS",
    "TERR",
    "THREAT",
    "TORTUR",
    "TRBAGT",
    "TRBBLL",
    "TRBHAR",
    "TRBHLG",
    "TRBINC",
    "TRBINT",
    "TREVIO",
    "TRNSPN",
    "TRVRSN",
    "TURNNG",
    "UXODSC",
    "VANDAL",
    "VERFYN",
    "VOLCAN",
    "WARALE",
    "WARCON",
    "WARCRM",
    "WATPOL",
    "WDRPRS",
    "WITDRL",
    "WITNSN",
    "WPNFIR"
  };

  const ActionEventCategoryCode::value ActionEventCategoryCode::
  _xsd_ActionEventCategoryCode_indexes_[347] =
  {
    ::oo_2_0::ActionEventCategoryCode::ABDICA,
    ::oo_2_0::ActionEventCategoryCode::ACCAIR,
    ::oo_2_0::ActionEventCategoryCode::ACCDNT,
    ::oo_2_0::ActionEventCategoryCode::ACCMNE,
    ::oo_2_0::ActionEventCategoryCode::ACCTRF,
    ::oo_2_0::ActionEventCategoryCode::ACCWPN,
    ::oo_2_0::ActionEventCategoryCode::ACCWRK,
    ::oo_2_0::ActionEventCategoryCode::ACRLOS,
    ::oo_2_0::ActionEventCategoryCode::ADVANC,
    ::oo_2_0::ActionEventCategoryCode::AERENG,
    ::oo_2_0::ActionEventCategoryCode::AERSHO,
    ::oo_2_0::ActionEventCategoryCode::AIRCRS,
    ::oo_2_0::ActionEventCategoryCode::AIRLAU,
    ::oo_2_0::ActionEventCategoryCode::AIRLND,
    ::oo_2_0::ActionEventCategoryCode::AIRVIO,
    ::oo_2_0::ActionEventCategoryCode::ALRCAN,
    ::oo_2_0::ActionEventCategoryCode::AMBUSH,
    ::oo_2_0::ActionEventCategoryCode::AMPH,
    ::oo_2_0::ActionEventCategoryCode::ARASLT,
    ::oo_2_0::ActionEventCategoryCode::ARBNAS,
    ::oo_2_0::ActionEventCategoryCode::ARMPRD,
    ::oo_2_0::ActionEventCategoryCode::ARMTRD,
    ::oo_2_0::ActionEventCategoryCode::ARRLGL,
    ::oo_2_0::ActionEventCategoryCode::ARROBS,
    ::oo_2_0::ActionEventCategoryCode::ARSON,
    ::oo_2_0::ActionEventCategoryCode::ARTFIR,
    ::oo_2_0::ActionEventCategoryCode::ASSMBL,
    ::oo_2_0::ActionEventCategoryCode::ASSNTN,
    ::oo_2_0::ActionEventCategoryCode::ASTCRM,
    ::oo_2_0::ActionEventCategoryCode::ATMPOL,
    ::oo_2_0::ActionEventCategoryCode::ATMRDR,
    ::oo_2_0::ActionEventCategoryCode::ATRAPE,
    ::oo_2_0::ActionEventCategoryCode::ATRBRY,
    ::oo_2_0::ActionEventCategoryCode::ATSCDE,
    ::oo_2_0::ActionEventCategoryCode::ATTACK,
    ::oo_2_0::ActionEventCategoryCode::ATTDVR,
    ::oo_2_0::ActionEventCategoryCode::ATTEL,
    ::oo_2_0::ActionEventCategoryCode::ATTMN,
    ::oo_2_0::ActionEventCategoryCode::ATTSPT,
    ::oo_2_0::ActionEventCategoryCode::AVOIDN,
    ::oo_2_0::ActionEventCategoryCode::BBYTRD,
    ::oo_2_0::ActionEventCategoryCode::BCESC,
    ::oo_2_0::ActionEventCategoryCode::BCFRCD,
    ::oo_2_0::ActionEventCategoryCode::BCILGL,
    ::oo_2_0::ActionEventCategoryCode::BCNTPL,
    ::oo_2_0::ActionEventCategoryCode::BCPLND,
    ::oo_2_0::ActionEventCategoryCode::BCSRVL,
    ::oo_2_0::ActionEventCategoryCode::BLDUP,
    ::oo_2_0::ActionEventCategoryCode::BLOCKN,
    ::oo_2_0::ActionEventCategoryCode::BLYLND,
    ::oo_2_0::ActionEventCategoryCode::BMBACC,
    ::oo_2_0::ActionEventCategoryCode::BMBDLB,
    ::oo_2_0::ActionEventCategoryCode::BOMBNG,
    ::oo_2_0::ActionEventCategoryCode::BORINC,
    ::oo_2_0::ActionEventCategoryCode::BORRAI,
    ::oo_2_0::ActionEventCategoryCode::BREACH,
    ::oo_2_0::ActionEventCategoryCode::BRNOBJ,
    ::oo_2_0::ActionEventCategoryCode::BYPASS,
    ::oo_2_0::ActionEventCategoryCode::CANLSE,
    ::oo_2_0::ActionEventCategoryCode::CAPTUR,
    ::oo_2_0::ActionEventCategoryCode::CARLNC,
    ::oo_2_0::ActionEventCategoryCode::CARREC,
    ::oo_2_0::ActionEventCategoryCode::CBRN,
    ::oo_2_0::ActionEventCategoryCode::CDWDEX,
    ::oo_2_0::ActionEventCategoryCode::CEREMN,
    ::oo_2_0::ActionEventCategoryCode::CIVDIS,
    ::oo_2_0::ActionEventCategoryCode::CIVDMI,
    ::oo_2_0::ActionEventCategoryCode::CIVDML,
    ::oo_2_0::ActionEventCategoryCode::CIVUNR,
    ::oo_2_0::ActionEventCategoryCode::CIVWAR,
    ::oo_2_0::ActionEventCategoryCode::CLRAIR,
    ::oo_2_0::ActionEventCategoryCode::CLRLND,
    ::oo_2_0::ActionEventCategoryCode::CLROBS,
    ::oo_2_0::ActionEventCategoryCode::CLRRAD,
    ::oo_2_0::ActionEventCategoryCode::CNDCNF,
    ::oo_2_0::ActionEventCategoryCode::CNDMED,
    ::oo_2_0::ActionEventCategoryCode::CNDRCR,
    ::oo_2_0::ActionEventCategoryCode::CNDSCL,
    ::oo_2_0::ActionEventCategoryCode::CNDSPT,
    ::oo_2_0::ActionEventCategoryCode::CNFSTN,
    ::oo_2_0::ActionEventCategoryCode::CNFWPS,
    ::oo_2_0::ActionEventCategoryCode::CNPRFR,
    ::oo_2_0::ActionEventCategoryCode::CNRDSV,
    ::oo_2_0::ActionEventCategoryCode::CNRWPS,
    ::oo_2_0::ActionEventCategoryCode::CNSLDT,
    ::oo_2_0::ActionEventCategoryCode::COLMID,
    ::oo_2_0::ActionEventCategoryCode::COLOBS,
    ::oo_2_0::ActionEventCategoryCode::COMACT,
    ::oo_2_0::ActionEventCategoryCode::COMDEA,
    ::oo_2_0::ActionEventCategoryCode::COMDIS,
    ::oo_2_0::ActionEventCategoryCode::COMINT,
    ::oo_2_0::ActionEventCategoryCode::COMOUT,
    ::oo_2_0::ActionEventCategoryCode::COMRES,
    ::oo_2_0::ActionEventCategoryCode::CONSTN,
    ::oo_2_0::ActionEventCategoryCode::CONTAN,
    ::oo_2_0::ActionEventCategoryCode::COOPER,
    ::oo_2_0::ActionEventCategoryCode::COUPDE,
    ::oo_2_0::ActionEventCategoryCode::COVERN,
    ::oo_2_0::ActionEventCategoryCode::CRIMIN,
    ::oo_2_0::ActionEventCategoryCode::CRMHMN,
    ::oo_2_0::ActionEventCategoryCode::CROSSN,
    ::oo_2_0::ActionEventCategoryCode::CTRATK,
    ::oo_2_0::ActionEventCategoryCode::CTRBYF,
    ::oo_2_0::ActionEventCategoryCode::CTRFIR,
    ::oo_2_0::ActionEventCategoryCode::DAZZLE,
    ::oo_2_0::ActionEventCategoryCode::DCPTEL,
    ::oo_2_0::ActionEventCategoryCode::DCPTIN,
    ::oo_2_0::ActionEventCategoryCode::DEACST,
    ::oo_2_0::ActionEventCategoryCode::DEASPL,
    ::oo_2_0::ActionEventCategoryCode::DEFEAT,
    ::oo_2_0::ActionEventCategoryCode::DEFEND,
    ::oo_2_0::ActionEventCategoryCode::DEFLCT,
    ::oo_2_0::ActionEventCategoryCode::DELAYN,
    ::oo_2_0::ActionEventCategoryCode::DEMO,
    ::oo_2_0::ActionEventCategoryCode::DENYNG,
    ::oo_2_0::ActionEventCategoryCode::DEPLOY,
    ::oo_2_0::ActionEventCategoryCode::DEPORT,
    ::oo_2_0::ActionEventCategoryCode::DISEAS,
    ::oo_2_0::ActionEventCategoryCode::DISENG,
    ::oo_2_0::ActionEventCategoryCode::DIVRSN,
    ::oo_2_0::ActionEventCategoryCode::DLBATK,
    ::oo_2_0::ActionEventCategoryCode::DMNSTR,
    ::oo_2_0::ActionEventCategoryCode::DRGCNS,
    ::oo_2_0::ActionEventCategoryCode::DRGDST,
    ::oo_2_0::ActionEventCategoryCode::DRGMNF,
    ::oo_2_0::ActionEventCategoryCode::DRGOPR,
    ::oo_2_0::ActionEventCategoryCode::DRGSTR,
    ::oo_2_0::ActionEventCategoryCode::DRGTRN,
    ::oo_2_0::ActionEventCategoryCode::DROUGH,
    ::oo_2_0::ActionEventCategoryCode::DRVSHT,
    ::oo_2_0::ActionEventCategoryCode::DSRPTN,
    ::oo_2_0::ActionEventCategoryCode::DSTRBT,
    ::oo_2_0::ActionEventCategoryCode::DSTRYN,
    ::oo_2_0::ActionEventCategoryCode::DTHNAT,
    ::oo_2_0::ActionEventCategoryCode::EARTHQ,
    ::oo_2_0::ActionEventCategoryCode::EARWAR,
    ::oo_2_0::ActionEventCategoryCode::ELCEMS,
    ::oo_2_0::ActionEventCategoryCode::ELCVIO,
    ::oo_2_0::ActionEventCategoryCode::ELCWAR,
    ::oo_2_0::ActionEventCategoryCode::ENGAGE,
    ::oo_2_0::ActionEventCategoryCode::ENMCON,
    ::oo_2_0::ActionEventCategoryCode::ENVLPN,
    ::oo_2_0::ActionEventCategoryCode::EPEDEM,
    ::oo_2_0::ActionEventCategoryCode::EQPFAI,
    ::oo_2_0::ActionEventCategoryCode::ESCPNG,
    ::oo_2_0::ActionEventCategoryCode::ESCRTN,
    ::oo_2_0::ActionEventCategoryCode::EVACTN,
    ::oo_2_0::ActionEventCategoryCode::EXECTN,
    ::oo_2_0::ActionEventCategoryCode::EXPLOS,
    ::oo_2_0::ActionEventCategoryCode::EXPLTN,
    ::oo_2_0::ActionEventCategoryCode::FAMINE,
    ::oo_2_0::ActionEventCategoryCode::FIRE,
    ::oo_2_0::ActionEventCategoryCode::FIX,
    ::oo_2_0::ActionEventCategoryCode::FIXACO,
    ::oo_2_0::ActionEventCategoryCode::FIXELM,
    ::oo_2_0::ActionEventCategoryCode::FIXELO,
    ::oo_2_0::ActionEventCategoryCode::FLOOD,
    ::oo_2_0::ActionEventCategoryCode::FOLASS,
    ::oo_2_0::ActionEventCategoryCode::FOLSPT,
    ::oo_2_0::ActionEventCategoryCode::FRCLND,
    ::oo_2_0::ActionEventCategoryCode::FRFGTN,
    ::oo_2_0::ActionEventCategoryCode::FRNDFR,
    ::oo_2_0::ActionEventCategoryCode::GENCHS,
    ::oo_2_0::ActionEventCategoryCode::GENOCD,
    ::oo_2_0::ActionEventCategoryCode::GOVCOL,
    ::oo_2_0::ActionEventCategoryCode::GUARDN,
    ::oo_2_0::ActionEventCategoryCode::GUNATA,
    ::oo_2_0::ActionEventCategoryCode::HARASS,
    ::oo_2_0::ActionEventCategoryCode::HASTY,
    ::oo_2_0::ActionEventCategoryCode::HIDING,
    ::oo_2_0::ActionEventCategoryCode::HIJACK,
    ::oo_2_0::ActionEventCategoryCode::HJCKBT,
    ::oo_2_0::ActionEventCategoryCode::HJCKLV,
    ::oo_2_0::ActionEventCategoryCode::HJCKPL,
    ::oo_2_0::ActionEventCategoryCode::HLDDEF,
    ::oo_2_0::ActionEventCategoryCode::HLDOFF,
    ::oo_2_0::ActionEventCategoryCode::HOLIDY,
    ::oo_2_0::ActionEventCategoryCode::HRVIOL,
    ::oo_2_0::ActionEventCategoryCode::HSTTKN,
    ::oo_2_0::ActionEventCategoryCode::HUNTNG,
    ::oo_2_0::ActionEventCategoryCode::IDENT,
    ::oo_2_0::ActionEventCategoryCode::ILLUMN,
    ::oo_2_0::ActionEventCategoryCode::INDESP,
    ::oo_2_0::ActionEventCategoryCode::INDFIR,
    ::oo_2_0::ActionEventCategoryCode::INDSHO,
    ::oo_2_0::ActionEventCategoryCode::INFLTN,
    ::oo_2_0::ActionEventCategoryCode::INTCPN,
    ::oo_2_0::ActionEventCategoryCode::INTDCT,
    ::oo_2_0::ActionEventCategoryCode::INTMDN,
    ::oo_2_0::ActionEventCategoryCode::INVASI,
    ::oo_2_0::ActionEventCategoryCode::ISOLTN,
    ::oo_2_0::ActionEventCategoryCode::ISSMDA,
    ::oo_2_0::ActionEventCategoryCode::ISSMDD,
    ::oo_2_0::ActionEventCategoryCode::ISSPRS,
    ::oo_2_0::ActionEventCategoryCode::JAMMNG,
    ::oo_2_0::ActionEventCategoryCode::KIDNAP,
    ::oo_2_0::ActionEventCategoryCode::LABSTR,
    ::oo_2_0::ActionEventCategoryCode::LEAGR,
    ::oo_2_0::ActionEventCategoryCode::LOCELC,
    ::oo_2_0::ActionEventCategoryCode::LOCTNG,
    ::oo_2_0::ActionEventCategoryCode::LOOTNG,
    ::oo_2_0::ActionEventCategoryCode::LTRBME,
    ::oo_2_0::ActionEventCategoryCode::LTRBMI,
    ::oo_2_0::ActionEventCategoryCode::MAINTN,
    ::oo_2_0::ActionEventCategoryCode::MARKNG,
    ::oo_2_0::ActionEventCategoryCode::MARLAW,
    ::oo_2_0::ActionEventCategoryCode::MASFOR,
    ::oo_2_0::ActionEventCategoryCode::MEDEVC,
    ::oo_2_0::ActionEventCategoryCode::MILMOB,
    ::oo_2_0::ActionEventCategoryCode::MINLAY,
    ::oo_2_0::ActionEventCategoryCode::MISSIG,
    ::oo_2_0::ActionEventCategoryCode::MISSTG,
    ::oo_2_0::ActionEventCategoryCode::MOVING,
    ::oo_2_0::ActionEventCategoryCode::MRTFIR,
    ::oo_2_0::ActionEventCategoryCode::MURDER,
    ::oo_2_0::ActionEventCategoryCode::MUTASS,
    ::oo_2_0::ActionEventCategoryCode::NATDIS,
    ::oo_2_0::ActionEventCategoryCode::NATELC,
    ::oo_2_0::ActionEventCategoryCode::NATEMG,
    ::oo_2_0::ActionEventCategoryCode::NAVGUN,
    ::oo_2_0::ActionEventCategoryCode::NAVPLF,
    ::oo_2_0::ActionEventCategoryCode::NETSEI,
    ::oo_2_0::ActionEventCategoryCode::NOS,
    ::oo_2_0::ActionEventCategoryCode::NTRCHM,
    ::oo_2_0::ActionEventCategoryCode::NTRCOM,
    ::oo_2_0::ActionEventCategoryCode::NTREXP,
    ::oo_2_0::ActionEventCategoryCode::OBSCUR,
    ::oo_2_0::ActionEventCategoryCode::OBSRNG,
    ::oo_2_0::ActionEventCategoryCode::OCCPNG,
    ::oo_2_0::ActionEventCategoryCode::OFFCOF,
    ::oo_2_0::ActionEventCategoryCode::ORGCRM,
    ::oo_2_0::ActionEventCategoryCode::PCKTNG,
    ::oo_2_0::ActionEventCategoryCode::PEAAGR,
    ::oo_2_0::ActionEventCategoryCode::PEACON,
    ::oo_2_0::ActionEventCategoryCode::PENTRT,
    ::oo_2_0::ActionEventCategoryCode::PETSPL,
    ::oo_2_0::ActionEventCategoryCode::POISON,
    ::oo_2_0::ActionEventCategoryCode::POLDEM,
    ::oo_2_0::ActionEventCategoryCode::POLEXE,
    ::oo_2_0::ActionEventCategoryCode::POWEXC,
    ::oo_2_0::ActionEventCategoryCode::POWRET,
    ::oo_2_0::ActionEventCategoryCode::PROCUR,
    ::oo_2_0::ActionEventCategoryCode::PROTEL,
    ::oo_2_0::ActionEventCategoryCode::PRVACC,
    ::oo_2_0::ActionEventCategoryCode::PRVAGR,
    ::oo_2_0::ActionEventCategoryCode::PRVBDD,
    ::oo_2_0::ActionEventCategoryCode::PRVCMP,
    ::oo_2_0::ActionEventCategoryCode::PRVCNS,
    ::oo_2_0::ActionEventCategoryCode::PRVDCN,
    ::oo_2_0::ActionEventCategoryCode::PRVEDU,
    ::oo_2_0::ActionEventCategoryCode::PRVHLT,
    ::oo_2_0::ActionEventCategoryCode::PRVHSN,
    ::oo_2_0::ActionEventCategoryCode::PRVINF,
    ::oo_2_0::ActionEventCategoryCode::PRVLND,
    ::oo_2_0::ActionEventCategoryCode::PRVRPR,
    ::oo_2_0::ActionEventCategoryCode::PRVSCY,
    ::oo_2_0::ActionEventCategoryCode::PRVSHL,
    ::oo_2_0::ActionEventCategoryCode::PRVSTG,
    ::oo_2_0::ActionEventCategoryCode::PRVTRS,
    ::oo_2_0::ActionEventCategoryCode::PRXBMB,
    ::oo_2_0::ActionEventCategoryCode::PSTLNC,
    ::oo_2_0::ActionEventCategoryCode::PSYOP,
    ::oo_2_0::ActionEventCategoryCode::PTRLNG,
    ::oo_2_0::ActionEventCategoryCode::PUBMDA,
    ::oo_2_0::ActionEventCategoryCode::PUBMDD,
    ::oo_2_0::ActionEventCategoryCode::PUBPRS,
    ::oo_2_0::ActionEventCategoryCode::PURSNG,
    ::oo_2_0::ActionEventCategoryCode::RACIAL,
    ::oo_2_0::ActionEventCategoryCode::RAPE,
    ::oo_2_0::ActionEventCategoryCode::RECCE,
    ::oo_2_0::ActionEventCategoryCode::RECCEF,
    ::oo_2_0::ActionEventCategoryCode::RECNSN,
    ::oo_2_0::ActionEventCategoryCode::RECPRN,
    ::oo_2_0::ActionEventCategoryCode::RECVRN,
    ::oo_2_0::ActionEventCategoryCode::REDPLN,
    ::oo_2_0::ActionEventCategoryCode::REFMVM,
    ::oo_2_0::ActionEventCategoryCode::REINFN,
    ::oo_2_0::ActionEventCategoryCode::RELDEM,
    ::oo_2_0::ActionEventCategoryCode::RELVIO,
    ::oo_2_0::ActionEventCategoryCode::RELWAR,
    ::oo_2_0::ActionEventCategoryCode::REORGN,
    ::oo_2_0::ActionEventCategoryCode::REPAIR,
    ::oo_2_0::ActionEventCategoryCode::RESPLN,
    ::oo_2_0::ActionEventCategoryCode::RESTNG,
    ::oo_2_0::ActionEventCategoryCode::RETAIN,
    ::oo_2_0::ActionEventCategoryCode::RETIRE,
    ::oo_2_0::ActionEventCategoryCode::REVOLU,
    ::oo_2_0::ActionEventCategoryCode::RIOT,
    ::oo_2_0::ActionEventCategoryCode::RKTFIR,
    ::oo_2_0::ActionEventCategoryCode::RLFPLC,
    ::oo_2_0::ActionEventCategoryCode::RNDZVS,
    ::oo_2_0::ActionEventCategoryCode::ROBERY,
    ::oo_2_0::ActionEventCategoryCode::SABOTG,
    ::oo_2_0::ActionEventCategoryCode::SCRNNG,
    ::oo_2_0::ActionEventCategoryCode::SECCMP,
    ::oo_2_0::ActionEventCategoryCode::SECCOU,
    ::oo_2_0::ActionEventCategoryCode::SECRNG,
    ::oo_2_0::ActionEventCategoryCode::SECVIO,
    ::oo_2_0::ActionEventCategoryCode::SEIZNG,
    ::oo_2_0::ActionEventCategoryCode::SHOTNG,
    ::oo_2_0::ActionEventCategoryCode::SINKIN,
    ::oo_2_0::ActionEventCategoryCode::SNPATK,
    ::oo_2_0::ActionEventCategoryCode::SPACAC,
    ::oo_2_0::ActionEventCategoryCode::SPYING,
    ::oo_2_0::ActionEventCategoryCode::SRVADV,
    ::oo_2_0::ActionEventCategoryCode::SRVBRD,
    ::oo_2_0::ActionEventCategoryCode::SRVBRK,
    ::oo_2_0::ActionEventCategoryCode::SRVFLK,
    ::oo_2_0::ActionEventCategoryCode::SRVINP,
    ::oo_2_0::ActionEventCategoryCode::SRVMNB,
    ::oo_2_0::ActionEventCategoryCode::SRVRGD,
    ::oo_2_0::ActionEventCategoryCode::SRVRSF,
    ::oo_2_0::ActionEventCategoryCode::STAWAR,
    ::oo_2_0::ActionEventCategoryCode::STNGUP,
    ::oo_2_0::ActionEventCategoryCode::STRFAR,
    ::oo_2_0::ActionEventCategoryCode::STRIKE,
    ::oo_2_0::ActionEventCategoryCode::SUICDE,
    ::oo_2_0::ActionEventCategoryCode::SUPRSN,
    ::oo_2_0::ActionEventCategoryCode::SUPRTN,
    ::oo_2_0::ActionEventCategoryCode::SURREN,
    ::oo_2_0::ActionEventCategoryCode::SURVEL,
    ::oo_2_0::ActionEventCategoryCode::SUSHOS,
    ::oo_2_0::ActionEventCategoryCode::TERR,
    ::oo_2_0::ActionEventCategoryCode::THREAT,
    ::oo_2_0::ActionEventCategoryCode::TORTUR,
    ::oo_2_0::ActionEventCategoryCode::TRBAGT,
    ::oo_2_0::ActionEventCategoryCode::TRBBLL,
    ::oo_2_0::ActionEventCategoryCode::TRBHAR,
    ::oo_2_0::ActionEventCategoryCode::TRBHLG,
    ::oo_2_0::ActionEventCategoryCode::TRBINC,
    ::oo_2_0::ActionEventCategoryCode::TRBINT,
    ::oo_2_0::ActionEventCategoryCode::TREVIO,
    ::oo_2_0::ActionEventCategoryCode::TRNSPN,
    ::oo_2_0::ActionEventCategoryCode::TRVRSN,
    ::oo_2_0::ActionEventCategoryCode::TURNNG,
    ::oo_2_0::ActionEventCategoryCode::UXODSC,
    ::oo_2_0::ActionEventCategoryCode::VANDAL,
    ::oo_2_0::ActionEventCategoryCode::VERFYN,
    ::oo_2_0::ActionEventCategoryCode::VOLCAN,
    ::oo_2_0::ActionEventCategoryCode::WARALE,
    ::oo_2_0::ActionEventCategoryCode::WARCON,
    ::oo_2_0::ActionEventCategoryCode::WARCRM,
    ::oo_2_0::ActionEventCategoryCode::WATPOL,
    ::oo_2_0::ActionEventCategoryCode::WDRPRS,
    ::oo_2_0::ActionEventCategoryCode::WITDRL,
    ::oo_2_0::ActionEventCategoryCode::WITNSN,
    ::oo_2_0::ActionEventCategoryCode::WPNFIR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEventCategoryCode >
  _xsd_ActionEventCategoryCode_type_factory_init (
    "ActionEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEventDetailClassificationCode
  //

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEventDetailClassificationCode_convert ();
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEventDetailClassificationCode_convert ();
  }

  ActionEventDetailClassificationCode::
  ActionEventDetailClassificationCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEventDetailClassificationCode_convert ();
  }

  ActionEventDetailClassificationCode* ActionEventDetailClassificationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEventDetailClassificationCode (*this, f, c);
  }

  ActionEventDetailClassificationCode::value ActionEventDetailClassificationCode::
  _xsd_ActionEventDetailClassificationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEventDetailClassificationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEventDetailClassificationCode_indexes_,
                      _xsd_ActionEventDetailClassificationCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_ActionEventDetailClassificationCode_indexes_ + 10 || _xsd_ActionEventDetailClassificationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEventDetailClassificationCode::
  _xsd_ActionEventDetailClassificationCode_literals_[10] =
  {
    "DISAST",
    "ECONMC",
    "ENVIRN",
    "ETHNIC",
    "HSTRCL",
    "LABOUR",
    "MILTRY",
    "POLTCL",
    "RELIGS",
    "SOCIAL"
  };

  const ActionEventDetailClassificationCode::value ActionEventDetailClassificationCode::
  _xsd_ActionEventDetailClassificationCode_indexes_[10] =
  {
    ::oo_2_0::ActionEventDetailClassificationCode::DISAST,
    ::oo_2_0::ActionEventDetailClassificationCode::ECONMC,
    ::oo_2_0::ActionEventDetailClassificationCode::ENVIRN,
    ::oo_2_0::ActionEventDetailClassificationCode::ETHNIC,
    ::oo_2_0::ActionEventDetailClassificationCode::HSTRCL,
    ::oo_2_0::ActionEventDetailClassificationCode::LABOUR,
    ::oo_2_0::ActionEventDetailClassificationCode::MILTRY,
    ::oo_2_0::ActionEventDetailClassificationCode::POLTCL,
    ::oo_2_0::ActionEventDetailClassificationCode::RELIGS,
    ::oo_2_0::ActionEventDetailClassificationCode::SOCIAL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEventDetailClassificationCode >
  _xsd_ActionEventDetailClassificationCode_type_factory_init (
    "ActionEventDetailClassificationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionEventDetailCrimeIndicatorCode
  //

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionEventDetailCrimeIndicatorCode_convert ();
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionEventDetailCrimeIndicatorCode_convert ();
  }

  ActionEventDetailCrimeIndicatorCode::
  ActionEventDetailCrimeIndicatorCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionEventDetailCrimeIndicatorCode_convert ();
  }

  ActionEventDetailCrimeIndicatorCode* ActionEventDetailCrimeIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionEventDetailCrimeIndicatorCode (*this, f, c);
  }

  ActionEventDetailCrimeIndicatorCode::value ActionEventDetailCrimeIndicatorCode::
  _xsd_ActionEventDetailCrimeIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionEventDetailCrimeIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionEventDetailCrimeIndicatorCode_indexes_,
                      _xsd_ActionEventDetailCrimeIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionEventDetailCrimeIndicatorCode_indexes_ + 2 || _xsd_ActionEventDetailCrimeIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionEventDetailCrimeIndicatorCode::
  _xsd_ActionEventDetailCrimeIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ActionEventDetailCrimeIndicatorCode::value ActionEventDetailCrimeIndicatorCode::
  _xsd_ActionEventDetailCrimeIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ActionEventDetailCrimeIndicatorCode::NO,
    ::oo_2_0::ActionEventDetailCrimeIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionEventDetailCrimeIndicatorCode >
  _xsd_ActionEventDetailCrimeIndicatorCode_type_factory_init (
    "ActionEventDetailCrimeIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionFunctionalAssociationCategoryCode
  //

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionFunctionalAssociationCategoryCode_convert ();
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionFunctionalAssociationCategoryCode_convert ();
  }

  ActionFunctionalAssociationCategoryCode::
  ActionFunctionalAssociationCategoryCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionFunctionalAssociationCategoryCode_convert ();
  }

  ActionFunctionalAssociationCategoryCode* ActionFunctionalAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionFunctionalAssociationCategoryCode (*this, f, c);
  }

  ActionFunctionalAssociationCategoryCode::value ActionFunctionalAssociationCategoryCode::
  _xsd_ActionFunctionalAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionFunctionalAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionFunctionalAssociationCategoryCode_indexes_,
                      _xsd_ActionFunctionalAssociationCategoryCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_ActionFunctionalAssociationCategoryCode_indexes_ + 11 || _xsd_ActionFunctionalAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionFunctionalAssociationCategoryCode::
  _xsd_ActionFunctionalAssociationCategoryCode_literals_[11] =
  {
    "ALT",
    "HASPRV",
    "HASSEC",
    "HSA",
    "IMO",
    "INRSTO",
    "IOT",
    "ISAPRQ",
    "ISCAUS",
    "TPL",
    "UAR"
  };

  const ActionFunctionalAssociationCategoryCode::value ActionFunctionalAssociationCategoryCode::
  _xsd_ActionFunctionalAssociationCategoryCode_indexes_[11] =
  {
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::ALT,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::HASPRV,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::HASSEC,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::HSA,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::IMO,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::INRSTO,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::IOT,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::ISAPRQ,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::ISCAUS,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::TPL,
    ::oo_2_0::ActionFunctionalAssociationCategoryCode::UAR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionFunctionalAssociationCategoryCode >
  _xsd_ActionFunctionalAssociationCategoryCode_type_factory_init (
    "ActionFunctionalAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode
  //

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_convert ();
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ::xercesc::DOMAttr& a,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_convert ();
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (const ::std::string& s,
                                                          const ::xercesc::DOMElement* e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_convert ();
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode* ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode (*this, f, c);
  }

  ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::value ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_indexes_,
                      _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_indexes_ + 4 || _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_[4] =
  {
    "CASP1",
    "CASP2",
    "CASP3",
    "CASP4"
  };

  const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::value ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_indexes_[4] =
  {
    ::oo_2_0::ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::CASP1,
    ::oo_2_0::ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::CASP2,
    ::oo_2_0::ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::CASP3,
    ::oo_2_0::ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::CASP4
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode >
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_type_factory_init (
    "ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionMaritimeEmploymentVesselTransitInstructionCode
  //

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_convert ();
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ::xercesc::DOMAttr& a,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_convert ();
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::
  ActionMaritimeEmploymentVesselTransitInstructionCode (const ::std::string& s,
                                                        const ::xercesc::DOMElement* e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_convert ();
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode* ActionMaritimeEmploymentVesselTransitInstructionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionMaritimeEmploymentVesselTransitInstructionCode (*this, f, c);
  }

  ActionMaritimeEmploymentVesselTransitInstructionCode::value ActionMaritimeEmploymentVesselTransitInstructionCode::
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_indexes_,
                      _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_indexes_ + 3 || _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionMaritimeEmploymentVesselTransitInstructionCode::
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_[3] =
  {
    "INFORM",
    "LEAD",
    "STOP"
  };

  const ActionMaritimeEmploymentVesselTransitInstructionCode::value ActionMaritimeEmploymentVesselTransitInstructionCode::
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_indexes_[3] =
  {
    ::oo_2_0::ActionMaritimeEmploymentVesselTransitInstructionCode::INFORM,
    ::oo_2_0::ActionMaritimeEmploymentVesselTransitInstructionCode::LEAD,
    ::oo_2_0::ActionMaritimeEmploymentVesselTransitInstructionCode::STOP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionMaritimeEmploymentVesselTransitInstructionCode >
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_type_factory_init (
    "ActionMaritimeEmploymentVesselTransitInstructionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveCategoryCode
  //

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveCategoryCode_convert ();
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveCategoryCode_convert ();
  }

  ActionObjectiveCategoryCode::
  ActionObjectiveCategoryCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveCategoryCode_convert ();
  }

  ActionObjectiveCategoryCode* ActionObjectiveCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveCategoryCode (*this, f, c);
  }

  ActionObjectiveCategoryCode::value ActionObjectiveCategoryCode::
  _xsd_ActionObjectiveCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveCategoryCode_indexes_,
                      _xsd_ActionObjectiveCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveCategoryCode_indexes_ + 3 || _xsd_ActionObjectiveCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveCategoryCode::
  _xsd_ActionObjectiveCategoryCode_literals_[3] =
  {
    "OI",
    "OT",
    "OTASK"
  };

  const ActionObjectiveCategoryCode::value ActionObjectiveCategoryCode::
  _xsd_ActionObjectiveCategoryCode_indexes_[3] =
  {
    ::oo_2_0::ActionObjectiveCategoryCode::OI,
    ::oo_2_0::ActionObjectiveCategoryCode::OT,
    ::oo_2_0::ActionObjectiveCategoryCode::OTASK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveCategoryCode >
  _xsd_ActionObjectiveCategoryCode_type_factory_init (
    "ActionObjectiveCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveItemCategoryCode
  //

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveItemCategoryCode_convert ();
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveItemCategoryCode_convert ();
  }

  ActionObjectiveItemCategoryCode::
  ActionObjectiveItemCategoryCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveItemCategoryCode_convert ();
  }

  ActionObjectiveItemCategoryCode* ActionObjectiveItemCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveItemCategoryCode (*this, f, c);
  }

  ActionObjectiveItemCategoryCode::value ActionObjectiveItemCategoryCode::
  _xsd_ActionObjectiveItemCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveItemCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveItemCategoryCode_indexes_,
                      _xsd_ActionObjectiveItemCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveItemCategoryCode_indexes_ + 2 || _xsd_ActionObjectiveItemCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveItemCategoryCode::
  _xsd_ActionObjectiveItemCategoryCode_literals_[2] =
  {
    "NOS",
    "TARGET"
  };

  const ActionObjectiveItemCategoryCode::value ActionObjectiveItemCategoryCode::
  _xsd_ActionObjectiveItemCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionObjectiveItemCategoryCode::NOS,
    ::oo_2_0::ActionObjectiveItemCategoryCode::TARGET
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveItemCategoryCode >
  _xsd_ActionObjectiveItemCategoryCode_type_factory_init (
    "ActionObjectiveItemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveItemMarkingMethodCode
  //

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingMethodCode_convert ();
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveItemMarkingMethodCode_convert ();
  }

  ActionObjectiveItemMarkingMethodCode::
  ActionObjectiveItemMarkingMethodCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingMethodCode_convert ();
  }

  ActionObjectiveItemMarkingMethodCode* ActionObjectiveItemMarkingMethodCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveItemMarkingMethodCode (*this, f, c);
  }

  ActionObjectiveItemMarkingMethodCode::value ActionObjectiveItemMarkingMethodCode::
  _xsd_ActionObjectiveItemMarkingMethodCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveItemMarkingMethodCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveItemMarkingMethodCode_indexes_,
                      _xsd_ActionObjectiveItemMarkingMethodCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveItemMarkingMethodCode_indexes_ + 14 || _xsd_ActionObjectiveItemMarkingMethodCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveItemMarkingMethodCode::
  _xsd_ActionObjectiveItemMarkingMethodCode_literals_[14] =
  {
    "FLR",
    "ILLUMN",
    "LAS",
    "LIGHT",
    "MPL",
    "NKN",
    "NOS",
    "RBE",
    "SMOKE",
    "STRBBN",
    "STRBLT",
    "STRCLS",
    "TORCH",
    "VHCLLT"
  };

  const ActionObjectiveItemMarkingMethodCode::value ActionObjectiveItemMarkingMethodCode::
  _xsd_ActionObjectiveItemMarkingMethodCode_indexes_[14] =
  {
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::FLR,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::ILLUMN,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::LAS,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::LIGHT,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::MPL,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::NKN,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::NOS,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::RBE,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::SMOKE,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::STRBBN,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::STRBLT,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::STRCLS,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::TORCH,
    ::oo_2_0::ActionObjectiveItemMarkingMethodCode::VHCLLT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveItemMarkingMethodCode >
  _xsd_ActionObjectiveItemMarkingMethodCode_type_factory_init (
    "ActionObjectiveItemMarkingMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveItemMarkingPanelShapeCode
  //

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingPanelShapeCode_convert ();
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveItemMarkingPanelShapeCode_convert ();
  }

  ActionObjectiveItemMarkingPanelShapeCode::
  ActionObjectiveItemMarkingPanelShapeCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingPanelShapeCode_convert ();
  }

  ActionObjectiveItemMarkingPanelShapeCode* ActionObjectiveItemMarkingPanelShapeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveItemMarkingPanelShapeCode (*this, f, c);
  }

  ActionObjectiveItemMarkingPanelShapeCode::value ActionObjectiveItemMarkingPanelShapeCode::
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveItemMarkingPanelShapeCode_indexes_,
                      _xsd_ActionObjectiveItemMarkingPanelShapeCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveItemMarkingPanelShapeCode_indexes_ + 6 || _xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveItemMarkingPanelShapeCode::
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_[6] =
  {
    "HSHAPE",
    "ISHAPE",
    "NKN",
    "NOS",
    "TSHAPE",
    "XSHAPE"
  };

  const ActionObjectiveItemMarkingPanelShapeCode::value ActionObjectiveItemMarkingPanelShapeCode::
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_indexes_[6] =
  {
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::HSHAPE,
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::ISHAPE,
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::NKN,
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::NOS,
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::TSHAPE,
    ::oo_2_0::ActionObjectiveItemMarkingPanelShapeCode::XSHAPE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveItemMarkingPanelShapeCode >
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_type_factory_init (
    "ActionObjectiveItemMarkingPanelShapeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveItemMarkingRecognitionSignalColourCode
  //

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_convert ();
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ::xercesc::DOMAttr& a,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_convert ();
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::
  ActionObjectiveItemMarkingRecognitionSignalColourCode (const ::std::string& s,
                                                         const ::xercesc::DOMElement* e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_convert ();
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode* ActionObjectiveItemMarkingRecognitionSignalColourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveItemMarkingRecognitionSignalColourCode (*this, f, c);
  }

  ActionObjectiveItemMarkingRecognitionSignalColourCode::value ActionObjectiveItemMarkingRecognitionSignalColourCode::
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_indexes_,
                      _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_indexes_ + 9 || _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveItemMarkingRecognitionSignalColourCode::
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_[9] =
  {
    "BLUE",
    "GREEN",
    "NKN",
    "NOS",
    "ORANGE",
    "PURPLE",
    "RED",
    "WHITE",
    "YELLOW"
  };

  const ActionObjectiveItemMarkingRecognitionSignalColourCode::value ActionObjectiveItemMarkingRecognitionSignalColourCode::
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_indexes_[9] =
  {
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::BLUE,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::GREEN,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::NKN,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::NOS,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::ORANGE,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::PURPLE,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::RED,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::WHITE,
    ::oo_2_0::ActionObjectiveItemMarkingRecognitionSignalColourCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveItemMarkingRecognitionSignalColourCode >
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_type_factory_init (
    "ActionObjectiveItemMarkingRecognitionSignalColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveItemPrimacyCode
  //

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveItemPrimacyCode_convert ();
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveItemPrimacyCode_convert ();
  }

  ActionObjectiveItemPrimacyCode::
  ActionObjectiveItemPrimacyCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveItemPrimacyCode_convert ();
  }

  ActionObjectiveItemPrimacyCode* ActionObjectiveItemPrimacyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveItemPrimacyCode (*this, f, c);
  }

  ActionObjectiveItemPrimacyCode::value ActionObjectiveItemPrimacyCode::
  _xsd_ActionObjectiveItemPrimacyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveItemPrimacyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveItemPrimacyCode_indexes_,
                      _xsd_ActionObjectiveItemPrimacyCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveItemPrimacyCode_indexes_ + 3 || _xsd_ActionObjectiveItemPrimacyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveItemPrimacyCode::
  _xsd_ActionObjectiveItemPrimacyCode_literals_[3] =
  {
    "ALTERN",
    "PRIME",
    "SECOND"
  };

  const ActionObjectiveItemPrimacyCode::value ActionObjectiveItemPrimacyCode::
  _xsd_ActionObjectiveItemPrimacyCode_indexes_[3] =
  {
    ::oo_2_0::ActionObjectiveItemPrimacyCode::ALTERN,
    ::oo_2_0::ActionObjectiveItemPrimacyCode::PRIME,
    ::oo_2_0::ActionObjectiveItemPrimacyCode::SECOND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveItemPrimacyCode >
  _xsd_ActionObjectiveItemPrimacyCode_type_factory_init (
    "ActionObjectiveItemPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveQualifierCode
  //

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveQualifierCode_convert ();
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveQualifierCode_convert ();
  }

  ActionObjectiveQualifierCode::
  ActionObjectiveQualifierCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveQualifierCode_convert ();
  }

  ActionObjectiveQualifierCode* ActionObjectiveQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveQualifierCode (*this, f, c);
  }

  ActionObjectiveQualifierCode::value ActionObjectiveQualifierCode::
  _xsd_ActionObjectiveQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveQualifierCode_indexes_,
                      _xsd_ActionObjectiveQualifierCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveQualifierCode_indexes_ + 11 || _xsd_ActionObjectiveQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveQualifierCode::
  _xsd_ActionObjectiveQualifierCode_literals_[11] =
  {
    "AUTH",
    "DONTAT",
    "NEEL",
    "NENL",
    "NESL",
    "NEWL",
    "NOTA",
    "STAYAB",
    "STAYBL",
    "STAYIN",
    "STAYOT"
  };

  const ActionObjectiveQualifierCode::value ActionObjectiveQualifierCode::
  _xsd_ActionObjectiveQualifierCode_indexes_[11] =
  {
    ::oo_2_0::ActionObjectiveQualifierCode::AUTH,
    ::oo_2_0::ActionObjectiveQualifierCode::DONTAT,
    ::oo_2_0::ActionObjectiveQualifierCode::NEEL,
    ::oo_2_0::ActionObjectiveQualifierCode::NENL,
    ::oo_2_0::ActionObjectiveQualifierCode::NESL,
    ::oo_2_0::ActionObjectiveQualifierCode::NEWL,
    ::oo_2_0::ActionObjectiveQualifierCode::NOTA,
    ::oo_2_0::ActionObjectiveQualifierCode::STAYAB,
    ::oo_2_0::ActionObjectiveQualifierCode::STAYBL,
    ::oo_2_0::ActionObjectiveQualifierCode::STAYIN,
    ::oo_2_0::ActionObjectiveQualifierCode::STAYOT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveQualifierCode >
  _xsd_ActionObjectiveQualifierCode_type_factory_init (
    "ActionObjectiveQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveTypeCategoryCode
  //

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveTypeCategoryCode_convert ();
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveTypeCategoryCode_convert ();
  }

  ActionObjectiveTypeCategoryCode::
  ActionObjectiveTypeCategoryCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveTypeCategoryCode_convert ();
  }

  ActionObjectiveTypeCategoryCode* ActionObjectiveTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveTypeCategoryCode (*this, f, c);
  }

  ActionObjectiveTypeCategoryCode::value ActionObjectiveTypeCategoryCode::
  _xsd_ActionObjectiveTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveTypeCategoryCode_indexes_,
                      _xsd_ActionObjectiveTypeCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveTypeCategoryCode_indexes_ + 2 || _xsd_ActionObjectiveTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveTypeCategoryCode::
  _xsd_ActionObjectiveTypeCategoryCode_literals_[2] =
  {
    "AOTIMG",
    "NOS"
  };

  const ActionObjectiveTypeCategoryCode::value ActionObjectiveTypeCategoryCode::
  _xsd_ActionObjectiveTypeCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionObjectiveTypeCategoryCode::AOTIMG,
    ::oo_2_0::ActionObjectiveTypeCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveTypeCategoryCode >
  _xsd_ActionObjectiveTypeCategoryCode_type_factory_init (
    "ActionObjectiveTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionObjectiveTypeImageryProductImageTypeCode
  //

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionObjectiveTypeImageryProductImageTypeCode_convert ();
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionObjectiveTypeImageryProductImageTypeCode_convert ();
  }

  ActionObjectiveTypeImageryProductImageTypeCode::
  ActionObjectiveTypeImageryProductImageTypeCode (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionObjectiveTypeImageryProductImageTypeCode_convert ();
  }

  ActionObjectiveTypeImageryProductImageTypeCode* ActionObjectiveTypeImageryProductImageTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionObjectiveTypeImageryProductImageTypeCode (*this, f, c);
  }

  ActionObjectiveTypeImageryProductImageTypeCode::value ActionObjectiveTypeImageryProductImageTypeCode::
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionObjectiveTypeImageryProductImageTypeCode_indexes_,
                      _xsd_ActionObjectiveTypeImageryProductImageTypeCode_indexes_ + 16,
                      *this,
                      c));

    if (i == _xsd_ActionObjectiveTypeImageryProductImageTypeCode_indexes_ + 16 || _xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionObjectiveTypeImageryProductImageTypeCode::
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_[16] =
  {
    "10PRNT",
    "12PRNT",
    "8PRNT",
    "ANPRNT",
    "CDROM",
    "CNPRNT",
    "DUPFLE",
    "DUPNEG",
    "DUPPOS",
    "DUPTAP",
    "DVD",
    "MAXENL",
    "MOSAIC",
    "PLNGRP",
    "SONNE",
    "TGTGRP"
  };

  const ActionObjectiveTypeImageryProductImageTypeCode::value ActionObjectiveTypeImageryProductImageTypeCode::
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_indexes_[16] =
  {
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::cxx_10PRNT,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::cxx_12PRNT,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::cxx_8PRNT,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::ANPRNT,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::CDROM,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::CNPRNT,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::DUPFLE,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::DUPNEG,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::DUPPOS,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::DUPTAP,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::DVD,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::MAXENL,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::MOSAIC,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::PLNGRP,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::SONNE,
    ::oo_2_0::ActionObjectiveTypeImageryProductImageTypeCode::TGTGRP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionObjectiveTypeImageryProductImageTypeCode >
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_type_factory_init (
    "ActionObjectiveTypeImageryProductImageTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionReconnaissanceEmploymentImageCoverageModeCode
  //

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_convert ();
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ::xercesc::DOMAttr& a,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_convert ();
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::
  ActionReconnaissanceEmploymentImageCoverageModeCode (const ::std::string& s,
                                                       const ::xercesc::DOMElement* e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_convert ();
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode* ActionReconnaissanceEmploymentImageCoverageModeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionReconnaissanceEmploymentImageCoverageModeCode (*this, f, c);
  }

  ActionReconnaissanceEmploymentImageCoverageModeCode::value ActionReconnaissanceEmploymentImageCoverageModeCode::
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_indexes_,
                      _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_indexes_ + 6 || _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionReconnaissanceEmploymentImageCoverageModeCode::
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_[6] =
  {
    "MONOCC",
    "MONOPC",
    "PSMCC",
    "PSMPC",
    "STMCC",
    "STMPC"
  };

  const ActionReconnaissanceEmploymentImageCoverageModeCode::value ActionReconnaissanceEmploymentImageCoverageModeCode::
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_indexes_[6] =
  {
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::MONOCC,
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::MONOPC,
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::PSMCC,
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::PSMPC,
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::STMCC,
    ::oo_2_0::ActionReconnaissanceEmploymentImageCoverageModeCode::STMPC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionReconnaissanceEmploymentImageCoverageModeCode >
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_type_factory_init (
    "ActionReconnaissanceEmploymentImageCoverageModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionReconnaissanceEmploymentImageViewQualifierCode
  //

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_convert ();
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ::xercesc::DOMAttr& a,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_convert ();
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::
  ActionReconnaissanceEmploymentImageViewQualifierCode (const ::std::string& s,
                                                        const ::xercesc::DOMElement* e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_convert ();
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode* ActionReconnaissanceEmploymentImageViewQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionReconnaissanceEmploymentImageViewQualifierCode (*this, f, c);
  }

  ActionReconnaissanceEmploymentImageViewQualifierCode::value ActionReconnaissanceEmploymentImageViewQualifierCode::
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_indexes_,
                      _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_indexes_ + 7 || _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionReconnaissanceEmploymentImageViewQualifierCode::
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_[7] =
  {
    "DBEOIR",
    "DBMIEO",
    "ELCOPT",
    "MIDINF",
    "NSELEN",
    "THRINF",
    "VIDSFT"
  };

  const ActionReconnaissanceEmploymentImageViewQualifierCode::value ActionReconnaissanceEmploymentImageViewQualifierCode::
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_indexes_[7] =
  {
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::DBEOIR,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::DBMIEO,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::ELCOPT,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::MIDINF,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::NSELEN,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::THRINF,
    ::oo_2_0::ActionReconnaissanceEmploymentImageViewQualifierCode::VIDSFT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionReconnaissanceEmploymentImageViewQualifierCode >
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_type_factory_init (
    "ActionReconnaissanceEmploymentImageViewQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionReconnaissanceEmploymentTypeOfCoverageCode
  //

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_convert ();
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_convert ();
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::
  ActionReconnaissanceEmploymentTypeOfCoverageCode (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_convert ();
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode* ActionReconnaissanceEmploymentTypeOfCoverageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionReconnaissanceEmploymentTypeOfCoverageCode (*this, f, c);
  }

  ActionReconnaissanceEmploymentTypeOfCoverageCode::value ActionReconnaissanceEmploymentTypeOfCoverageCode::
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_indexes_,
                      _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_indexes_ + 25 || _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionReconnaissanceEmploymentTypeOfCoverageCode::
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_[25] =
  {
    "AFLOA",
    "AFLOAO",
    "AFLOAV",
    "AREAC",
    "AREACO",
    "AREACV",
    "AREAS",
    "AREASO",
    "AREASV",
    "BP",
    "BPO",
    "BPV",
    "LINESE",
    "PINPT",
    "PINPTO",
    "PINPTV",
    "ROUTE",
    "ROUTEO",
    "ROUTEV",
    "SPECS",
    "SPECSO",
    "SPECSV",
    "STRIP",
    "STRIPO",
    "STRIPV"
  };

  const ActionReconnaissanceEmploymentTypeOfCoverageCode::value ActionReconnaissanceEmploymentTypeOfCoverageCode::
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_indexes_[25] =
  {
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AFLOA,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AFLOAO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AFLOAV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREAC,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREACO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREACV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREAS,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREASO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::AREASV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::BP,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::BPO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::BPV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::LINESE,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::PINPT,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::PINPTO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::PINPTV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::ROUTE,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::ROUTEO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::ROUTEV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::SPECS,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::SPECSO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::SPECSV,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::STRIP,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::STRIPO,
    ::oo_2_0::ActionReconnaissanceEmploymentTypeOfCoverageCode::STRIPV
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionReconnaissanceEmploymentTypeOfCoverageCode >
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_type_factory_init (
    "ActionReconnaissanceEmploymentTypeOfCoverageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionCitationAssociationCategoryCode
  //

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionCitationAssociationCategoryCode_convert ();
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionCitationAssociationCategoryCode_convert ();
  }

  ActionCitationAssociationCategoryCode::
  ActionCitationAssociationCategoryCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionCitationAssociationCategoryCode_convert ();
  }

  ActionCitationAssociationCategoryCode* ActionCitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionCitationAssociationCategoryCode (*this, f, c);
  }

  ActionCitationAssociationCategoryCode::value ActionCitationAssociationCategoryCode::
  _xsd_ActionCitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionCitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionCitationAssociationCategoryCode_indexes_,
                      _xsd_ActionCitationAssociationCategoryCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_ActionCitationAssociationCategoryCode_indexes_ + 9 || _xsd_ActionCitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionCitationAssociationCategoryCode::
  _xsd_ActionCitationAssociationCategoryCode_literals_[9] =
  {
    "ISAMPL",
    "ISCHNG",
    "ISCNCL",
    "ISDFND",
    "ISDRCT",
    "ISDSCR",
    "ISPRBK",
    "ISRFRN",
    "ISRPTD"
  };

  const ActionCitationAssociationCategoryCode::value ActionCitationAssociationCategoryCode::
  _xsd_ActionCitationAssociationCategoryCode_indexes_[9] =
  {
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISAMPL,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISCHNG,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISCNCL,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISDFND,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISDRCT,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISDSCR,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISPRBK,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISRFRN,
    ::oo_2_0::ActionCitationAssociationCategoryCode::ISRPTD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionCitationAssociationCategoryCode >
  _xsd_ActionCitationAssociationCategoryCode_type_factory_init (
    "ActionCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceCategoryCode
  //

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceCategoryCode_convert ();
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceCategoryCode_convert ();
  }

  ActionResourceCategoryCode::
  ActionResourceCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceCategoryCode_convert ();
  }

  ActionResourceCategoryCode* ActionResourceCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceCategoryCode (*this, f, c);
  }

  ActionResourceCategoryCode::value ActionResourceCategoryCode::
  _xsd_ActionResourceCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceCategoryCode_indexes_,
                      _xsd_ActionResourceCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionResourceCategoryCode_indexes_ + 2 || _xsd_ActionResourceCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceCategoryCode::
  _xsd_ActionResourceCategoryCode_literals_[2] =
  {
    "RI",
    "RT"
  };

  const ActionResourceCategoryCode::value ActionResourceCategoryCode::
  _xsd_ActionResourceCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionResourceCategoryCode::RI,
    ::oo_2_0::ActionResourceCategoryCode::RT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceCategoryCode >
  _xsd_ActionResourceCategoryCode_type_factory_init (
    "ActionResourceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceCriticalityIndicatorCode
  //

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceCriticalityIndicatorCode_convert ();
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceCriticalityIndicatorCode_convert ();
  }

  ActionResourceCriticalityIndicatorCode::
  ActionResourceCriticalityIndicatorCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceCriticalityIndicatorCode_convert ();
  }

  ActionResourceCriticalityIndicatorCode* ActionResourceCriticalityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceCriticalityIndicatorCode (*this, f, c);
  }

  ActionResourceCriticalityIndicatorCode::value ActionResourceCriticalityIndicatorCode::
  _xsd_ActionResourceCriticalityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceCriticalityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceCriticalityIndicatorCode_indexes_,
                      _xsd_ActionResourceCriticalityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionResourceCriticalityIndicatorCode_indexes_ + 2 || _xsd_ActionResourceCriticalityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceCriticalityIndicatorCode::
  _xsd_ActionResourceCriticalityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ActionResourceCriticalityIndicatorCode::value ActionResourceCriticalityIndicatorCode::
  _xsd_ActionResourceCriticalityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ActionResourceCriticalityIndicatorCode::NO,
    ::oo_2_0::ActionResourceCriticalityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceCriticalityIndicatorCode >
  _xsd_ActionResourceCriticalityIndicatorCode_type_factory_init (
    "ActionResourceCriticalityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceEmploymentCategoryCode
  //

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceEmploymentCategoryCode_convert ();
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceEmploymentCategoryCode_convert ();
  }

  ActionResourceEmploymentCategoryCode::
  ActionResourceEmploymentCategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceEmploymentCategoryCode_convert ();
  }

  ActionResourceEmploymentCategoryCode* ActionResourceEmploymentCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceEmploymentCategoryCode (*this, f, c);
  }

  ActionResourceEmploymentCategoryCode::value ActionResourceEmploymentCategoryCode::
  _xsd_ActionResourceEmploymentCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceEmploymentCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceEmploymentCategoryCode_indexes_,
                      _xsd_ActionResourceEmploymentCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ActionResourceEmploymentCategoryCode_indexes_ + 5 || _xsd_ActionResourceEmploymentCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceEmploymentCategoryCode::
  _xsd_ActionResourceEmploymentCategoryCode_literals_[5] =
  {
    "AIREMP",
    "ELCEMP",
    "MAREMP",
    "NOS",
    "RECEMP"
  };

  const ActionResourceEmploymentCategoryCode::value ActionResourceEmploymentCategoryCode::
  _xsd_ActionResourceEmploymentCategoryCode_indexes_[5] =
  {
    ::oo_2_0::ActionResourceEmploymentCategoryCode::AIREMP,
    ::oo_2_0::ActionResourceEmploymentCategoryCode::ELCEMP,
    ::oo_2_0::ActionResourceEmploymentCategoryCode::MAREMP,
    ::oo_2_0::ActionResourceEmploymentCategoryCode::NOS,
    ::oo_2_0::ActionResourceEmploymentCategoryCode::RECEMP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceEmploymentCategoryCode >
  _xsd_ActionResourceEmploymentCategoryCode_type_factory_init (
    "ActionResourceEmploymentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceEmploymentMethodOfControlCode
  //

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceEmploymentMethodOfControlCode_convert ();
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceEmploymentMethodOfControlCode_convert ();
  }

  ActionResourceEmploymentMethodOfControlCode::
  ActionResourceEmploymentMethodOfControlCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceEmploymentMethodOfControlCode_convert ();
  }

  ActionResourceEmploymentMethodOfControlCode* ActionResourceEmploymentMethodOfControlCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceEmploymentMethodOfControlCode (*this, f, c);
  }

  ActionResourceEmploymentMethodOfControlCode::value ActionResourceEmploymentMethodOfControlCode::
  _xsd_ActionResourceEmploymentMethodOfControlCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceEmploymentMethodOfControlCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceEmploymentMethodOfControlCode_indexes_,
                      _xsd_ActionResourceEmploymentMethodOfControlCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionResourceEmploymentMethodOfControlCode_indexes_ + 2 || _xsd_ActionResourceEmploymentMethodOfControlCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceEmploymentMethodOfControlCode::
  _xsd_ActionResourceEmploymentMethodOfControlCode_literals_[2] =
  {
    "ASORD",
    "ONORD"
  };

  const ActionResourceEmploymentMethodOfControlCode::value ActionResourceEmploymentMethodOfControlCode::
  _xsd_ActionResourceEmploymentMethodOfControlCode_indexes_[2] =
  {
    ::oo_2_0::ActionResourceEmploymentMethodOfControlCode::ASORD,
    ::oo_2_0::ActionResourceEmploymentMethodOfControlCode::ONORD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceEmploymentMethodOfControlCode >
  _xsd_ActionResourceEmploymentMethodOfControlCode_type_factory_init (
    "ActionResourceEmploymentMethodOfControlCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceEmploymentTrajectoryFireCode
  //

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceEmploymentTrajectoryFireCode_convert ();
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceEmploymentTrajectoryFireCode_convert ();
  }

  ActionResourceEmploymentTrajectoryFireCode::
  ActionResourceEmploymentTrajectoryFireCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceEmploymentTrajectoryFireCode_convert ();
  }

  ActionResourceEmploymentTrajectoryFireCode* ActionResourceEmploymentTrajectoryFireCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceEmploymentTrajectoryFireCode (*this, f, c);
  }

  ActionResourceEmploymentTrajectoryFireCode::value ActionResourceEmploymentTrajectoryFireCode::
  _xsd_ActionResourceEmploymentTrajectoryFireCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceEmploymentTrajectoryFireCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceEmploymentTrajectoryFireCode_indexes_,
                      _xsd_ActionResourceEmploymentTrajectoryFireCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionResourceEmploymentTrajectoryFireCode_indexes_ + 2 || _xsd_ActionResourceEmploymentTrajectoryFireCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceEmploymentTrajectoryFireCode::
  _xsd_ActionResourceEmploymentTrajectoryFireCode_literals_[2] =
  {
    "HIGH",
    "LOW"
  };

  const ActionResourceEmploymentTrajectoryFireCode::value ActionResourceEmploymentTrajectoryFireCode::
  _xsd_ActionResourceEmploymentTrajectoryFireCode_indexes_[2] =
  {
    ::oo_2_0::ActionResourceEmploymentTrajectoryFireCode::HIGH,
    ::oo_2_0::ActionResourceEmploymentTrajectoryFireCode::LOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceEmploymentTrajectoryFireCode >
  _xsd_ActionResourceEmploymentTrajectoryFireCode_type_factory_init (
    "ActionResourceEmploymentTrajectoryFireCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionResourceQualifierCode
  //

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionResourceQualifierCode_convert ();
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionResourceQualifierCode_convert ();
  }

  ActionResourceQualifierCode::
  ActionResourceQualifierCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionResourceQualifierCode_convert ();
  }

  ActionResourceQualifierCode* ActionResourceQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionResourceQualifierCode (*this, f, c);
  }

  ActionResourceQualifierCode::value ActionResourceQualifierCode::
  _xsd_ActionResourceQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionResourceQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionResourceQualifierCode_indexes_,
                      _xsd_ActionResourceQualifierCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_ActionResourceQualifierCode_indexes_ + 12 || _xsd_ActionResourceQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionResourceQualifierCode::
  _xsd_ActionResourceQualifierCode_literals_[12] =
  {
    "AUTH",
    "MAXU",
    "MINU",
    "NEEL",
    "NENL",
    "NESL",
    "NEWL",
    "NOTA",
    "STAYAB",
    "STAYBL",
    "STAYIN",
    "STAYOT"
  };

  const ActionResourceQualifierCode::value ActionResourceQualifierCode::
  _xsd_ActionResourceQualifierCode_indexes_[12] =
  {
    ::oo_2_0::ActionResourceQualifierCode::AUTH,
    ::oo_2_0::ActionResourceQualifierCode::MAXU,
    ::oo_2_0::ActionResourceQualifierCode::MINU,
    ::oo_2_0::ActionResourceQualifierCode::NEEL,
    ::oo_2_0::ActionResourceQualifierCode::NENL,
    ::oo_2_0::ActionResourceQualifierCode::NESL,
    ::oo_2_0::ActionResourceQualifierCode::NEWL,
    ::oo_2_0::ActionResourceQualifierCode::NOTA,
    ::oo_2_0::ActionResourceQualifierCode::STAYAB,
    ::oo_2_0::ActionResourceQualifierCode::STAYBL,
    ::oo_2_0::ActionResourceQualifierCode::STAYIN,
    ::oo_2_0::ActionResourceQualifierCode::STAYOT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionResourceQualifierCode >
  _xsd_ActionResourceQualifierCode_type_factory_init (
    "ActionResourceQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskActivityCode
  //

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskActivityCode_convert ();
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskActivityCode_convert ();
  }

  ActionTaskActivityCode::
  ActionTaskActivityCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskActivityCode_convert ();
  }

  ActionTaskActivityCode* ActionTaskActivityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskActivityCode (*this, f, c);
  }

  ActionTaskActivityCode::value ActionTaskActivityCode::
  _xsd_ActionTaskActivityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskActivityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskActivityCode_indexes_,
                      _xsd_ActionTaskActivityCode_indexes_ + 445,
                      *this,
                      c));

    if (i == _xsd_ActionTaskActivityCode_indexes_ + 445 || _xsd_ActionTaskActivityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskActivityCode::
  _xsd_ActionTaskActivityCode_literals_[445] =
  {
    "ACQUIR",
    "ADVANC",
    "AEREVA",
    "AERRFL",
    "AEW",
    "AEWCON",
    "AIRDEF",
    "AIRLND",
    "AIRSUP",
    "AIRSWP",
    "AMBUSH",
    "AMPH",
    "AMPHWF",
    "ANALYS",
    "ANARWF",
    "ANSBWF",
    "ANSFWF",
    "ANTARM",
    "ARASLT",
    "ARBNAS",
    "ARCCTL",
    "ARDREQ",
    "ARDROP",
    "ARINTR",
    "ARLFSA",
    "ARLFTR",
    "ARMAS",
    "ARRLGL",
    "ARROBS",
    "ARTCTL",
    "ASSMBL",
    "ATTACK",
    "ATTDVR",
    "ATTEL",
    "ATTMN",
    "ATTRIT",
    "ATTSPT",
    "AVOID",
    "AWACS",
    "BIOSMP",
    "BLDUP",
    "BLOCK",
    "BRAKUP",
    "BREACH",
    "BYPASS",
    "CADVGD",
    "CANDC",
    "CANLSE",
    "CAPBAR",
    "CAPNGR",
    "CAPPRT",
    "CAPRES",
    "CAPSRF",
    "CAPTUR",
    "CARLNC",
    "CARREC",
    "CBRHDF",
    "CBRKOF",
    "CDWDAC",
    "CFLKGD",
    "CHAFF",
    "CHMSMP",
    "CINPLF",
    "CLARSP",
    "CLOSE",
    "CLRAIR",
    "CLRLND",
    "CLROBS",
    "CLRRAD",
    "CMAINB",
    "CNFPSL",
    "CNFSTE",
    "CNRPSL",
    "CNRSVC",
    "CNSLDT",
    "COARPL",
    "COMC3I",
    "COMINC",
    "COMREL",
    "CONSTR",
    "CONTAN",
    "COOPER",
    "COURER",
    "COVER",
    "CRESRV",
    "CROSS",
    "CRRGD",
    "CTRATK",
    "CTRBYF",
    "CTRFIR",
    "DAZZLE",
    "DCPTEL",
    "DEBARK",
    "DECEIV",
    "DECSVC",
    "DEFCNT",
    "DEFDST",
    "DEFEAT",
    "DEFEND",
    "DEFLCT",
    "DEFSUP",
    "DELAY",
    "DEMFRP",
    "DEMGRD",
    "DEMO",
    "DENY",
    "DEPLOY",
    "DESCRB",
    "DESTRY",
    "DETECT",
    "DISENG",
    "DISRPT",
    "DIVE",
    "DIVERT",
    "DLBATK",
    "DRONL",
    "DSTRBT",
    "DUMPNG",
    "ELCCNM",
    "ELCWAR",
    "ELCWRS",
    "EMBARK",
    "ENGAGE",
    "ENVLP",
    "ESCRT",
    "EVACT",
    "EXFLTR",
    "EXPLT",
    "FIX",
    "FIXACO",
    "FIXELM",
    "FIXELO",
    "FNCHFL",
    "FOLASS",
    "FOLSPT",
    "FRWDAC",
    "GENCHS",
    "GUARD",
    "HARASS",
    "HASTY",
    "HIDE",
    "HLDDEF",
    "HLDOFF",
    "HONASP",
    "IDENT",
    "IDENTP",
    "ILLUMN",
    "IMINGT",
    "INFILT",
    "INFOOP",
    "INTCEP",
    "INTCOL",
    "INTDCT",
    "ISOLAT",
    "ISSMDA",
    "ISSMDD",
    "ISSPRS",
    "JAM",
    "LAY",
    "LEAGR",
    "LIFT",
    "LIFTAD",
    "LOCATE",
    "MAINTN",
    "MAP",
    "MARK",
    "MASSFR",
    "MCM11",
    "MCM12",
    "MCM13",
    "MCM14",
    "MCM31",
    "MCM32",
    "MCM33",
    "MCM34",
    "MCM35",
    "MCM36",
    "MCM37",
    "MCM38",
    "MCM39",
    "MCM41",
    "MCM42",
    "MCM43",
    "MCM44",
    "MCM45",
    "MCM46",
    "MCM47",
    "MCM48",
    "MCM50",
    "MCM51",
    "MCM52",
    "MCM53",
    "MCM54",
    "MCM55",
    "MCM56",
    "MCM57",
    "MCM58A",
    "MCM58B",
    "MCM58C",
    "MCM59",
    "MCM61",
    "MCM62",
    "MCM63",
    "MCM71",
    "MCM72",
    "MCM73",
    "MCM74",
    "MCM75",
    "MCM81",
    "MCM82",
    "MCM83",
    "MCM84",
    "MCM85",
    "MCM86",
    "MCM87",
    "MCM88",
    "MCM89",
    "MCM91",
    "MCM92",
    "MCM93",
    "MCMATT",
    "MCMCHK",
    "MCMEXP",
    "MCMLDT",
    "MCMLMC",
    "MCMPRE",
    "MCMSA",
    "MCMSAA",
    "MCMSAC",
    "MCMSAD",
    "MCMSAG",
    "MCMSAH",
    "MCMSAM",
    "MCMSAZ",
    "MCMSB",
    "MCMSBZ",
    "MCMSC",
    "MCMSCA",
    "MCMSCC",
    "MCMSCD",
    "MCMSCG",
    "MCMSCH",
    "MCMSCM",
    "MCMSCZ",
    "MCMSE",
    "MCMSEA",
    "MCMSEC",
    "MCMSED",
    "MCMSEG",
    "MCMSEH",
    "MCMSEM",
    "MCMSEZ",
    "MCMSL",
    "MCMSLA",
    "MCMSLH",
    "MCMSLM",
    "MCMSLZ",
    "MCMSP",
    "MCMSPA",
    "MCMSPC",
    "MCMSPG",
    "MCMSPH",
    "MCMSPM",
    "MCMSPZ",
    "MCMSR",
    "MCMSRD",
    "MCMSRH",
    "MCMSRV",
    "MCMSS",
    "MCMSSA",
    "MCMSSC",
    "MCMSSD",
    "MCMSSG",
    "MCMSSH",
    "MCMSSM",
    "MCMSSZ",
    "MCMSU",
    "MCMSUH",
    "MCMSUZ",
    "MCMSV",
    "MCMSVA",
    "MCMSVC",
    "MCMSVD",
    "MCMSVG",
    "MCMSVH",
    "MCMSVM",
    "MCMSVZ",
    "MCMSW",
    "MCMSWZ",
    "MCMSZZ",
    "MCMTML",
    "MEDEVC",
    "METBAL",
    "MINCM",
    "MINEWF",
    "MINLAY",
    "MINSWP",
    "MISSTG",
    "MNHUNT",
    "MNSWMA",
    "MNTAIR",
    "MNTGRD",
    "MOPUP",
    "MOVE",
    "MPA",
    "MRITOP",
    "NACLSP",
    "NTRCHM",
    "NTRCOM",
    "NTREXP",
    "NUCSMP",
    "NVLPLF",
    "OBSCUR",
    "OBSRV",
    "OCCUPY",
    "OFFAIR",
    "OFFCNA",
    "ORGCNF",
    "ORGMED",
    "ORGRCR",
    "ORGSCL",
    "ORGSPT",
    "PATROL",
    "PENTRT",
    "PHOTO",
    "PLAN",
    "PREFIR",
    "PREPR",
    "PROCUR",
    "PROTEL",
    "PRVACC",
    "PRVAGR",
    "PRVBDD",
    "PRVCMP",
    "PRVCNS",
    "PRVEDU",
    "PRVHLT",
    "PRVINF",
    "PRVLND",
    "PRVRPR",
    "PRVSCY",
    "PRVSHL",
    "PRVSTG",
    "PRVTRS",
    "PSYCHW",
    "PUBMDA",
    "PUBMDD",
    "PUBPRS",
    "PURSUE",
    "RCALIB",
    "RECARM",
    "RECCE",
    "RECCEF",
    "RECCEL",
    "RECCES",
    "RECECM",
    "RECONS",
    "RECOVR",
    "RECPHO",
    "RECRAD",
    "RECTGT",
    "RECUPR",
    "RECVIS",
    "REDEPL",
    "REFILL",
    "REFORM",
    "REFUEL",
    "REINF",
    "REORG",
    "REPAIR",
    "RESCUE",
    "REST",
    "RESUPL",
    "RETAIN",
    "RETIRE",
    "RLFPLC",
    "RNDZVA",
    "RNDZVB",
    "RNDZVC",
    "RNDZVD",
    "RNDZVE",
    "RNDZVF",
    "RNDZVG",
    "RNDZVS",
    "SAR",
    "SARCME",
    "SARCMI",
    "SARPLG",
    "SCOUT",
    "SCREEN",
    "SCRMBL",
    "SECURE",
    "SECURT",
    "SEIZE",
    "SENSIM",
    "SERASE",
    "SERATE",
    "SERCH",
    "SERFLO",
    "SERFOE",
    "SERFRE",
    "SERFTE",
    "SERFUE",
    "SERREE",
    "SERRSE",
    "SERSEA",
    "SERSOE",
    "SERSPE",
    "SERSTE",
    "SERSTR",
    "SERTHR",
    "SETUP",
    "SINGA",
    "SPCOPS",
    "SPREAD",
    "SPTCON",
    "SPTELC",
    "SRCHFR",
    "SRCRES",
    "STRCON",
    "STRWAF",
    "SUBWAF",
    "SUPPRS",
    "SUPPRT",
    "SURVEL",
    "SURVLE",
    "SUSOAA",
    "SWEEP",
    "TCARRC",
    "TGTDLT",
    "THREAT",
    "TOWTGT",
    "TRAIN",
    "TRANOP",
    "TRANS",
    "TRNSAA",
    "TRVRS",
    "TURN",
    "UNCONW",
    "UTILTY",
    "VERIFY",
    "WDRPRS",
    "WITHDR",
    "WITNES",
    "WLDWSL"
  };

  const ActionTaskActivityCode::value ActionTaskActivityCode::
  _xsd_ActionTaskActivityCode_indexes_[445] =
  {
    ::oo_2_0::ActionTaskActivityCode::ACQUIR,
    ::oo_2_0::ActionTaskActivityCode::ADVANC,
    ::oo_2_0::ActionTaskActivityCode::AEREVA,
    ::oo_2_0::ActionTaskActivityCode::AERRFL,
    ::oo_2_0::ActionTaskActivityCode::AEW,
    ::oo_2_0::ActionTaskActivityCode::AEWCON,
    ::oo_2_0::ActionTaskActivityCode::AIRDEF,
    ::oo_2_0::ActionTaskActivityCode::AIRLND,
    ::oo_2_0::ActionTaskActivityCode::AIRSUP,
    ::oo_2_0::ActionTaskActivityCode::AIRSWP,
    ::oo_2_0::ActionTaskActivityCode::AMBUSH,
    ::oo_2_0::ActionTaskActivityCode::AMPH,
    ::oo_2_0::ActionTaskActivityCode::AMPHWF,
    ::oo_2_0::ActionTaskActivityCode::ANALYS,
    ::oo_2_0::ActionTaskActivityCode::ANARWF,
    ::oo_2_0::ActionTaskActivityCode::ANSBWF,
    ::oo_2_0::ActionTaskActivityCode::ANSFWF,
    ::oo_2_0::ActionTaskActivityCode::ANTARM,
    ::oo_2_0::ActionTaskActivityCode::ARASLT,
    ::oo_2_0::ActionTaskActivityCode::ARBNAS,
    ::oo_2_0::ActionTaskActivityCode::ARCCTL,
    ::oo_2_0::ActionTaskActivityCode::ARDREQ,
    ::oo_2_0::ActionTaskActivityCode::ARDROP,
    ::oo_2_0::ActionTaskActivityCode::ARINTR,
    ::oo_2_0::ActionTaskActivityCode::ARLFSA,
    ::oo_2_0::ActionTaskActivityCode::ARLFTR,
    ::oo_2_0::ActionTaskActivityCode::ARMAS,
    ::oo_2_0::ActionTaskActivityCode::ARRLGL,
    ::oo_2_0::ActionTaskActivityCode::ARROBS,
    ::oo_2_0::ActionTaskActivityCode::ARTCTL,
    ::oo_2_0::ActionTaskActivityCode::ASSMBL,
    ::oo_2_0::ActionTaskActivityCode::ATTACK,
    ::oo_2_0::ActionTaskActivityCode::ATTDVR,
    ::oo_2_0::ActionTaskActivityCode::ATTEL,
    ::oo_2_0::ActionTaskActivityCode::ATTMN,
    ::oo_2_0::ActionTaskActivityCode::ATTRIT,
    ::oo_2_0::ActionTaskActivityCode::ATTSPT,
    ::oo_2_0::ActionTaskActivityCode::AVOID,
    ::oo_2_0::ActionTaskActivityCode::AWACS,
    ::oo_2_0::ActionTaskActivityCode::BIOSMP,
    ::oo_2_0::ActionTaskActivityCode::BLDUP,
    ::oo_2_0::ActionTaskActivityCode::BLOCK,
    ::oo_2_0::ActionTaskActivityCode::BRAKUP,
    ::oo_2_0::ActionTaskActivityCode::BREACH,
    ::oo_2_0::ActionTaskActivityCode::BYPASS,
    ::oo_2_0::ActionTaskActivityCode::CADVGD,
    ::oo_2_0::ActionTaskActivityCode::CANDC,
    ::oo_2_0::ActionTaskActivityCode::CANLSE,
    ::oo_2_0::ActionTaskActivityCode::CAPBAR,
    ::oo_2_0::ActionTaskActivityCode::CAPNGR,
    ::oo_2_0::ActionTaskActivityCode::CAPPRT,
    ::oo_2_0::ActionTaskActivityCode::CAPRES,
    ::oo_2_0::ActionTaskActivityCode::CAPSRF,
    ::oo_2_0::ActionTaskActivityCode::CAPTUR,
    ::oo_2_0::ActionTaskActivityCode::CARLNC,
    ::oo_2_0::ActionTaskActivityCode::CARREC,
    ::oo_2_0::ActionTaskActivityCode::CBRHDF,
    ::oo_2_0::ActionTaskActivityCode::CBRKOF,
    ::oo_2_0::ActionTaskActivityCode::CDWDAC,
    ::oo_2_0::ActionTaskActivityCode::CFLKGD,
    ::oo_2_0::ActionTaskActivityCode::CHAFF,
    ::oo_2_0::ActionTaskActivityCode::CHMSMP,
    ::oo_2_0::ActionTaskActivityCode::CINPLF,
    ::oo_2_0::ActionTaskActivityCode::CLARSP,
    ::oo_2_0::ActionTaskActivityCode::CLOSE,
    ::oo_2_0::ActionTaskActivityCode::CLRAIR,
    ::oo_2_0::ActionTaskActivityCode::CLRLND,
    ::oo_2_0::ActionTaskActivityCode::CLROBS,
    ::oo_2_0::ActionTaskActivityCode::CLRRAD,
    ::oo_2_0::ActionTaskActivityCode::CMAINB,
    ::oo_2_0::ActionTaskActivityCode::CNFPSL,
    ::oo_2_0::ActionTaskActivityCode::CNFSTE,
    ::oo_2_0::ActionTaskActivityCode::CNRPSL,
    ::oo_2_0::ActionTaskActivityCode::CNRSVC,
    ::oo_2_0::ActionTaskActivityCode::CNSLDT,
    ::oo_2_0::ActionTaskActivityCode::COARPL,
    ::oo_2_0::ActionTaskActivityCode::COMC3I,
    ::oo_2_0::ActionTaskActivityCode::COMINC,
    ::oo_2_0::ActionTaskActivityCode::COMREL,
    ::oo_2_0::ActionTaskActivityCode::CONSTR,
    ::oo_2_0::ActionTaskActivityCode::CONTAN,
    ::oo_2_0::ActionTaskActivityCode::COOPER,
    ::oo_2_0::ActionTaskActivityCode::COURER,
    ::oo_2_0::ActionTaskActivityCode::COVER,
    ::oo_2_0::ActionTaskActivityCode::CRESRV,
    ::oo_2_0::ActionTaskActivityCode::CROSS,
    ::oo_2_0::ActionTaskActivityCode::CRRGD,
    ::oo_2_0::ActionTaskActivityCode::CTRATK,
    ::oo_2_0::ActionTaskActivityCode::CTRBYF,
    ::oo_2_0::ActionTaskActivityCode::CTRFIR,
    ::oo_2_0::ActionTaskActivityCode::DAZZLE,
    ::oo_2_0::ActionTaskActivityCode::DCPTEL,
    ::oo_2_0::ActionTaskActivityCode::DEBARK,
    ::oo_2_0::ActionTaskActivityCode::DECEIV,
    ::oo_2_0::ActionTaskActivityCode::DECSVC,
    ::oo_2_0::ActionTaskActivityCode::DEFCNT,
    ::oo_2_0::ActionTaskActivityCode::DEFDST,
    ::oo_2_0::ActionTaskActivityCode::DEFEAT,
    ::oo_2_0::ActionTaskActivityCode::DEFEND,
    ::oo_2_0::ActionTaskActivityCode::DEFLCT,
    ::oo_2_0::ActionTaskActivityCode::DEFSUP,
    ::oo_2_0::ActionTaskActivityCode::DELAY,
    ::oo_2_0::ActionTaskActivityCode::DEMFRP,
    ::oo_2_0::ActionTaskActivityCode::DEMGRD,
    ::oo_2_0::ActionTaskActivityCode::DEMO,
    ::oo_2_0::ActionTaskActivityCode::DENY,
    ::oo_2_0::ActionTaskActivityCode::DEPLOY,
    ::oo_2_0::ActionTaskActivityCode::DESCRB,
    ::oo_2_0::ActionTaskActivityCode::DESTRY,
    ::oo_2_0::ActionTaskActivityCode::DETECT,
    ::oo_2_0::ActionTaskActivityCode::DISENG,
    ::oo_2_0::ActionTaskActivityCode::DISRPT,
    ::oo_2_0::ActionTaskActivityCode::DIVE,
    ::oo_2_0::ActionTaskActivityCode::DIVERT,
    ::oo_2_0::ActionTaskActivityCode::DLBATK,
    ::oo_2_0::ActionTaskActivityCode::DRONL,
    ::oo_2_0::ActionTaskActivityCode::DSTRBT,
    ::oo_2_0::ActionTaskActivityCode::DUMPNG,
    ::oo_2_0::ActionTaskActivityCode::ELCCNM,
    ::oo_2_0::ActionTaskActivityCode::ELCWAR,
    ::oo_2_0::ActionTaskActivityCode::ELCWRS,
    ::oo_2_0::ActionTaskActivityCode::EMBARK,
    ::oo_2_0::ActionTaskActivityCode::ENGAGE,
    ::oo_2_0::ActionTaskActivityCode::ENVLP,
    ::oo_2_0::ActionTaskActivityCode::ESCRT,
    ::oo_2_0::ActionTaskActivityCode::EVACT,
    ::oo_2_0::ActionTaskActivityCode::EXFLTR,
    ::oo_2_0::ActionTaskActivityCode::EXPLT,
    ::oo_2_0::ActionTaskActivityCode::FIX,
    ::oo_2_0::ActionTaskActivityCode::FIXACO,
    ::oo_2_0::ActionTaskActivityCode::FIXELM,
    ::oo_2_0::ActionTaskActivityCode::FIXELO,
    ::oo_2_0::ActionTaskActivityCode::FNCHFL,
    ::oo_2_0::ActionTaskActivityCode::FOLASS,
    ::oo_2_0::ActionTaskActivityCode::FOLSPT,
    ::oo_2_0::ActionTaskActivityCode::FRWDAC,
    ::oo_2_0::ActionTaskActivityCode::GENCHS,
    ::oo_2_0::ActionTaskActivityCode::GUARD,
    ::oo_2_0::ActionTaskActivityCode::HARASS,
    ::oo_2_0::ActionTaskActivityCode::HASTY,
    ::oo_2_0::ActionTaskActivityCode::HIDE,
    ::oo_2_0::ActionTaskActivityCode::HLDDEF,
    ::oo_2_0::ActionTaskActivityCode::HLDOFF,
    ::oo_2_0::ActionTaskActivityCode::HONASP,
    ::oo_2_0::ActionTaskActivityCode::IDENT,
    ::oo_2_0::ActionTaskActivityCode::IDENTP,
    ::oo_2_0::ActionTaskActivityCode::ILLUMN,
    ::oo_2_0::ActionTaskActivityCode::IMINGT,
    ::oo_2_0::ActionTaskActivityCode::INFILT,
    ::oo_2_0::ActionTaskActivityCode::INFOOP,
    ::oo_2_0::ActionTaskActivityCode::INTCEP,
    ::oo_2_0::ActionTaskActivityCode::INTCOL,
    ::oo_2_0::ActionTaskActivityCode::INTDCT,
    ::oo_2_0::ActionTaskActivityCode::ISOLAT,
    ::oo_2_0::ActionTaskActivityCode::ISSMDA,
    ::oo_2_0::ActionTaskActivityCode::ISSMDD,
    ::oo_2_0::ActionTaskActivityCode::ISSPRS,
    ::oo_2_0::ActionTaskActivityCode::JAM,
    ::oo_2_0::ActionTaskActivityCode::LAY,
    ::oo_2_0::ActionTaskActivityCode::LEAGR,
    ::oo_2_0::ActionTaskActivityCode::LIFT,
    ::oo_2_0::ActionTaskActivityCode::LIFTAD,
    ::oo_2_0::ActionTaskActivityCode::LOCATE,
    ::oo_2_0::ActionTaskActivityCode::MAINTN,
    ::oo_2_0::ActionTaskActivityCode::MAP,
    ::oo_2_0::ActionTaskActivityCode::MARK,
    ::oo_2_0::ActionTaskActivityCode::MASSFR,
    ::oo_2_0::ActionTaskActivityCode::MCM11,
    ::oo_2_0::ActionTaskActivityCode::MCM12,
    ::oo_2_0::ActionTaskActivityCode::MCM13,
    ::oo_2_0::ActionTaskActivityCode::MCM14,
    ::oo_2_0::ActionTaskActivityCode::MCM31,
    ::oo_2_0::ActionTaskActivityCode::MCM32,
    ::oo_2_0::ActionTaskActivityCode::MCM33,
    ::oo_2_0::ActionTaskActivityCode::MCM34,
    ::oo_2_0::ActionTaskActivityCode::MCM35,
    ::oo_2_0::ActionTaskActivityCode::MCM36,
    ::oo_2_0::ActionTaskActivityCode::MCM37,
    ::oo_2_0::ActionTaskActivityCode::MCM38,
    ::oo_2_0::ActionTaskActivityCode::MCM39,
    ::oo_2_0::ActionTaskActivityCode::MCM41,
    ::oo_2_0::ActionTaskActivityCode::MCM42,
    ::oo_2_0::ActionTaskActivityCode::MCM43,
    ::oo_2_0::ActionTaskActivityCode::MCM44,
    ::oo_2_0::ActionTaskActivityCode::MCM45,
    ::oo_2_0::ActionTaskActivityCode::MCM46,
    ::oo_2_0::ActionTaskActivityCode::MCM47,
    ::oo_2_0::ActionTaskActivityCode::MCM48,
    ::oo_2_0::ActionTaskActivityCode::MCM50,
    ::oo_2_0::ActionTaskActivityCode::MCM51,
    ::oo_2_0::ActionTaskActivityCode::MCM52,
    ::oo_2_0::ActionTaskActivityCode::MCM53,
    ::oo_2_0::ActionTaskActivityCode::MCM54,
    ::oo_2_0::ActionTaskActivityCode::MCM55,
    ::oo_2_0::ActionTaskActivityCode::MCM56,
    ::oo_2_0::ActionTaskActivityCode::MCM57,
    ::oo_2_0::ActionTaskActivityCode::MCM58A,
    ::oo_2_0::ActionTaskActivityCode::MCM58B,
    ::oo_2_0::ActionTaskActivityCode::MCM58C,
    ::oo_2_0::ActionTaskActivityCode::MCM59,
    ::oo_2_0::ActionTaskActivityCode::MCM61,
    ::oo_2_0::ActionTaskActivityCode::MCM62,
    ::oo_2_0::ActionTaskActivityCode::MCM63,
    ::oo_2_0::ActionTaskActivityCode::MCM71,
    ::oo_2_0::ActionTaskActivityCode::MCM72,
    ::oo_2_0::ActionTaskActivityCode::MCM73,
    ::oo_2_0::ActionTaskActivityCode::MCM74,
    ::oo_2_0::ActionTaskActivityCode::MCM75,
    ::oo_2_0::ActionTaskActivityCode::MCM81,
    ::oo_2_0::ActionTaskActivityCode::MCM82,
    ::oo_2_0::ActionTaskActivityCode::MCM83,
    ::oo_2_0::ActionTaskActivityCode::MCM84,
    ::oo_2_0::ActionTaskActivityCode::MCM85,
    ::oo_2_0::ActionTaskActivityCode::MCM86,
    ::oo_2_0::ActionTaskActivityCode::MCM87,
    ::oo_2_0::ActionTaskActivityCode::MCM88,
    ::oo_2_0::ActionTaskActivityCode::MCM89,
    ::oo_2_0::ActionTaskActivityCode::MCM91,
    ::oo_2_0::ActionTaskActivityCode::MCM92,
    ::oo_2_0::ActionTaskActivityCode::MCM93,
    ::oo_2_0::ActionTaskActivityCode::MCMATT,
    ::oo_2_0::ActionTaskActivityCode::MCMCHK,
    ::oo_2_0::ActionTaskActivityCode::MCMEXP,
    ::oo_2_0::ActionTaskActivityCode::MCMLDT,
    ::oo_2_0::ActionTaskActivityCode::MCMLMC,
    ::oo_2_0::ActionTaskActivityCode::MCMPRE,
    ::oo_2_0::ActionTaskActivityCode::MCMSA,
    ::oo_2_0::ActionTaskActivityCode::MCMSAA,
    ::oo_2_0::ActionTaskActivityCode::MCMSAC,
    ::oo_2_0::ActionTaskActivityCode::MCMSAD,
    ::oo_2_0::ActionTaskActivityCode::MCMSAG,
    ::oo_2_0::ActionTaskActivityCode::MCMSAH,
    ::oo_2_0::ActionTaskActivityCode::MCMSAM,
    ::oo_2_0::ActionTaskActivityCode::MCMSAZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSB,
    ::oo_2_0::ActionTaskActivityCode::MCMSBZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSC,
    ::oo_2_0::ActionTaskActivityCode::MCMSCA,
    ::oo_2_0::ActionTaskActivityCode::MCMSCC,
    ::oo_2_0::ActionTaskActivityCode::MCMSCD,
    ::oo_2_0::ActionTaskActivityCode::MCMSCG,
    ::oo_2_0::ActionTaskActivityCode::MCMSCH,
    ::oo_2_0::ActionTaskActivityCode::MCMSCM,
    ::oo_2_0::ActionTaskActivityCode::MCMSCZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSE,
    ::oo_2_0::ActionTaskActivityCode::MCMSEA,
    ::oo_2_0::ActionTaskActivityCode::MCMSEC,
    ::oo_2_0::ActionTaskActivityCode::MCMSED,
    ::oo_2_0::ActionTaskActivityCode::MCMSEG,
    ::oo_2_0::ActionTaskActivityCode::MCMSEH,
    ::oo_2_0::ActionTaskActivityCode::MCMSEM,
    ::oo_2_0::ActionTaskActivityCode::MCMSEZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSL,
    ::oo_2_0::ActionTaskActivityCode::MCMSLA,
    ::oo_2_0::ActionTaskActivityCode::MCMSLH,
    ::oo_2_0::ActionTaskActivityCode::MCMSLM,
    ::oo_2_0::ActionTaskActivityCode::MCMSLZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSP,
    ::oo_2_0::ActionTaskActivityCode::MCMSPA,
    ::oo_2_0::ActionTaskActivityCode::MCMSPC,
    ::oo_2_0::ActionTaskActivityCode::MCMSPG,
    ::oo_2_0::ActionTaskActivityCode::MCMSPH,
    ::oo_2_0::ActionTaskActivityCode::MCMSPM,
    ::oo_2_0::ActionTaskActivityCode::MCMSPZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSR,
    ::oo_2_0::ActionTaskActivityCode::MCMSRD,
    ::oo_2_0::ActionTaskActivityCode::MCMSRH,
    ::oo_2_0::ActionTaskActivityCode::MCMSRV,
    ::oo_2_0::ActionTaskActivityCode::MCMSS,
    ::oo_2_0::ActionTaskActivityCode::MCMSSA,
    ::oo_2_0::ActionTaskActivityCode::MCMSSC,
    ::oo_2_0::ActionTaskActivityCode::MCMSSD,
    ::oo_2_0::ActionTaskActivityCode::MCMSSG,
    ::oo_2_0::ActionTaskActivityCode::MCMSSH,
    ::oo_2_0::ActionTaskActivityCode::MCMSSM,
    ::oo_2_0::ActionTaskActivityCode::MCMSSZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSU,
    ::oo_2_0::ActionTaskActivityCode::MCMSUH,
    ::oo_2_0::ActionTaskActivityCode::MCMSUZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSV,
    ::oo_2_0::ActionTaskActivityCode::MCMSVA,
    ::oo_2_0::ActionTaskActivityCode::MCMSVC,
    ::oo_2_0::ActionTaskActivityCode::MCMSVD,
    ::oo_2_0::ActionTaskActivityCode::MCMSVG,
    ::oo_2_0::ActionTaskActivityCode::MCMSVH,
    ::oo_2_0::ActionTaskActivityCode::MCMSVM,
    ::oo_2_0::ActionTaskActivityCode::MCMSVZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSW,
    ::oo_2_0::ActionTaskActivityCode::MCMSWZ,
    ::oo_2_0::ActionTaskActivityCode::MCMSZZ,
    ::oo_2_0::ActionTaskActivityCode::MCMTML,
    ::oo_2_0::ActionTaskActivityCode::MEDEVC,
    ::oo_2_0::ActionTaskActivityCode::METBAL,
    ::oo_2_0::ActionTaskActivityCode::MINCM,
    ::oo_2_0::ActionTaskActivityCode::MINEWF,
    ::oo_2_0::ActionTaskActivityCode::MINLAY,
    ::oo_2_0::ActionTaskActivityCode::MINSWP,
    ::oo_2_0::ActionTaskActivityCode::MISSTG,
    ::oo_2_0::ActionTaskActivityCode::MNHUNT,
    ::oo_2_0::ActionTaskActivityCode::MNSWMA,
    ::oo_2_0::ActionTaskActivityCode::MNTAIR,
    ::oo_2_0::ActionTaskActivityCode::MNTGRD,
    ::oo_2_0::ActionTaskActivityCode::MOPUP,
    ::oo_2_0::ActionTaskActivityCode::MOVE,
    ::oo_2_0::ActionTaskActivityCode::MPA,
    ::oo_2_0::ActionTaskActivityCode::MRITOP,
    ::oo_2_0::ActionTaskActivityCode::NACLSP,
    ::oo_2_0::ActionTaskActivityCode::NTRCHM,
    ::oo_2_0::ActionTaskActivityCode::NTRCOM,
    ::oo_2_0::ActionTaskActivityCode::NTREXP,
    ::oo_2_0::ActionTaskActivityCode::NUCSMP,
    ::oo_2_0::ActionTaskActivityCode::NVLPLF,
    ::oo_2_0::ActionTaskActivityCode::OBSCUR,
    ::oo_2_0::ActionTaskActivityCode::OBSRV,
    ::oo_2_0::ActionTaskActivityCode::OCCUPY,
    ::oo_2_0::ActionTaskActivityCode::OFFAIR,
    ::oo_2_0::ActionTaskActivityCode::OFFCNA,
    ::oo_2_0::ActionTaskActivityCode::ORGCNF,
    ::oo_2_0::ActionTaskActivityCode::ORGMED,
    ::oo_2_0::ActionTaskActivityCode::ORGRCR,
    ::oo_2_0::ActionTaskActivityCode::ORGSCL,
    ::oo_2_0::ActionTaskActivityCode::ORGSPT,
    ::oo_2_0::ActionTaskActivityCode::PATROL,
    ::oo_2_0::ActionTaskActivityCode::PENTRT,
    ::oo_2_0::ActionTaskActivityCode::PHOTO,
    ::oo_2_0::ActionTaskActivityCode::PLAN,
    ::oo_2_0::ActionTaskActivityCode::PREFIR,
    ::oo_2_0::ActionTaskActivityCode::PREPR,
    ::oo_2_0::ActionTaskActivityCode::PROCUR,
    ::oo_2_0::ActionTaskActivityCode::PROTEL,
    ::oo_2_0::ActionTaskActivityCode::PRVACC,
    ::oo_2_0::ActionTaskActivityCode::PRVAGR,
    ::oo_2_0::ActionTaskActivityCode::PRVBDD,
    ::oo_2_0::ActionTaskActivityCode::PRVCMP,
    ::oo_2_0::ActionTaskActivityCode::PRVCNS,
    ::oo_2_0::ActionTaskActivityCode::PRVEDU,
    ::oo_2_0::ActionTaskActivityCode::PRVHLT,
    ::oo_2_0::ActionTaskActivityCode::PRVINF,
    ::oo_2_0::ActionTaskActivityCode::PRVLND,
    ::oo_2_0::ActionTaskActivityCode::PRVRPR,
    ::oo_2_0::ActionTaskActivityCode::PRVSCY,
    ::oo_2_0::ActionTaskActivityCode::PRVSHL,
    ::oo_2_0::ActionTaskActivityCode::PRVSTG,
    ::oo_2_0::ActionTaskActivityCode::PRVTRS,
    ::oo_2_0::ActionTaskActivityCode::PSYCHW,
    ::oo_2_0::ActionTaskActivityCode::PUBMDA,
    ::oo_2_0::ActionTaskActivityCode::PUBMDD,
    ::oo_2_0::ActionTaskActivityCode::PUBPRS,
    ::oo_2_0::ActionTaskActivityCode::PURSUE,
    ::oo_2_0::ActionTaskActivityCode::RCALIB,
    ::oo_2_0::ActionTaskActivityCode::RECARM,
    ::oo_2_0::ActionTaskActivityCode::RECCE,
    ::oo_2_0::ActionTaskActivityCode::RECCEF,
    ::oo_2_0::ActionTaskActivityCode::RECCEL,
    ::oo_2_0::ActionTaskActivityCode::RECCES,
    ::oo_2_0::ActionTaskActivityCode::RECECM,
    ::oo_2_0::ActionTaskActivityCode::RECONS,
    ::oo_2_0::ActionTaskActivityCode::RECOVR,
    ::oo_2_0::ActionTaskActivityCode::RECPHO,
    ::oo_2_0::ActionTaskActivityCode::RECRAD,
    ::oo_2_0::ActionTaskActivityCode::RECTGT,
    ::oo_2_0::ActionTaskActivityCode::RECUPR,
    ::oo_2_0::ActionTaskActivityCode::RECVIS,
    ::oo_2_0::ActionTaskActivityCode::REDEPL,
    ::oo_2_0::ActionTaskActivityCode::REFILL,
    ::oo_2_0::ActionTaskActivityCode::REFORM,
    ::oo_2_0::ActionTaskActivityCode::REFUEL,
    ::oo_2_0::ActionTaskActivityCode::REINF,
    ::oo_2_0::ActionTaskActivityCode::REORG,
    ::oo_2_0::ActionTaskActivityCode::REPAIR,
    ::oo_2_0::ActionTaskActivityCode::RESCUE,
    ::oo_2_0::ActionTaskActivityCode::REST,
    ::oo_2_0::ActionTaskActivityCode::RESUPL,
    ::oo_2_0::ActionTaskActivityCode::RETAIN,
    ::oo_2_0::ActionTaskActivityCode::RETIRE,
    ::oo_2_0::ActionTaskActivityCode::RLFPLC,
    ::oo_2_0::ActionTaskActivityCode::RNDZVA,
    ::oo_2_0::ActionTaskActivityCode::RNDZVB,
    ::oo_2_0::ActionTaskActivityCode::RNDZVC,
    ::oo_2_0::ActionTaskActivityCode::RNDZVD,
    ::oo_2_0::ActionTaskActivityCode::RNDZVE,
    ::oo_2_0::ActionTaskActivityCode::RNDZVF,
    ::oo_2_0::ActionTaskActivityCode::RNDZVG,
    ::oo_2_0::ActionTaskActivityCode::RNDZVS,
    ::oo_2_0::ActionTaskActivityCode::SAR,
    ::oo_2_0::ActionTaskActivityCode::SARCME,
    ::oo_2_0::ActionTaskActivityCode::SARCMI,
    ::oo_2_0::ActionTaskActivityCode::SARPLG,
    ::oo_2_0::ActionTaskActivityCode::SCOUT,
    ::oo_2_0::ActionTaskActivityCode::SCREEN,
    ::oo_2_0::ActionTaskActivityCode::SCRMBL,
    ::oo_2_0::ActionTaskActivityCode::SECURE,
    ::oo_2_0::ActionTaskActivityCode::SECURT,
    ::oo_2_0::ActionTaskActivityCode::SEIZE,
    ::oo_2_0::ActionTaskActivityCode::SENSIM,
    ::oo_2_0::ActionTaskActivityCode::SERASE,
    ::oo_2_0::ActionTaskActivityCode::SERATE,
    ::oo_2_0::ActionTaskActivityCode::SERCH,
    ::oo_2_0::ActionTaskActivityCode::SERFLO,
    ::oo_2_0::ActionTaskActivityCode::SERFOE,
    ::oo_2_0::ActionTaskActivityCode::SERFRE,
    ::oo_2_0::ActionTaskActivityCode::SERFTE,
    ::oo_2_0::ActionTaskActivityCode::SERFUE,
    ::oo_2_0::ActionTaskActivityCode::SERREE,
    ::oo_2_0::ActionTaskActivityCode::SERRSE,
    ::oo_2_0::ActionTaskActivityCode::SERSEA,
    ::oo_2_0::ActionTaskActivityCode::SERSOE,
    ::oo_2_0::ActionTaskActivityCode::SERSPE,
    ::oo_2_0::ActionTaskActivityCode::SERSTE,
    ::oo_2_0::ActionTaskActivityCode::SERSTR,
    ::oo_2_0::ActionTaskActivityCode::SERTHR,
    ::oo_2_0::ActionTaskActivityCode::SETUP,
    ::oo_2_0::ActionTaskActivityCode::SINGA,
    ::oo_2_0::ActionTaskActivityCode::SPCOPS,
    ::oo_2_0::ActionTaskActivityCode::SPREAD,
    ::oo_2_0::ActionTaskActivityCode::SPTCON,
    ::oo_2_0::ActionTaskActivityCode::SPTELC,
    ::oo_2_0::ActionTaskActivityCode::SRCHFR,
    ::oo_2_0::ActionTaskActivityCode::SRCRES,
    ::oo_2_0::ActionTaskActivityCode::STRCON,
    ::oo_2_0::ActionTaskActivityCode::STRWAF,
    ::oo_2_0::ActionTaskActivityCode::SUBWAF,
    ::oo_2_0::ActionTaskActivityCode::SUPPRS,
    ::oo_2_0::ActionTaskActivityCode::SUPPRT,
    ::oo_2_0::ActionTaskActivityCode::SURVEL,
    ::oo_2_0::ActionTaskActivityCode::SURVLE,
    ::oo_2_0::ActionTaskActivityCode::SUSOAA,
    ::oo_2_0::ActionTaskActivityCode::SWEEP,
    ::oo_2_0::ActionTaskActivityCode::TCARRC,
    ::oo_2_0::ActionTaskActivityCode::TGTDLT,
    ::oo_2_0::ActionTaskActivityCode::THREAT,
    ::oo_2_0::ActionTaskActivityCode::TOWTGT,
    ::oo_2_0::ActionTaskActivityCode::TRAIN,
    ::oo_2_0::ActionTaskActivityCode::TRANOP,
    ::oo_2_0::ActionTaskActivityCode::TRANS,
    ::oo_2_0::ActionTaskActivityCode::TRNSAA,
    ::oo_2_0::ActionTaskActivityCode::TRVRS,
    ::oo_2_0::ActionTaskActivityCode::TURN,
    ::oo_2_0::ActionTaskActivityCode::UNCONW,
    ::oo_2_0::ActionTaskActivityCode::UTILTY,
    ::oo_2_0::ActionTaskActivityCode::VERIFY,
    ::oo_2_0::ActionTaskActivityCode::WDRPRS,
    ::oo_2_0::ActionTaskActivityCode::WITHDR,
    ::oo_2_0::ActionTaskActivityCode::WITNES,
    ::oo_2_0::ActionTaskActivityCode::WLDWSL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskActivityCode >
  _xsd_ActionTaskActivityCode_type_factory_init (
    "ActionTaskActivityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskCategoryCode
  //

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskCategoryCode_convert ();
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskCategoryCode_convert ();
  }

  ActionTaskCategoryCode::
  ActionTaskCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskCategoryCode_convert ();
  }

  ActionTaskCategoryCode* ActionTaskCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskCategoryCode (*this, f, c);
  }

  ActionTaskCategoryCode::value ActionTaskCategoryCode::
  _xsd_ActionTaskCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskCategoryCode_indexes_,
                      _xsd_ActionTaskCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ActionTaskCategoryCode_indexes_ + 4 || _xsd_ActionTaskCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskCategoryCode::
  _xsd_ActionTaskCategoryCode_literals_[4] =
  {
    "ORD",
    "PLAN",
    "RQT",
    "TEM"
  };

  const ActionTaskCategoryCode::value ActionTaskCategoryCode::
  _xsd_ActionTaskCategoryCode_indexes_[4] =
  {
    ::oo_2_0::ActionTaskCategoryCode::ORD,
    ::oo_2_0::ActionTaskCategoryCode::PLAN,
    ::oo_2_0::ActionTaskCategoryCode::RQT,
    ::oo_2_0::ActionTaskCategoryCode::TEM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskCategoryCode >
  _xsd_ActionTaskCategoryCode_type_factory_init (
    "ActionTaskCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskEndQualifierCode
  //

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskEndQualifierCode_convert ();
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskEndQualifierCode_convert ();
  }

  ActionTaskEndQualifierCode::
  ActionTaskEndQualifierCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskEndQualifierCode_convert ();
  }

  ActionTaskEndQualifierCode* ActionTaskEndQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskEndQualifierCode (*this, f, c);
  }

  ActionTaskEndQualifierCode::value ActionTaskEndQualifierCode::
  _xsd_ActionTaskEndQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskEndQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskEndQualifierCode_indexes_,
                      _xsd_ActionTaskEndQualifierCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_ActionTaskEndQualifierCode_indexes_ + 12 || _xsd_ActionTaskEndQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskEndQualifierCode::
  _xsd_ActionTaskEndQualifierCode_literals_[12] =
  {
    "AFT",
    "ASAP",
    "ASAPAF",
    "ASAPNL",
    "AT",
    "BEF",
    "INDEF",
    "NLT",
    "NOB",
    "TBD",
    "UNK",
    "UNTFRN"
  };

  const ActionTaskEndQualifierCode::value ActionTaskEndQualifierCode::
  _xsd_ActionTaskEndQualifierCode_indexes_[12] =
  {
    ::oo_2_0::ActionTaskEndQualifierCode::AFT,
    ::oo_2_0::ActionTaskEndQualifierCode::ASAP,
    ::oo_2_0::ActionTaskEndQualifierCode::ASAPAF,
    ::oo_2_0::ActionTaskEndQualifierCode::ASAPNL,
    ::oo_2_0::ActionTaskEndQualifierCode::AT,
    ::oo_2_0::ActionTaskEndQualifierCode::BEF,
    ::oo_2_0::ActionTaskEndQualifierCode::INDEF,
    ::oo_2_0::ActionTaskEndQualifierCode::NLT,
    ::oo_2_0::ActionTaskEndQualifierCode::NOB,
    ::oo_2_0::ActionTaskEndQualifierCode::TBD,
    ::oo_2_0::ActionTaskEndQualifierCode::UNK,
    ::oo_2_0::ActionTaskEndQualifierCode::UNTFRN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskEndQualifierCode >
  _xsd_ActionTaskEndQualifierCode_type_factory_init (
    "ActionTaskEndQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskEntailedSafetyDegreeCode
  //

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskEntailedSafetyDegreeCode_convert ();
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskEntailedSafetyDegreeCode_convert ();
  }

  ActionTaskEntailedSafetyDegreeCode::
  ActionTaskEntailedSafetyDegreeCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskEntailedSafetyDegreeCode_convert ();
  }

  ActionTaskEntailedSafetyDegreeCode* ActionTaskEntailedSafetyDegreeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskEntailedSafetyDegreeCode (*this, f, c);
  }

  ActionTaskEntailedSafetyDegreeCode::value ActionTaskEntailedSafetyDegreeCode::
  _xsd_ActionTaskEntailedSafetyDegreeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskEntailedSafetyDegreeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskEntailedSafetyDegreeCode_indexes_,
                      _xsd_ActionTaskEntailedSafetyDegreeCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionTaskEntailedSafetyDegreeCode_indexes_ + 3 || _xsd_ActionTaskEntailedSafetyDegreeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskEntailedSafetyDegreeCode::
  _xsd_ActionTaskEntailedSafetyDegreeCode_literals_[3] =
  {
    "ALPHA",
    "BRAVO",
    "CHARLE"
  };

  const ActionTaskEntailedSafetyDegreeCode::value ActionTaskEntailedSafetyDegreeCode::
  _xsd_ActionTaskEntailedSafetyDegreeCode_indexes_[3] =
  {
    ::oo_2_0::ActionTaskEntailedSafetyDegreeCode::ALPHA,
    ::oo_2_0::ActionTaskEntailedSafetyDegreeCode::BRAVO,
    ::oo_2_0::ActionTaskEntailedSafetyDegreeCode::CHARLE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskEntailedSafetyDegreeCode >
  _xsd_ActionTaskEntailedSafetyDegreeCode_type_factory_init (
    "ActionTaskEntailedSafetyDegreeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskMeteorologicalImpactCode
  //

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskMeteorologicalImpactCode_convert ();
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskMeteorologicalImpactCode_convert ();
  }

  ActionTaskMeteorologicalImpactCode::
  ActionTaskMeteorologicalImpactCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskMeteorologicalImpactCode_convert ();
  }

  ActionTaskMeteorologicalImpactCode* ActionTaskMeteorologicalImpactCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskMeteorologicalImpactCode (*this, f, c);
  }

  ActionTaskMeteorologicalImpactCode::value ActionTaskMeteorologicalImpactCode::
  _xsd_ActionTaskMeteorologicalImpactCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskMeteorologicalImpactCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskMeteorologicalImpactCode_indexes_,
                      _xsd_ActionTaskMeteorologicalImpactCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ActionTaskMeteorologicalImpactCode_indexes_ + 3 || _xsd_ActionTaskMeteorologicalImpactCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskMeteorologicalImpactCode::
  _xsd_ActionTaskMeteorologicalImpactCode_literals_[3] =
  {
    "ACCPTB",
    "MARGNL",
    "UNACC"
  };

  const ActionTaskMeteorologicalImpactCode::value ActionTaskMeteorologicalImpactCode::
  _xsd_ActionTaskMeteorologicalImpactCode_indexes_[3] =
  {
    ::oo_2_0::ActionTaskMeteorologicalImpactCode::ACCPTB,
    ::oo_2_0::ActionTaskMeteorologicalImpactCode::MARGNL,
    ::oo_2_0::ActionTaskMeteorologicalImpactCode::UNACC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskMeteorologicalImpactCode >
  _xsd_ActionTaskMeteorologicalImpactCode_type_factory_init (
    "ActionTaskMeteorologicalImpactCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskOperationalLevelCode
  //

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskOperationalLevelCode_convert ();
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskOperationalLevelCode_convert ();
  }

  ActionTaskOperationalLevelCode::
  ActionTaskOperationalLevelCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskOperationalLevelCode_convert ();
  }

  ActionTaskOperationalLevelCode* ActionTaskOperationalLevelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskOperationalLevelCode (*this, f, c);
  }

  ActionTaskOperationalLevelCode::value ActionTaskOperationalLevelCode::
  _xsd_ActionTaskOperationalLevelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskOperationalLevelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskOperationalLevelCode_indexes_,
                      _xsd_ActionTaskOperationalLevelCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionTaskOperationalLevelCode_indexes_ + 2 || _xsd_ActionTaskOperationalLevelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskOperationalLevelCode::
  _xsd_ActionTaskOperationalLevelCode_literals_[2] =
  {
    "STRTGC",
    "TACTCL"
  };

  const ActionTaskOperationalLevelCode::value ActionTaskOperationalLevelCode::
  _xsd_ActionTaskOperationalLevelCode_indexes_[2] =
  {
    ::oo_2_0::ActionTaskOperationalLevelCode::STRTGC,
    ::oo_2_0::ActionTaskOperationalLevelCode::TACTCL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskOperationalLevelCode >
  _xsd_ActionTaskOperationalLevelCode_type_factory_init (
    "ActionTaskOperationalLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskOvertCovertCode
  //

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskOvertCovertCode_convert ();
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskOvertCovertCode_convert ();
  }

  ActionTaskOvertCovertCode::
  ActionTaskOvertCovertCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskOvertCovertCode_convert ();
  }

  ActionTaskOvertCovertCode* ActionTaskOvertCovertCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskOvertCovertCode (*this, f, c);
  }

  ActionTaskOvertCovertCode::value ActionTaskOvertCovertCode::
  _xsd_ActionTaskOvertCovertCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskOvertCovertCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskOvertCovertCode_indexes_,
                      _xsd_ActionTaskOvertCovertCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionTaskOvertCovertCode_indexes_ + 2 || _xsd_ActionTaskOvertCovertCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskOvertCovertCode::
  _xsd_ActionTaskOvertCovertCode_literals_[2] =
  {
    "COVERT",
    "OVERT"
  };

  const ActionTaskOvertCovertCode::value ActionTaskOvertCovertCode::
  _xsd_ActionTaskOvertCovertCode_indexes_[2] =
  {
    ::oo_2_0::ActionTaskOvertCovertCode::COVERT,
    ::oo_2_0::ActionTaskOvertCovertCode::OVERT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskOvertCovertCode >
  _xsd_ActionTaskOvertCovertCode_type_factory_init (
    "ActionTaskOvertCovertCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskPriorityCode
  //

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskPriorityCode_convert ();
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskPriorityCode_convert ();
  }

  ActionTaskPriorityCode::
  ActionTaskPriorityCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskPriorityCode_convert ();
  }

  ActionTaskPriorityCode* ActionTaskPriorityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskPriorityCode (*this, f, c);
  }

  ActionTaskPriorityCode::value ActionTaskPriorityCode::
  _xsd_ActionTaskPriorityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskPriorityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskPriorityCode_indexes_,
                      _xsd_ActionTaskPriorityCode_indexes_ + 27,
                      *this,
                      c));

    if (i == _xsd_ActionTaskPriorityCode_indexes_ + 27 || _xsd_ActionTaskPriorityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskPriorityCode::
  _xsd_ActionTaskPriorityCode_literals_[27] =
  {
    "1",
    "1A1",
    "1A2",
    "1A3",
    "1A4",
    "1B1",
    "1B2",
    "1B3",
    "2",
    "2A1",
    "2A2",
    "2B1",
    "2B2",
    "3",
    "3A1",
    "3A2",
    "3A3",
    "3B1",
    "3B2",
    "3B3",
    "3B4",
    "4",
    "4A1",
    "4A2",
    "4B2",
    "4B3",
    "5"
  };

  const ActionTaskPriorityCode::value ActionTaskPriorityCode::
  _xsd_ActionTaskPriorityCode_indexes_[27] =
  {
    ::oo_2_0::ActionTaskPriorityCode::cxx_1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1A1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1A2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1A3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1A4,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1B1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1B2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_1B3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_2A1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_2A2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_2B1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_2B2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3A1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3A2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3A3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3B1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3B2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3B3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_3B4,
    ::oo_2_0::ActionTaskPriorityCode::cxx_4,
    ::oo_2_0::ActionTaskPriorityCode::cxx_4A1,
    ::oo_2_0::ActionTaskPriorityCode::cxx_4A2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_4B2,
    ::oo_2_0::ActionTaskPriorityCode::cxx_4B3,
    ::oo_2_0::ActionTaskPriorityCode::cxx_5
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskPriorityCode >
  _xsd_ActionTaskPriorityCode_type_factory_init (
    "ActionTaskPriorityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStartQualifierCode
  //

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStartQualifierCode_convert ();
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStartQualifierCode_convert ();
  }

  ActionTaskStartQualifierCode::
  ActionTaskStartQualifierCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStartQualifierCode_convert ();
  }

  ActionTaskStartQualifierCode* ActionTaskStartQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStartQualifierCode (*this, f, c);
  }

  ActionTaskStartQualifierCode::value ActionTaskStartQualifierCode::
  _xsd_ActionTaskStartQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStartQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStartQualifierCode_indexes_,
                      _xsd_ActionTaskStartQualifierCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStartQualifierCode_indexes_ + 12 || _xsd_ActionTaskStartQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStartQualifierCode::
  _xsd_ActionTaskStartQualifierCode_literals_[12] =
  {
    "AFT",
    "ASAP",
    "ASAPAF",
    "ASAPNL",
    "AT",
    "BEF",
    "NLT",
    "NOB",
    "ONCALL",
    "ONCDWD",
    "TBD",
    "UNK"
  };

  const ActionTaskStartQualifierCode::value ActionTaskStartQualifierCode::
  _xsd_ActionTaskStartQualifierCode_indexes_[12] =
  {
    ::oo_2_0::ActionTaskStartQualifierCode::AFT,
    ::oo_2_0::ActionTaskStartQualifierCode::ASAP,
    ::oo_2_0::ActionTaskStartQualifierCode::ASAPAF,
    ::oo_2_0::ActionTaskStartQualifierCode::ASAPNL,
    ::oo_2_0::ActionTaskStartQualifierCode::AT,
    ::oo_2_0::ActionTaskStartQualifierCode::BEF,
    ::oo_2_0::ActionTaskStartQualifierCode::NLT,
    ::oo_2_0::ActionTaskStartQualifierCode::NOB,
    ::oo_2_0::ActionTaskStartQualifierCode::ONCALL,
    ::oo_2_0::ActionTaskStartQualifierCode::ONCDWD,
    ::oo_2_0::ActionTaskStartQualifierCode::TBD,
    ::oo_2_0::ActionTaskStartQualifierCode::UNK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStartQualifierCode >
  _xsd_ActionTaskStartQualifierCode_type_factory_init (
    "ActionTaskStartQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStatusAmendTimingCode
  //

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStatusAmendTimingCode_convert ();
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStatusAmendTimingCode_convert ();
  }

  ActionTaskStatusAmendTimingCode::
  ActionTaskStatusAmendTimingCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStatusAmendTimingCode_convert ();
  }

  ActionTaskStatusAmendTimingCode* ActionTaskStatusAmendTimingCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStatusAmendTimingCode (*this, f, c);
  }

  ActionTaskStatusAmendTimingCode::value ActionTaskStatusAmendTimingCode::
  _xsd_ActionTaskStatusAmendTimingCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStatusAmendTimingCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStatusAmendTimingCode_indexes_,
                      _xsd_ActionTaskStatusAmendTimingCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStatusAmendTimingCode_indexes_ + 4 || _xsd_ActionTaskStatusAmendTimingCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStatusAmendTimingCode::
  _xsd_ActionTaskStatusAmendTimingCode_literals_[4] =
  {
    "RQEEAT",
    "RQESAT",
    "RQSEAT",
    "RQSSAT"
  };

  const ActionTaskStatusAmendTimingCode::value ActionTaskStatusAmendTimingCode::
  _xsd_ActionTaskStatusAmendTimingCode_indexes_[4] =
  {
    ::oo_2_0::ActionTaskStatusAmendTimingCode::RQEEAT,
    ::oo_2_0::ActionTaskStatusAmendTimingCode::RQESAT,
    ::oo_2_0::ActionTaskStatusAmendTimingCode::RQSEAT,
    ::oo_2_0::ActionTaskStatusAmendTimingCode::RQSSAT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStatusAmendTimingCode >
  _xsd_ActionTaskStatusAmendTimingCode_type_factory_init (
    "ActionTaskStatusAmendTimingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStatusApprovalIndicatorCode
  //

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStatusApprovalIndicatorCode_convert ();
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStatusApprovalIndicatorCode_convert ();
  }

  ActionTaskStatusApprovalIndicatorCode::
  ActionTaskStatusApprovalIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStatusApprovalIndicatorCode_convert ();
  }

  ActionTaskStatusApprovalIndicatorCode* ActionTaskStatusApprovalIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStatusApprovalIndicatorCode (*this, f, c);
  }

  ActionTaskStatusApprovalIndicatorCode::value ActionTaskStatusApprovalIndicatorCode::
  _xsd_ActionTaskStatusApprovalIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStatusApprovalIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStatusApprovalIndicatorCode_indexes_,
                      _xsd_ActionTaskStatusApprovalIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStatusApprovalIndicatorCode_indexes_ + 2 || _xsd_ActionTaskStatusApprovalIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStatusApprovalIndicatorCode::
  _xsd_ActionTaskStatusApprovalIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ActionTaskStatusApprovalIndicatorCode::value ActionTaskStatusApprovalIndicatorCode::
  _xsd_ActionTaskStatusApprovalIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ActionTaskStatusApprovalIndicatorCode::NO,
    ::oo_2_0::ActionTaskStatusApprovalIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStatusApprovalIndicatorCode >
  _xsd_ActionTaskStatusApprovalIndicatorCode_type_factory_init (
    "ActionTaskStatusApprovalIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStatusCategoryCode
  //

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStatusCategoryCode_convert ();
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStatusCategoryCode_convert ();
  }

  ActionTaskStatusCategoryCode::
  ActionTaskStatusCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStatusCategoryCode_convert ();
  }

  ActionTaskStatusCategoryCode* ActionTaskStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStatusCategoryCode (*this, f, c);
  }

  ActionTaskStatusCategoryCode::value ActionTaskStatusCategoryCode::
  _xsd_ActionTaskStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStatusCategoryCode_indexes_,
                      _xsd_ActionTaskStatusCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStatusCategoryCode_indexes_ + 2 || _xsd_ActionTaskStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStatusCategoryCode::
  _xsd_ActionTaskStatusCategoryCode_literals_[2] =
  {
    "ORD",
    "PLAN"
  };

  const ActionTaskStatusCategoryCode::value ActionTaskStatusCategoryCode::
  _xsd_ActionTaskStatusCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ActionTaskStatusCategoryCode::ORD,
    ::oo_2_0::ActionTaskStatusCategoryCode::PLAN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStatusCategoryCode >
  _xsd_ActionTaskStatusCategoryCode_type_factory_init (
    "ActionTaskStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStatusPlanningIndicatorCode
  //

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStatusPlanningIndicatorCode_convert ();
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStatusPlanningIndicatorCode_convert ();
  }

  ActionTaskStatusPlanningIndicatorCode::
  ActionTaskStatusPlanningIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStatusPlanningIndicatorCode_convert ();
  }

  ActionTaskStatusPlanningIndicatorCode* ActionTaskStatusPlanningIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStatusPlanningIndicatorCode (*this, f, c);
  }

  ActionTaskStatusPlanningIndicatorCode::value ActionTaskStatusPlanningIndicatorCode::
  _xsd_ActionTaskStatusPlanningIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStatusPlanningIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStatusPlanningIndicatorCode_indexes_,
                      _xsd_ActionTaskStatusPlanningIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStatusPlanningIndicatorCode_indexes_ + 2 || _xsd_ActionTaskStatusPlanningIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStatusPlanningIndicatorCode::
  _xsd_ActionTaskStatusPlanningIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ActionTaskStatusPlanningIndicatorCode::value ActionTaskStatusPlanningIndicatorCode::
  _xsd_ActionTaskStatusPlanningIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ActionTaskStatusPlanningIndicatorCode::NO,
    ::oo_2_0::ActionTaskStatusPlanningIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStatusPlanningIndicatorCode >
  _xsd_ActionTaskStatusPlanningIndicatorCode_type_factory_init (
    "ActionTaskStatusPlanningIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskStatusProgressCode
  //

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskStatusProgressCode_convert ();
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskStatusProgressCode_convert ();
  }

  ActionTaskStatusProgressCode::
  ActionTaskStatusProgressCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskStatusProgressCode_convert ();
  }

  ActionTaskStatusProgressCode* ActionTaskStatusProgressCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskStatusProgressCode (*this, f, c);
  }

  ActionTaskStatusProgressCode::value ActionTaskStatusProgressCode::
  _xsd_ActionTaskStatusProgressCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskStatusProgressCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskStatusProgressCode_indexes_,
                      _xsd_ActionTaskStatusProgressCode_indexes_ + 20,
                      *this,
                      c));

    if (i == _xsd_ActionTaskStatusProgressCode_indexes_ + 20 || _xsd_ActionTaskStatusProgressCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskStatusProgressCode::
  _xsd_ActionTaskStatusProgressCode_literals_[20] =
  {
    "ABO",
    "AIRBRN",
    "CANCLD",
    "COM",
    "DELAY",
    "DPLMMW",
    "DWNTMW",
    "IPR",
    "NKN",
    "NOOPER",
    "NOS",
    "NST",
    "OFFTSK",
    "PAU",
    "PLAN",
    "RECMMW",
    "RETASK",
    "SCRMBL",
    "TASKED",
    "TRNMMW"
  };

  const ActionTaskStatusProgressCode::value ActionTaskStatusProgressCode::
  _xsd_ActionTaskStatusProgressCode_indexes_[20] =
  {
    ::oo_2_0::ActionTaskStatusProgressCode::ABO,
    ::oo_2_0::ActionTaskStatusProgressCode::AIRBRN,
    ::oo_2_0::ActionTaskStatusProgressCode::CANCLD,
    ::oo_2_0::ActionTaskStatusProgressCode::COM,
    ::oo_2_0::ActionTaskStatusProgressCode::DELAY,
    ::oo_2_0::ActionTaskStatusProgressCode::DPLMMW,
    ::oo_2_0::ActionTaskStatusProgressCode::DWNTMW,
    ::oo_2_0::ActionTaskStatusProgressCode::IPR,
    ::oo_2_0::ActionTaskStatusProgressCode::NKN,
    ::oo_2_0::ActionTaskStatusProgressCode::NOOPER,
    ::oo_2_0::ActionTaskStatusProgressCode::NOS,
    ::oo_2_0::ActionTaskStatusProgressCode::NST,
    ::oo_2_0::ActionTaskStatusProgressCode::OFFTSK,
    ::oo_2_0::ActionTaskStatusProgressCode::PAU,
    ::oo_2_0::ActionTaskStatusProgressCode::PLAN,
    ::oo_2_0::ActionTaskStatusProgressCode::RECMMW,
    ::oo_2_0::ActionTaskStatusProgressCode::RETASK,
    ::oo_2_0::ActionTaskStatusProgressCode::SCRMBL,
    ::oo_2_0::ActionTaskStatusProgressCode::TASKED,
    ::oo_2_0::ActionTaskStatusProgressCode::TRNMMW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskStatusProgressCode >
  _xsd_ActionTaskStatusProgressCode_type_factory_init (
    "ActionTaskStatusProgressCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskTimingDayCode
  //

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskTimingDayCode_convert ();
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskTimingDayCode_convert ();
  }

  ActionTaskTimingDayCode::
  ActionTaskTimingDayCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskTimingDayCode_convert ();
  }

  ActionTaskTimingDayCode* ActionTaskTimingDayCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskTimingDayCode (*this, f, c);
  }

  ActionTaskTimingDayCode::value ActionTaskTimingDayCode::
  _xsd_ActionTaskTimingDayCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskTimingDayCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskTimingDayCode_indexes_,
                      _xsd_ActionTaskTimingDayCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ActionTaskTimingDayCode_indexes_ + 8 || _xsd_ActionTaskTimingDayCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskTimingDayCode::
  _xsd_ActionTaskTimingDayCode_literals_[8] =
  {
    "C",
    "D",
    "E",
    "G",
    "J",
    "K",
    "M",
    "T"
  };

  const ActionTaskTimingDayCode::value ActionTaskTimingDayCode::
  _xsd_ActionTaskTimingDayCode_indexes_[8] =
  {
    ::oo_2_0::ActionTaskTimingDayCode::C,
    ::oo_2_0::ActionTaskTimingDayCode::D,
    ::oo_2_0::ActionTaskTimingDayCode::E,
    ::oo_2_0::ActionTaskTimingDayCode::G,
    ::oo_2_0::ActionTaskTimingDayCode::J,
    ::oo_2_0::ActionTaskTimingDayCode::K,
    ::oo_2_0::ActionTaskTimingDayCode::M,
    ::oo_2_0::ActionTaskTimingDayCode::T
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskTimingDayCode >
  _xsd_ActionTaskTimingDayCode_type_factory_init (
    "ActionTaskTimingDayCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTaskTimingHourCode
  //

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTaskTimingHourCode_convert ();
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTaskTimingHourCode_convert ();
  }

  ActionTaskTimingHourCode::
  ActionTaskTimingHourCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTaskTimingHourCode_convert ();
  }

  ActionTaskTimingHourCode* ActionTaskTimingHourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTaskTimingHourCode (*this, f, c);
  }

  ActionTaskTimingHourCode::value ActionTaskTimingHourCode::
  _xsd_ActionTaskTimingHourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTaskTimingHourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTaskTimingHourCode_indexes_,
                      _xsd_ActionTaskTimingHourCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ActionTaskTimingHourCode_indexes_ + 8 || _xsd_ActionTaskTimingHourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTaskTimingHourCode::
  _xsd_ActionTaskTimingHourCode_literals_[8] =
  {
    "F",
    "G",
    "H",
    "K",
    "L",
    "P",
    "T",
    "Y"
  };

  const ActionTaskTimingHourCode::value ActionTaskTimingHourCode::
  _xsd_ActionTaskTimingHourCode_indexes_[8] =
  {
    ::oo_2_0::ActionTaskTimingHourCode::F,
    ::oo_2_0::ActionTaskTimingHourCode::G,
    ::oo_2_0::ActionTaskTimingHourCode::H,
    ::oo_2_0::ActionTaskTimingHourCode::K,
    ::oo_2_0::ActionTaskTimingHourCode::L,
    ::oo_2_0::ActionTaskTimingHourCode::P,
    ::oo_2_0::ActionTaskTimingHourCode::T,
    ::oo_2_0::ActionTaskTimingHourCode::Y
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTaskTimingHourCode >
  _xsd_ActionTaskTimingHourCode_type_factory_init (
    "ActionTaskTimingHourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ActionTemporalAssociationCategoryCode
  //

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ActionTemporalAssociationCategoryCode_convert ();
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ActionTemporalAssociationCategoryCode_convert ();
  }

  ActionTemporalAssociationCategoryCode::
  ActionTemporalAssociationCategoryCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ActionTemporalAssociationCategoryCode_convert ();
  }

  ActionTemporalAssociationCategoryCode* ActionTemporalAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ActionTemporalAssociationCategoryCode (*this, f, c);
  }

  ActionTemporalAssociationCategoryCode::value ActionTemporalAssociationCategoryCode::
  _xsd_ActionTemporalAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionTemporalAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ActionTemporalAssociationCategoryCode_indexes_,
                      _xsd_ActionTemporalAssociationCategoryCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_ActionTemporalAssociationCategoryCode_indexes_ + 18 || _xsd_ActionTemporalAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ActionTemporalAssociationCategoryCode::
  _xsd_ActionTemporalAssociationCategoryCode_literals_[18] =
  {
    "ENDEND",
    "ENDENE",
    "ENDENL",
    "ENDSNE",
    "ENDSNL",
    "ENDSTR",
    "SAEAST",
    "SAENDO",
    "SASTEA",
    "SBEAST",
    "SDUREA",
    "SDUREB",
    "STREND",
    "STRENE",
    "STRENL",
    "STRSNE",
    "STRSNL",
    "STRSTR"
  };

  const ActionTemporalAssociationCategoryCode::value ActionTemporalAssociationCategoryCode::
  _xsd_ActionTemporalAssociationCategoryCode_indexes_[18] =
  {
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDEND,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDENE,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDENL,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDSNE,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDSNL,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::ENDSTR,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SAEAST,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SAENDO,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SASTEA,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SBEAST,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SDUREA,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::SDUREB,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STREND,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STRENE,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STRENL,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STRSNE,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STRSNL,
    ::oo_2_0::ActionTemporalAssociationCategoryCode::STRSTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionTemporalAssociationCategoryCode >
  _xsd_ActionTemporalAssociationCategoryCode_type_factory_init (
    "ActionTemporalAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AddressCategoryCode
  //

  AddressCategoryCode::
  AddressCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AddressCategoryCode_convert ();
  }

  AddressCategoryCode::
  AddressCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AddressCategoryCode_convert ();
  }

  AddressCategoryCode::
  AddressCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AddressCategoryCode_convert ();
  }

  AddressCategoryCode* AddressCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AddressCategoryCode (*this, f, c);
  }

  AddressCategoryCode::value AddressCategoryCode::
  _xsd_AddressCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AddressCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AddressCategoryCode_indexes_,
                      _xsd_AddressCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AddressCategoryCode_indexes_ + 3 || _xsd_AddressCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AddressCategoryCode::
  _xsd_AddressCategoryCode_literals_[3] =
  {
    "ELCADR",
    "NOS",
    "PHYADR"
  };

  const AddressCategoryCode::value AddressCategoryCode::
  _xsd_AddressCategoryCode_indexes_[3] =
  {
    ::oo_2_0::AddressCategoryCode::ELCADR,
    ::oo_2_0::AddressCategoryCode::NOS,
    ::oo_2_0::AddressCategoryCode::PHYADR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AddressCategoryCode >
  _xsd_AddressCategoryCode_type_factory_init (
    "AddressCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AffiliationCategoryCode
  //

  AffiliationCategoryCode::
  AffiliationCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AffiliationCategoryCode_convert ();
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AffiliationCategoryCode_convert ();
  }

  AffiliationCategoryCode::
  AffiliationCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AffiliationCategoryCode_convert ();
  }

  AffiliationCategoryCode* AffiliationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AffiliationCategoryCode (*this, f, c);
  }

  AffiliationCategoryCode::value AffiliationCategoryCode::
  _xsd_AffiliationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AffiliationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AffiliationCategoryCode_indexes_,
                      _xsd_AffiliationCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_AffiliationCategoryCode_indexes_ + 5 || _xsd_AffiliationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AffiliationCategoryCode::
  _xsd_AffiliationCategoryCode_literals_[5] =
  {
    "AFLGEO",
    "AFLETH",
    "AFLFNC",
    "AFLREL",
    "NSP"
  };

  const AffiliationCategoryCode::value AffiliationCategoryCode::
  _xsd_AffiliationCategoryCode_indexes_[5] =
  {
    ::oo_2_0::AffiliationCategoryCode::AFLETH,
    ::oo_2_0::AffiliationCategoryCode::AFLFNC,
    ::oo_2_0::AffiliationCategoryCode::AFLGEO,
    ::oo_2_0::AffiliationCategoryCode::AFLREL,
    ::oo_2_0::AffiliationCategoryCode::NSP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AffiliationCategoryCode >
  _xsd_AffiliationCategoryCode_type_factory_init (
    "AffiliationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AffiliationEthnicGroupCode
  //

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AffiliationEthnicGroupCode_convert ();
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AffiliationEthnicGroupCode_convert ();
  }

  AffiliationEthnicGroupCode::
  AffiliationEthnicGroupCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AffiliationEthnicGroupCode_convert ();
  }

  AffiliationEthnicGroupCode* AffiliationEthnicGroupCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AffiliationEthnicGroupCode (*this, f, c);
  }

  AffiliationEthnicGroupCode::value AffiliationEthnicGroupCode::
  _xsd_AffiliationEthnicGroupCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AffiliationEthnicGroupCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AffiliationEthnicGroupCode_indexes_,
                      _xsd_AffiliationEthnicGroupCode_indexes_ + 567,
                      *this,
                      c));

    if (i == _xsd_AffiliationEthnicGroupCode_indexes_ + 567 || _xsd_AffiliationEthnicGroupCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AffiliationEthnicGroupCode::
  _xsd_AffiliationEthnicGroupCode_literals_[567] =
  {
    "ABKHAZ",
    "ABORGN",
    "ADMISL",
    "AFAR",
    "AFGHAN",
    "AFRADJ",
    "AFRAMR",
    "AFRBAL",
    "AFRBAR",
    "AFRBAS",
    "AFRBEL",
    "AFRBUR",
    "AFRFON",
    "AFRFUL",
    "AFRGBA",
    "AFRGIO",
    "AFRGOL",
    "AFRGRE",
    "AFRJOL",
    "AFRKIS",
    "AFRKPE",
    "AFRKRA",
    "AFRKRU",
    "AFRLOM",
    "AFRMAN",
    "AFRMEN",
    "AFRMND",
    "AFRMNJ",
    "AFRMNO",
    "AFRNDE",
    "AFRNFD",
    "AFROAR",
    "AFROAS",
    "AFROCH",
    "AFROEA",
    "AFROEU",
    "AFRPAP",
    "AFRSER",
    "AFRSHO",
    "AFRTEM",
    "AFRVAI",
    "AFRWOL",
    "AFRYOR",
    "AGNI",
    "AITISL",
    "ALBANN",
    "ALBNAN",
    "ALEMAN",
    "ALGRAN",
    "AMERIC",
    "AMERIN",
    "AMERUS",
    "AMHARA",
    "ANDORR",
    "ANGOLA",
    "ANTASA",
    "ARAB",
    "ARABBE",
    "ARGNTN",
    "ARMNAN",
    "ASNNFD",
    "ASSYRN",
    "ATUISL",
    "AUSISL",
    "AUSTRA",
    "AUSTRL",
    "AUSTRN",
    "AYMARA",
    "AZERBA",
    "AZERI",
    "BAHRAN",
    "BAKONG",
    "BALOCH",
    "BANDA",
    "BANGLS",
    "BANTBA",
    "BANTBT",
    "BANTES",
    "BANTFA",
    "BANTKO",
    "BANTLU",
    "BANTMO",
    "BANTU",
    "BAOULE",
    "BASARW",
    "BASHKR",
    "BASQUE",
    "BATSWA",
    "BAYA",
    "BEJA",
    "BELAU",
    "BELGAN",
    "BELORU",
    "BENGLI",
    "BERBER",
    "BERIKA",
    "BETE",
    "BETSIM",
    "BHOTE",
    "BHOTIA",
    "BIHARS",
    "BIOKOB",
    "BIOKOF",
    "BISMAR",
    "BLACK",
    "BLACKA",
    "BOBO",
    "BOLIVN",
    "BOSCRO",
    "BOSMUS",
    "BOSSER",
    "BOUGNV",
    "BRAZLN",
    "BRETON",
    "BRTNEC",
    "BRTNFD",
    "BULGRN",
    "BURGHR",
    "BURMAN",
    "BURMSE",
    "BUYI",
    "BYLRSN",
    "CAFRE",
    "CAMERO",
    "CANADN",
    "CARIBN",
    "CARISL",
    "CAUCAS",
    "CELTIC",
    "CENAMR",
    "CHAHAR",
    "CHAM",
    "CHAMOR",
    "CHEWA",
    "CHLEAN",
    "CHNISL",
    "CHNNEC",
    "CHNNFD",
    "CHRSTN",
    "CHUVAS",
    "CIRCAS",
    "COASTA",
    "COCOSM",
    "COKNFD",
    "COLMBN",
    "COMORA",
    "CORNSH",
    "CORSCN",
    "COSTRN",
    "COTIER",
    "CRELLA",
    "CRELUS",
    "CREOLE",
    "CREOLM",
    "CROATN",
    "CYRNFD",
    "CZECH",
    "DAGHES",
    "DALMTN",
    "DANISH",
    "DIOLA",
    "DJERMA",
    "DRAVID",
    "DUTCH",
    "EASISL",
    "ECUDRN",
    "EGYPTN",
    "ENGLSH",
    "EQUATO",
    "ERIRIA",
    "ESTONN",
    "ETHNCN",
    "ETHNCT",
    "EURNEC",
    "EURNFD",
    "EUROAF",
    "EUROIN",
    "EUROPE",
    "EWE",
    "FAROES",
    "FIJIAN",
    "FIJNIN",
    "FILPNO",
    "FINNSH",
    "FLEMSH",
    "FLKISL",
    "FORROS",
    "FRANCO",
    "FRENCH",
    "FULA",
    "FULANI",
    "GAELIC",
    "GAGAUZ",
    "GARIFU",
    "GEORGN",
    "GERMAB",
    "GERMAL",
    "GERMAN",
    "GERMAR",
    "GILAKI",
    "GMBISL",
    "GOULAY",
    "GOURMA",
    "GREEK",
    "GREEKT",
    "GREENA",
    "GREENC",
    "GRNLND",
    "GUADLN",
    "GUATLN",
    "GUJART",
    "GUMISL",
    "GURAGE",
    "GURUNG",
    "GURUNS",
    "GUYANS",
    "GYPSY",
    "HAMTC",
    "HAMTCM",
    "HAN",
    "HAUSA",
    "HAWIAN",
    "HAZARA",
    "HINDUS",
    "HISPAN",
    "HKCHNS",
    "HMONG",
    "HONDRN",
    "HUI",
    "HUNGRN",
    "HUTU",
    "HUTUBA",
    "IBOS",
    "ICLNDR",
    "IKRBAT",
    "INDIGE",
    "INDIGM",
    "INDIGN",
    "INDNEC",
    "INDNFD",
    "INDOAR",
    "INDOCH",
    "INDOMA",
    "INDOSN",
    "INUIT",
    "IRAQI",
    "IRISH",
    "IRNPER",
    "ISRJEW",
    "ITALAN",
    "ITALFR",
    "ITALGE",
    "ITALSL",
    "JAMACN",
    "JAPNES",
    "JAVANE",
    "JEWISH",
    "JORDNN",
    "KABYE",
    "KALANG",
    "KALENJ",
    "KAMBA",
    "KAMCHN",
    "KANAKA",
    "KARAKA",
    "KAREN",
    "KAZAKH",
    "KAZAKQ",
    "KENYAN",
    "KGALAG",
    "KHMER",
    "KIKUYU",
    "KIMBUN",
    "KIRDI",
    "KIRGHZ",
    "KISII",
    "KONGO",
    "KOREAN",
    "KUNAMA",
    "KURD",
    "KUWAIT",
    "LADINO",
    "LAOTAN",
    "LAPP",
    "LATIN",
    "LATNEC",
    "LATNFD",
    "LATVAN",
    "LEBNSE",
    "LIBYAN",
    "LIMBUS",
    "LITHUN",
    "LOBI",
    "LOMWE",
    "LUHYA",
    "LUO",
    "LUR",
    "MACDNN",
    "MADURE",
    "MAGARS",
    "MAKOA",
    "MALAGA",
    "MALATN",
    "MALAY",
    "MALAYA",
    "MALAYI",
    "MALAYM",
    "MALCHN",
    "MALINK",
    "MALTSE",
    "MALVAN",
    "MAN",
    "MANCHU",
    "MANDE",
    "MANDEB",
    "MANDEM",
    "MANDES",
    "MANDJI",
    "MANDNG",
    "MANGIS",
    "MANHIS",
    "MANUIS",
    "MANX",
    "MAORI",
    "MARISL",
    "MARQIS",
    "MARSIS",
    "MASSA",
    "MAUKIS",
    "MAUR",
    "MAURTN",
    "MAYA",
    "MAZAND",
    "MBAKA",
    "MBAYE",
    "MBOCHI",
    "MBOUM",
    "MDENEC",
    "MDENFD",
    "MELANE",
    "MEO",
    "MERU",
    "MESTZE",
    "MESTZS",
    "MEXCAN",
    "MIAO",
    "MICRON",
    "MINA",
    "MITISL",
    "MIXED",
    "MOLDOV",
    "MON",
    "MONEGA",
    "MONGOL",
    "MONTEN",
    "MOOR",
    "MORAVI",
    "MOROCN",
    "MOSSI",
    "MOUND",
    "MOUSSE",
    "MUHAJR",
    "MULATT",
    "MUONG",
    "MUSIMO",
    "MUSLIM",
    "MUSLMA",
    "MUSLMB",
    "MUSLMF",
    "MUSLMH",
    "MUSLMK",
    "MUSLMM",
    "MUSLMT",
    "MUSLMU",
    "MUSLMY",
    "MUSLMZ",
    "NAINDN",
    "NATVEF",
    "NATVEM",
    "NAUISL",
    "NEGRIT",
    "NEPLSE",
    "NEWARS",
    "NEWBRT",
    "NEWCAL",
    "NEWGER",
    "NEWIRL",
    "NEWZEA",
    "NEWZLE",
    "NEWZLM",
    "NGAMBY",
    "NGONDE",
    "NGONI",
    "NICRGN",
    "NIGRAN",
    "NIUEAN",
    "NKN",
    "NORDIC",
    "NORMAN",
    "NORMFR",
    "NORTAF",
    "NORWGN",
    "NOS",
    "NYANJA",
    "OAFNEC",
    "OASNEC",
    "OCNISL",
    "OEUNFD",
    "OIMATS",
    "OMANI",
    "OPANEC",
    "OPANFD",
    "ORIENT",
    "ORKISL",
    "OROMO",
    "OSANEC",
    "OSSET",
    "OVIMBU",
    "PACNFD",
    "PAKSTN",
    "PALAUA",
    "PALMIS",
    "PALSTN",
    "PANMAN",
    "PAPUAN",
    "PARGYN",
    "PASHTP",
    "PASHTU",
    "PENISL",
    "PERSAN",
    "PERUVN",
    "PEUL",
    "PHNISL",
    "PHOUTH",
    "PITISL",
    "POLISH",
    "POLYNE",
    "POLYNS",
    "POLYNT",
    "PORTGS",
    "PUERTR",
    "PUKISL",
    "PUNJAB",
    "QUECHU",
    "RAIS",
    "RAKHIN",
    "RAKISL",
    "RARTGN",
    "RIOMUN",
    "ROMANN",
    "ROMANS",
    "ROMANY",
    "ROTUMN",
    "RUSSAN",
    "RUTHEN",
    "RWANDA",
    "SAHO",
    "SAKALA",
    "SAMMAR",
    "SAMOAN",
    "SAMOAP",
    "SANGHA",
    "SANISL",
    "SARA",
    "SARDNN",
    "SCANDN",
    "SCOTSH",
    "SENA",
    "SENOUF",
    "SENUFO",
    "SERBAN",
    "SERER",
    "SERVIC",
    "SEYISL",
    "SHAN",
    "SHERPA",
    "SHTISL",
    "SICLAN",
    "SIDAMO",
    "SIKH",
    "SINCHN",
    "SINDHI",
    "SINHLS",
    "SINOMA",
    "SLAVIC",
    "SLOVAK",
    "SLOVNE",
    "SLVNEC",
    "SLVNFD",
    "SOCISL",
    "SOLISL",
    "SOLVEN",
    "SOMALI",
    "SONGHA",
    "SOTHO",
    "SOUAFR",
    "SOUAMR",
    "SOUNFD",
    "SOUSSO",
    "SOUTHA",
    "SPANSH",
    "SRINEC",
    "SRINFD",
    "SRITML",
    "SUNDAN",
    "SWEDSH",
    "SWISS",
    "SYRANL",
    "SYRIAN",
    "SYROLE",
    "TAHITN",
    "TAICHN",
    "TAJIK",
    "TAMANG",
    "TAMIL",
    "TATAR",
    "TEKE",
    "TEUTON",
    "THAI",
    "TIBETN",
    "TIGREA",
    "TOKELN",
    "TONGAN",
    "TONGAS",
    "TORISL",
    "TOUBOU",
    "TOUCOU",
    "TSIMHE",
    "TUAISL",
    "TUAREG",
    "TUMBUK",
    "TUNISN",
    "TURKME",
    "TURKOM",
    "TURKSH",
    "TUTSI",
    "TUVISL",
    "TWA",
    "UGANDN",
    "UKRANN",
    "URUGYN",
    "UYGUR",
    "UZBEK",
    "VANUAT",
    "VEDDA",
    "VENEZN",
    "VIETNM",
    "VITCHN",
    "VLACHS",
    "VOLTAC",
    "WAKISL",
    "WALISL",
    "WALLIS",
    "WALLOO",
    "WELSH",
    "WHITE",
    "WOLOF",
    "WSTIND",
    "YAO",
    "YAPISL",
    "YEMENI",
    "YI",
    "YORUBA",
    "YUGOSL",
    "ZAIRAN",
    "ZANZIB",
    "ZHUANG"
  };

  const AffiliationEthnicGroupCode::value AffiliationEthnicGroupCode::
  _xsd_AffiliationEthnicGroupCode_indexes_[567] =
  {
    ::oo_2_0::AffiliationEthnicGroupCode::ABKHAZ,
    ::oo_2_0::AffiliationEthnicGroupCode::ABORGN,
    ::oo_2_0::AffiliationEthnicGroupCode::ADMISL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFAR,
    ::oo_2_0::AffiliationEthnicGroupCode::AFGHAN,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRADJ,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRAMR,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRBAL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRBAR,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRBAS,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRBEL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRBUR,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRFON,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRFUL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRGBA,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRGIO,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRGOL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRGRE,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRJOL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRKIS,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRKPE,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRKRA,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRKRU,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRLOM,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRMEN,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRMND,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRMNJ,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRMNO,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRNDE,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::AFROAR,
    ::oo_2_0::AffiliationEthnicGroupCode::AFROAS,
    ::oo_2_0::AffiliationEthnicGroupCode::AFROCH,
    ::oo_2_0::AffiliationEthnicGroupCode::AFROEA,
    ::oo_2_0::AffiliationEthnicGroupCode::AFROEU,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRPAP,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRSER,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRSHO,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRTEM,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRVAI,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRWOL,
    ::oo_2_0::AffiliationEthnicGroupCode::AFRYOR,
    ::oo_2_0::AffiliationEthnicGroupCode::AGNI,
    ::oo_2_0::AffiliationEthnicGroupCode::AITISL,
    ::oo_2_0::AffiliationEthnicGroupCode::ALBANN,
    ::oo_2_0::AffiliationEthnicGroupCode::ALBNAN,
    ::oo_2_0::AffiliationEthnicGroupCode::ALEMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::ALGRAN,
    ::oo_2_0::AffiliationEthnicGroupCode::AMERIC,
    ::oo_2_0::AffiliationEthnicGroupCode::AMERIN,
    ::oo_2_0::AffiliationEthnicGroupCode::AMERUS,
    ::oo_2_0::AffiliationEthnicGroupCode::AMHARA,
    ::oo_2_0::AffiliationEthnicGroupCode::ANDORR,
    ::oo_2_0::AffiliationEthnicGroupCode::ANGOLA,
    ::oo_2_0::AffiliationEthnicGroupCode::ANTASA,
    ::oo_2_0::AffiliationEthnicGroupCode::ARAB,
    ::oo_2_0::AffiliationEthnicGroupCode::ARABBE,
    ::oo_2_0::AffiliationEthnicGroupCode::ARGNTN,
    ::oo_2_0::AffiliationEthnicGroupCode::ARMNAN,
    ::oo_2_0::AffiliationEthnicGroupCode::ASNNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::ASSYRN,
    ::oo_2_0::AffiliationEthnicGroupCode::ATUISL,
    ::oo_2_0::AffiliationEthnicGroupCode::AUSISL,
    ::oo_2_0::AffiliationEthnicGroupCode::AUSTRA,
    ::oo_2_0::AffiliationEthnicGroupCode::AUSTRL,
    ::oo_2_0::AffiliationEthnicGroupCode::AUSTRN,
    ::oo_2_0::AffiliationEthnicGroupCode::AYMARA,
    ::oo_2_0::AffiliationEthnicGroupCode::AZERBA,
    ::oo_2_0::AffiliationEthnicGroupCode::AZERI,
    ::oo_2_0::AffiliationEthnicGroupCode::BAHRAN,
    ::oo_2_0::AffiliationEthnicGroupCode::BAKONG,
    ::oo_2_0::AffiliationEthnicGroupCode::BALOCH,
    ::oo_2_0::AffiliationEthnicGroupCode::BANDA,
    ::oo_2_0::AffiliationEthnicGroupCode::BANGLS,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTBA,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTBT,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTES,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTFA,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTKO,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTLU,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTMO,
    ::oo_2_0::AffiliationEthnicGroupCode::BANTU,
    ::oo_2_0::AffiliationEthnicGroupCode::BAOULE,
    ::oo_2_0::AffiliationEthnicGroupCode::BASARW,
    ::oo_2_0::AffiliationEthnicGroupCode::BASHKR,
    ::oo_2_0::AffiliationEthnicGroupCode::BASQUE,
    ::oo_2_0::AffiliationEthnicGroupCode::BATSWA,
    ::oo_2_0::AffiliationEthnicGroupCode::BAYA,
    ::oo_2_0::AffiliationEthnicGroupCode::BEJA,
    ::oo_2_0::AffiliationEthnicGroupCode::BELAU,
    ::oo_2_0::AffiliationEthnicGroupCode::BELGAN,
    ::oo_2_0::AffiliationEthnicGroupCode::BELORU,
    ::oo_2_0::AffiliationEthnicGroupCode::BENGLI,
    ::oo_2_0::AffiliationEthnicGroupCode::BERBER,
    ::oo_2_0::AffiliationEthnicGroupCode::BERIKA,
    ::oo_2_0::AffiliationEthnicGroupCode::BETE,
    ::oo_2_0::AffiliationEthnicGroupCode::BETSIM,
    ::oo_2_0::AffiliationEthnicGroupCode::BHOTE,
    ::oo_2_0::AffiliationEthnicGroupCode::BHOTIA,
    ::oo_2_0::AffiliationEthnicGroupCode::BIHARS,
    ::oo_2_0::AffiliationEthnicGroupCode::BIOKOB,
    ::oo_2_0::AffiliationEthnicGroupCode::BIOKOF,
    ::oo_2_0::AffiliationEthnicGroupCode::BISMAR,
    ::oo_2_0::AffiliationEthnicGroupCode::BLACK,
    ::oo_2_0::AffiliationEthnicGroupCode::BLACKA,
    ::oo_2_0::AffiliationEthnicGroupCode::BOBO,
    ::oo_2_0::AffiliationEthnicGroupCode::BOLIVN,
    ::oo_2_0::AffiliationEthnicGroupCode::BOSCRO,
    ::oo_2_0::AffiliationEthnicGroupCode::BOSMUS,
    ::oo_2_0::AffiliationEthnicGroupCode::BOSSER,
    ::oo_2_0::AffiliationEthnicGroupCode::BOUGNV,
    ::oo_2_0::AffiliationEthnicGroupCode::BRAZLN,
    ::oo_2_0::AffiliationEthnicGroupCode::BRETON,
    ::oo_2_0::AffiliationEthnicGroupCode::BRTNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::BRTNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::BULGRN,
    ::oo_2_0::AffiliationEthnicGroupCode::BURGHR,
    ::oo_2_0::AffiliationEthnicGroupCode::BURMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::BURMSE,
    ::oo_2_0::AffiliationEthnicGroupCode::BUYI,
    ::oo_2_0::AffiliationEthnicGroupCode::BYLRSN,
    ::oo_2_0::AffiliationEthnicGroupCode::CAFRE,
    ::oo_2_0::AffiliationEthnicGroupCode::CAMERO,
    ::oo_2_0::AffiliationEthnicGroupCode::CANADN,
    ::oo_2_0::AffiliationEthnicGroupCode::CARIBN,
    ::oo_2_0::AffiliationEthnicGroupCode::CARISL,
    ::oo_2_0::AffiliationEthnicGroupCode::CAUCAS,
    ::oo_2_0::AffiliationEthnicGroupCode::CELTIC,
    ::oo_2_0::AffiliationEthnicGroupCode::CENAMR,
    ::oo_2_0::AffiliationEthnicGroupCode::CHAHAR,
    ::oo_2_0::AffiliationEthnicGroupCode::CHAM,
    ::oo_2_0::AffiliationEthnicGroupCode::CHAMOR,
    ::oo_2_0::AffiliationEthnicGroupCode::CHEWA,
    ::oo_2_0::AffiliationEthnicGroupCode::CHLEAN,
    ::oo_2_0::AffiliationEthnicGroupCode::CHNISL,
    ::oo_2_0::AffiliationEthnicGroupCode::CHNNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::CHNNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::CHRSTN,
    ::oo_2_0::AffiliationEthnicGroupCode::CHUVAS,
    ::oo_2_0::AffiliationEthnicGroupCode::CIRCAS,
    ::oo_2_0::AffiliationEthnicGroupCode::COASTA,
    ::oo_2_0::AffiliationEthnicGroupCode::COCOSM,
    ::oo_2_0::AffiliationEthnicGroupCode::COKNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::COLMBN,
    ::oo_2_0::AffiliationEthnicGroupCode::COMORA,
    ::oo_2_0::AffiliationEthnicGroupCode::CORNSH,
    ::oo_2_0::AffiliationEthnicGroupCode::CORSCN,
    ::oo_2_0::AffiliationEthnicGroupCode::COSTRN,
    ::oo_2_0::AffiliationEthnicGroupCode::COTIER,
    ::oo_2_0::AffiliationEthnicGroupCode::CRELLA,
    ::oo_2_0::AffiliationEthnicGroupCode::CRELUS,
    ::oo_2_0::AffiliationEthnicGroupCode::CREOLE,
    ::oo_2_0::AffiliationEthnicGroupCode::CREOLM,
    ::oo_2_0::AffiliationEthnicGroupCode::CROATN,
    ::oo_2_0::AffiliationEthnicGroupCode::CYRNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::CZECH,
    ::oo_2_0::AffiliationEthnicGroupCode::DAGHES,
    ::oo_2_0::AffiliationEthnicGroupCode::DALMTN,
    ::oo_2_0::AffiliationEthnicGroupCode::DANISH,
    ::oo_2_0::AffiliationEthnicGroupCode::DIOLA,
    ::oo_2_0::AffiliationEthnicGroupCode::DJERMA,
    ::oo_2_0::AffiliationEthnicGroupCode::DRAVID,
    ::oo_2_0::AffiliationEthnicGroupCode::DUTCH,
    ::oo_2_0::AffiliationEthnicGroupCode::EASISL,
    ::oo_2_0::AffiliationEthnicGroupCode::ECUDRN,
    ::oo_2_0::AffiliationEthnicGroupCode::EGYPTN,
    ::oo_2_0::AffiliationEthnicGroupCode::ENGLSH,
    ::oo_2_0::AffiliationEthnicGroupCode::EQUATO,
    ::oo_2_0::AffiliationEthnicGroupCode::ERIRIA,
    ::oo_2_0::AffiliationEthnicGroupCode::ESTONN,
    ::oo_2_0::AffiliationEthnicGroupCode::ETHNCN,
    ::oo_2_0::AffiliationEthnicGroupCode::ETHNCT,
    ::oo_2_0::AffiliationEthnicGroupCode::EURNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::EURNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::EUROAF,
    ::oo_2_0::AffiliationEthnicGroupCode::EUROIN,
    ::oo_2_0::AffiliationEthnicGroupCode::EUROPE,
    ::oo_2_0::AffiliationEthnicGroupCode::EWE,
    ::oo_2_0::AffiliationEthnicGroupCode::FAROES,
    ::oo_2_0::AffiliationEthnicGroupCode::FIJIAN,
    ::oo_2_0::AffiliationEthnicGroupCode::FIJNIN,
    ::oo_2_0::AffiliationEthnicGroupCode::FILPNO,
    ::oo_2_0::AffiliationEthnicGroupCode::FINNSH,
    ::oo_2_0::AffiliationEthnicGroupCode::FLEMSH,
    ::oo_2_0::AffiliationEthnicGroupCode::FLKISL,
    ::oo_2_0::AffiliationEthnicGroupCode::FORROS,
    ::oo_2_0::AffiliationEthnicGroupCode::FRANCO,
    ::oo_2_0::AffiliationEthnicGroupCode::FRENCH,
    ::oo_2_0::AffiliationEthnicGroupCode::FULA,
    ::oo_2_0::AffiliationEthnicGroupCode::FULANI,
    ::oo_2_0::AffiliationEthnicGroupCode::GAELIC,
    ::oo_2_0::AffiliationEthnicGroupCode::GAGAUZ,
    ::oo_2_0::AffiliationEthnicGroupCode::GARIFU,
    ::oo_2_0::AffiliationEthnicGroupCode::GEORGN,
    ::oo_2_0::AffiliationEthnicGroupCode::GERMAB,
    ::oo_2_0::AffiliationEthnicGroupCode::GERMAL,
    ::oo_2_0::AffiliationEthnicGroupCode::GERMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::GERMAR,
    ::oo_2_0::AffiliationEthnicGroupCode::GILAKI,
    ::oo_2_0::AffiliationEthnicGroupCode::GMBISL,
    ::oo_2_0::AffiliationEthnicGroupCode::GOULAY,
    ::oo_2_0::AffiliationEthnicGroupCode::GOURMA,
    ::oo_2_0::AffiliationEthnicGroupCode::GREEK,
    ::oo_2_0::AffiliationEthnicGroupCode::GREEKT,
    ::oo_2_0::AffiliationEthnicGroupCode::GREENA,
    ::oo_2_0::AffiliationEthnicGroupCode::GREENC,
    ::oo_2_0::AffiliationEthnicGroupCode::GRNLND,
    ::oo_2_0::AffiliationEthnicGroupCode::GUADLN,
    ::oo_2_0::AffiliationEthnicGroupCode::GUATLN,
    ::oo_2_0::AffiliationEthnicGroupCode::GUJART,
    ::oo_2_0::AffiliationEthnicGroupCode::GUMISL,
    ::oo_2_0::AffiliationEthnicGroupCode::GURAGE,
    ::oo_2_0::AffiliationEthnicGroupCode::GURUNG,
    ::oo_2_0::AffiliationEthnicGroupCode::GURUNS,
    ::oo_2_0::AffiliationEthnicGroupCode::GUYANS,
    ::oo_2_0::AffiliationEthnicGroupCode::GYPSY,
    ::oo_2_0::AffiliationEthnicGroupCode::HAMTC,
    ::oo_2_0::AffiliationEthnicGroupCode::HAMTCM,
    ::oo_2_0::AffiliationEthnicGroupCode::HAN,
    ::oo_2_0::AffiliationEthnicGroupCode::HAUSA,
    ::oo_2_0::AffiliationEthnicGroupCode::HAWIAN,
    ::oo_2_0::AffiliationEthnicGroupCode::HAZARA,
    ::oo_2_0::AffiliationEthnicGroupCode::HINDUS,
    ::oo_2_0::AffiliationEthnicGroupCode::HISPAN,
    ::oo_2_0::AffiliationEthnicGroupCode::HKCHNS,
    ::oo_2_0::AffiliationEthnicGroupCode::HMONG,
    ::oo_2_0::AffiliationEthnicGroupCode::HONDRN,
    ::oo_2_0::AffiliationEthnicGroupCode::HUI,
    ::oo_2_0::AffiliationEthnicGroupCode::HUNGRN,
    ::oo_2_0::AffiliationEthnicGroupCode::HUTU,
    ::oo_2_0::AffiliationEthnicGroupCode::HUTUBA,
    ::oo_2_0::AffiliationEthnicGroupCode::IBOS,
    ::oo_2_0::AffiliationEthnicGroupCode::ICLNDR,
    ::oo_2_0::AffiliationEthnicGroupCode::IKRBAT,
    ::oo_2_0::AffiliationEthnicGroupCode::INDIGE,
    ::oo_2_0::AffiliationEthnicGroupCode::INDIGM,
    ::oo_2_0::AffiliationEthnicGroupCode::INDIGN,
    ::oo_2_0::AffiliationEthnicGroupCode::INDNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::INDNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::INDOAR,
    ::oo_2_0::AffiliationEthnicGroupCode::INDOCH,
    ::oo_2_0::AffiliationEthnicGroupCode::INDOMA,
    ::oo_2_0::AffiliationEthnicGroupCode::INDOSN,
    ::oo_2_0::AffiliationEthnicGroupCode::INUIT,
    ::oo_2_0::AffiliationEthnicGroupCode::IRAQI,
    ::oo_2_0::AffiliationEthnicGroupCode::IRISH,
    ::oo_2_0::AffiliationEthnicGroupCode::IRNPER,
    ::oo_2_0::AffiliationEthnicGroupCode::ISRJEW,
    ::oo_2_0::AffiliationEthnicGroupCode::ITALAN,
    ::oo_2_0::AffiliationEthnicGroupCode::ITALFR,
    ::oo_2_0::AffiliationEthnicGroupCode::ITALGE,
    ::oo_2_0::AffiliationEthnicGroupCode::ITALSL,
    ::oo_2_0::AffiliationEthnicGroupCode::JAMACN,
    ::oo_2_0::AffiliationEthnicGroupCode::JAPNES,
    ::oo_2_0::AffiliationEthnicGroupCode::JAVANE,
    ::oo_2_0::AffiliationEthnicGroupCode::JEWISH,
    ::oo_2_0::AffiliationEthnicGroupCode::JORDNN,
    ::oo_2_0::AffiliationEthnicGroupCode::KABYE,
    ::oo_2_0::AffiliationEthnicGroupCode::KALANG,
    ::oo_2_0::AffiliationEthnicGroupCode::KALENJ,
    ::oo_2_0::AffiliationEthnicGroupCode::KAMBA,
    ::oo_2_0::AffiliationEthnicGroupCode::KAMCHN,
    ::oo_2_0::AffiliationEthnicGroupCode::KANAKA,
    ::oo_2_0::AffiliationEthnicGroupCode::KARAKA,
    ::oo_2_0::AffiliationEthnicGroupCode::KAREN,
    ::oo_2_0::AffiliationEthnicGroupCode::KAZAKH,
    ::oo_2_0::AffiliationEthnicGroupCode::KAZAKQ,
    ::oo_2_0::AffiliationEthnicGroupCode::KENYAN,
    ::oo_2_0::AffiliationEthnicGroupCode::KGALAG,
    ::oo_2_0::AffiliationEthnicGroupCode::KHMER,
    ::oo_2_0::AffiliationEthnicGroupCode::KIKUYU,
    ::oo_2_0::AffiliationEthnicGroupCode::KIMBUN,
    ::oo_2_0::AffiliationEthnicGroupCode::KIRDI,
    ::oo_2_0::AffiliationEthnicGroupCode::KIRGHZ,
    ::oo_2_0::AffiliationEthnicGroupCode::KISII,
    ::oo_2_0::AffiliationEthnicGroupCode::KONGO,
    ::oo_2_0::AffiliationEthnicGroupCode::KOREAN,
    ::oo_2_0::AffiliationEthnicGroupCode::KUNAMA,
    ::oo_2_0::AffiliationEthnicGroupCode::KURD,
    ::oo_2_0::AffiliationEthnicGroupCode::KUWAIT,
    ::oo_2_0::AffiliationEthnicGroupCode::LADINO,
    ::oo_2_0::AffiliationEthnicGroupCode::LAOTAN,
    ::oo_2_0::AffiliationEthnicGroupCode::LAPP,
    ::oo_2_0::AffiliationEthnicGroupCode::LATIN,
    ::oo_2_0::AffiliationEthnicGroupCode::LATNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::LATNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::LATVAN,
    ::oo_2_0::AffiliationEthnicGroupCode::LEBNSE,
    ::oo_2_0::AffiliationEthnicGroupCode::LIBYAN,
    ::oo_2_0::AffiliationEthnicGroupCode::LIMBUS,
    ::oo_2_0::AffiliationEthnicGroupCode::LITHUN,
    ::oo_2_0::AffiliationEthnicGroupCode::LOBI,
    ::oo_2_0::AffiliationEthnicGroupCode::LOMWE,
    ::oo_2_0::AffiliationEthnicGroupCode::LUHYA,
    ::oo_2_0::AffiliationEthnicGroupCode::LUO,
    ::oo_2_0::AffiliationEthnicGroupCode::LUR,
    ::oo_2_0::AffiliationEthnicGroupCode::MACDNN,
    ::oo_2_0::AffiliationEthnicGroupCode::MADURE,
    ::oo_2_0::AffiliationEthnicGroupCode::MAGARS,
    ::oo_2_0::AffiliationEthnicGroupCode::MAKOA,
    ::oo_2_0::AffiliationEthnicGroupCode::MALAGA,
    ::oo_2_0::AffiliationEthnicGroupCode::MALATN,
    ::oo_2_0::AffiliationEthnicGroupCode::MALAY,
    ::oo_2_0::AffiliationEthnicGroupCode::MALAYA,
    ::oo_2_0::AffiliationEthnicGroupCode::MALAYI,
    ::oo_2_0::AffiliationEthnicGroupCode::MALAYM,
    ::oo_2_0::AffiliationEthnicGroupCode::MALCHN,
    ::oo_2_0::AffiliationEthnicGroupCode::MALINK,
    ::oo_2_0::AffiliationEthnicGroupCode::MALTSE,
    ::oo_2_0::AffiliationEthnicGroupCode::MALVAN,
    ::oo_2_0::AffiliationEthnicGroupCode::MAN,
    ::oo_2_0::AffiliationEthnicGroupCode::MANCHU,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDE,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDEB,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDEM,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDES,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDJI,
    ::oo_2_0::AffiliationEthnicGroupCode::MANDNG,
    ::oo_2_0::AffiliationEthnicGroupCode::MANGIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MANHIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MANUIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MANX,
    ::oo_2_0::AffiliationEthnicGroupCode::MAORI,
    ::oo_2_0::AffiliationEthnicGroupCode::MARISL,
    ::oo_2_0::AffiliationEthnicGroupCode::MARQIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MARSIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MASSA,
    ::oo_2_0::AffiliationEthnicGroupCode::MAUKIS,
    ::oo_2_0::AffiliationEthnicGroupCode::MAUR,
    ::oo_2_0::AffiliationEthnicGroupCode::MAURTN,
    ::oo_2_0::AffiliationEthnicGroupCode::MAYA,
    ::oo_2_0::AffiliationEthnicGroupCode::MAZAND,
    ::oo_2_0::AffiliationEthnicGroupCode::MBAKA,
    ::oo_2_0::AffiliationEthnicGroupCode::MBAYE,
    ::oo_2_0::AffiliationEthnicGroupCode::MBOCHI,
    ::oo_2_0::AffiliationEthnicGroupCode::MBOUM,
    ::oo_2_0::AffiliationEthnicGroupCode::MDENEC,
    ::oo_2_0::AffiliationEthnicGroupCode::MDENFD,
    ::oo_2_0::AffiliationEthnicGroupCode::MELANE,
    ::oo_2_0::AffiliationEthnicGroupCode::MEO,
    ::oo_2_0::AffiliationEthnicGroupCode::MERU,
    ::oo_2_0::AffiliationEthnicGroupCode::MESTZE,
    ::oo_2_0::AffiliationEthnicGroupCode::MESTZS,
    ::oo_2_0::AffiliationEthnicGroupCode::MEXCAN,
    ::oo_2_0::AffiliationEthnicGroupCode::MIAO,
    ::oo_2_0::AffiliationEthnicGroupCode::MICRON,
    ::oo_2_0::AffiliationEthnicGroupCode::MINA,
    ::oo_2_0::AffiliationEthnicGroupCode::MITISL,
    ::oo_2_0::AffiliationEthnicGroupCode::MIXED,
    ::oo_2_0::AffiliationEthnicGroupCode::MOLDOV,
    ::oo_2_0::AffiliationEthnicGroupCode::MON,
    ::oo_2_0::AffiliationEthnicGroupCode::MONEGA,
    ::oo_2_0::AffiliationEthnicGroupCode::MONGOL,
    ::oo_2_0::AffiliationEthnicGroupCode::MONTEN,
    ::oo_2_0::AffiliationEthnicGroupCode::MOOR,
    ::oo_2_0::AffiliationEthnicGroupCode::MORAVI,
    ::oo_2_0::AffiliationEthnicGroupCode::MOROCN,
    ::oo_2_0::AffiliationEthnicGroupCode::MOSSI,
    ::oo_2_0::AffiliationEthnicGroupCode::MOUND,
    ::oo_2_0::AffiliationEthnicGroupCode::MOUSSE,
    ::oo_2_0::AffiliationEthnicGroupCode::MUHAJR,
    ::oo_2_0::AffiliationEthnicGroupCode::MULATT,
    ::oo_2_0::AffiliationEthnicGroupCode::MUONG,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSIMO,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLIM,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMA,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMB,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMF,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMH,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMK,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMM,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMT,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMU,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMY,
    ::oo_2_0::AffiliationEthnicGroupCode::MUSLMZ,
    ::oo_2_0::AffiliationEthnicGroupCode::NAINDN,
    ::oo_2_0::AffiliationEthnicGroupCode::NATVEF,
    ::oo_2_0::AffiliationEthnicGroupCode::NATVEM,
    ::oo_2_0::AffiliationEthnicGroupCode::NAUISL,
    ::oo_2_0::AffiliationEthnicGroupCode::NEGRIT,
    ::oo_2_0::AffiliationEthnicGroupCode::NEPLSE,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWARS,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWBRT,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWCAL,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWGER,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWIRL,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWZEA,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWZLE,
    ::oo_2_0::AffiliationEthnicGroupCode::NEWZLM,
    ::oo_2_0::AffiliationEthnicGroupCode::NGAMBY,
    ::oo_2_0::AffiliationEthnicGroupCode::NGONDE,
    ::oo_2_0::AffiliationEthnicGroupCode::NGONI,
    ::oo_2_0::AffiliationEthnicGroupCode::NICRGN,
    ::oo_2_0::AffiliationEthnicGroupCode::NIGRAN,
    ::oo_2_0::AffiliationEthnicGroupCode::NIUEAN,
    ::oo_2_0::AffiliationEthnicGroupCode::NKN,
    ::oo_2_0::AffiliationEthnicGroupCode::NORDIC,
    ::oo_2_0::AffiliationEthnicGroupCode::NORMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::NORMFR,
    ::oo_2_0::AffiliationEthnicGroupCode::NORTAF,
    ::oo_2_0::AffiliationEthnicGroupCode::NORWGN,
    ::oo_2_0::AffiliationEthnicGroupCode::NOS,
    ::oo_2_0::AffiliationEthnicGroupCode::NYANJA,
    ::oo_2_0::AffiliationEthnicGroupCode::OAFNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::OASNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::OCNISL,
    ::oo_2_0::AffiliationEthnicGroupCode::OEUNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::OIMATS,
    ::oo_2_0::AffiliationEthnicGroupCode::OMANI,
    ::oo_2_0::AffiliationEthnicGroupCode::OPANEC,
    ::oo_2_0::AffiliationEthnicGroupCode::OPANFD,
    ::oo_2_0::AffiliationEthnicGroupCode::ORIENT,
    ::oo_2_0::AffiliationEthnicGroupCode::ORKISL,
    ::oo_2_0::AffiliationEthnicGroupCode::OROMO,
    ::oo_2_0::AffiliationEthnicGroupCode::OSANEC,
    ::oo_2_0::AffiliationEthnicGroupCode::OSSET,
    ::oo_2_0::AffiliationEthnicGroupCode::OVIMBU,
    ::oo_2_0::AffiliationEthnicGroupCode::PACNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::PAKSTN,
    ::oo_2_0::AffiliationEthnicGroupCode::PALAUA,
    ::oo_2_0::AffiliationEthnicGroupCode::PALMIS,
    ::oo_2_0::AffiliationEthnicGroupCode::PALSTN,
    ::oo_2_0::AffiliationEthnicGroupCode::PANMAN,
    ::oo_2_0::AffiliationEthnicGroupCode::PAPUAN,
    ::oo_2_0::AffiliationEthnicGroupCode::PARGYN,
    ::oo_2_0::AffiliationEthnicGroupCode::PASHTP,
    ::oo_2_0::AffiliationEthnicGroupCode::PASHTU,
    ::oo_2_0::AffiliationEthnicGroupCode::PENISL,
    ::oo_2_0::AffiliationEthnicGroupCode::PERSAN,
    ::oo_2_0::AffiliationEthnicGroupCode::PERUVN,
    ::oo_2_0::AffiliationEthnicGroupCode::PEUL,
    ::oo_2_0::AffiliationEthnicGroupCode::PHNISL,
    ::oo_2_0::AffiliationEthnicGroupCode::PHOUTH,
    ::oo_2_0::AffiliationEthnicGroupCode::PITISL,
    ::oo_2_0::AffiliationEthnicGroupCode::POLISH,
    ::oo_2_0::AffiliationEthnicGroupCode::POLYNE,
    ::oo_2_0::AffiliationEthnicGroupCode::POLYNS,
    ::oo_2_0::AffiliationEthnicGroupCode::POLYNT,
    ::oo_2_0::AffiliationEthnicGroupCode::PORTGS,
    ::oo_2_0::AffiliationEthnicGroupCode::PUERTR,
    ::oo_2_0::AffiliationEthnicGroupCode::PUKISL,
    ::oo_2_0::AffiliationEthnicGroupCode::PUNJAB,
    ::oo_2_0::AffiliationEthnicGroupCode::QUECHU,
    ::oo_2_0::AffiliationEthnicGroupCode::RAIS,
    ::oo_2_0::AffiliationEthnicGroupCode::RAKHIN,
    ::oo_2_0::AffiliationEthnicGroupCode::RAKISL,
    ::oo_2_0::AffiliationEthnicGroupCode::RARTGN,
    ::oo_2_0::AffiliationEthnicGroupCode::RIOMUN,
    ::oo_2_0::AffiliationEthnicGroupCode::ROMANN,
    ::oo_2_0::AffiliationEthnicGroupCode::ROMANS,
    ::oo_2_0::AffiliationEthnicGroupCode::ROMANY,
    ::oo_2_0::AffiliationEthnicGroupCode::ROTUMN,
    ::oo_2_0::AffiliationEthnicGroupCode::RUSSAN,
    ::oo_2_0::AffiliationEthnicGroupCode::RUTHEN,
    ::oo_2_0::AffiliationEthnicGroupCode::RWANDA,
    ::oo_2_0::AffiliationEthnicGroupCode::SAHO,
    ::oo_2_0::AffiliationEthnicGroupCode::SAKALA,
    ::oo_2_0::AffiliationEthnicGroupCode::SAMMAR,
    ::oo_2_0::AffiliationEthnicGroupCode::SAMOAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SAMOAP,
    ::oo_2_0::AffiliationEthnicGroupCode::SANGHA,
    ::oo_2_0::AffiliationEthnicGroupCode::SANISL,
    ::oo_2_0::AffiliationEthnicGroupCode::SARA,
    ::oo_2_0::AffiliationEthnicGroupCode::SARDNN,
    ::oo_2_0::AffiliationEthnicGroupCode::SCANDN,
    ::oo_2_0::AffiliationEthnicGroupCode::SCOTSH,
    ::oo_2_0::AffiliationEthnicGroupCode::SENA,
    ::oo_2_0::AffiliationEthnicGroupCode::SENOUF,
    ::oo_2_0::AffiliationEthnicGroupCode::SENUFO,
    ::oo_2_0::AffiliationEthnicGroupCode::SERBAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SERER,
    ::oo_2_0::AffiliationEthnicGroupCode::SERVIC,
    ::oo_2_0::AffiliationEthnicGroupCode::SEYISL,
    ::oo_2_0::AffiliationEthnicGroupCode::SHAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SHERPA,
    ::oo_2_0::AffiliationEthnicGroupCode::SHTISL,
    ::oo_2_0::AffiliationEthnicGroupCode::SICLAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SIDAMO,
    ::oo_2_0::AffiliationEthnicGroupCode::SIKH,
    ::oo_2_0::AffiliationEthnicGroupCode::SINCHN,
    ::oo_2_0::AffiliationEthnicGroupCode::SINDHI,
    ::oo_2_0::AffiliationEthnicGroupCode::SINHLS,
    ::oo_2_0::AffiliationEthnicGroupCode::SINOMA,
    ::oo_2_0::AffiliationEthnicGroupCode::SLAVIC,
    ::oo_2_0::AffiliationEthnicGroupCode::SLOVAK,
    ::oo_2_0::AffiliationEthnicGroupCode::SLOVNE,
    ::oo_2_0::AffiliationEthnicGroupCode::SLVNEC,
    ::oo_2_0::AffiliationEthnicGroupCode::SLVNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::SOCISL,
    ::oo_2_0::AffiliationEthnicGroupCode::SOLISL,
    ::oo_2_0::AffiliationEthnicGroupCode::SOLVEN,
    ::oo_2_0::AffiliationEthnicGroupCode::SOMALI,
    ::oo_2_0::AffiliationEthnicGroupCode::SONGHA,
    ::oo_2_0::AffiliationEthnicGroupCode::SOTHO,
    ::oo_2_0::AffiliationEthnicGroupCode::SOUAFR,
    ::oo_2_0::AffiliationEthnicGroupCode::SOUAMR,
    ::oo_2_0::AffiliationEthnicGroupCode::SOUNFD,
    ::oo_2_0::AffiliationEthnicGroupCode::SOUSSO,
    ::oo_2_0::AffiliationEthnicGroupCode::SOUTHA,
    ::oo_2_0::AffiliationEthnicGroupCode::SPANSH,
    ::oo_2_0::AffiliationEthnicGroupCode::SRINEC,
    ::oo_2_0::AffiliationEthnicGroupCode::SRINFD,
    ::oo_2_0::AffiliationEthnicGroupCode::SRITML,
    ::oo_2_0::AffiliationEthnicGroupCode::SUNDAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SWEDSH,
    ::oo_2_0::AffiliationEthnicGroupCode::SWISS,
    ::oo_2_0::AffiliationEthnicGroupCode::SYRANL,
    ::oo_2_0::AffiliationEthnicGroupCode::SYRIAN,
    ::oo_2_0::AffiliationEthnicGroupCode::SYROLE,
    ::oo_2_0::AffiliationEthnicGroupCode::TAHITN,
    ::oo_2_0::AffiliationEthnicGroupCode::TAICHN,
    ::oo_2_0::AffiliationEthnicGroupCode::TAJIK,
    ::oo_2_0::AffiliationEthnicGroupCode::TAMANG,
    ::oo_2_0::AffiliationEthnicGroupCode::TAMIL,
    ::oo_2_0::AffiliationEthnicGroupCode::TATAR,
    ::oo_2_0::AffiliationEthnicGroupCode::TEKE,
    ::oo_2_0::AffiliationEthnicGroupCode::TEUTON,
    ::oo_2_0::AffiliationEthnicGroupCode::THAI,
    ::oo_2_0::AffiliationEthnicGroupCode::TIBETN,
    ::oo_2_0::AffiliationEthnicGroupCode::TIGREA,
    ::oo_2_0::AffiliationEthnicGroupCode::TOKELN,
    ::oo_2_0::AffiliationEthnicGroupCode::TONGAN,
    ::oo_2_0::AffiliationEthnicGroupCode::TONGAS,
    ::oo_2_0::AffiliationEthnicGroupCode::TORISL,
    ::oo_2_0::AffiliationEthnicGroupCode::TOUBOU,
    ::oo_2_0::AffiliationEthnicGroupCode::TOUCOU,
    ::oo_2_0::AffiliationEthnicGroupCode::TSIMHE,
    ::oo_2_0::AffiliationEthnicGroupCode::TUAISL,
    ::oo_2_0::AffiliationEthnicGroupCode::TUAREG,
    ::oo_2_0::AffiliationEthnicGroupCode::TUMBUK,
    ::oo_2_0::AffiliationEthnicGroupCode::TUNISN,
    ::oo_2_0::AffiliationEthnicGroupCode::TURKME,
    ::oo_2_0::AffiliationEthnicGroupCode::TURKOM,
    ::oo_2_0::AffiliationEthnicGroupCode::TURKSH,
    ::oo_2_0::AffiliationEthnicGroupCode::TUTSI,
    ::oo_2_0::AffiliationEthnicGroupCode::TUVISL,
    ::oo_2_0::AffiliationEthnicGroupCode::TWA,
    ::oo_2_0::AffiliationEthnicGroupCode::UGANDN,
    ::oo_2_0::AffiliationEthnicGroupCode::UKRANN,
    ::oo_2_0::AffiliationEthnicGroupCode::URUGYN,
    ::oo_2_0::AffiliationEthnicGroupCode::UYGUR,
    ::oo_2_0::AffiliationEthnicGroupCode::UZBEK,
    ::oo_2_0::AffiliationEthnicGroupCode::VANUAT,
    ::oo_2_0::AffiliationEthnicGroupCode::VEDDA,
    ::oo_2_0::AffiliationEthnicGroupCode::VENEZN,
    ::oo_2_0::AffiliationEthnicGroupCode::VIETNM,
    ::oo_2_0::AffiliationEthnicGroupCode::VITCHN,
    ::oo_2_0::AffiliationEthnicGroupCode::VLACHS,
    ::oo_2_0::AffiliationEthnicGroupCode::VOLTAC,
    ::oo_2_0::AffiliationEthnicGroupCode::WAKISL,
    ::oo_2_0::AffiliationEthnicGroupCode::WALISL,
    ::oo_2_0::AffiliationEthnicGroupCode::WALLIS,
    ::oo_2_0::AffiliationEthnicGroupCode::WALLOO,
    ::oo_2_0::AffiliationEthnicGroupCode::WELSH,
    ::oo_2_0::AffiliationEthnicGroupCode::WHITE,
    ::oo_2_0::AffiliationEthnicGroupCode::WOLOF,
    ::oo_2_0::AffiliationEthnicGroupCode::WSTIND,
    ::oo_2_0::AffiliationEthnicGroupCode::YAO,
    ::oo_2_0::AffiliationEthnicGroupCode::YAPISL,
    ::oo_2_0::AffiliationEthnicGroupCode::YEMENI,
    ::oo_2_0::AffiliationEthnicGroupCode::YI,
    ::oo_2_0::AffiliationEthnicGroupCode::YORUBA,
    ::oo_2_0::AffiliationEthnicGroupCode::YUGOSL,
    ::oo_2_0::AffiliationEthnicGroupCode::ZAIRAN,
    ::oo_2_0::AffiliationEthnicGroupCode::ZANZIB,
    ::oo_2_0::AffiliationEthnicGroupCode::ZHUANG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AffiliationEthnicGroupCode >
  _xsd_AffiliationEthnicGroupCode_type_factory_init (
    "AffiliationEthnicGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AffiliationFunctionalGroupCode
  //

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AffiliationFunctionalGroupCode_convert ();
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AffiliationFunctionalGroupCode_convert ();
  }

  AffiliationFunctionalGroupCode::
  AffiliationFunctionalGroupCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AffiliationFunctionalGroupCode_convert ();
  }

  AffiliationFunctionalGroupCode* AffiliationFunctionalGroupCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AffiliationFunctionalGroupCode (*this, f, c);
  }

  AffiliationFunctionalGroupCode::value AffiliationFunctionalGroupCode::
  _xsd_AffiliationFunctionalGroupCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AffiliationFunctionalGroupCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AffiliationFunctionalGroupCode_indexes_,
                      _xsd_AffiliationFunctionalGroupCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_AffiliationFunctionalGroupCode_indexes_ + 6 || _xsd_AffiliationFunctionalGroupCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AffiliationFunctionalGroupCode::
  _xsd_AffiliationFunctionalGroupCode_literals_[6] =
  {
    "CRIMIN",
    "EXER",
    "MULTIN",
    "NKN",
    "NOS",
    "TERRST"
  };

  const AffiliationFunctionalGroupCode::value AffiliationFunctionalGroupCode::
  _xsd_AffiliationFunctionalGroupCode_indexes_[6] =
  {
    ::oo_2_0::AffiliationFunctionalGroupCode::CRIMIN,
    ::oo_2_0::AffiliationFunctionalGroupCode::EXER,
    ::oo_2_0::AffiliationFunctionalGroupCode::MULTIN,
    ::oo_2_0::AffiliationFunctionalGroupCode::NKN,
    ::oo_2_0::AffiliationFunctionalGroupCode::NOS,
    ::oo_2_0::AffiliationFunctionalGroupCode::TERRST
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AffiliationFunctionalGroupCode >
  _xsd_AffiliationFunctionalGroupCode_type_factory_init (
    "AffiliationFunctionalGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AffiliationGeopoliticalCode
  //

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AffiliationGeopoliticalCode_convert ();
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AffiliationGeopoliticalCode_convert ();
  }

  AffiliationGeopoliticalCode::
  AffiliationGeopoliticalCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AffiliationGeopoliticalCode_convert ();
  }

  AffiliationGeopoliticalCode* AffiliationGeopoliticalCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AffiliationGeopoliticalCode (*this, f, c);
  }

  AffiliationGeopoliticalCode::value AffiliationGeopoliticalCode::
  _xsd_AffiliationGeopoliticalCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AffiliationGeopoliticalCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AffiliationGeopoliticalCode_indexes_,
                      _xsd_AffiliationGeopoliticalCode_indexes_ + 245,
                      *this,
                      c));

    if (i == _xsd_AffiliationGeopoliticalCode_indexes_ + 245 || _xsd_AffiliationGeopoliticalCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AffiliationGeopoliticalCode::
  _xsd_AffiliationGeopoliticalCode_literals_[245] =
  {
    "ABW",
    "AFG",
    "AGO",
    "AIA",
    "ALB",
    "AND",
    "ANT",
    "ARE",
    "ARG",
    "ARM",
    "ASM",
    "ATA",
    "ATF",
    "ATG",
    "AUS",
    "AUT",
    "AZE",
    "BDI",
    "BEL",
    "BEN",
    "BFA",
    "BGD",
    "BGR",
    "BHR",
    "BHS",
    "BIH",
    "BLR",
    "BLZ",
    "BMU",
    "BOL",
    "BRA",
    "BRB",
    "BRN",
    "BTN",
    "BVT",
    "BWA",
    "CAF",
    "CAN",
    "CCK",
    "CHE",
    "CHL",
    "CHN",
    "CIV",
    "CMR",
    "COD",
    "COG",
    "COK",
    "COL",
    "COM",
    "CPV",
    "CRI",
    "CSHH",
    "CUB",
    "CXR",
    "CYM",
    "CYP",
    "CZE",
    "DDDE",
    "DEU",
    "DJI",
    "DMA",
    "DNK",
    "DOM",
    "DZA",
    "ECU",
    "EGY",
    "ERI",
    "ESH",
    "ESP",
    "EST",
    "ETH",
    "FIN",
    "FJI",
    "FLK",
    "FRA",
    "FRO",
    "FSM",
    "FXX",
    "GAB",
    "GBR",
    "GEO",
    "GHA",
    "GIB",
    "GIN",
    "GLP",
    "GMB",
    "GNB",
    "GNQ",
    "GRC",
    "GRD",
    "GRL",
    "GTM",
    "GUF",
    "GUM",
    "GUY",
    "HKG",
    "HMD",
    "HND",
    "HRV",
    "HTI",
    "HUN",
    "IDN",
    "IND",
    "IOT",
    "IRL",
    "IRN",
    "IRQ",
    "ISL",
    "ISR",
    "ITA",
    "JAM",
    "JOR",
    "JPN",
    "KAZ",
    "KEN",
    "KGZ",
    "KHM",
    "KIR",
    "KNA",
    "KOR",
    "KWT",
    "LAO",
    "LBN",
    "LBR",
    "LBY",
    "LCA",
    "LIE",
    "LKA",
    "LSO",
    "LTU",
    "LUX",
    "LVA",
    "MAC",
    "MAR",
    "MCO",
    "MDA",
    "MDG",
    "MDV",
    "MEX",
    "MHL",
    "MKD",
    "MLI",
    "MLT",
    "MMR",
    "MNG",
    "MNP",
    "MOZ",
    "MRT",
    "MSR",
    "MTQ",
    "MUS",
    "MWI",
    "MYS",
    "MYT",
    "NAM",
    "NCL",
    "NER",
    "NFK",
    "NGA",
    "NIC",
    "NIU",
    "NLD",
    "NOR",
    "NOS",
    "NPL",
    "NRU",
    "NZL",
    "OMN",
    "PAK",
    "PAN",
    "PCN",
    "PER",
    "PHL",
    "PLW",
    "PNG",
    "POL",
    "PRI",
    "PRK",
    "PRT",
    "PRY",
    "PSE",
    "PYF",
    "QAT",
    "REU",
    "ROU",
    "RUS",
    "RWA",
    "SAU",
    "SCG",
    "SDN",
    "SEN",
    "SGP",
    "SGS",
    "SHN",
    "SJM",
    "SLB",
    "SLE",
    "SLV",
    "SMR",
    "SOM",
    "SPM",
    "STP",
    "SUHH",
    "SUR",
    "SVK",
    "SVN",
    "SWE",
    "SWZ",
    "SYC",
    "SYR",
    "TCA",
    "TCD",
    "TGO",
    "THA",
    "TJK",
    "TKL",
    "TKM",
    "TLS",
    "TON",
    "TTO",
    "TUN",
    "TUR",
    "TUV",
    "TWN",
    "TZA",
    "UGA",
    "UKR",
    "UMI",
    "URY",
    "USA",
    "UZB",
    "VAT",
    "VCT",
    "VEN",
    "VGB",
    "VIR",
    "VNM",
    "VUT",
    "WLF",
    "WSM",
    "YEM",
    "YUCS",
    "ZAF",
    "ZMB",
    "ZWE"
  };

  const AffiliationGeopoliticalCode::value AffiliationGeopoliticalCode::
  _xsd_AffiliationGeopoliticalCode_indexes_[245] =
  {
    ::oo_2_0::AffiliationGeopoliticalCode::ABW,
    ::oo_2_0::AffiliationGeopoliticalCode::AFG,
    ::oo_2_0::AffiliationGeopoliticalCode::AGO,
    ::oo_2_0::AffiliationGeopoliticalCode::AIA,
    ::oo_2_0::AffiliationGeopoliticalCode::ALB,
    ::oo_2_0::AffiliationGeopoliticalCode::AND,
    ::oo_2_0::AffiliationGeopoliticalCode::ANT,
    ::oo_2_0::AffiliationGeopoliticalCode::ARE,
    ::oo_2_0::AffiliationGeopoliticalCode::ARG,
    ::oo_2_0::AffiliationGeopoliticalCode::ARM,
    ::oo_2_0::AffiliationGeopoliticalCode::ASM,
    ::oo_2_0::AffiliationGeopoliticalCode::ATA,
    ::oo_2_0::AffiliationGeopoliticalCode::ATF,
    ::oo_2_0::AffiliationGeopoliticalCode::ATG,
    ::oo_2_0::AffiliationGeopoliticalCode::AUS,
    ::oo_2_0::AffiliationGeopoliticalCode::AUT,
    ::oo_2_0::AffiliationGeopoliticalCode::AZE,
    ::oo_2_0::AffiliationGeopoliticalCode::BDI,
    ::oo_2_0::AffiliationGeopoliticalCode::BEL,
    ::oo_2_0::AffiliationGeopoliticalCode::BEN,
    ::oo_2_0::AffiliationGeopoliticalCode::BFA,
    ::oo_2_0::AffiliationGeopoliticalCode::BGD,
    ::oo_2_0::AffiliationGeopoliticalCode::BGR,
    ::oo_2_0::AffiliationGeopoliticalCode::BHR,
    ::oo_2_0::AffiliationGeopoliticalCode::BHS,
    ::oo_2_0::AffiliationGeopoliticalCode::BIH,
    ::oo_2_0::AffiliationGeopoliticalCode::BLR,
    ::oo_2_0::AffiliationGeopoliticalCode::BLZ,
    ::oo_2_0::AffiliationGeopoliticalCode::BMU,
    ::oo_2_0::AffiliationGeopoliticalCode::BOL,
    ::oo_2_0::AffiliationGeopoliticalCode::BRA,
    ::oo_2_0::AffiliationGeopoliticalCode::BRB,
    ::oo_2_0::AffiliationGeopoliticalCode::BRN,
    ::oo_2_0::AffiliationGeopoliticalCode::BTN,
    ::oo_2_0::AffiliationGeopoliticalCode::BVT,
    ::oo_2_0::AffiliationGeopoliticalCode::BWA,
    ::oo_2_0::AffiliationGeopoliticalCode::CAF,
    ::oo_2_0::AffiliationGeopoliticalCode::CAN,
    ::oo_2_0::AffiliationGeopoliticalCode::CCK,
    ::oo_2_0::AffiliationGeopoliticalCode::CHE,
    ::oo_2_0::AffiliationGeopoliticalCode::CHL,
    ::oo_2_0::AffiliationGeopoliticalCode::CHN,
    ::oo_2_0::AffiliationGeopoliticalCode::CIV,
    ::oo_2_0::AffiliationGeopoliticalCode::CMR,
    ::oo_2_0::AffiliationGeopoliticalCode::COD,
    ::oo_2_0::AffiliationGeopoliticalCode::COG,
    ::oo_2_0::AffiliationGeopoliticalCode::COK,
    ::oo_2_0::AffiliationGeopoliticalCode::COL,
    ::oo_2_0::AffiliationGeopoliticalCode::COM,
    ::oo_2_0::AffiliationGeopoliticalCode::CPV,
    ::oo_2_0::AffiliationGeopoliticalCode::CRI,
    ::oo_2_0::AffiliationGeopoliticalCode::CSHH,
    ::oo_2_0::AffiliationGeopoliticalCode::CUB,
    ::oo_2_0::AffiliationGeopoliticalCode::CXR,
    ::oo_2_0::AffiliationGeopoliticalCode::CYM,
    ::oo_2_0::AffiliationGeopoliticalCode::CYP,
    ::oo_2_0::AffiliationGeopoliticalCode::CZE,
    ::oo_2_0::AffiliationGeopoliticalCode::DDDE,
    ::oo_2_0::AffiliationGeopoliticalCode::DEU,
    ::oo_2_0::AffiliationGeopoliticalCode::DJI,
    ::oo_2_0::AffiliationGeopoliticalCode::DMA,
    ::oo_2_0::AffiliationGeopoliticalCode::DNK,
    ::oo_2_0::AffiliationGeopoliticalCode::DOM,
    ::oo_2_0::AffiliationGeopoliticalCode::DZA,
    ::oo_2_0::AffiliationGeopoliticalCode::ECU,
    ::oo_2_0::AffiliationGeopoliticalCode::EGY,
    ::oo_2_0::AffiliationGeopoliticalCode::ERI,
    ::oo_2_0::AffiliationGeopoliticalCode::ESH,
    ::oo_2_0::AffiliationGeopoliticalCode::ESP,
    ::oo_2_0::AffiliationGeopoliticalCode::EST,
    ::oo_2_0::AffiliationGeopoliticalCode::ETH,
    ::oo_2_0::AffiliationGeopoliticalCode::FIN,
    ::oo_2_0::AffiliationGeopoliticalCode::FJI,
    ::oo_2_0::AffiliationGeopoliticalCode::FLK,
    ::oo_2_0::AffiliationGeopoliticalCode::FRA,
    ::oo_2_0::AffiliationGeopoliticalCode::FRO,
    ::oo_2_0::AffiliationGeopoliticalCode::FSM,
    ::oo_2_0::AffiliationGeopoliticalCode::FXX,
    ::oo_2_0::AffiliationGeopoliticalCode::GAB,
    ::oo_2_0::AffiliationGeopoliticalCode::GBR,
    ::oo_2_0::AffiliationGeopoliticalCode::GEO,
    ::oo_2_0::AffiliationGeopoliticalCode::GHA,
    ::oo_2_0::AffiliationGeopoliticalCode::GIB,
    ::oo_2_0::AffiliationGeopoliticalCode::GIN,
    ::oo_2_0::AffiliationGeopoliticalCode::GLP,
    ::oo_2_0::AffiliationGeopoliticalCode::GMB,
    ::oo_2_0::AffiliationGeopoliticalCode::GNB,
    ::oo_2_0::AffiliationGeopoliticalCode::GNQ,
    ::oo_2_0::AffiliationGeopoliticalCode::GRC,
    ::oo_2_0::AffiliationGeopoliticalCode::GRD,
    ::oo_2_0::AffiliationGeopoliticalCode::GRL,
    ::oo_2_0::AffiliationGeopoliticalCode::GTM,
    ::oo_2_0::AffiliationGeopoliticalCode::GUF,
    ::oo_2_0::AffiliationGeopoliticalCode::GUM,
    ::oo_2_0::AffiliationGeopoliticalCode::GUY,
    ::oo_2_0::AffiliationGeopoliticalCode::HKG,
    ::oo_2_0::AffiliationGeopoliticalCode::HMD,
    ::oo_2_0::AffiliationGeopoliticalCode::HND,
    ::oo_2_0::AffiliationGeopoliticalCode::HRV,
    ::oo_2_0::AffiliationGeopoliticalCode::HTI,
    ::oo_2_0::AffiliationGeopoliticalCode::HUN,
    ::oo_2_0::AffiliationGeopoliticalCode::IDN,
    ::oo_2_0::AffiliationGeopoliticalCode::IND,
    ::oo_2_0::AffiliationGeopoliticalCode::IOT,
    ::oo_2_0::AffiliationGeopoliticalCode::IRL,
    ::oo_2_0::AffiliationGeopoliticalCode::IRN,
    ::oo_2_0::AffiliationGeopoliticalCode::IRQ,
    ::oo_2_0::AffiliationGeopoliticalCode::ISL,
    ::oo_2_0::AffiliationGeopoliticalCode::ISR,
    ::oo_2_0::AffiliationGeopoliticalCode::ITA,
    ::oo_2_0::AffiliationGeopoliticalCode::JAM,
    ::oo_2_0::AffiliationGeopoliticalCode::JOR,
    ::oo_2_0::AffiliationGeopoliticalCode::JPN,
    ::oo_2_0::AffiliationGeopoliticalCode::KAZ,
    ::oo_2_0::AffiliationGeopoliticalCode::KEN,
    ::oo_2_0::AffiliationGeopoliticalCode::KGZ,
    ::oo_2_0::AffiliationGeopoliticalCode::KHM,
    ::oo_2_0::AffiliationGeopoliticalCode::KIR,
    ::oo_2_0::AffiliationGeopoliticalCode::KNA,
    ::oo_2_0::AffiliationGeopoliticalCode::KOR,
    ::oo_2_0::AffiliationGeopoliticalCode::KWT,
    ::oo_2_0::AffiliationGeopoliticalCode::LAO,
    ::oo_2_0::AffiliationGeopoliticalCode::LBN,
    ::oo_2_0::AffiliationGeopoliticalCode::LBR,
    ::oo_2_0::AffiliationGeopoliticalCode::LBY,
    ::oo_2_0::AffiliationGeopoliticalCode::LCA,
    ::oo_2_0::AffiliationGeopoliticalCode::LIE,
    ::oo_2_0::AffiliationGeopoliticalCode::LKA,
    ::oo_2_0::AffiliationGeopoliticalCode::LSO,
    ::oo_2_0::AffiliationGeopoliticalCode::LTU,
    ::oo_2_0::AffiliationGeopoliticalCode::LUX,
    ::oo_2_0::AffiliationGeopoliticalCode::LVA,
    ::oo_2_0::AffiliationGeopoliticalCode::MAC,
    ::oo_2_0::AffiliationGeopoliticalCode::MAR,
    ::oo_2_0::AffiliationGeopoliticalCode::MCO,
    ::oo_2_0::AffiliationGeopoliticalCode::MDA,
    ::oo_2_0::AffiliationGeopoliticalCode::MDG,
    ::oo_2_0::AffiliationGeopoliticalCode::MDV,
    ::oo_2_0::AffiliationGeopoliticalCode::MEX,
    ::oo_2_0::AffiliationGeopoliticalCode::MHL,
    ::oo_2_0::AffiliationGeopoliticalCode::MKD,
    ::oo_2_0::AffiliationGeopoliticalCode::MLI,
    ::oo_2_0::AffiliationGeopoliticalCode::MLT,
    ::oo_2_0::AffiliationGeopoliticalCode::MMR,
    ::oo_2_0::AffiliationGeopoliticalCode::MNG,
    ::oo_2_0::AffiliationGeopoliticalCode::MNP,
    ::oo_2_0::AffiliationGeopoliticalCode::MOZ,
    ::oo_2_0::AffiliationGeopoliticalCode::MRT,
    ::oo_2_0::AffiliationGeopoliticalCode::MSR,
    ::oo_2_0::AffiliationGeopoliticalCode::MTQ,
    ::oo_2_0::AffiliationGeopoliticalCode::MUS,
    ::oo_2_0::AffiliationGeopoliticalCode::MWI,
    ::oo_2_0::AffiliationGeopoliticalCode::MYS,
    ::oo_2_0::AffiliationGeopoliticalCode::MYT,
    ::oo_2_0::AffiliationGeopoliticalCode::NAM,
    ::oo_2_0::AffiliationGeopoliticalCode::NCL,
    ::oo_2_0::AffiliationGeopoliticalCode::NER,
    ::oo_2_0::AffiliationGeopoliticalCode::NFK,
    ::oo_2_0::AffiliationGeopoliticalCode::NGA,
    ::oo_2_0::AffiliationGeopoliticalCode::NIC,
    ::oo_2_0::AffiliationGeopoliticalCode::NIU,
    ::oo_2_0::AffiliationGeopoliticalCode::NLD,
    ::oo_2_0::AffiliationGeopoliticalCode::NOR,
    ::oo_2_0::AffiliationGeopoliticalCode::NOS,
    ::oo_2_0::AffiliationGeopoliticalCode::NPL,
    ::oo_2_0::AffiliationGeopoliticalCode::NRU,
    ::oo_2_0::AffiliationGeopoliticalCode::NZL,
    ::oo_2_0::AffiliationGeopoliticalCode::OMN,
    ::oo_2_0::AffiliationGeopoliticalCode::PAK,
    ::oo_2_0::AffiliationGeopoliticalCode::PAN,
    ::oo_2_0::AffiliationGeopoliticalCode::PCN,
    ::oo_2_0::AffiliationGeopoliticalCode::PER,
    ::oo_2_0::AffiliationGeopoliticalCode::PHL,
    ::oo_2_0::AffiliationGeopoliticalCode::PLW,
    ::oo_2_0::AffiliationGeopoliticalCode::PNG,
    ::oo_2_0::AffiliationGeopoliticalCode::POL,
    ::oo_2_0::AffiliationGeopoliticalCode::PRI,
    ::oo_2_0::AffiliationGeopoliticalCode::PRK,
    ::oo_2_0::AffiliationGeopoliticalCode::PRT,
    ::oo_2_0::AffiliationGeopoliticalCode::PRY,
    ::oo_2_0::AffiliationGeopoliticalCode::PSE,
    ::oo_2_0::AffiliationGeopoliticalCode::PYF,
    ::oo_2_0::AffiliationGeopoliticalCode::QAT,
    ::oo_2_0::AffiliationGeopoliticalCode::REU,
    ::oo_2_0::AffiliationGeopoliticalCode::ROU,
    ::oo_2_0::AffiliationGeopoliticalCode::RUS,
    ::oo_2_0::AffiliationGeopoliticalCode::RWA,
    ::oo_2_0::AffiliationGeopoliticalCode::SAU,
    ::oo_2_0::AffiliationGeopoliticalCode::SCG,
    ::oo_2_0::AffiliationGeopoliticalCode::SDN,
    ::oo_2_0::AffiliationGeopoliticalCode::SEN,
    ::oo_2_0::AffiliationGeopoliticalCode::SGP,
    ::oo_2_0::AffiliationGeopoliticalCode::SGS,
    ::oo_2_0::AffiliationGeopoliticalCode::SHN,
    ::oo_2_0::AffiliationGeopoliticalCode::SJM,
    ::oo_2_0::AffiliationGeopoliticalCode::SLB,
    ::oo_2_0::AffiliationGeopoliticalCode::SLE,
    ::oo_2_0::AffiliationGeopoliticalCode::SLV,
    ::oo_2_0::AffiliationGeopoliticalCode::SMR,
    ::oo_2_0::AffiliationGeopoliticalCode::SOM,
    ::oo_2_0::AffiliationGeopoliticalCode::SPM,
    ::oo_2_0::AffiliationGeopoliticalCode::STP,
    ::oo_2_0::AffiliationGeopoliticalCode::SUHH,
    ::oo_2_0::AffiliationGeopoliticalCode::SUR,
    ::oo_2_0::AffiliationGeopoliticalCode::SVK,
    ::oo_2_0::AffiliationGeopoliticalCode::SVN,
    ::oo_2_0::AffiliationGeopoliticalCode::SWE,
    ::oo_2_0::AffiliationGeopoliticalCode::SWZ,
    ::oo_2_0::AffiliationGeopoliticalCode::SYC,
    ::oo_2_0::AffiliationGeopoliticalCode::SYR,
    ::oo_2_0::AffiliationGeopoliticalCode::TCA,
    ::oo_2_0::AffiliationGeopoliticalCode::TCD,
    ::oo_2_0::AffiliationGeopoliticalCode::TGO,
    ::oo_2_0::AffiliationGeopoliticalCode::THA,
    ::oo_2_0::AffiliationGeopoliticalCode::TJK,
    ::oo_2_0::AffiliationGeopoliticalCode::TKL,
    ::oo_2_0::AffiliationGeopoliticalCode::TKM,
    ::oo_2_0::AffiliationGeopoliticalCode::TLS,
    ::oo_2_0::AffiliationGeopoliticalCode::TON,
    ::oo_2_0::AffiliationGeopoliticalCode::TTO,
    ::oo_2_0::AffiliationGeopoliticalCode::TUN,
    ::oo_2_0::AffiliationGeopoliticalCode::TUR,
    ::oo_2_0::AffiliationGeopoliticalCode::TUV,
    ::oo_2_0::AffiliationGeopoliticalCode::TWN,
    ::oo_2_0::AffiliationGeopoliticalCode::TZA,
    ::oo_2_0::AffiliationGeopoliticalCode::UGA,
    ::oo_2_0::AffiliationGeopoliticalCode::UKR,
    ::oo_2_0::AffiliationGeopoliticalCode::UMI,
    ::oo_2_0::AffiliationGeopoliticalCode::URY,
    ::oo_2_0::AffiliationGeopoliticalCode::USA,
    ::oo_2_0::AffiliationGeopoliticalCode::UZB,
    ::oo_2_0::AffiliationGeopoliticalCode::VAT,
    ::oo_2_0::AffiliationGeopoliticalCode::VCT,
    ::oo_2_0::AffiliationGeopoliticalCode::VEN,
    ::oo_2_0::AffiliationGeopoliticalCode::VGB,
    ::oo_2_0::AffiliationGeopoliticalCode::VIR,
    ::oo_2_0::AffiliationGeopoliticalCode::VNM,
    ::oo_2_0::AffiliationGeopoliticalCode::VUT,
    ::oo_2_0::AffiliationGeopoliticalCode::WLF,
    ::oo_2_0::AffiliationGeopoliticalCode::WSM,
    ::oo_2_0::AffiliationGeopoliticalCode::YEM,
    ::oo_2_0::AffiliationGeopoliticalCode::YUCS,
    ::oo_2_0::AffiliationGeopoliticalCode::ZAF,
    ::oo_2_0::AffiliationGeopoliticalCode::ZMB,
    ::oo_2_0::AffiliationGeopoliticalCode::ZWE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AffiliationGeopoliticalCode >
  _xsd_AffiliationGeopoliticalCode_type_factory_init (
    "AffiliationGeopoliticalCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AffiliationReligionCode
  //

  AffiliationReligionCode::
  AffiliationReligionCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AffiliationReligionCode_convert ();
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AffiliationReligionCode_convert ();
  }

  AffiliationReligionCode::
  AffiliationReligionCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AffiliationReligionCode_convert ();
  }

  AffiliationReligionCode* AffiliationReligionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AffiliationReligionCode (*this, f, c);
  }

  AffiliationReligionCode::value AffiliationReligionCode::
  _xsd_AffiliationReligionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AffiliationReligionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AffiliationReligionCode_indexes_,
                      _xsd_AffiliationReligionCode_indexes_ + 113,
                      *this,
                      c));

    if (i == _xsd_AffiliationReligionCode_indexes_ + 113 || _xsd_AffiliationReligionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AffiliationReligionCode::
  _xsd_AffiliationReligionCode_literals_[113] =
  {
    "AFRMTH",
    "ANGLCN",
    "ANIMSM",
    "APSTLC",
    "ARMNAN",
    "ARMORT",
    "ASMGOD",
    "ATHEST",
    "BABYLN",
    "BAHAI",
    "BAPTST",
    "BEHAI",
    "BLGORT",
    "BUDHSM",
    "CALVNS",
    "CATHLC",
    "CHNDGY",
    "CHRENG",
    "CHRFRW",
    "CHRGOD",
    "CHRSLB",
    "CHRSTN",
    "CHRTVL",
    "CNFCNS",
    "CNG",
    "CNGCCH",
    "CNGNCH",
    "CPTCHR",
    "DRUZE",
    "EKLNIE",
    "EPSCPL",
    "ESTORT",
    "ETHORT",
    "EVNALL",
    "EVNGCH",
    "EVNLUT",
    "GEOORT",
    "GRGARM",
    "GRKCTH",
    "GRKORT",
    "HINDU",
    "IBDMUS",
    "INDGNS",
    "ISLAMA",
    "ISLAMC",
    "ISLAMI",
    "ISLAMN",
    "JAINS",
    "JHVWTN",
    "JUDASM",
    "KIEVPT",
    "KMBNGS",
    "LAMBUD",
    "LNDMSN",
    "LTRSNT",
    "LUTHRN",
    "MANDEA",
    "MARONT",
    "MENNTE",
    "METHDS",
    "MODKNG",
    "MORMON",
    "MSCWPT",
    "MUSLIM",
    "MUSMLY",
    "MUSSHF",
    "MUSZYD",
    "NIUNCH",
    "NKN",
    "NONE",
    "NOS",
    "ORTHDX",
    "PARSI",
    "PGNAFR",
    "PNTCST",
    "PRSBYT",
    "PRT",
    "PRTADV",
    "PRTEVN",
    "PRTMRV",
    "RMNCTH",
    "RMNCTU",
    "ROMORT",
    "RUSORT",
    "SHIMUS",
    "SHINTO",
    "SHMNSM",
    "SIKH",
    "SLVMUS",
    "SOCFRD",
    "SPRCLT",
    "SUNMUS",
    "SVNADV",
    "SYNCHN",
    "TAOISM",
    "TBTBUD",
    "THRVBD",
    "TRBREL",
    "TRD",
    "TRDMYN",
    "UKRAUT",
    "UKRCTH",
    "UKRORT",
    "UNCH",
    "UNCHAU",
    "UNCHCN",
    "UNCHPR",
    "UNDMTH",
    "UNDPRB",
    "UNFRCH",
    "UNICTH",
    "VOODOO",
    "ZRSTRN"
  };

  const AffiliationReligionCode::value AffiliationReligionCode::
  _xsd_AffiliationReligionCode_indexes_[113] =
  {
    ::oo_2_0::AffiliationReligionCode::AFRMTH,
    ::oo_2_0::AffiliationReligionCode::ANGLCN,
    ::oo_2_0::AffiliationReligionCode::ANIMSM,
    ::oo_2_0::AffiliationReligionCode::APSTLC,
    ::oo_2_0::AffiliationReligionCode::ARMNAN,
    ::oo_2_0::AffiliationReligionCode::ARMORT,
    ::oo_2_0::AffiliationReligionCode::ASMGOD,
    ::oo_2_0::AffiliationReligionCode::ATHEST,
    ::oo_2_0::AffiliationReligionCode::BABYLN,
    ::oo_2_0::AffiliationReligionCode::BAHAI,
    ::oo_2_0::AffiliationReligionCode::BAPTST,
    ::oo_2_0::AffiliationReligionCode::BEHAI,
    ::oo_2_0::AffiliationReligionCode::BLGORT,
    ::oo_2_0::AffiliationReligionCode::BUDHSM,
    ::oo_2_0::AffiliationReligionCode::CALVNS,
    ::oo_2_0::AffiliationReligionCode::CATHLC,
    ::oo_2_0::AffiliationReligionCode::CHNDGY,
    ::oo_2_0::AffiliationReligionCode::CHRENG,
    ::oo_2_0::AffiliationReligionCode::CHRFRW,
    ::oo_2_0::AffiliationReligionCode::CHRGOD,
    ::oo_2_0::AffiliationReligionCode::CHRSLB,
    ::oo_2_0::AffiliationReligionCode::CHRSTN,
    ::oo_2_0::AffiliationReligionCode::CHRTVL,
    ::oo_2_0::AffiliationReligionCode::CNFCNS,
    ::oo_2_0::AffiliationReligionCode::CNG,
    ::oo_2_0::AffiliationReligionCode::CNGCCH,
    ::oo_2_0::AffiliationReligionCode::CNGNCH,
    ::oo_2_0::AffiliationReligionCode::CPTCHR,
    ::oo_2_0::AffiliationReligionCode::DRUZE,
    ::oo_2_0::AffiliationReligionCode::EKLNIE,
    ::oo_2_0::AffiliationReligionCode::EPSCPL,
    ::oo_2_0::AffiliationReligionCode::ESTORT,
    ::oo_2_0::AffiliationReligionCode::ETHORT,
    ::oo_2_0::AffiliationReligionCode::EVNALL,
    ::oo_2_0::AffiliationReligionCode::EVNGCH,
    ::oo_2_0::AffiliationReligionCode::EVNLUT,
    ::oo_2_0::AffiliationReligionCode::GEOORT,
    ::oo_2_0::AffiliationReligionCode::GRGARM,
    ::oo_2_0::AffiliationReligionCode::GRKCTH,
    ::oo_2_0::AffiliationReligionCode::GRKORT,
    ::oo_2_0::AffiliationReligionCode::HINDU,
    ::oo_2_0::AffiliationReligionCode::IBDMUS,
    ::oo_2_0::AffiliationReligionCode::INDGNS,
    ::oo_2_0::AffiliationReligionCode::ISLAMA,
    ::oo_2_0::AffiliationReligionCode::ISLAMC,
    ::oo_2_0::AffiliationReligionCode::ISLAMI,
    ::oo_2_0::AffiliationReligionCode::ISLAMN,
    ::oo_2_0::AffiliationReligionCode::JAINS,
    ::oo_2_0::AffiliationReligionCode::JHVWTN,
    ::oo_2_0::AffiliationReligionCode::JUDASM,
    ::oo_2_0::AffiliationReligionCode::KIEVPT,
    ::oo_2_0::AffiliationReligionCode::KMBNGS,
    ::oo_2_0::AffiliationReligionCode::LAMBUD,
    ::oo_2_0::AffiliationReligionCode::LNDMSN,
    ::oo_2_0::AffiliationReligionCode::LTRSNT,
    ::oo_2_0::AffiliationReligionCode::LUTHRN,
    ::oo_2_0::AffiliationReligionCode::MANDEA,
    ::oo_2_0::AffiliationReligionCode::MARONT,
    ::oo_2_0::AffiliationReligionCode::MENNTE,
    ::oo_2_0::AffiliationReligionCode::METHDS,
    ::oo_2_0::AffiliationReligionCode::MODKNG,
    ::oo_2_0::AffiliationReligionCode::MORMON,
    ::oo_2_0::AffiliationReligionCode::MSCWPT,
    ::oo_2_0::AffiliationReligionCode::MUSLIM,
    ::oo_2_0::AffiliationReligionCode::MUSMLY,
    ::oo_2_0::AffiliationReligionCode::MUSSHF,
    ::oo_2_0::AffiliationReligionCode::MUSZYD,
    ::oo_2_0::AffiliationReligionCode::NIUNCH,
    ::oo_2_0::AffiliationReligionCode::NKN,
    ::oo_2_0::AffiliationReligionCode::NONE,
    ::oo_2_0::AffiliationReligionCode::NOS,
    ::oo_2_0::AffiliationReligionCode::ORTHDX,
    ::oo_2_0::AffiliationReligionCode::PARSI,
    ::oo_2_0::AffiliationReligionCode::PGNAFR,
    ::oo_2_0::AffiliationReligionCode::PNTCST,
    ::oo_2_0::AffiliationReligionCode::PRSBYT,
    ::oo_2_0::AffiliationReligionCode::PRT,
    ::oo_2_0::AffiliationReligionCode::PRTADV,
    ::oo_2_0::AffiliationReligionCode::PRTEVN,
    ::oo_2_0::AffiliationReligionCode::PRTMRV,
    ::oo_2_0::AffiliationReligionCode::RMNCTH,
    ::oo_2_0::AffiliationReligionCode::RMNCTU,
    ::oo_2_0::AffiliationReligionCode::ROMORT,
    ::oo_2_0::AffiliationReligionCode::RUSORT,
    ::oo_2_0::AffiliationReligionCode::SHIMUS,
    ::oo_2_0::AffiliationReligionCode::SHINTO,
    ::oo_2_0::AffiliationReligionCode::SHMNSM,
    ::oo_2_0::AffiliationReligionCode::SIKH,
    ::oo_2_0::AffiliationReligionCode::SLVMUS,
    ::oo_2_0::AffiliationReligionCode::SOCFRD,
    ::oo_2_0::AffiliationReligionCode::SPRCLT,
    ::oo_2_0::AffiliationReligionCode::SUNMUS,
    ::oo_2_0::AffiliationReligionCode::SVNADV,
    ::oo_2_0::AffiliationReligionCode::SYNCHN,
    ::oo_2_0::AffiliationReligionCode::TAOISM,
    ::oo_2_0::AffiliationReligionCode::TBTBUD,
    ::oo_2_0::AffiliationReligionCode::THRVBD,
    ::oo_2_0::AffiliationReligionCode::TRBREL,
    ::oo_2_0::AffiliationReligionCode::TRD,
    ::oo_2_0::AffiliationReligionCode::TRDMYN,
    ::oo_2_0::AffiliationReligionCode::UKRAUT,
    ::oo_2_0::AffiliationReligionCode::UKRCTH,
    ::oo_2_0::AffiliationReligionCode::UKRORT,
    ::oo_2_0::AffiliationReligionCode::UNCH,
    ::oo_2_0::AffiliationReligionCode::UNCHAU,
    ::oo_2_0::AffiliationReligionCode::UNCHCN,
    ::oo_2_0::AffiliationReligionCode::UNCHPR,
    ::oo_2_0::AffiliationReligionCode::UNDMTH,
    ::oo_2_0::AffiliationReligionCode::UNDPRB,
    ::oo_2_0::AffiliationReligionCode::UNFRCH,
    ::oo_2_0::AffiliationReligionCode::UNICTH,
    ::oo_2_0::AffiliationReligionCode::VOODOO,
    ::oo_2_0::AffiliationReligionCode::ZRSTRN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AffiliationReligionCode >
  _xsd_AffiliationReligionCode_type_factory_init (
    "AffiliationReligionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirRouteSegmentCivilMilitaryCode
  //

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirRouteSegmentCivilMilitaryCode_convert ();
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirRouteSegmentCivilMilitaryCode_convert ();
  }

  AirRouteSegmentCivilMilitaryCode::
  AirRouteSegmentCivilMilitaryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirRouteSegmentCivilMilitaryCode_convert ();
  }

  AirRouteSegmentCivilMilitaryCode* AirRouteSegmentCivilMilitaryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirRouteSegmentCivilMilitaryCode (*this, f, c);
  }

  AirRouteSegmentCivilMilitaryCode::value AirRouteSegmentCivilMilitaryCode::
  _xsd_AirRouteSegmentCivilMilitaryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirRouteSegmentCivilMilitaryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirRouteSegmentCivilMilitaryCode_indexes_,
                      _xsd_AirRouteSegmentCivilMilitaryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AirRouteSegmentCivilMilitaryCode_indexes_ + 3 || _xsd_AirRouteSegmentCivilMilitaryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirRouteSegmentCivilMilitaryCode::
  _xsd_AirRouteSegmentCivilMilitaryCode_literals_[3] =
  {
    "BOTH",
    "CIVIL",
    "MIL"
  };

  const AirRouteSegmentCivilMilitaryCode::value AirRouteSegmentCivilMilitaryCode::
  _xsd_AirRouteSegmentCivilMilitaryCode_indexes_[3] =
  {
    ::oo_2_0::AirRouteSegmentCivilMilitaryCode::BOTH,
    ::oo_2_0::AirRouteSegmentCivilMilitaryCode::CIVIL,
    ::oo_2_0::AirRouteSegmentCivilMilitaryCode::MIL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirRouteSegmentCivilMilitaryCode >
  _xsd_AirRouteSegmentCivilMilitaryCode_type_factory_init (
    "AirRouteSegmentCivilMilitaryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirRouteSegmentInternationalRouteCode
  //

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirRouteSegmentInternationalRouteCode_convert ();
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirRouteSegmentInternationalRouteCode_convert ();
  }

  AirRouteSegmentInternationalRouteCode::
  AirRouteSegmentInternationalRouteCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirRouteSegmentInternationalRouteCode_convert ();
  }

  AirRouteSegmentInternationalRouteCode* AirRouteSegmentInternationalRouteCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirRouteSegmentInternationalRouteCode (*this, f, c);
  }

  AirRouteSegmentInternationalRouteCode::value AirRouteSegmentInternationalRouteCode::
  _xsd_AirRouteSegmentInternationalRouteCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirRouteSegmentInternationalRouteCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirRouteSegmentInternationalRouteCode_indexes_,
                      _xsd_AirRouteSegmentInternationalRouteCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AirRouteSegmentInternationalRouteCode_indexes_ + 2 || _xsd_AirRouteSegmentInternationalRouteCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirRouteSegmentInternationalRouteCode::
  _xsd_AirRouteSegmentInternationalRouteCode_literals_[2] =
  {
    "DOMSTC",
    "INTERN"
  };

  const AirRouteSegmentInternationalRouteCode::value AirRouteSegmentInternationalRouteCode::
  _xsd_AirRouteSegmentInternationalRouteCode_indexes_[2] =
  {
    ::oo_2_0::AirRouteSegmentInternationalRouteCode::DOMSTC,
    ::oo_2_0::AirRouteSegmentInternationalRouteCode::INTERN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirRouteSegmentInternationalRouteCode >
  _xsd_AirRouteSegmentInternationalRouteCode_type_factory_init (
    "AirRouteSegmentInternationalRouteCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirRouteSegmentRequiredNavigationPerformanceCode
  //

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_convert ();
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_convert ();
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::
  AirRouteSegmentRequiredNavigationPerformanceCode (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_convert ();
  }

  AirRouteSegmentRequiredNavigationPerformanceCode* AirRouteSegmentRequiredNavigationPerformanceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirRouteSegmentRequiredNavigationPerformanceCode (*this, f, c);
  }

  AirRouteSegmentRequiredNavigationPerformanceCode::value AirRouteSegmentRequiredNavigationPerformanceCode::
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_indexes_,
                      _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_indexes_ + 6 || _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirRouteSegmentRequiredNavigationPerformanceCode::
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_[6] =
  {
    "125NM",
    "1NM",
    "20NM",
    "4NM",
    "5NM",
    "6NM"
  };

  const AirRouteSegmentRequiredNavigationPerformanceCode::value AirRouteSegmentRequiredNavigationPerformanceCode::
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_indexes_[6] =
  {
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_125NM,
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_1NM,
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_20NM,
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_4NM,
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_5NM,
    ::oo_2_0::AirRouteSegmentRequiredNavigationPerformanceCode::cxx_6NM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirRouteSegmentRequiredNavigationPerformanceCode >
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_type_factory_init (
    "AirRouteSegmentRequiredNavigationPerformanceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeAirframeDesignCode
  //

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeAirframeDesignCode_convert ();
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeAirframeDesignCode_convert ();
  }

  AircraftTypeAirframeDesignCode::
  AircraftTypeAirframeDesignCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeAirframeDesignCode_convert ();
  }

  AircraftTypeAirframeDesignCode* AircraftTypeAirframeDesignCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeAirframeDesignCode (*this, f, c);
  }

  AircraftTypeAirframeDesignCode::value AircraftTypeAirframeDesignCode::
  _xsd_AircraftTypeAirframeDesignCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeAirframeDesignCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeAirframeDesignCode_indexes_,
                      _xsd_AircraftTypeAirframeDesignCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeAirframeDesignCode_indexes_ + 11 || _xsd_AircraftTypeAirframeDesignCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeAirframeDesignCode::
  _xsd_AircraftTypeAirframeDesignCode_literals_[11] =
  {
    "AUTOGY",
    "BALOON",
    "BOMBER",
    "CARGO",
    "DIRIG",
    "FIGHTR",
    "GLIDER",
    "HELO",
    "NKN",
    "NOS",
    "SATEL"
  };

  const AircraftTypeAirframeDesignCode::value AircraftTypeAirframeDesignCode::
  _xsd_AircraftTypeAirframeDesignCode_indexes_[11] =
  {
    ::oo_2_0::AircraftTypeAirframeDesignCode::AUTOGY,
    ::oo_2_0::AircraftTypeAirframeDesignCode::BALOON,
    ::oo_2_0::AircraftTypeAirframeDesignCode::BOMBER,
    ::oo_2_0::AircraftTypeAirframeDesignCode::CARGO,
    ::oo_2_0::AircraftTypeAirframeDesignCode::DIRIG,
    ::oo_2_0::AircraftTypeAirframeDesignCode::FIGHTR,
    ::oo_2_0::AircraftTypeAirframeDesignCode::GLIDER,
    ::oo_2_0::AircraftTypeAirframeDesignCode::HELO,
    ::oo_2_0::AircraftTypeAirframeDesignCode::NKN,
    ::oo_2_0::AircraftTypeAirframeDesignCode::NOS,
    ::oo_2_0::AircraftTypeAirframeDesignCode::SATEL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeAirframeDesignCode >
  _xsd_AircraftTypeAirframeDesignCode_type_factory_init (
    "AircraftTypeAirframeDesignCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeCategoryCode
  //

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeCategoryCode_convert ();
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeCategoryCode_convert ();
  }

  AircraftTypeCategoryCode::
  AircraftTypeCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeCategoryCode_convert ();
  }

  AircraftTypeCategoryCode* AircraftTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeCategoryCode (*this, f, c);
  }

  AircraftTypeCategoryCode::value AircraftTypeCategoryCode::
  _xsd_AircraftTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeCategoryCode_indexes_,
                      _xsd_AircraftTypeCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeCategoryCode_indexes_ + 6 || _xsd_AircraftTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeCategoryCode::
  _xsd_AircraftTypeCategoryCode_literals_[6] =
  {
    "AIRRW",
    "FIXWNG",
    "LGTAIR",
    "NKN",
    "NOS",
    "SPACEM"
  };

  const AircraftTypeCategoryCode::value AircraftTypeCategoryCode::
  _xsd_AircraftTypeCategoryCode_indexes_[6] =
  {
    ::oo_2_0::AircraftTypeCategoryCode::AIRRW,
    ::oo_2_0::AircraftTypeCategoryCode::FIXWNG,
    ::oo_2_0::AircraftTypeCategoryCode::LGTAIR,
    ::oo_2_0::AircraftTypeCategoryCode::NKN,
    ::oo_2_0::AircraftTypeCategoryCode::NOS,
    ::oo_2_0::AircraftTypeCategoryCode::SPACEM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeCategoryCode >
  _xsd_AircraftTypeCategoryCode_type_factory_init (
    "AircraftTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeDesignRangeCode
  //

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeDesignRangeCode_convert ();
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeDesignRangeCode_convert ();
  }

  AircraftTypeDesignRangeCode::
  AircraftTypeDesignRangeCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeDesignRangeCode_convert ();
  }

  AircraftTypeDesignRangeCode* AircraftTypeDesignRangeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeDesignRangeCode (*this, f, c);
  }

  AircraftTypeDesignRangeCode::value AircraftTypeDesignRangeCode::
  _xsd_AircraftTypeDesignRangeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeDesignRangeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeDesignRangeCode_indexes_,
                      _xsd_AircraftTypeDesignRangeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeDesignRangeCode_indexes_ + 4 || _xsd_AircraftTypeDesignRangeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeDesignRangeCode::
  _xsd_AircraftTypeDesignRangeCode_literals_[4] =
  {
    "LONG",
    "MEDIUM",
    "NKN",
    "SHORT"
  };

  const AircraftTypeDesignRangeCode::value AircraftTypeDesignRangeCode::
  _xsd_AircraftTypeDesignRangeCode_indexes_[4] =
  {
    ::oo_2_0::AircraftTypeDesignRangeCode::LONG,
    ::oo_2_0::AircraftTypeDesignRangeCode::MEDIUM,
    ::oo_2_0::AircraftTypeDesignRangeCode::NKN,
    ::oo_2_0::AircraftTypeDesignRangeCode::SHORT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeDesignRangeCode >
  _xsd_AircraftTypeDesignRangeCode_type_factory_init (
    "AircraftTypeDesignRangeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeDesignRoleCode
  //

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeDesignRoleCode_convert ();
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeDesignRoleCode_convert ();
  }

  AircraftTypeDesignRoleCode::
  AircraftTypeDesignRoleCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeDesignRoleCode_convert ();
  }

  AircraftTypeDesignRoleCode* AircraftTypeDesignRoleCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeDesignRoleCode (*this, f, c);
  }

  AircraftTypeDesignRoleCode::value AircraftTypeDesignRoleCode::
  _xsd_AircraftTypeDesignRoleCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeDesignRoleCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeDesignRoleCode_indexes_,
                      _xsd_AircraftTypeDesignRoleCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeDesignRoleCode_indexes_ + 6 || _xsd_AircraftTypeDesignRoleCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeDesignRoleCode::
  _xsd_AircraftTypeDesignRoleCode_literals_[6] =
  {
    "DEF",
    "MULTI",
    "NKN",
    "NOS",
    "OFF",
    "SUPPRT"
  };

  const AircraftTypeDesignRoleCode::value AircraftTypeDesignRoleCode::
  _xsd_AircraftTypeDesignRoleCode_indexes_[6] =
  {
    ::oo_2_0::AircraftTypeDesignRoleCode::DEF,
    ::oo_2_0::AircraftTypeDesignRoleCode::MULTI,
    ::oo_2_0::AircraftTypeDesignRoleCode::NKN,
    ::oo_2_0::AircraftTypeDesignRoleCode::NOS,
    ::oo_2_0::AircraftTypeDesignRoleCode::OFF,
    ::oo_2_0::AircraftTypeDesignRoleCode::SUPPRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeDesignRoleCode >
  _xsd_AircraftTypeDesignRoleCode_type_factory_init (
    "AircraftTypeDesignRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeLoadCategoryCode
  //

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeLoadCategoryCode_convert ();
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeLoadCategoryCode_convert ();
  }

  AircraftTypeLoadCategoryCode::
  AircraftTypeLoadCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeLoadCategoryCode_convert ();
  }

  AircraftTypeLoadCategoryCode* AircraftTypeLoadCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeLoadCategoryCode (*this, f, c);
  }

  AircraftTypeLoadCategoryCode::value AircraftTypeLoadCategoryCode::
  _xsd_AircraftTypeLoadCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeLoadCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeLoadCategoryCode_indexes_,
                      _xsd_AircraftTypeLoadCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeLoadCategoryCode_indexes_ + 5 || _xsd_AircraftTypeLoadCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeLoadCategoryCode::
  _xsd_AircraftTypeLoadCategoryCode_literals_[5] =
  {
    "HEAVY",
    "LIGHT",
    "MEDIUM",
    "NKN",
    "NOS"
  };

  const AircraftTypeLoadCategoryCode::value AircraftTypeLoadCategoryCode::
  _xsd_AircraftTypeLoadCategoryCode_indexes_[5] =
  {
    ::oo_2_0::AircraftTypeLoadCategoryCode::HEAVY,
    ::oo_2_0::AircraftTypeLoadCategoryCode::LIGHT,
    ::oo_2_0::AircraftTypeLoadCategoryCode::MEDIUM,
    ::oo_2_0::AircraftTypeLoadCategoryCode::NKN,
    ::oo_2_0::AircraftTypeLoadCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeLoadCategoryCode >
  _xsd_AircraftTypeLoadCategoryCode_type_factory_init (
    "AircraftTypeLoadCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeMainPurposeCode
  //

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeMainPurposeCode_convert ();
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeMainPurposeCode_convert ();
  }

  AircraftTypeMainPurposeCode::
  AircraftTypeMainPurposeCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeMainPurposeCode_convert ();
  }

  AircraftTypeMainPurposeCode* AircraftTypeMainPurposeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeMainPurposeCode (*this, f, c);
  }

  AircraftTypeMainPurposeCode::value AircraftTypeMainPurposeCode::
  _xsd_AircraftTypeMainPurposeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeMainPurposeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeMainPurposeCode_indexes_,
                      _xsd_AircraftTypeMainPurposeCode_indexes_ + 61,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeMainPurposeCode_indexes_ + 61 || _xsd_AircraftTypeMainPurposeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeMainPurposeCode::
  _xsd_AircraftTypeMainPurposeCode_literals_[61] =
  {
    "AAR",
    "ACP",
    "AEW",
    "AEWCON",
    "AIRDEF",
    "AIRSUP",
    "ANTARM",
    "ARELAY",
    "ARMAS",
    "ASCB",
    "ASMPA",
    "ASUW",
    "ASW",
    "ATKSTR",
    "ATTACK",
    "CARGO",
    "CMDCTL",
    "COM",
    "CSAR",
    "DRONL",
    "ECMJAM",
    "ELCCNM",
    "EW",
    "FIGBOM",
    "FIGINT",
    "GDATK",
    "GDATKR",
    "IMINGT",
    "LIAIS",
    "MAINT",
    "MEDEVC",
    "METBAL",
    "MINCM",
    "MINWAR",
    "MPA",
    "MPAREC",
    "MULTIP",
    "MULTIS",
    "NAV",
    "NAVATK",
    "NKN",
    "NOS",
    "PATROL",
    "PHOTO",
    "PSG",
    "RCALIB",
    "RECCE",
    "RECECM",
    "RECPHO",
    "RECRAD",
    "RECVIS",
    "SAR",
    "SCOUT",
    "SINGA",
    "SOF",
    "SPCPRP",
    "STOR",
    "TANKER",
    "TGTREL",
    "TOWTGT",
    "UTILTY"
  };

  const AircraftTypeMainPurposeCode::value AircraftTypeMainPurposeCode::
  _xsd_AircraftTypeMainPurposeCode_indexes_[61] =
  {
    ::oo_2_0::AircraftTypeMainPurposeCode::AAR,
    ::oo_2_0::AircraftTypeMainPurposeCode::ACP,
    ::oo_2_0::AircraftTypeMainPurposeCode::AEW,
    ::oo_2_0::AircraftTypeMainPurposeCode::AEWCON,
    ::oo_2_0::AircraftTypeMainPurposeCode::AIRDEF,
    ::oo_2_0::AircraftTypeMainPurposeCode::AIRSUP,
    ::oo_2_0::AircraftTypeMainPurposeCode::ANTARM,
    ::oo_2_0::AircraftTypeMainPurposeCode::ARELAY,
    ::oo_2_0::AircraftTypeMainPurposeCode::ARMAS,
    ::oo_2_0::AircraftTypeMainPurposeCode::ASCB,
    ::oo_2_0::AircraftTypeMainPurposeCode::ASMPA,
    ::oo_2_0::AircraftTypeMainPurposeCode::ASUW,
    ::oo_2_0::AircraftTypeMainPurposeCode::ASW,
    ::oo_2_0::AircraftTypeMainPurposeCode::ATKSTR,
    ::oo_2_0::AircraftTypeMainPurposeCode::ATTACK,
    ::oo_2_0::AircraftTypeMainPurposeCode::CARGO,
    ::oo_2_0::AircraftTypeMainPurposeCode::CMDCTL,
    ::oo_2_0::AircraftTypeMainPurposeCode::COM,
    ::oo_2_0::AircraftTypeMainPurposeCode::CSAR,
    ::oo_2_0::AircraftTypeMainPurposeCode::DRONL,
    ::oo_2_0::AircraftTypeMainPurposeCode::ECMJAM,
    ::oo_2_0::AircraftTypeMainPurposeCode::ELCCNM,
    ::oo_2_0::AircraftTypeMainPurposeCode::EW,
    ::oo_2_0::AircraftTypeMainPurposeCode::FIGBOM,
    ::oo_2_0::AircraftTypeMainPurposeCode::FIGINT,
    ::oo_2_0::AircraftTypeMainPurposeCode::GDATK,
    ::oo_2_0::AircraftTypeMainPurposeCode::GDATKR,
    ::oo_2_0::AircraftTypeMainPurposeCode::IMINGT,
    ::oo_2_0::AircraftTypeMainPurposeCode::LIAIS,
    ::oo_2_0::AircraftTypeMainPurposeCode::MAINT,
    ::oo_2_0::AircraftTypeMainPurposeCode::MEDEVC,
    ::oo_2_0::AircraftTypeMainPurposeCode::METBAL,
    ::oo_2_0::AircraftTypeMainPurposeCode::MINCM,
    ::oo_2_0::AircraftTypeMainPurposeCode::MINWAR,
    ::oo_2_0::AircraftTypeMainPurposeCode::MPA,
    ::oo_2_0::AircraftTypeMainPurposeCode::MPAREC,
    ::oo_2_0::AircraftTypeMainPurposeCode::MULTIP,
    ::oo_2_0::AircraftTypeMainPurposeCode::MULTIS,
    ::oo_2_0::AircraftTypeMainPurposeCode::NAV,
    ::oo_2_0::AircraftTypeMainPurposeCode::NAVATK,
    ::oo_2_0::AircraftTypeMainPurposeCode::NKN,
    ::oo_2_0::AircraftTypeMainPurposeCode::NOS,
    ::oo_2_0::AircraftTypeMainPurposeCode::PATROL,
    ::oo_2_0::AircraftTypeMainPurposeCode::PHOTO,
    ::oo_2_0::AircraftTypeMainPurposeCode::PSG,
    ::oo_2_0::AircraftTypeMainPurposeCode::RCALIB,
    ::oo_2_0::AircraftTypeMainPurposeCode::RECCE,
    ::oo_2_0::AircraftTypeMainPurposeCode::RECECM,
    ::oo_2_0::AircraftTypeMainPurposeCode::RECPHO,
    ::oo_2_0::AircraftTypeMainPurposeCode::RECRAD,
    ::oo_2_0::AircraftTypeMainPurposeCode::RECVIS,
    ::oo_2_0::AircraftTypeMainPurposeCode::SAR,
    ::oo_2_0::AircraftTypeMainPurposeCode::SCOUT,
    ::oo_2_0::AircraftTypeMainPurposeCode::SINGA,
    ::oo_2_0::AircraftTypeMainPurposeCode::SOF,
    ::oo_2_0::AircraftTypeMainPurposeCode::SPCPRP,
    ::oo_2_0::AircraftTypeMainPurposeCode::STOR,
    ::oo_2_0::AircraftTypeMainPurposeCode::TANKER,
    ::oo_2_0::AircraftTypeMainPurposeCode::TGTREL,
    ::oo_2_0::AircraftTypeMainPurposeCode::TOWTGT,
    ::oo_2_0::AircraftTypeMainPurposeCode::UTILTY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeMainPurposeCode >
  _xsd_AircraftTypeMainPurposeCode_type_factory_init (
    "AircraftTypeMainPurposeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeManningCode
  //

  AircraftTypeManningCode::
  AircraftTypeManningCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeManningCode_convert ();
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeManningCode_convert ();
  }

  AircraftTypeManningCode::
  AircraftTypeManningCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeManningCode_convert ();
  }

  AircraftTypeManningCode* AircraftTypeManningCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeManningCode (*this, f, c);
  }

  AircraftTypeManningCode::value AircraftTypeManningCode::
  _xsd_AircraftTypeManningCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeManningCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeManningCode_indexes_,
                      _xsd_AircraftTypeManningCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeManningCode_indexes_ + 5 || _xsd_AircraftTypeManningCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeManningCode::
  _xsd_AircraftTypeManningCode_literals_[5] =
  {
    "MANNED",
    "NKN",
    "UNMANN",
    "UNMNRP",
    "UNMRP"
  };

  const AircraftTypeManningCode::value AircraftTypeManningCode::
  _xsd_AircraftTypeManningCode_indexes_[5] =
  {
    ::oo_2_0::AircraftTypeManningCode::MANNED,
    ::oo_2_0::AircraftTypeManningCode::NKN,
    ::oo_2_0::AircraftTypeManningCode::UNMANN,
    ::oo_2_0::AircraftTypeManningCode::UNMNRP,
    ::oo_2_0::AircraftTypeManningCode::UNMRP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeManningCode >
  _xsd_AircraftTypeManningCode_type_factory_init (
    "AircraftTypeManningCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeMilitaryCivilianCode
  //

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeMilitaryCivilianCode_convert ();
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeMilitaryCivilianCode_convert ();
  }

  AircraftTypeMilitaryCivilianCode::
  AircraftTypeMilitaryCivilianCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeMilitaryCivilianCode_convert ();
  }

  AircraftTypeMilitaryCivilianCode* AircraftTypeMilitaryCivilianCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeMilitaryCivilianCode (*this, f, c);
  }

  AircraftTypeMilitaryCivilianCode::value AircraftTypeMilitaryCivilianCode::
  _xsd_AircraftTypeMilitaryCivilianCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeMilitaryCivilianCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeMilitaryCivilianCode_indexes_,
                      _xsd_AircraftTypeMilitaryCivilianCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeMilitaryCivilianCode_indexes_ + 3 || _xsd_AircraftTypeMilitaryCivilianCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeMilitaryCivilianCode::
  _xsd_AircraftTypeMilitaryCivilianCode_literals_[3] =
  {
    "CIVIL",
    "MIL",
    "NKN"
  };

  const AircraftTypeMilitaryCivilianCode::value AircraftTypeMilitaryCivilianCode::
  _xsd_AircraftTypeMilitaryCivilianCode_indexes_[3] =
  {
    ::oo_2_0::AircraftTypeMilitaryCivilianCode::CIVIL,
    ::oo_2_0::AircraftTypeMilitaryCivilianCode::MIL,
    ::oo_2_0::AircraftTypeMilitaryCivilianCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeMilitaryCivilianCode >
  _xsd_AircraftTypeMilitaryCivilianCode_type_factory_init (
    "AircraftTypeMilitaryCivilianCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeModelCode
  //

  AircraftTypeModelCode::
  AircraftTypeModelCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeModelCode_convert ();
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeModelCode_convert ();
  }

  AircraftTypeModelCode::
  AircraftTypeModelCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeModelCode_convert ();
  }

  AircraftTypeModelCode* AircraftTypeModelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeModelCode (*this, f, c);
  }

  AircraftTypeModelCode::value AircraftTypeModelCode::
  _xsd_AircraftTypeModelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeModelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeModelCode_indexes_,
                      _xsd_AircraftTypeModelCode_indexes_ + 4758,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeModelCode_indexes_ + 4758 || _xsd_AircraftTypeModelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeModelCode::
  _xsd_AircraftTypeModelCode_literals_[4758] =
  {
    "101156",
    "1049",
    "1124SS",
    "1125SP",
    "1150AT",
    "1240",
    "137T",
    "200",
    "201A",
    "232C",
    "269A",
    "280L",
    "28PBRE",
    "28RBRD",
    "28UBRD",
    "28UBRE",
    "300C",
    "333DF",
    "358GAV",
    "35XD",
    "369OHJ",
    "414A",
    "500MD",
    "698V",
    "8600",
    "A1",
    "A10",
    "A100",
    "A103",
    "A109A",
    "A109C",
    "A109E",
    "A109H0",
    "A109HA",
    "A109K",
    "A109KM",
    "A109KN",
    "A109MA",
    "A10A",
    "A10AL",
    "A10B",
    "A119",
    "A120LS",
    "A122",
    "A129",
    "A12919",
    "A132",
    "A135",
    "A139",
    "A18",
    "A1D",
    "A1M",
    "A20",
    "A200",
    "A200BS",
    "A209",
    "A211",
    "A212",
    "A212A",
    "A21M",
    "A22",
    "A22J",
    "A23",
    "A25",
    "A26",
    "A27",
    "A29",
    "A2AVEN",
    "A3",
    "A300",
    "A30060",
    "A3006M",
    "A3006S",
    "A300B4",
    "A300C4",
    "A300MR",
    "A300SB",
    "A310",
    "A31020",
    "A31030",
    "A310AE",
    "A310CY",
    "A310MR",
    "A316",
    "A317",
    "A318",
    "A319",
    "A319CJ",
    "A32",
    "A320",
    "A32020",
    "A321",
    "A32120",
    "A32A",
    "A330",
    "A33020",
    "A33030",
    "A340",
    "A34040",
    "A34080",
    "A360",
    "A36H",
    "A36TC",
    "A37",
    "A37A",
    "A37B",
    "A3A",
    "A3B",
    "A4",
    "A4A",
    "A4B",
    "A4C",
    "A4D",
    "A4E",
    "A4F",
    "A4G",
    "A4H",
    "A4J",
    "A4K",
    "A4KU",
    "A4L",
    "A4M",
    "A4N",
    "A4P",
    "A4Q",
    "A4S",
    "A4SU",
    "A5",
    "A501",
    "A5M",
    "A6",
    "A60PLS",
    "A6A",
    "A6B",
    "A6C",
    "A6E",
    "A6F",
    "A6G",
    "A7",
    "A7A",
    "A7B",
    "A7C",
    "A7D",
    "A7E",
    "A7G",
    "A7H",
    "A7K",
    "A7P",
    "AA1",
    "AA1B",
    "AA5",
    "AB204",
    "AB204A",
    "AB204B",
    "AB205",
    "AB205A",
    "AB205B",
    "AB206",
    "AB2063",
    "AB2064",
    "AB206A",
    "AB206B",
    "AB206L",
    "AB209",
    "AB212",
    "AB212A",
    "AB212C",
    "AB212M",
    "AB212O",
    "AB214",
    "AB214A",
    "AB214B",
    "AB214C",
    "AB214S",
    "AB222",
    "AB260",
    "AB406",
    "AB412",
    "AB47",
    "AB47G",
    "AB47J",
    "AB47SX",
    "ABE212",
    "AC05",
    "AC10",
    "AC119",
    "AC119K",
    "AC12",
    "AC130",
    "AC130A",
    "AC130H",
    "AC130U",
    "AC14",
    "AC20",
    "AC21",
    "AC2A",
    "AC2T",
    "AC47",
    "AC50",
    "AC52",
    "AC60",
    "AC69",
    "AC6T",
    "AC72",
    "AC90",
    "ACMD",
    "ACOCK",
    "ACOCKA",
    "ACOCKB",
    "ADA",
    "AE100",
    "AE206",
    "AE207",
    "AE209",
    "AE270",
    "AE316",
    "AE317",
    "AER50",
    "AEW2",
    "AFM526",
    "AFX",
    "AG6",
    "AGSYE1",
    "AH1",
    "AH12",
    "AH12A",
    "AH1E",
    "AH1F",
    "AH1G",
    "AH1J",
    "AH1LX",
    "AH1P",
    "AH1Q",
    "AH1R",
    "AH1RO",
    "AH1S",
    "AH1TSC",
    "AH1W",
    "AH1WSC",
    "AH58D",
    "AH6",
    "AH64",
    "AH64A",
    "AH64C",
    "AH64D",
    "AH6C",
    "AH6F",
    "AH6G",
    "AH6J",
    "AH7",
    "AH70",
    "AHA",
    "AHMK1",
    "AHMK5",
    "AHMK6",
    "AHMK7",
    "AHMK9",
    "AIEP",
    "AIRS",
    "AJ37",
    "AJS37",
    "AL1",
    "AL1A",
    "AL60",
    "AL60B",
    "ALA100",
    "ALA300",
    "ALA40",
    "ALA600",
    "ALI",
    "ALIZM",
    "ALPHA",
    "ALPHA1",
    "ALPHA2",
    "ALPHAT",
    "AM3C",
    "AMH",
    "AMT100",
    "AMT200",
    "AN10",
    "AN114",
    "AN12",
    "AN124",
    "AN1241",
    "AN1243",
    "AN124M",
    "AN14",
    "AN140",
    "AN180",
    "AN2",
    "AN22",
    "AN225",
    "AN22A",
    "AN22B",
    "AN24",
    "AN26",
    "AN26A",
    "AN26B",
    "AN26RT",
    "AN28",
    "AN28R1",
    "AN28R2",
    "AN28TD",
    "AN30",
    "AN32B",
    "AN32P",
    "AN38",
    "AN3820",
    "AN38K",
    "AN4",
    "AN40",
    "AN70",
    "AN7010",
    "AN70T",
    "AN70T1",
    "AN70TK",
    "AN71",
    "AN72",
    "AN72A",
    "AN72P",
    "AN72S",
    "AN74",
    "AN7420",
    "AN74AB",
    "AN74AC",
    "AN74C",
    "AN74K1",
    "AN74K2",
    "AN74MC",
    "AN74SA",
    "AN74SB",
    "AN74T1",
    "AN74T2",
    "AN74TB",
    "AN74TC",
    "AN8",
    "ANC1",
    "ANC2",
    "ANCC2",
    "ANDCC2",
    "ANDE3A",
    "ANE3",
    "ANSAT",
    "AP1P",
    "AP2S",
    "AP3M",
    "AP4S",
    "AP68TP",
    "APM20",
    "AR11",
    "AR15",
    "AR58",
    "ARA360",
    "ARGOSY",
    "ARL24",
    "AS1052",
    "AS2",
    "AS202",
    "AS2021",
    "AS2023",
    "AS300",
    "AS32L1",
    "AS32L2",
    "AS332",
    "AS332B",
    "AS332C",
    "AS332F",
    "AS332L",
    "AS332M",
    "AS332N",
    "AS332S",
    "AS350",
    "AS3502",
    "AS3503",
    "AS350B",
    "AS350C",
    "AS350D",
    "AS350E",
    "AS350F",
    "AS350L",
    "AS350M",
    "AS355",
    "AS3551",
    "AS355B",
    "AS355F",
    "AS355M",
    "AS365N",
    "AS366G",
    "AS532",
    "AS5321",
    "AS5322",
    "AS532C",
    "AS532H",
    "AS550",
    "AS555",
    "AS555A",
    "AS555U",
    "AS565",
    "AS565A",
    "AS565B",
    "AS565C",
    "AS565M",
    "AS565S",
    "AS565U",
    "AS61",
    "AS61A",
    "AS61N1",
    "AS61R",
    "AS61SK",
    "AS61TS",
    "AS6ISK",
    "AS6ITS",
    "AS80M2",
    "AS90M2",
    "ASTRA",
    "AT1150",
    "AT2000",
    "AT26",
    "AT28",
    "AT33",
    "AT37D",
    "AT38B",
    "AT401",
    "AT402",
    "AT502",
    "AT503",
    "AT50A2",
    "AT6G",
    "AT802",
    "ATL2",
    "ATLA",
    "ATR42",
    "ATR421",
    "ATR422",
    "ATR423",
    "ATR424",
    "ATR425",
    "ATR42F",
    "ATR42M",
    "ATR42S",
    "ATR52C",
    "ATR72",
    "ATR722",
    "ATTA30",
    "ATTC3",
    "ATTC3C",
    "AU23",
    "AU23A",
    "AU24",
    "AU24A",
    "AUH76",
    "AUR",
    "AV400A",
    "AV52",
    "AV8A",
    "AV8AA",
    "AV8B",
    "AV8B2",
    "AV8B2P",
    "AV8BAH",
    "AV8C",
    "AV8S",
    "AV8T4",
    "AVIA89",
    "AVIA90",
    "AVIA96",
    "AVIAA1",
    "AW1",
    "AW2",
    "AY600",
    "AY700",
    "AYLLM2",
    "AYLM20",
    "AYS2RG",
    "AZTEC",
    "B0108",
    "B1",
    "B100",
    "B105",
    "B111",
    "B1112",
    "B1113",
    "B1114",
    "B11147",
    "B1115",
    "B1B",
    "B2",
    "B200TM",
    "B214ST",
    "B25",
    "B26",
    "B2A",
    "B2SM",
    "B350",
    "B36TC",
    "B3LA",
    "B47",
    "B5",
    "B52",
    "B52G",
    "B52H",
    "B57",
    "B5BGL",
    "B66",
    "B707",
    "B70713",
    "B70732",
    "B707AM",
    "B707TT",
    "B720",
    "B720B",
    "B720M",
    "B720PH",
    "B727",
    "B72710",
    "B72720",
    "B737",
    "B73710",
    "B73712",
    "B73720",
    "B73730",
    "B73740",
    "B73750",
    "B73760",
    "B73770",
    "B73780",
    "B737AE",
    "B737S",
    "B747",
    "B74710",
    "B74720",
    "B74730",
    "B74740",
    "B7474F",
    "B747SP",
    "B75",
    "B757",
    "B75720",
    "B767",
    "B76710",
    "B76720",
    "B76730",
    "B7673T",
    "B76740",
    "B767AE",
    "B767TC",
    "B777",
    "B77720",
    "B77730",
    "BA1257",
    "BA1258",
    "BA125S",
    "BA14",
    "BA146",
    "BA1462",
    "BA146Q",
    "BA146S",
    "BA15",
    "BA2400",
    "BA2500",
    "BA748",
    "BAC111",
    "BAC145",
    "BAC167",
    "BAE125",
    "BAE146",
    "BAE748",
    "BAETRI",
    "BAEVIC",
    "BATP",
    "BC02",
    "BC114B",
    "BC17",
    "BC18L",
    "BC19",
    "BC190D",
    "BC200",
    "BC2000",
    "BC200A",
    "BC200B",
    "BC200C",
    "BC200D",
    "BC200E",
    "BC200F",
    "BC200G",
    "BC200H",
    "BC200K",
    "BC200L",
    "BC200M",
    "BC200N",
    "BC200P",
    "BC200Q",
    "BC200R",
    "BC200S",
    "BC200T",
    "BC20BC",
    "BC23",
    "BC24",
    "BC30",
    "BC30LW",
    "BC33",
    "BC33FA",
    "BC33FC",
    "BC33L",
    "BC35",
    "BC350",
    "BC35L",
    "BC35V",
    "BC36",
    "BC36A",
    "BC36AT",
    "BC36L",
    "BC36TC",
    "BC400",
    "BC400A",
    "BC50",
    "BC60",
    "BC65",
    "BC76",
    "BC77",
    "BC80",
    "BC88",
    "BC8S",
    "BC90",
    "BC90B",
    "BC90C",
    "BC90F",
    "BC90SE",
    "BC95",
    "BCQU80",
    "BCT42A",
    "BCT42B",
    "BCTWBE",
    "BCV35B",
    "BD10",
    "BD12",
    "BD700",
    "BE12",
    "BE205",
    "BE205B",
    "BE2063",
    "BE2064",
    "BE206A",
    "BE206B",
    "BE206G",
    "BE206L",
    "BE206T",
    "BE209",
    "BE209S",
    "BE212T",
    "BE230",
    "BE30",
    "BE300S",
    "BE407",
    "BE412",
    "BE412C",
    "BE42",
    "BE427",
    "BE430",
    "BE442",
    "BE45",
    "BE58",
    "BE6",
    "BE609",
    "BE620",
    "BE901",
    "BE99",
    "BEKIO",
    "BEKIOW",
    "BELL",
    "BEQU80",
    "BER",
    "BER103",
    "BER200",
    "BER32",
    "BER32K",
    "BER42",
    "BERA",
    "BERA45",
    "BERA50",
    "BERB",
    "BERC",
    "BERD",
    "BERE",
    "BERF",
    "BERG",
    "BERH",
    "BERJ",
    "BETA22",
    "BGCMOD",
    "BGL",
    "BGR",
    "BGRA",
    "BGRB",
    "BGRC",
    "BGRCMO",
    "BGRD",
    "BGRE",
    "BGRF",
    "BGRG",
    "BGRH",
    "BGRJ",
    "BGRK",
    "BGRL",
    "BH14",
    "BH22",
    "BHST",
    "BJT400",
    "BK117",
    "BK117B",
    "BK117C",
    "BK117M",
    "BK117P",
    "BKF",
    "BKFA",
    "BKFB",
    "BKFC",
    "BL14",
    "BL26",
    "BL28",
    "BL30",
    "BL31",
    "BLN",
    "BLNA",
    "BLNB",
    "BLNC",
    "BLNE",
    "BN2",
    "BN2A",
    "BN2A3",
    "BN2AB",
    "BN2AEW",
    "BN2ASW",
    "BN2B",
    "BN2BI",
    "BN2BM",
    "BN2T",
    "BN2T1S",
    "BN2T4R",
    "BN2T4S",
    "BN2TAL",
    "BN2TED",
    "BN2TI",
    "BN2TIS",
    "BN3",
    "BN4000",
    "BO105",
    "BO105C",
    "BO105D",
    "BO105L",
    "BO105M",
    "BO105P",
    "BO105T",
    "BO106",
    "BO108",
    "BO115",
    "BOE115",
    "BOE18P",
    "BOE18R",
    "BOP",
    "BOPAH",
    "BR1050",
    "BR1150",
    "BR31",
    "BRC707",
    "BRE",
    "BREA",
    "BREB",
    "BREC",
    "BRED",
    "BREE",
    "BRFT",
    "BRJ110",
    "BRJ115",
    "BRJ70",
    "BRJ85",
    "BRNG",
    "BSN",
    "BSNA",
    "BSNB",
    "BSNC",
    "BT10",
    "BT6S",
    "BU20",
    "BUC",
    "BUCMK2",
    "BULLAC",
    "BULMK1",
    "BULMK2",
    "BV234",
    "C020H",
    "C022B",
    "C0M500",
    "C0M600",
    "C101",
    "C101BB",
    "C101CC",
    "C101DD",
    "C101EB",
    "C118",
    "C118A",
    "C118B",
    "C119",
    "C119A",
    "C119G",
    "C119J",
    "C119JP",
    "C119RQ",
    "C12",
    "C120",
    "C121",
    "C121G",
    "C123",
    "C123B",
    "C123H",
    "C123J",
    "C123K",
    "C123L",
    "C123T",
    "C124",
    "C12A",
    "C12F",
    "C12FT",
    "C12J",
    "C130",
    "C130A",
    "C130B",
    "C130C",
    "C130D",
    "C130E",
    "C130F",
    "C130G",
    "C130H",
    "C130H3",
    "C130J",
    "C130J3",
    "C130K",
    "C130M",
    "C130MP",
    "C130N",
    "C130P",
    "C130T",
    "C131",
    "C131CO",
    "C131F",
    "C131G",
    "C131H",
    "C133",
    "C133A",
    "C135",
    "C135A",
    "C135B",
    "C135C",
    "C135E",
    "C135F",
    "C135FR",
    "C137B",
    "C137C",
    "C139A",
    "C13OF",
    "C14",
    "C140",
    "C140A",
    "C141",
    "C141B",
    "C141C",
    "C150",
    "C152",
    "C160",
    "C160AL",
    "C160AS",
    "C160F",
    "C160G",
    "C160H",
    "C160NG",
    "C17",
    "C170",
    "C175",
    "C177",
    "C17A",
    "C18",
    "C180",
    "C182",
    "C188",
    "C19",
    "C190",
    "C195",
    "C19A",
    "C1A",
    "C1K",
    "C1KAW",
    "C1PR",
    "C1S",
    "C1T",
    "C2",
    "C20",
    "C205",
    "C206",
    "C207",
    "C207A",
    "C208",
    "C208CA",
    "C20A",
    "C20B",
    "C20C",
    "C20D",
    "C20F",
    "C20G",
    "C20H",
    "C20S",
    "C21",
    "C210",
    "C212",
    "C2121M",
    "C2122M",
    "C2123D",
    "C2123E",
    "C2123M",
    "C2123P",
    "C21240",
    "C212A",
    "C212C",
    "C212M",
    "C212P",
    "C21A",
    "C22",
    "C223",
    "C22J",
    "C23",
    "C233",
    "C233FL",
    "C235",
    "C23A",
    "C23ASU",
    "C23SUN",
    "C26",
    "C26A",
    "C26B",
    "C27A",
    "C27J",
    "C295",
    "C29A",
    "C2A",
    "C3",
    "C303",
    "C320",
    "C32A",
    "C335",
    "C336",
    "C337",
    "C337G",
    "C340",
    "C3605",
    "C37A",
    "C38",
    "C38A",
    "C401",
    "C402",
    "C404",
    "C411",
    "C414",
    "C42",
    "C421",
    "C425",
    "C42R",
    "C441",
    "C45",
    "C46",
    "C461",
    "C46A",
    "C46FW",
    "C47",
    "C47A",
    "C47DC3",
    "C4M",
    "C5",
    "C500",
    "C501",
    "C501SP",
    "C54",
    "C54B",
    "C54D",
    "C550",
    "C553",
    "C560",
    "C5A",
    "C5B",
    "C5C",
    "C650",
    "C7",
    "C7A",
    "C7DASH",
    "C7KFIR",
    "C8",
    "C8A",
    "C9",
    "C91",
    "C95",
    "C95A",
    "C95MAR",
    "C97",
    "C99",
    "C9A",
    "C9B",
    "C9C",
    "CA1",
    "CA223A",
    "CA223K",
    "CA25",
    "CA25E",
    "CA25G",
    "CA25I",
    "CA25N",
    "CA61MA",
    "CA65",
    "CA65A",
    "CAL",
    "CALA",
    "CAM",
    "CAN215",
    "CANB2",
    "CANBER",
    "CANE13",
    "CANPR7",
    "CANPR9",
    "CANT17",
    "CANT1B",
    "CANT4",
    "CAP10",
    "CAP10B",
    "CAP231",
    "CAP232",
    "CASHA",
    "CAT",
    "CAYDEF",
    "CAYU",
    "CC108C",
    "CC109",
    "CC115",
    "CC117",
    "CC132D",
    "CC138",
    "CC142",
    "CC144",
    "CC3",
    "CCH",
    "CDR",
    "CDRA",
    "CE144A",
    "CE206",
    "CE208",
    "CE310",
    "CE337",
    "CE414A",
    "CE425",
    "CE441",
    "CE501",
    "CE525",
    "CE526",
    "CE550",
    "CE560",
    "CE560E",
    "CE650",
    "CE660",
    "CE670",
    "CE750",
    "CEAGH",
    "CEAGT",
    "CECON1",
    "CECON2",
    "CET41A",
    "CET41B",
    "CET41D",
    "CET47A",
    "CF00",
    "CF101",
    "CF104",
    "CF18",
    "CF18A",
    "CF18B",
    "CF5",
    "CF5A",
    "CF5D",
    "CF5F",
    "CG",
    "CH10",
    "CH113",
    "CH113A",
    "CH118",
    "CH124",
    "CH124B",
    "CH135",
    "CH135A",
    "CH135I",
    "CH136",
    "CH136J",
    "CH146",
    "CH147",
    "CH200",
    "CH2000",
    "CH250",
    "CH3",
    "CH34",
    "CH34A",
    "CH34D",
    "CH34SP",
    "CH37",
    "CH3E",
    "CH40",
    "CH46",
    "CH46A",
    "CH46D",
    "CH46E",
    "CH46F",
    "CH47",
    "CH47A",
    "CH47B",
    "CH47C",
    "CH47D",
    "CH47J",
    "CH47JA",
    "CH5",
    "CH50",
    "CH53",
    "CH53A",
    "CH53B",
    "CH53C",
    "CH53D",
    "CH53DG",
    "CH53E",
    "CH53ES",
    "CH53G",
    "CH54",
    "CH54A",
    "CH54B",
    "CH54LS",
    "CH54SC",
    "CH55",
    "CH601H",
    "CH601S",
    "CH7",
    "CH701",
    "CH8",
    "CH9",
    "CHALC",
    "CHE22",
    "CHE25",
    "CHEROK",
    "CHETA",
    "CHEY",
    "CHGZ11",
    "CHGZ8",
    "CHIEF",
    "CHIII",
    "CHIP",
    "CHK91",
    "CHKII",
    "CHKIII",
    "CHM1",
    "CJ5",
    "CJ6A",
    "CKP",
    "CL214",
    "CL215",
    "CL2156",
    "CL215T",
    "CL41",
    "CL415",
    "CL415M",
    "CL41G",
    "CL44",
    "CL600",
    "CL600C",
    "CL601",
    "CL601C",
    "CL604",
    "CL66",
    "CLD",
    "CLK",
    "CLKA",
    "CLN",
    "CLNA",
    "CLO",
    "CLR",
    "CLRA",
    "CLRB",
    "CLRC",
    "CLT",
    "CM170",
    "CM175",
    "CM48",
    "CMAU",
    "CMCLEO",
    "CMK1",
    "CMK3",
    "CMMK1",
    "CMMK2",
    "CMMK2E",
    "CMMK3",
    "CMMK4",
    "CMP",
    "CN235",
    "CN2351",
    "CN2352",
    "CN2353",
    "CN235A",
    "CN235M",
    "CN245",
    "CND",
    "CNDA",
    "CNDB",
    "CO114B",
    "CO681B",
    "CO685",
    "CO690",
    "COC",
    "COCH",
    "COD",
    "COK",
    "COM500",
    "COM560",
    "COM600",
    "COMAN",
    "COMM1",
    "COMM2A",
    "COMM3",
    "CON202",
    "CON303",
    "CON606",
    "CONF27",
    "CONTUR",
    "CORA",
    "COT",
    "COTA",
    "COTB",
    "COUMK1",
    "COUMK2",
    "COURS7",
    "CP121",
    "CP140",
    "CP140A",
    "CR100",
    "CR110",
    "CRT",
    "CRU",
    "CS2FA",
    "CSH",
    "CSH2",
    "CSHA",
    "CT114",
    "CT133",
    "CT134",
    "CT134A",
    "CT142",
    "CT33",
    "CT39",
    "CT39A",
    "CT39E",
    "CT39F",
    "CT39G",
    "CT4",
    "CT43A",
    "CT4A",
    "CT50",
    "CUB",
    "CUBA",
    "CUBB",
    "CUBC",
    "CUBD",
    "CUF",
    "CUR",
    "CURB",
    "CURLA",
    "CV13",
    "CV14",
    "CV22",
    "CV22A",
    "CV24",
    "CV34",
    "CV440",
    "CV580",
    "CV60",
    "CV64",
    "CV880",
    "CV99",
    "CX3",
    "CX3B",
    "CX3C",
    "CXX1",
    "CXX2",
    "D139",
    "D139P1",
    "D22811",
    "D22821",
    "D328",
    "D32810",
    "D32811",
    "D32812",
    "D32813",
    "D32821",
    "D32830",
    "D32850",
    "D32870",
    "DA01",
    "DA10",
    "DA20",
    "DA2000",
    "DA20A1",
    "DA20C1",
    "DA2A",
    "DA40",
    "DA50",
    "DALD4",
    "DAUPH",
    "DC10",
    "DC1015",
    "DC101C",
    "DC1030",
    "DC103C",
    "DC103F",
    "DC1040",
    "DC10CF",
    "DC114",
    "DC130",
    "DC130A",
    "DC130H",
    "DC3",
    "DC4",
    "DC6",
    "DC6B",
    "DC6C",
    "DC7",
    "DC7B",
    "DC8",
    "DC810",
    "DC820",
    "DC830",
    "DC843",
    "DC850",
    "DC854",
    "DC855",
    "DC860",
    "DC861",
    "DC862",
    "DC863",
    "DC870",
    "DC871",
    "DC873",
    "DC8F",
    "DC8SAR",
    "DC9",
    "DC910",
    "DC910M",
    "DC920",
    "DC930",
    "DC932",
    "DC940",
    "DC950",
    "DC951",
    "DC9F30",
    "DC9M",
    "DEDE2",
    "DELFIN",
    "DG14",
    "DH10",
    "DH114A",
    "DH114B",
    "DH2T",
    "DH60",
    "DH62",
    "DH64",
    "DH80",
    "DH82",
    "DH83",
    "DH87",
    "DH89",
    "DH98",
    "DHC1",
    "DHC1T1",
    "DHC1T3",
    "DHC2",
    "DHC2A2",
    "DHC2M3",
    "DHC3",
    "DHC3U1",
    "DHC4",
    "DHC4A",
    "DHC5",
    "DHC5D",
    "DHC5E",
    "DHC6",
    "DHC610",
    "DHC620",
    "DHC630",
    "DHC63M",
    "DHC63R",
    "DHC63S",
    "DHC7",
    "DHC7R",
    "DHC8",
    "DHC810",
    "DHC820",
    "DHC830",
    "DHC840",
    "DHC8M",
    "DHC8TR",
    "DHCAL2",
    "DHCCSR",
    "DHCT10",
    "DHCT30",
    "DINGO",
    "DK10D",
    "DO128",
    "DO1282",
    "DO1286",
    "DO228",
    "DO2281",
    "DO228A",
    "DO228B",
    "DO228C",
    "DO228D",
    "DO228M",
    "DO228P",
    "DO27",
    "DO28",
    "DO28D",
    "DO28D1",
    "DO28DT",
    "DO328",
    "DO328J",
    "DO528J",
    "DOAJ",
    "DOM",
    "DOMIN",
    "DP60",
    "DP6000",
    "DP800",
    "DPN",
    "DR400",
    "DR4001",
    "DR4006",
    "DR4012",
    "DR4016",
    "DR4018",
    "DR401R",
    "DR4020",
    "DR402R",
    "DSH",
    "DUB60",
    "DUBNA2",
    "DV20",
    "DV40",
    "E1S",
    "E2",
    "E25",
    "E26",
    "E2A",
    "E2B",
    "E2C",
    "E2EST",
    "E3",
    "E3A",
    "E3B",
    "E3C",
    "E3D",
    "E3DMK1",
    "E3F",
    "E3INT",
    "E3NTC",
    "E4",
    "E4A",
    "E4AN",
    "E4B",
    "E4BN",
    "E4TN",
    "E6",
    "E6A",
    "E6B",
    "E767",
    "E8",
    "E8A",
    "E8B",
    "E8C",
    "E8D",
    "E9A",
    "EA1KF",
    "EA3B",
    "EA4F",
    "EA4J",
    "EA6",
    "EA6A",
    "EA6B",
    "EA6I",
    "EA7L",
    "EA7OPT",
    "EAV8B",
    "EB57B",
    "EB66",
    "EC018D",
    "EC1",
    "EC120B",
    "EC121",
    "EC121K",
    "EC130",
    "EC130B",
    "EC130C",
    "EC130E",
    "EC130G",
    "EC130H",
    "EC130J",
    "EC130L",
    "EC130Q",
    "EC130V",
    "EC135",
    "EC135A",
    "EC135C",
    "EC135E",
    "EC135G",
    "EC135H",
    "EC135J",
    "EC135K",
    "EC135L",
    "EC135P",
    "EC135Y",
    "EC137D",
    "EC145",
    "EC165",
    "EC18",
    "EC18B",
    "EC18C",
    "EC18D",
    "EC24A",
    "EC35A",
    "EC635",
    "EC6CRI",
    "EC95",
    "ECSUP5",
    "ECURE",
    "EF111",
    "EF111A",
    "EF111G",
    "EF18A",
    "EF18B",
    "EF4",
    "EF4B",
    "EF4G",
    "EF4J",
    "EFA",
    "EH1",
    "EH101",
    "EH1011",
    "EH1012",
    "EH1013",
    "EH1014",
    "EH1015",
    "EH1H",
    "EH1X",
    "EH60",
    "EH60A",
    "EH60B",
    "EH60C",
    "EH60QF",
    "EH6DEF",
    "EKA3B",
    "ELITE",
    "EM110C",
    "EM111",
    "EM111A",
    "EM11P1",
    "EM11P2",
    "EM120",
    "EM1211",
    "EM121A",
    "EM135",
    "EM145",
    "EM145R",
    "EM145S",
    "EM170",
    "EM201",
    "EM312",
    "EM312F",
    "EM312H",
    "EM326G",
    "EM710",
    "EM711",
    "EM720D",
    "EM810",
    "EM810C",
    "EM810D",
    "EMB100",
    "EMB110",
    "EMB111",
    "EMB120",
    "EMB121",
    "EMB211",
    "EMB212",
    "EMB21A",
    "EMB312",
    "EMB326",
    "EMBRAC",
    "EMS312",
    "ENS28",
    "ENS28F",
    "ENS28L",
    "ENS480",
    "ENTH28",
    "EP2J",
    "EP3",
    "EP3A",
    "EP3B",
    "EP3E",
    "EP3J",
    "ERA3B",
    "ES2D",
    "ES3A",
    "ESQ",
    "ETE4MP",
    "ETEN4",
    "ETEN4M",
    "ETEN4P",
    "ETEND",
    "ETENDH",
    "ETENSU",
    "EUROFA",
    "EX200",
    "EX300",
    "EX400",
    "EXC",
    "EXEC90",
    "F02",
    "F10",
    "F100",
    "F100A",
    "F100D",
    "F100F",
    "F101G",
    "F102",
    "F104",
    "F104A",
    "F104B",
    "F104C",
    "F104CF",
    "F104D",
    "F104DJ",
    "F104F",
    "F104G",
    "F104J",
    "F104S",
    "F104SA",
    "F105",
    "F105G",
    "F106",
    "F106A",
    "F10J10",
    "F111",
    "F111A",
    "F111B",
    "F111C",
    "F111D",
    "F111E",
    "F111F",
    "F111G",
    "F111K",
    "F117",
    "F117A",
    "F12",
    "F1300N",
    "F14",
    "F14A",
    "F14AP",
    "F14B",
    "F14D",
    "F14MOD",
    "F15",
    "F15A",
    "F15B",
    "F15C",
    "F15D",
    "F15DJ",
    "F15E",
    "F15F",
    "F15I",
    "F15J",
    "F15S",
    "F16",
    "F16A",
    "F16B",
    "F16C",
    "F16CG",
    "F16CJ",
    "F16D",
    "F16ES",
    "F16N",
    "F18",
    "F18A",
    "F18B",
    "F18C",
    "F18D",
    "F18DRC",
    "F18E",
    "F18F",
    "F1HNTR",
    "F1MSI",
    "F2",
    "F21",
    "F22",
    "F220",
    "F220AI",
    "F222",
    "F22A",
    "F22B",
    "F22PHO",
    "F22PIN",
    "F22R",
    "F27",
    "F27100",
    "F27200",
    "F27300",
    "F27400",
    "F27500",
    "F27600",
    "F27A",
    "F27AV",
    "F27KB",
    "F27M",
    "F27M4M",
    "F27ME",
    "F27SEN",
    "F28",
    "F28100",
    "F2810C",
    "F28200",
    "F28300",
    "F28400",
    "F28F",
    "F28FP",
    "F28FX",
    "F2A",
    "F2LTNG",
    "F3",
    "F33",
    "F337",
    "F337F",
    "F33A",
    "F35",
    "F4",
    "F4062",
    "F406CA",
    "F42000",
    "F45A",
    "F45B",
    "F4A",
    "F4B",
    "F4C",
    "F4D",
    "F4E",
    "F4EJ",
    "F4EJK",
    "F4F",
    "F4G",
    "F4J",
    "F4K",
    "F4M",
    "F4N",
    "F4S",
    "F4X20",
    "F5",
    "F50",
    "F5A",
    "F5B",
    "F5C",
    "F5D",
    "F5E",
    "F5F",
    "F6",
    "F6FARM",
    "F7",
    "F7A",
    "F7B",
    "F7BS",
    "F7C",
    "F7M",
    "F7MG",
    "F7P",
    "F8",
    "F82",
    "F84",
    "F86F",
    "F86M32",
    "F8A",
    "F8CRUS",
    "F8E",
    "F8F",
    "F8FB",
    "F8FB2",
    "F8FISH",
    "F8H",
    "F8LFAL",
    "F9",
    "F9A",
    "F9CG",
    "FA18",
    "FA18A",
    "FA18B",
    "FA18C",
    "FA18D",
    "FA18L",
    "FA2",
    "FA20",
    "FA2050",
    "FA25",
    "FA3",
    "FA50",
    "FA62",
    "FA71",
    "FAG",
    "FAL10",
    "FAL100",
    "FAL10M",
    "FAL20",
    "FAL200",
    "FAL205",
    "FAL21",
    "FAL21M",
    "FAL2T",
    "FAL50",
    "FAL900",
    "FAL90B",
    "FAL90E",
    "FALCN",
    "FALCN1",
    "FALCN2",
    "FALCN5",
    "FALMYS",
    "FB111",
    "FB111A",
    "FB111G",
    "FBA2E",
    "FBD",
    "FBDA",
    "FBDB",
    "FBDC",
    "FBDD",
    "FBDE",
    "FBDF",
    "FBDH",
    "FBDJ",
    "FBDK",
    "FBDL",
    "FBDN",
    "FBR",
    "FBRA",
    "FBRB",
    "FCM",
    "FCMA",
    "FCMB",
    "FCMBAZ",
    "FCMC",
    "FCMD",
    "FDL",
    "FDLB",
    "FDLC",
    "FEN",
    "FENA",
    "FENB",
    "FENC",
    "FENCEF",
    "FEND",
    "FENE",
    "FG1",
    "FG1A",
    "FGA5",
    "FGA6",
    "FGA7A",
    "FGR2",
    "FH1100",
    "FH227",
    "FHD",
    "FICR",
    "FIREB",
    "FISHJX",
    "FIT",
    "FITA",
    "FITB",
    "FITC",
    "FITD",
    "FITE",
    "FITF",
    "FITG",
    "FITH",
    "FITJ",
    "FITK",
    "FK27",
    "FLANKK",
    "FLG",
    "FLGA",
    "FLGC",
    "FLGD",
    "FLGE",
    "FLGF",
    "FLGG",
    "FLK",
    "FLKA",
    "FLKB",
    "FLKC",
    "FLO",
    "FLOA",
    "FLOB",
    "FLOC",
    "FLOD",
    "FLOE",
    "FLOF",
    "FLOG",
    "FLOGA",
    "FLOGD",
    "FLOGJ",
    "FLOGJ2",
    "FLOH",
    "FLOJ",
    "FLOK",
    "FLT",
    "FLTMAS",
    "FMK2",
    "FMK3",
    "FMR",
    "FMRA",
    "FMRB",
    "FMRC",
    "FMRD",
    "FMRE",
    "FMRF",
    "FNB",
    "FOK13",
    "FOK50",
    "FOK50M",
    "FOK60",
    "FOK70",
    "FOKER",
    "FOR",
    "FORA",
    "FORB",
    "FOX",
    "FOXA",
    "FOXB",
    "FOXC",
    "FOXD",
    "FOXE",
    "FOXF",
    "FPT",
    "FR74S",
    "FRBI5",
    "FRE",
    "FREA",
    "FREB",
    "FREC",
    "FRED",
    "FREE",
    "FREEFI",
    "FREEST",
    "FRELON",
    "FRF",
    "FRFA",
    "FRFB",
    "FS1000",
    "FS3000",
    "FS4000",
    "FT337",
    "FT7",
    "FTB337",
    "FU2495",
    "FUJI",
    "FUL",
    "FXH",
    "FXHA",
    "FXHB",
    "G115HE",
    "G115TA",
    "G164",
    "G21",
    "G22228",
    "G222AL",
    "G222EC",
    "G222GE",
    "G222R",
    "G222RM",
    "G222SA",
    "G222T",
    "G222VA",
    "G222VS",
    "G28",
    "G2A",
    "G44",
    "G4SEAG",
    "G4SG",
    "G500",
    "G520",
    "G73",
    "G91",
    "G91R1",
    "G91R3",
    "G91R4",
    "G91SM",
    "G91T1",
    "G91T3",
    "G91Y",
    "G91YEH",
    "GA7",
    "GA84",
    "GABR",
    "GAJ",
    "GAK22",
    "GARD2",
    "GARD50",
    "GAT",
    "GAT23",
    "GAT24A",
    "GAT25",
    "GAT28",
    "GAT29",
    "GAT35",
    "GAT35A",
    "GAT36",
    "GAT54",
    "GAT55",
    "GATT1",
    "GATT1D",
    "GAV",
    "GC1",
    "GE6650",
    "GEN",
    "GF1",
    "GF200",
    "GF250",
    "GF300",
    "GF350",
    "GH125",
    "GHMC4",
    "GHTMK2",
    "GHTMK3",
    "GJSA30",
    "GLAS2S",
    "GLAS3",
    "GLASTA",
    "GLB",
    "GLOEX",
    "GM01",
    "GNAT",
    "GNAT1",
    "GNAT2",
    "GOAIRT",
    "GOM",
    "GR1",
    "GR1A",
    "GR1J",
    "GR3",
    "GR4",
    "GR4A",
    "GR5",
    "GR7",
    "GRMK1",
    "GUL2B",
    "GUL4B",
    "GUL4MP",
    "GUL4SP",
    "GUL5",
    "GULI",
    "GULII",
    "GULIII",
    "GULIV",
    "H13",
    "H16E",
    "H16M1",
    "H19",
    "H23A",
    "H2X",
    "H3",
    "H34",
    "H36",
    "H37",
    "H5",
    "H500",
    "H500C",
    "H500D",
    "H500E",
    "H500F",
    "H500M",
    "H500MD",
    "H500ME",
    "H53E",
    "H57",
    "H5BGL",
    "H5HAR",
    "H6",
    "H7",
    "H7482B",
    "H74B",
    "H76",
    "H76N",
    "H76SIK",
    "HA1ESQ",
    "HA200",
    "HAB205",
    "HAK100",
    "HAK200",
    "HAK50",
    "HAK60",
    "HAKT1A",
    "HAKT1W",
    "HAKTM1",
    "HALSHA",
    "HANSA2",
    "HANSA3",
    "HAR",
    "HAR10",
    "HARBH5",
    "HARBZ5",
    "HARGM3",
    "HARGM4",
    "HARII",
    "HARIIP",
    "HARKEB",
    "HARTM6",
    "HARV",
    "HAS1",
    "HAS2",
    "HAS3",
    "HAS31B",
    "HAS3L",
    "HAS4L",
    "HASMK2",
    "HASMK5",
    "HASMK6",
    "HASMK8",
    "HAT21",
    "HAW100",
    "HAW400",
    "HAW80",
    "HAW80F",
    "HAW80M",
    "HAW80R",
    "HAW80S",
    "HAW80X",
    "HAW8SM",
    "HAZ",
    "HAZA",
    "HAZAPL",
    "HAZB",
    "HAZBT",
    "HAZCPS",
    "HB207",
    "HB315B",
    "HB315G",
    "HB315L",
    "HB350",
    "HB350B",
    "HB355F",
    "HB35B1",
    "HB42",
    "HB43",
    "HC1",
    "HC130",
    "HC130B",
    "HC130E",
    "HC130H",
    "HC130N",
    "HC130P",
    "HC131A",
    "HC2",
    "HC7",
    "HCC2",
    "HCC412",
    "HCM3",
    "HCMK1",
    "HCMK1K",
    "HCMK3",
    "HCMK4",
    "HCMK5",
    "HD21",
    "HE1",
    "HE4",
    "HEB320",
    "HEL",
    "HERON",
    "HF24",
    "HF241T",
    "HF24M1",
    "HF24MT",
    "HFB320",
    "HGRM1",
    "HGRM1A",
    "HGRM3",
    "HGRM5",
    "HGRM7",
    "HH1",
    "HH1H",
    "HH1K",
    "HH1SAR",
    "HH2",
    "HH25A",
    "HH2D",
    "HH3APL",
    "HH3ASR",
    "HH3E",
    "HH3SAR",
    "HH4",
    "HH42",
    "HH42B",
    "HH43F",
    "HH46",
    "HH46A",
    "HH52",
    "HH52A",
    "HH52AS",
    "HH52S",
    "HH53",
    "HH53A",
    "HH53B",
    "HH53C",
    "HH53E",
    "HH53H",
    "HH60A",
    "HH60D",
    "HH60G",
    "HH60H",
    "HH60J",
    "HH60JA",
    "HH65",
    "HH65II",
    "HIINF",
    "HIN",
    "HINA",
    "HINB",
    "HINC",
    "HIND",
    "HINE",
    "HINF",
    "HING2",
    "HINR",
    "HINW",
    "HIP",
    "HIPA",
    "HIPB",
    "HIPC",
    "HIPD",
    "HIPE",
    "HIPF",
    "HIPG",
    "HIPH",
    "HIPJ",
    "HIPJ1",
    "HIPK",
    "HIPK1",
    "HIPK17",
    "HJ5",
    "HJT161",
    "HJT162",
    "HKM",
    "HKMA",
    "HKP10",
    "HKP2",
    "HKP2II",
    "HKP3",
    "HKP4",
    "HKP5",
    "HKP6",
    "HKP7",
    "HLX",
    "HLXA",
    "HLXB",
    "HLXC",
    "HLXD",
    "HM1",
    "HN32",
    "HN433",
    "HN600",
    "HND",
    "HNDA",
    "HNDB",
    "HNDC",
    "HNDP",
    "HOD",
    "HODA",
    "HODB",
    "HOFH40",
    "HOK",
    "HOKA",
    "HOKB",
    "HOKC",
    "HOM",
    "HOP",
    "HOR",
    "HORA",
    "HORB",
    "HORC",
    "HP",
    "HP13",
    "HPT32",
    "HR55",
    "HRK",
    "HRKA",
    "HRKB",
    "HRKKB",
    "HS1182",
    "HS125",
    "HS1254",
    "HS1256",
    "HS1257",
    "HS1258",
    "HS146",
    "HS1462",
    "HS25",
    "HS650",
    "HS748",
    "HS7481",
    "HS7482",
    "HS7483",
    "HS748A",
    "HS748C",
    "HS801M",
    "HT17",
    "HTM1",
    "HTMK10",
    "HTMK2",
    "HTMK2A",
    "HTMK4",
    "HTMK4A",
    "HTMK4N",
    "HTT34",
    "HU16",
    "HU16B",
    "HU16C",
    "HU16E",
    "HU25",
    "HU25A",
    "HU25B",
    "HU25C",
    "HU2PET",
    "HU300C",
    "HU5",
    "HUG269",
    "HUG300",
    "HUG369",
    "HUG500",
    "HUNT8M",
    "HUNTER",
    "HUS1A",
    "HVC",
    "HVCA",
    "HW5",
    "HYDRO2",
    "I1123",
    "I1124",
    "I1L",
    "I22",
    "I23",
    "IA101",
    "IA1123",
    "IA1124",
    "IA1125",
    "IA202",
    "IA316B",
    "IA330",
    "IA35",
    "IA50",
    "IA58",
    "IA58A",
    "IA58B",
    "IA63",
    "IA66",
    "IAI",
    "IAI201",
    "IAIGAL",
    "IAK52",
    "IAR109",
    "IAR28M",
    "IAR316",
    "IAR317",
    "IAR330",
    "IAR33L",
    "IAR46",
    "IAR705",
    "IAR823",
    "IAR825",
    "IAR831",
    "IAR93",
    "IAR93O",
    "IAR99",
    "IL103",
    "IL106",
    "IL112",
    "IL114",
    "IL114C",
    "IL114F",
    "IL114M",
    "IL114P",
    "IL114T",
    "IL12",
    "IL14",
    "IL14P",
    "IL18",
    "IL18A",
    "IL18D",
    "IL20",
    "IL22",
    "IL24N",
    "IL28",
    "IL28BB",
    "IL28RB",
    "IL28U",
    "IL38",
    "IL38P",
    "IL62",
    "IL62M",
    "IL62MK",
    "IL76",
    "IL7697",
    "IL76A5",
    "IL76AE",
    "IL76K",
    "IL76LL",
    "IL76M",
    "IL76MD",
    "IL76MF",
    "IL76MK",
    "IL76MP",
    "IL76SK",
    "IL76T",
    "IL76TD",
    "IL76TF",
    "IL78",
    "IL781",
    "IL78M",
    "IL78MI",
    "IL82",
    "IL86",
    "IL87",
    "IL9630",
    "IL96M",
    "IL96MK",
    "IL96T",
    "IMPM2",
    "IMPMK2",
    "IMPX",
    "IP6201",
    "IPE04",
    "IR02",
    "IR12",
    "IRH5",
    "IS2",
    "ISK",
    "ISST50",
    "J1",
    "J10",
    "J1EJ",
    "J1J",
    "J2",
    "J22",
    "J32",
    "J32B",
    "J32D",
    "J32E",
    "J35",
    "J35A",
    "J35B",
    "J35D",
    "J35F",
    "J35F1",
    "J35F2",
    "J35J",
    "J35S",
    "J35X",
    "J35XD",
    "J37",
    "J37A",
    "J39",
    "J4",
    "J5",
    "J6",
    "J7",
    "J8",
    "JABIRU",
    "JAG",
    "JAGA",
    "JAGB",
    "JAGE",
    "JAGGR1",
    "JAGINT",
    "JAGM",
    "JAGS",
    "JAGSC",
    "JAGT2",
    "JAH1T",
    "JAS39",
    "JAS39A",
    "JAS39B",
    "JAS39C",
    "JAS39D",
    "JC130",
    "JC130H",
    "JCR450",
    "JCR500",
    "JCR650",
    "JGRM1A",
    "JGRMK1",
    "JGRMK3",
    "JH46E",
    "JH7",
    "JP1000",
    "JP840",
    "JP900",
    "JP980",
    "JS31",
    "JS41",
    "JS51",
    "JS61",
    "JSB",
    "JSS31",
    "JSTMK1",
    "JTM2B",
    "JTMK2",
    "JTMK4",
    "JU200",
    "K107A",
    "K107A2",
    "K107A3",
    "K107A4",
    "K107AS",
    "K1200",
    "K18",
    "K2",
    "K250",
    "K8",
    "KA115",
    "KA126B",
    "KA15",
    "KA226",
    "KA25",
    "KA25A",
    "KA25B",
    "KA25C",
    "KA27PL",
    "KA27PS",
    "KA28",
    "KA29A",
    "KA29B",
    "KA31",
    "KA32",
    "KA3211",
    "KA3212",
    "KA32A",
    "KA32A1",
    "KA32A2",
    "KA32A3",
    "KA32A7",
    "KA3B",
    "KA40",
    "KA50",
    "KA50N",
    "KA52",
    "KA6",
    "KA62",
    "KA62M",
    "KA6A",
    "KA6D",
    "KA6H",
    "KA7",
    "KA840",
    "KANIA",
    "KANMI2",
    "KATRAN",
    "KAXX",
    "KBMK2",
    "KC10",
    "KC10A",
    "KC130",
    "KC130F",
    "KC130H",
    "KC130Q",
    "KC130R",
    "KC130T",
    "KC135",
    "KC135A",
    "KC135E",
    "KC135F",
    "KC135Q",
    "KC135R",
    "KC135T",
    "KC137",
    "KC13T3",
    "KC707",
    "KC747",
    "KC8",
    "KC97",
    "KDC10",
    "KE3A",
    "KFIR",
    "KFIRC2",
    "KFIRC7",
    "KFIRLC",
    "KFIRR2",
    "KFIRT2",
    "KFIRT7",
    "KH4",
    "KIN44",
    "KIOWA",
    "KIRM1",
    "KIRM1A",
    "KIRM2",
    "KIRMII",
    "KMH",
    "KORSHU",
    "KORVET",
    "KS3A",
    "KTX1",
    "KTX2",
    "KUDU",
    "KV07A5",
    "KV107A",
    "KV107S",
    "KV107T",
    "L100",
    "L10020",
    "L10030",
    "L1003H",
    "L100J",
    "L1011",
    "L10110",
    "L10111",
    "L10112",
    "L10115",
    "L1011A",
    "L1011E",
    "L1011F",
    "L1011K",
    "L1049",
    "L11115",
    "L159",
    "L159T",
    "L164",
    "L18",
    "L188",
    "L188A",
    "L188C",
    "L19",
    "L20",
    "L21",
    "L235BB",
    "L29",
    "L29A",
    "L29CZ",
    "L29DEL",
    "L29R",
    "L382G",
    "L39",
    "L39C",
    "L39D",
    "L39MS",
    "L39V",
    "L39Z",
    "L39Z0",
    "L39ZA",
    "L410",
    "L410A",
    "L410U",
    "L410UE",
    "L420",
    "L430",
    "L450",
    "L59E",
    "L59T",
    "L610G",
    "L649",
    "L70",
    "L70VIN",
    "L749",
    "L90",
    "LA25",
    "LA250",
    "LA270",
    "LA4200",
    "LADO0",
    "LADO6",
    "LAKX",
    "LAN320",
    "LAN360",
    "LAN4",
    "LAN4P",
    "LANC",
    "LANES",
    "LANLC4",
    "LANSES",
    "LAR",
    "LARK",
    "LASEWO",
    "LASTA1",
    "LASTA2",
    "LBAT",
    "LC130",
    "LC130F",
    "LC130H",
    "LC130R",
    "LGTT5",
    "LHASM2",
    "LHASM3",
    "LHASM4",
    "LHM2",
    "LHM53",
    "LI2",
    "LIGHT",
    "LIM1",
    "LIM6",
    "LJ24",
    "LJ24A",
    "LJ25",
    "LJ25A",
    "LJ31",
    "LJ31A",
    "LJ35",
    "LJ35A",
    "LJ36A",
    "LJ45",
    "LJ55",
    "LJ55B",
    "LJ55C",
    "LJ60",
    "LR1",
    "LR2",
    "LX8",
    "LYAH1G",
    "LYAHM5",
    "LYAHM7",
    "LYAHM9",
    "LYHAM3",
    "LYHMM8",
    "LYHS2F",
    "LYHS4F",
    "LYHSM2",
    "LYM21A",
    "LYM88A",
    "LYMK21",
    "LYMK23",
    "LYMK25",
    "LYMK27",
    "LYMK28",
    "LYMK80",
    "LYMK81",
    "LYMK86",
    "LYMK88",
    "LYMK89",
    "LYMK90",
    "LYMK95",
    "LYMK99",
    "LYS100",
    "LYS200",
    "LYS300",
    "M101TG",
    "M102",
    "M102DS",
    "M112",
    "M15UTI",
    "M17MYS",
    "M18DRO",
    "M2000",
    "M20005",
    "M2000B",
    "M2000C",
    "M2000D",
    "M2000E",
    "M2000I",
    "M2000M",
    "M2000N",
    "M2000Y",
    "M2009",
    "M201SO",
    "M202",
    "M21B1",
    "M21BIS",
    "M21UM",
    "M21US",
    "M2600A",
    "M2601L",
    "M262",
    "M26ISK",
    "M28ST",
    "M290TP",
    "M4",
    "M4000",
    "M404",
    "M50",
    "M5000",
    "M58MAS",
    "M5F",
    "MAA",
    "MADCAP",
    "MAI",
    "MAR",
    "MARMK",
    "MARMK2",
    "MART",
    "MARUT",
    "MARWND",
    "MAS",
    "MASCOT",
    "MASH",
    "MATAD",
    "MAX",
    "MAY",
    "MB312",
    "MB326",
    "MB326A",
    "MB326B",
    "MB326D",
    "MB326F",
    "MB326G",
    "MB326H",
    "MB326K",
    "MB326L",
    "MB326M",
    "MB326X",
    "MB339",
    "MB339A",
    "MB339B",
    "MB339C",
    "MB339D",
    "MB339E",
    "MB339K",
    "MB339M",
    "MB339V",
    "MB39CB",
    "MBB223",
    "MC130",
    "MC130E",
    "MC130H",
    "MC130P",
    "MCP",
    "MD11",
    "MD11C",
    "MD11CF",
    "MD11ER",
    "MD11F",
    "MD17",
    "MD500",
    "MD500B",
    "MD500C",
    "MD500D",
    "MD500E",
    "MD50M",
    "MD50MD",
    "MD50ME",
    "MD50MG",
    "MD520N",
    "MD530",
    "MD530F",
    "MD600N",
    "MD80",
    "MD81",
    "MD82",
    "MD82T",
    "MD83",
    "MD87",
    "MD88",
    "MD90",
    "MD900",
    "MD903",
    "MD903E",
    "MD903T",
    "MD920",
    "MD95",
    "MD953",
    "MD955",
    "MDG",
    "MDN",
    "MDS",
    "ME29",
    "MEM20",
    "MER2",
    "MER23",
    "MER23E",
    "MER2A",
    "MER2B",
    "MER3",
    "MER3B",
    "MER4",
    "MERHC3",
    "MERHM2",
    "MET2",
    "MET23",
    "MET23C",
    "MET23D",
    "MET2A",
    "MET3",
    "MF1CR",
    "MF1CR2",
    "MF1CT",
    "MF1EQ",
    "MF1R",
    "MFI15",
    "MFI17",
    "MFI18",
    "MG21MF",
    "MG21PA",
    "MG21PF",
    "MG21PS",
    "MG21R",
    "MG21RF",
    "MG21SM",
    "MG21U",
    "MG21UM",
    "MG21US",
    "MG23MF",
    "MG23ML",
    "MG23MS",
    "MG23SM",
    "MG23UB",
    "MG23UM",
    "MG25BM",
    "MG25RB",
    "MG25RK",
    "MG25RU",
    "MG29ME",
    "MG29NU",
    "MG29SD",
    "MG29SE",
    "MG29SM",
    "MG29UB",
    "MG31BS",
    "MGS6",
    "MGS8",
    "MH1521",
    "MH47",
    "MH47D",
    "MH47E",
    "MH53",
    "MH53E",
    "MH53ED",
    "MH53EP",
    "MH53ES",
    "MH53H",
    "MH53J",
    "MH6",
    "MH60",
    "MH60A",
    "MH60G",
    "MH60K",
    "MH60L",
    "MH6B",
    "MI1",
    "MI10",
    "MI10K",
    "MI12",
    "MI14",
    "MI14BT",
    "MI14GP",
    "MI14P",
    "MI14PL",
    "MI14PM",
    "MI14PS",
    "MI14PW",
    "MI17",
    "MI171",
    "MI171V",
    "MI172",
    "MI17P",
    "MI17Z",
    "MI2",
    "MI22",
    "MI24",
    "MI24A",
    "MI24BM",
    "MI24DU",
    "MI24ES",
    "MI24K",
    "MI24P",
    "MI24PS",
    "MI24RK",
    "MI24V",
    "MI24VM",
    "MI24VP",
    "MI26",
    "MI26A",
    "MI26M",
    "MI26MS",
    "MI26T",
    "MI26TM",
    "MI26TS",
    "MI26TZ",
    "MI27",
    "MI28",
    "MI28N",
    "MI34",
    "MI34A",
    "MI34S",
    "MI34VA",
    "MI35",
    "MI35D",
    "MI35M",
    "MI35P",
    "MI38",
    "MI40",
    "MI52",
    "MI54",
    "MI58",
    "MI6A",
    "MI6AY",
    "MI6T",
    "MI6VKP",
    "MI8",
    "MI8AT",
    "MI8BT",
    "MI8K",
    "MI8MT",
    "MI8MTV",
    "MI8P",
    "MI8PPA",
    "MI8PS",
    "MI8R",
    "MI8S",
    "MI8SMV",
    "MI8T",
    "MI8TB",
    "MI8TBK",
    "MI8TG",
    "MI8TM",
    "MI8TP",
    "MI8TV",
    "MI8TZ",
    "MI8VIP",
    "MI8VZP",
    "MI9HPG",
    "MID",
    "MIDFAG",
    "MIG110",
    "MIG142",
    "MIG15",
    "MIG15U",
    "MIG21B",
    "MIG21F",
    "MIG21L",
    "MIG21M",
    "MIG23B",
    "MIG23M",
    "MIG23S",
    "MIG25M",
    "MIG25R",
    "MIG25U",
    "MIG27",
    "MIG27M",
    "MIG29K",
    "MIG29M",
    "MIG29N",
    "MIG29S",
    "MIG31B",
    "MIG31D",
    "MIG31M",
    "MIG33",
    "MIG35",
    "MIGAS",
    "MIGAT",
    "MIGATS",
    "MIGLFI",
    "MILL",
    "MILTR",
    "MINI50",
    "MIR3",
    "MIR3A",
    "MIR3AD",
    "MIR3BS",
    "MIR3BZ",
    "MIR3C",
    "MIR3CJ",
    "MIR3CZ",
    "MIR3D",
    "MIR3D2",
    "MIR3DO",
    "MIR3DZ",
    "MIR3E",
    "MIR3EA",
    "MIR3EB",
    "MIR3EE",
    "MIR3EL",
    "MIR3EP",
    "MIR3EV",
    "MIR3EZ",
    "MIR3O",
    "MIR3R2",
    "MIR3RP",
    "MIR3RS",
    "MIR3S",
    "MIR4P",
    "MIR5",
    "MIR5BA",
    "MIR5BD",
    "MIR5BR",
    "MIR5CA",
    "MIR5CD",
    "MIR5CR",
    "MIR5D",
    "MIR5DA",
    "MIR5DD",
    "MIR5DE",
    "MIR5DG",
    "MIR5DM",
    "MIR5DR",
    "MIR5DV",
    "MIR5E",
    "MIR5F",
    "MIR5M",
    "MIR5P",
    "MIR5PA",
    "MIR5R",
    "MIR5RA",
    "MIR5SD",
    "MIR5V",
    "MIREAD",
    "MIRF1",
    "MIRF1A",
    "MIRF1B",
    "MIRF1C",
    "MIRF1D",
    "MIRF1E",
    "MIRF1R",
    "MIST10",
    "MIST20",
    "MIST50",
    "MIV",
    "MJ53AU",
    "MJ5SCI",
    "MK1",
    "MK1NIM",
    "MK2",
    "MK21",
    "MK23",
    "MK25",
    "MK27",
    "MK2A",
    "MK2ACM",
    "MK2C",
    "MK2GNT",
    "MK3",
    "MK4",
    "MK41",
    "MK42",
    "MK42A",
    "MK42B",
    "MK45",
    "MK47",
    "MK48",
    "MK50",
    "MK8",
    "MK80",
    "MK80LX",
    "MK81",
    "MK86",
    "MK86LX",
    "MK88",
    "MK88LX",
    "MK89",
    "MKADV",
    "ML1000",
    "MMD",
    "MNG",
    "MO10",
    "MO20",
    "MO20JM",
    "MO20KE",
    "MO20MT",
    "MO20RO",
    "MO21",
    "MO22",
    "MO2J",
    "MO2K",
    "MOG",
    "MOGA",
    "MOGB",
    "MOGC",
    "MOL1",
    "MOL100",
    "MOL300",
    "MOL400",
    "MOM2M",
    "MOM400",
    "MONGOL",
    "MONGOS",
    "MOO",
    "MOSS",
    "MOU",
    "MOUJIK",
    "MR1",
    "MR1A",
    "MR2",
    "MR3",
    "MRC",
    "MRCAN",
    "MS760",
    "MU2",
    "MU2A",
    "MU2B",
    "MU2C",
    "MU2D",
    "MU2E",
    "MU2F",
    "MU2G",
    "MU2J",
    "MU2JMQ",
    "MU2K",
    "MU2S",
    "MU3",
    "MUREN2",
    "MURENS",
    "MUSH",
    "MUSR25",
    "MV22",
    "MX1",
    "MX2",
    "MY104",
    "MY20",
    "MYSTB2",
    "MYSTF",
    "MYSTS",
    "N145",
    "N2130",
    "N22",
    "N22A",
    "N22B",
    "N22BMI",
    "N22MIS",
    "N24",
    "N24A",
    "N250",
    "N25010",
    "N2501F",
    "N262",
    "N262A",
    "N262B",
    "N262C",
    "N262D",
    "N270",
    "N5A",
    "N621",
    "N821",
    "NA1",
    "NA16",
    "NAC100",
    "NAS332",
    "NBE407",
    "NBE412",
    "NBE430",
    "NBO105",
    "NC130",
    "NC130A",
    "NC130E",
    "NC130H",
    "NC141A",
    "NC212",
    "NC2121",
    "NC2122",
    "NCH46",
    "ND2501",
    "ND2504",
    "ND262C",
    "ND3202",
    "ND3400",
    "NEACP",
    "NEIVAR",
    "NEIVAU",
    "NESHD",
    "NF4J",
    "NF5",
    "NF5A",
    "NF5B",
    "NH90",
    "NH90NF",
    "NH90TT",
    "NHH2D",
    "NIM1",
    "NIM2",
    "NIM200",
    "NIMA3",
    "NIMMK3",
    "NIMMR1",
    "NIMMR2",
    "NIMR1",
    "NKC135",
    "NMM300",
    "NMSP20",
    "NOGA6",
    "NORD",
    "NP3A",
    "NRD626",
    "NSTR",
    "NU1B",
    "NUH1E",
    "NY4",
    "NY5",
    "O1",
    "O14",
    "O1A",
    "O1B",
    "O1C",
    "O1E",
    "O1G",
    "O2",
    "O2337S",
    "O29",
    "O2A",
    "O2B",
    "OA010A",
    "OA10",
    "OA37",
    "OA4",
    "OA4M",
    "OBS2",
    "OC135B",
    "OH1",
    "OH13",
    "OH13G",
    "OH13H",
    "OH13J",
    "OH13K",
    "OH13S",
    "OH23",
    "OH23A",
    "OH23B",
    "OH23C",
    "OH23D",
    "OH23F",
    "OH23G",
    "OH23HL",
    "OH5",
    "OH58",
    "OH58A",
    "OH58B",
    "OH58C",
    "OH58D",
    "OH58DC",
    "OH58JT",
    "OH5A",
    "OH6",
    "OH6A",
    "OH6B",
    "OH6C",
    "OH6D",
    "OH6DA",
    "OH6J",
    "OMEGA2",
    "ORAO1",
    "ORAO2",
    "ORAO2A",
    "OT47B",
    "OUR",
    "OV1",
    "OV10",
    "OV10A",
    "OV10B",
    "OV10C",
    "OV10D",
    "OV10E",
    "OV10F",
    "OV1A",
    "OV1B",
    "OV1C",
    "OV1D",
    "P136",
    "P148",
    "P149",
    "P149D",
    "P166",
    "P166B",
    "P166C",
    "P166D",
    "P166M",
    "P166S",
    "P16DL2",
    "P16DL3",
    "P180",
    "P2",
    "P2E",
    "P2F",
    "P2H",
    "P2J",
    "P2V",
    "P3A",
    "P3B",
    "P3C",
    "P3C1",
    "P3C2",
    "P3C3",
    "P3CAIP",
    "P3CJ",
    "P3SEN",
    "P4",
    "P51",
    "P55A",
    "P68",
    "P68A",
    "P68B",
    "P68C",
    "P68CTC",
    "P68OBS",
    "P95",
    "P95MAR",
    "PA11",
    "PA12",
    "PA14",
    "PA15",
    "PA16",
    "PA17",
    "PA18",
    "PA2",
    "PA20",
    "PA200A",
    "PA200E",
    "PA200I",
    "PA22",
    "PA23",
    "PA24",
    "PA25",
    "PA28",
    "PA2815",
    "PA2816",
    "PA2818",
    "PA2820",
    "PA2821",
    "PA2823",
    "PA2826",
    "PA28R",
    "PA29",
    "PA30",
    "PA31",
    "PA3131",
    "PA3135",
    "PA31T",
    "PA32",
    "PA3230",
    "PA34",
    "PA3422",
    "PA34II",
    "PA36",
    "PA38",
    "PA3811",
    "PA41",
    "PA42",
    "PA4210",
    "PA4272",
    "PA44",
    "PA4418",
    "PA46",
    "PA4635",
    "PA5",
    "PA60",
    "PACK",
    "PACMUS",
    "PACSHA",
    "PAH2",
    "PANATL",
    "PARO",
    "PAT1",
    "PAYE",
    "PC12",
    "PC1245",
    "PC12E",
    "PC6",
    "PC6A",
    "PC6B",
    "PC6C",
    "PC6CHR",
    "PC7",
    "PC7MK2",
    "PC8",
    "PC9",
    "PC9A",
    "PC9B",
    "PC9MK2",
    "PCHEL",
    "PD808",
    "PD808A",
    "PD808E",
    "PD808F",
    "PD808P",
    "PD808R",
    "PD808T",
    "PD808V",
    "PHFGR1",
    "PHFGR2",
    "PILL",
    "PINAVC",
    "PIPER",
    "PIR2C",
    "PIR2D",
    "PIR4",
    "PIR5",
    "PN200A",
    "PN200E",
    "PN200I",
    "PO2A",
    "PS1",
    "PS1SHM",
    "PS5",
    "PT1020",
    "PT1040",
    "PT6",
    "PT6A",
    "PZ105L",
    "PZ106B",
    "PZ106T",
    "PZ130T",
    "PZL104",
    "PZL110",
    "PZL111",
    "PZL126",
    "PZL130",
    "PZL230",
    "PZLDRO",
    "PZLM20",
    "PZLSW4",
    "PZLSW5",
    "PZLT45",
    "PZLW3",
    "PZLW3A",
    "PZLW3W",
    "PZTS11",
    "PZW3RM",
    "PZW3WA",
    "PZWI20",
    "PZWI35",
    "PZWI80",
    "Q5",
    "QF004E",
    "QF004G",
    "QU22",
    "QU800",
    "QU8800",
    "R1",
    "R1180",
    "R2160",
    "R235G",
    "R30012",
    "R30014",
    "R30016",
    "R90230",
    "R90420",
    "R95",
    "RA5",
    "RA7E",
    "RAFAL",
    "RAFALB",
    "RAFALC",
    "RAFALM",
    "RAH66",
    "RAL235",
    "RANGER",
    "RAY390",
    "RB57",
    "RC12",
    "RC121",
    "RC12DG",
    "RC12DS",
    "RC12F",
    "RC12HG",
    "RC12HS",
    "RC12KG",
    "RC12KS",
    "RC12M",
    "RC130",
    "RC130A",
    "RC130E",
    "RC130H",
    "RC130S",
    "RC135",
    "RC135A",
    "RC135C",
    "RC135D",
    "RC135M",
    "RC135S",
    "RC135T",
    "RC135U",
    "RC135V",
    "RC135W",
    "RC135X",
    "RCI2F",
    "RCI2HS",
    "RCI2M",
    "RCOBRA",
    "RDR400",
    "REBEL",
    "RF104G",
    "RF111A",
    "RF111C",
    "RF18",
    "RF18D",
    "RF35",
    "RF35XD",
    "RF4",
    "RF400",
    "RF47FO",
    "RF4B",
    "RF4C",
    "RF4E",
    "RF4EJ",
    "RF4K",
    "RF5",
    "RF5A",
    "RF5E",
    "RF5G",
    "RF5T",
    "RF600",
    "RF8",
    "RF84F",
    "RF8A",
    "RF8G",
    "RF9",
    "RFB100",
    "RFB400",
    "RFB600",
    "RH1100",
    "RH22",
    "RH53",
    "RH53A",
    "RH53D",
    "RJ1",
    "RJ100",
    "RJ115",
    "RJ1HK",
    "RJ200",
    "RJ700A",
    "RJ700B",
    "RO162F",
    "ROB100",
    "ROB200",
    "ROBX4",
    "ROMISL",
    "ROR22",
    "ROR44",
    "RP3A",
    "RP3D",
    "RQ1A",
    "RQ41",
    "RQ42",
    "RQ4A",
    "RSA40",
    "RSA40A",
    "RSA60",
    "RSA75",
    "RSA75A",
    "RT26",
    "RT33A",
    "RU21",
    "RU21J",
    "RU38A",
    "RUT151",
    "RUT202",
    "RV1",
    "RV1D",
    "RY21",
    "RY40",
    "RY65",
    "S100B",
    "S12E",
    "S16SHE",
    "S19",
    "S1B2",
    "S208",
    "S210",
    "S210M",
    "S211",
    "S211A",
    "S22C",
    "S235",
    "S235E",
    "S2A",
    "S2BUC",
    "S2C",
    "S2E",
    "S2G",
    "S2N",
    "S2RT",
    "S2T",
    "S2TRK",
    "S312",
    "S32C",
    "S35",
    "S35E",
    "S365N2",
    "S365N3",
    "S366G1",
    "S3A",
    "S3B",
    "S55CHK",
    "S55T",
    "S58",
    "S58T",
    "S600",
    "S61",
    "S61A",
    "S61AN",
    "S61L",
    "S61N",
    "S61N1",
    "S62",
    "S62B",
    "S64E",
    "S65A",
    "S65E",
    "S65SEA",
    "S70",
    "S70A",
    "S70A1L",
    "S70B2",
    "S70BS",
    "S70C",
    "S70LOG",
    "S76",
    "S76A",
    "S76B",
    "S76C",
    "S76E",
    "S76M2",
    "S76N",
    "S76S",
    "S7B",
    "S7BM",
    "S80E",
    "S80M",
    "S880",
    "S890",
    "S892",
    "S894",
    "S9",
    "S92C",
    "S92HB",
    "S92U",
    "SA237A",
    "SA238A",
    "SA315",
    "SA315B",
    "SA316",
    "SA316A",
    "SA316B",
    "SA318",
    "SA318C",
    "SA319A",
    "SA319B",
    "SA319W",
    "SA321",
    "SA321F",
    "SA321G",
    "SA321H",
    "SA321J",
    "SA321K",
    "SA321L",
    "SA321M",
    "SA330",
    "SA330B",
    "SA330E",
    "SA330H",
    "SA330J",
    "SA330L",
    "SA332",
    "SA341",
    "SA341B",
    "SA341C",
    "SA341D",
    "SA341E",
    "SA341F",
    "SA341G",
    "SA341H",
    "SA341M",
    "SA342",
    "SA342A",
    "SA342G",
    "SA342J",
    "SA342K",
    "SA342L",
    "SA342M",
    "SA342V",
    "SA350",
    "SA350B",
    "SA350E",
    "SA35B2",
    "SA35B3",
    "SA35BA",
    "SA360",
    "SA360C",
    "SA361",
    "SA365",
    "SA365C",
    "SA365F",
    "SA365K",
    "SA365M",
    "SA365N",
    "SA365S",
    "SA366G",
    "SA36BB",
    "SA37",
    "SA3BUL",
    "SA3TMK",
    "SAA300",
    "SAAB91",
    "SAR50",
    "SASS",
    "SB32",
    "SB34A",
    "SB34B",
    "SB35",
    "SB35E",
    "SB35M",
    "SB35X",
    "SB37",
    "SB37M",
    "SB39M",
    "SB7L",
    "SC269A",
    "SC3",
    "SC300C",
    "SC330",
    "SC7",
    "SC95B",
    "SCOUT",
    "SCP",
    "SCR125",
    "SCTP",
    "SD27",
    "SE210",
    "SE3130",
    "SE313B",
    "SEABAT",
    "SEACD2",
    "SEACOB",
    "SEAGUL",
    "SEALYX",
    "SEARNG",
    "SEASPT",
    "SEATA",
    "SEN",
    "SENMK2",
    "SETE4",
    "SF25A",
    "SF260",
    "SF260A",
    "SF260B",
    "SF260C",
    "SF260E",
    "SF260F",
    "SF260M",
    "SF260T",
    "SF260W",
    "SF260Z",
    "SF269D",
    "SF340",
    "SF37",
    "SF5",
    "SF5A",
    "SF5B",
    "SF600",
    "SF600A",
    "SF600T",
    "SG28SI",
    "SG300",
    "SGAL4",
    "SH14",
    "SH14B",
    "SH14C",
    "SH14D",
    "SH2",
    "SH2D",
    "SH2F",
    "SH3",
    "SH34",
    "SH34G",
    "SH34J",
    "SH37",
    "SH3A",
    "SH3D",
    "SH3DTS",
    "SH3G",
    "SH3H",
    "SH5",
    "SH5A",
    "SH60",
    "SH60B",
    "SH60D",
    "SH60F",
    "SH60J",
    "SH60R",
    "SHAEW2",
    "SHARF",
    "SHD3",
    "SHD6",
    "SHERPA",
    "SHF6",
    "SHFMK1",
    "SHFMK2",
    "SHFRM1",
    "SHFRM2",
    "SHFRM5",
    "SHM1",
    "SHM51",
    "SHT330",
    "SHTM4",
    "SHTSHE",
    "SHTSTR",
    "SISD27",
    "SJ302",
    "SK1100",
    "SK35C",
    "SK37",
    "SK50",
    "SK500",
    "SK51",
    "SK52",
    "SK55",
    "SK56",
    "SK56M",
    "SK58",
    "SK59",
    "SK60",
    "SK61",
    "SK70",
    "SK700",
    "SK700S",
    "SK71",
    "SKA",
    "SKAEM7",
    "SKHA3A",
    "SKHAM5",
    "SKHCM4",
    "SKHRM3",
    "SKHSM1",
    "SKJ",
    "SKM43",
    "SKM43B",
    "SKMK2A",
    "SKMK48",
    "SKMK50",
    "SKMK7",
    "SKW",
    "SKY28",
    "SKY3M",
    "SKYCR",
    "SKYFOX",
    "SKYROK",
    "SKYS",
    "SL8",
    "SL90L",
    "SLVSTR",
    "SM92",
    "SM92P",
    "SM94",
    "SN601",
    "SOKOG",
    "SOKOJ",
    "SOKOK",
    "SOL47",
    "SOLMRQ",
    "SP2",
    "SP2H",
    "SP95",
    "SPDFRT",
    "SPF22R",
    "SPK",
    "SPKA",
    "SPTE2E",
    "SR71",
    "SR71A",
    "SR71B",
    "SR71C",
    "SRA1",
    "SRA4",
    "SS22A",
    "SSCA",
    "SSLC65",
    "SST",
    "ST170",
    "ST1700",
    "ST17MD",
    "ST3320",
    "ST33UT",
    "ST360",
    "ST3630",
    "ST75",
    "ST77",
    "STRAT1",
    "STRAT2",
    "SU11",
    "SU11U",
    "SU15",
    "SU15U",
    "SU17",
    "SU17M",
    "SU17M1",
    "SU17M2",
    "SU17M3",
    "SU17M4",
    "SU17U",
    "SU17UM",
    "SU20",
    "SU20M",
    "SU20U",
    "SU22",
    "SU22BK",
    "SU22BM",
    "SU22G",
    "SU22H2",
    "SU22J2",
    "SU22M",
    "SU22M4",
    "SU22U",
    "SU24",
    "SU24M",
    "SU24MK",
    "SU24MP",
    "SU24MR",
    "SU25",
    "SU25BM",
    "SU25K",
    "SU25T",
    "SU25TK",
    "SU25TM",
    "SU25UB",
    "SU25UG",
    "SU25UK",
    "SU25UT",
    "SU26M",
    "SU27",
    "SU27IB",
    "SU27K",
    "SU27LL",
    "SU27M",
    "SU27P",
    "SU27PD",
    "SU27S",
    "SU27SM",
    "SU27UB",
    "SU28",
    "SU29",
    "SU30",
    "SU30K",
    "SU30M",
    "SU30MK",
    "SU32FN",
    "SU33",
    "SU34",
    "SU35",
    "SU37",
    "SU38",
    "SU39",
    "SU3MKI",
    "SU49",
    "SU7",
    "SU7B",
    "SU7BKL",
    "SU7BMK",
    "SU7U",
    "SU7UM",
    "SU7UMK",
    "SU9",
    "SU9U",
    "SULYNX",
    "SUMSEN",
    "SUPHOR",
    "SUROK",
    "SUS21",
    "SUS32",
    "SUS54",
    "SUS80",
    "SUS84",
    "SUS986",
    "SW3",
    "SW3IV",
    "SWATI",
    "SWSFED",
    "T1",
    "T101E",
    "T101GR",
    "T101S",
    "T106",
    "T10HER",
    "T11",
    "T11A",
    "T11CAC",
    "T12",
    "T130FR",
    "T134",
    "T154M2",
    "T16FAL",
    "T17",
    "T18FAL",
    "T19A",
    "T19B",
    "T1A",
    "T1AJAY",
    "T1B",
    "T2",
    "T201",
    "T201AI",
    "T203",
    "T203PC",
    "T204GR",
    "T205KA",
    "T23",
    "T25",
    "T25A",
    "T25B",
    "T27",
    "T274",
    "T274BR",
    "T274TI",
    "T27T",
    "T28",
    "T28A",
    "T28B",
    "T28C",
    "T28D",
    "T29",
    "T29A",
    "T2A",
    "T2B",
    "T2C",
    "T2D",
    "T2E",
    "T2KAI",
    "T2MIT",
    "T3",
    "T33",
    "T33A",
    "T33B",
    "T33N",
    "T34",
    "T34A",
    "T34B",
    "T34C",
    "T35",
    "T35A",
    "T35B",
    "T35C",
    "T35D",
    "T35S",
    "T35T",
    "T36",
    "T37",
    "T37A",
    "T37B",
    "T37C",
    "T37T",
    "T38",
    "T38A",
    "T38B",
    "T38D",
    "T39",
    "T39A",
    "T39B",
    "T39D",
    "T39F",
    "T4",
    "T401SO",
    "T407SK",
    "T41",
    "T411AI",
    "T411WO",
    "T417PE",
    "T41A",
    "T41B",
    "T41D",
    "T42",
    "T420A",
    "T420CL",
    "T420ST",
    "T422YA",
    "T42A",
    "T42B",
    "T43",
    "T430SP",
    "T433FL",
    "T43A",
    "T44",
    "T44K",
    "T45",
    "T45A",
    "T45B",
    "T45TS",
    "T47",
    "T471",
    "T47A",
    "T4KAWA",
    "T5",
    "T501",
    "T6",
    "T610",
    "T610VO",
    "T66",
    "T67",
    "T67B",
    "T67C",
    "T67M",
    "T67M20",
    "T67M26",
    "T67MM2",
    "T6G",
    "T9",
    "T910",
    "T910KU",
    "T9STO",
    "TA16SF",
    "TA3B",
    "TA4",
    "TA4B",
    "TA4F",
    "TA4G",
    "TA4H",
    "TA4J",
    "TA4K",
    "TA4KU",
    "TA4M",
    "TA4S",
    "TA7",
    "TA7C",
    "TA7H",
    "TA7P",
    "TAGM23",
    "TAV8",
    "TAV8A",
    "TAV8B",
    "TAV8S",
    "TB10",
    "TB20",
    "TB200",
    "TB20PA",
    "TB21",
    "TB30",
    "TB31",
    "TB360",
    "TB6000",
    "TB9",
    "TB9TC",
    "TBM700",
    "TC018E",
    "TC130",
    "TC130G",
    "TC130Q",
    "TC135S",
    "TC135W",
    "TC15",
    "TC18F",
    "TC19",
    "TC20",
    "TC3",
    "TC4B",
    "TC4C",
    "TC4CA",
    "TCH1",
    "TCHAI",
    "TE2",
    "TE2A",
    "TE2C",
    "TF102A",
    "TF104",
    "TF104G",
    "TF15",
    "TF16N",
    "TF18",
    "TF18A",
    "TF1O2A",
    "TF35",
    "TF35XD",
    "TG10",
    "TG1X",
    "TH053A",
    "TH1",
    "TH13",
    "TH13M",
    "TH13S",
    "TH13T",
    "TH1F",
    "TH1G",
    "TH1L",
    "TH1S",
    "TH206",
    "TH50",
    "TH55",
    "TH55A",
    "TH55J",
    "TH57",
    "TH57A",
    "TH57B",
    "TH57C",
    "TH67",
    "TIGER",
    "TIMIT",
    "TK10",
    "TL10",
    "TORA",
    "TORAF3",
    "TORE",
    "TORF2",
    "TORF2A",
    "TORF3",
    "TORGMK",
    "TORI",
    "TORM1",
    "TORM1A",
    "TORM1B",
    "TORM4",
    "TORNAD",
    "TORR",
    "TOUCAN",
    "TP100",
    "TP101",
    "TP102",
    "TP400",
    "TP600",
    "TP84",
    "TP88",
    "TP883",
    "TP89",
    "TR1ATR",
    "TR1B",
    "TR1DRA",
    "TR1REC",
    "TR1TRI",
    "TRAN",
    "TRDT2E",
    "TRDT3B",
    "TRI300",
    "TRI3B",
    "TRI500",
    "TRIC2",
    "TRIC2A",
    "TRID2E",
    "TRIK1",
    "TRIKC1",
    "TROOP",
    "TS2A",
    "TS60",
    "TS8",
    "TSC1A3",
    "TT300",
    "TU104",
    "TU104A",
    "TU114",
    "TU116",
    "TU124",
    "TU126",
    "TU128",
    "TU130",
    "TU130L",
    "TU134",
    "TU1341",
    "TU1343",
    "TU134A",
    "TU134B",
    "TU142",
    "TU142C",
    "TU142D",
    "TU142E",
    "TU142H",
    "TU142M",
    "TU142R",
    "TU142S",
    "TU142Z",
    "TU144",
    "TU144D",
    "TU144L",
    "TU154",
    "TU1541",
    "TU1542",
    "TU154A",
    "TU154B",
    "TU154L",
    "TU154M",
    "TU154O",
    "TU154S",
    "TU154T",
    "TU156",
    "TU156S",
    "TU16",
    "TU160",
    "TU160S",
    "TU1610",
    "TU16KS",
    "TU16N",
    "TU16PH",
    "TU16PJ",
    "TU16PP",
    "TU16RD",
    "TU16RF",
    "TU16RK",
    "TU16T",
    "TU20",
    "TU204",
    "TU2041",
    "TU2042",
    "TU204C",
    "TU204M",
    "TU214",
    "TU22",
    "TU22D",
    "TU22M1",
    "TU22M2",
    "TU22M3",
    "TU22MR",
    "TU22U",
    "TU2412",
    "TU2422",
    "TU2423",
    "TU244",
    "TU24S",
    "TU24T",
    "TU24U",
    "TU26",
    "TU28",
    "TU330",
    "TU334",
    "TU3341",
    "TU334C",
    "TU334D",
    "TU34",
    "TU354",
    "TU414",
    "TU95",
    "TU9522",
    "TU95K",
    "TU95K2",
    "TU95M",
    "TU95MR",
    "TU95RT",
    "TUCP",
    "TURBVR",
    "TURPOR",
    "TW18",
    "TWINOT",
    "TWINSQ",
    "TWINST",
    "TZUG",
    "U1",
    "U10",
    "U11",
    "U11A",
    "U125",
    "U125A",
    "U17",
    "U17A",
    "U17B",
    "U1A",
    "U2",
    "U21",
    "U21F",
    "U25",
    "U27A",
    "U2R",
    "U3",
    "U36",
    "U3A",
    "U3B",
    "U4",
    "U42",
    "U5",
    "U6",
    "U6A",
    "U7",
    "U7A",
    "U7B",
    "U7SC",
    "U8",
    "U8D",
    "U8F",
    "U8TB",
    "U8TE",
    "U9",
    "U93",
    "U9D",
    "U9X",
    "U9XI",
    "UC026C",
    "UC12B",
    "UC12B2",
    "UC12BH",
    "UC12D",
    "UC12F",
    "UC12M",
    "UC12M2",
    "UC26C",
    "UC35A",
    "UC45J",
    "UH1",
    "UH12",
    "UH12E",
    "UH14",
    "UH14A",
    "UH19",
    "UH19A",
    "UH19B",
    "UH19C",
    "UH19D",
    "UH19F",
    "UH1AB",
    "UH1B",
    "UH1C",
    "UH1D",
    "UH1E",
    "UH1F",
    "UH1H",
    "UH1J",
    "UH1L",
    "UH1M",
    "UH1NTH",
    "UH1P",
    "UH1T",
    "UH1V",
    "UH2",
    "UH2A",
    "UH2B",
    "UH3",
    "UH34D",
    "UH3A",
    "UH3D",
    "UH46",
    "UH46A",
    "UH46C",
    "UH46D",
    "UH60",
    "UH60A",
    "UH60AP",
    "UH60B",
    "UH60C",
    "UH60J",
    "UH60JA",
    "UH60L",
    "UH60P",
    "UH60Q",
    "UHMK88",
    "UM1023",
    "UM3071",
    "UP2J",
    "US1",
    "US1A",
    "US1SAR",
    "US2",
    "US2A",
    "US2B",
    "US2C",
    "US2D",
    "US3A",
    "US496",
    "UTV",
    "UTVA75",
    "UTVA95",
    "UV18",
    "UV18A",
    "UV18AC",
    "UV18B",
    "UV20",
    "UV20A",
    "V22",
    "V234",
    "VA10",
    "VA2",
    "VA3B",
    "VAR",
    "VC025A",
    "VC10",
    "VC10C1",
    "VC10CM",
    "VC10K2",
    "VC10K3",
    "VC10M2",
    "VC10M3",
    "VC11",
    "VC118",
    "VC118A",
    "VC118B",
    "VC11A",
    "VC11AG",
    "VC11II",
    "VC130",
    "VC130H",
    "VC131",
    "VC131A",
    "VC131H",
    "VC135B",
    "VC137",
    "VC137C",
    "VC137G",
    "VC140",
    "VC140B",
    "VC1KK2",
    "VC1KK3",
    "VC1KK4",
    "VC25",
    "VC25A",
    "VC26",
    "VC6",
    "VC6B",
    "VC7",
    "VC9",
    "VC97",
    "VC9C",
    "VCONT",
    "VFW614",
    "VG21",
    "VH3",
    "VH34D",
    "VH3A",
    "VH3D",
    "VH4",
    "VH60N",
    "VICTK2",
    "VICTOR",
    "VJ22",
    "VKVNGD",
    "VLCN",
    "VOY",
    "VP3A",
    "VRT44A",
    "VRT44B",
    "VTOUR2",
    "VU9",
    "WAG22",
    "WAGABO",
    "WAI100",
    "WAI500",
    "WAI50H",
    "WAI600",
    "WC130",
    "WC130B",
    "WC130E",
    "WC130H",
    "WC135",
    "WC135B",
    "WC135N",
    "WC135W",
    "WG13",
    "WG30",
    "WG34",
    "WSPRT",
    "WSX",
    "WW",
    "WW24",
    "X31A",
    "XC2",
    "XIANF7",
    "XIHU5",
    "XTS",
    "Y11",
    "Y11B",
    "Y11M",
    "Y11T",
    "Y12",
    "Y122",
    "Y124",
    "Y18MOO",
    "Y27",
    "Y36MP",
    "Y36MPA",
    "Y36MPB",
    "Y5",
    "Y5B",
    "Y5C",
    "Y7",
    "Y710",
    "Y7100",
    "Y710C",
    "Y720A",
    "Y720B",
    "Y7E",
    "Y7H",
    "Y7H50",
    "Y7H500",
    "Y8",
    "Y8A",
    "Y8B",
    "Y8C",
    "Y8D",
    "Y8E",
    "Y8ECM",
    "Y8F",
    "Y8H",
    "Y8X",
    "YA27U",
    "YAK11",
    "YAK112",
    "YAK12",
    "YAK13",
    "YAK130",
    "YAK142",
    "YAK14V",
    "YAK18",
    "YAK18T",
    "YAK242",
    "YAK25",
    "YAK27",
    "YAK28",
    "YAK28P",
    "YAK28U",
    "YAK30",
    "YAK32",
    "YAK36M",
    "YAK38",
    "YAK38A",
    "YAK38B",
    "YAK40",
    "YAK41",
    "YAK42",
    "YAK42A",
    "YAK42D",
    "YAK42E",
    "YAK42M",
    "YAK42T",
    "YAK461",
    "YAK462",
    "YAK52",
    "YAK54",
    "YAK56",
    "YAK58",
    "YAKFBA",
    "YAMAL",
    "YAS70A",
    "YF11",
    "YS11",
    "YT25B",
    "YUN12",
    "Z11",
    "Z142",
    "Z142C",
    "Z142CA",
    "Z142L",
    "Z143",
    "Z242L",
    "Z326",
    "Z5",
    "Z50",
    "Z6",
    "Z8",
    "Z9",
    "Z9100",
    "Z9A",
    "ZEPN05",
    "ZEPN07",
    "ZLNAER",
    "ZLNAIR",
    "ZLNATL",
    "ZLNBAL",
    "ZLNBAR",
    "ZLNCHI",
    "ZLNCON",
    "ZLNCOO",
    "ZLNDAS",
    "ZLNDOL",
    "ZLNHAR",
    "ZLNHDC",
    "ZLNHKB",
    "ZLNHKC",
    "ZLNHPD",
    "ZLNHPF",
    "ZLNHPH",
    "ZLNIDF",
    "ZLNQUE",
    "ZLNSEA",
    "ZLNSOK"
  };

  const AircraftTypeModelCode::value AircraftTypeModelCode::
  _xsd_AircraftTypeModelCode_indexes_[4758] =
  {
    ::oo_2_0::AircraftTypeModelCode::cxx_101156,
    ::oo_2_0::AircraftTypeModelCode::cxx_1049,
    ::oo_2_0::AircraftTypeModelCode::cxx_1124SS,
    ::oo_2_0::AircraftTypeModelCode::cxx_1125SP,
    ::oo_2_0::AircraftTypeModelCode::cxx_1150AT,
    ::oo_2_0::AircraftTypeModelCode::cxx_1240,
    ::oo_2_0::AircraftTypeModelCode::cxx_137T,
    ::oo_2_0::AircraftTypeModelCode::cxx_200,
    ::oo_2_0::AircraftTypeModelCode::cxx_201A,
    ::oo_2_0::AircraftTypeModelCode::cxx_232C,
    ::oo_2_0::AircraftTypeModelCode::cxx_269A,
    ::oo_2_0::AircraftTypeModelCode::cxx_280L,
    ::oo_2_0::AircraftTypeModelCode::cxx_28PBRE,
    ::oo_2_0::AircraftTypeModelCode::cxx_28RBRD,
    ::oo_2_0::AircraftTypeModelCode::cxx_28UBRD,
    ::oo_2_0::AircraftTypeModelCode::cxx_28UBRE,
    ::oo_2_0::AircraftTypeModelCode::cxx_300C,
    ::oo_2_0::AircraftTypeModelCode::cxx_333DF,
    ::oo_2_0::AircraftTypeModelCode::cxx_358GAV,
    ::oo_2_0::AircraftTypeModelCode::cxx_35XD,
    ::oo_2_0::AircraftTypeModelCode::cxx_369OHJ,
    ::oo_2_0::AircraftTypeModelCode::cxx_414A,
    ::oo_2_0::AircraftTypeModelCode::cxx_500MD,
    ::oo_2_0::AircraftTypeModelCode::cxx_698V,
    ::oo_2_0::AircraftTypeModelCode::cxx_8600,
    ::oo_2_0::AircraftTypeModelCode::A1,
    ::oo_2_0::AircraftTypeModelCode::A10,
    ::oo_2_0::AircraftTypeModelCode::A100,
    ::oo_2_0::AircraftTypeModelCode::A103,
    ::oo_2_0::AircraftTypeModelCode::A109A,
    ::oo_2_0::AircraftTypeModelCode::A109C,
    ::oo_2_0::AircraftTypeModelCode::A109E,
    ::oo_2_0::AircraftTypeModelCode::A109H0,
    ::oo_2_0::AircraftTypeModelCode::A109HA,
    ::oo_2_0::AircraftTypeModelCode::A109K,
    ::oo_2_0::AircraftTypeModelCode::A109KM,
    ::oo_2_0::AircraftTypeModelCode::A109KN,
    ::oo_2_0::AircraftTypeModelCode::A109MA,
    ::oo_2_0::AircraftTypeModelCode::A10A,
    ::oo_2_0::AircraftTypeModelCode::A10AL,
    ::oo_2_0::AircraftTypeModelCode::A10B,
    ::oo_2_0::AircraftTypeModelCode::A119,
    ::oo_2_0::AircraftTypeModelCode::A120LS,
    ::oo_2_0::AircraftTypeModelCode::A122,
    ::oo_2_0::AircraftTypeModelCode::A129,
    ::oo_2_0::AircraftTypeModelCode::A12919,
    ::oo_2_0::AircraftTypeModelCode::A132,
    ::oo_2_0::AircraftTypeModelCode::A135,
    ::oo_2_0::AircraftTypeModelCode::A139,
    ::oo_2_0::AircraftTypeModelCode::A18,
    ::oo_2_0::AircraftTypeModelCode::A1D,
    ::oo_2_0::AircraftTypeModelCode::A1M,
    ::oo_2_0::AircraftTypeModelCode::A20,
    ::oo_2_0::AircraftTypeModelCode::A200,
    ::oo_2_0::AircraftTypeModelCode::A200BS,
    ::oo_2_0::AircraftTypeModelCode::A209,
    ::oo_2_0::AircraftTypeModelCode::A211,
    ::oo_2_0::AircraftTypeModelCode::A212,
    ::oo_2_0::AircraftTypeModelCode::A212A,
    ::oo_2_0::AircraftTypeModelCode::A21M,
    ::oo_2_0::AircraftTypeModelCode::A22,
    ::oo_2_0::AircraftTypeModelCode::A22J,
    ::oo_2_0::AircraftTypeModelCode::A23,
    ::oo_2_0::AircraftTypeModelCode::A25,
    ::oo_2_0::AircraftTypeModelCode::A26,
    ::oo_2_0::AircraftTypeModelCode::A27,
    ::oo_2_0::AircraftTypeModelCode::A29,
    ::oo_2_0::AircraftTypeModelCode::A2AVEN,
    ::oo_2_0::AircraftTypeModelCode::A3,
    ::oo_2_0::AircraftTypeModelCode::A300,
    ::oo_2_0::AircraftTypeModelCode::A30060,
    ::oo_2_0::AircraftTypeModelCode::A3006M,
    ::oo_2_0::AircraftTypeModelCode::A3006S,
    ::oo_2_0::AircraftTypeModelCode::A300B4,
    ::oo_2_0::AircraftTypeModelCode::A300C4,
    ::oo_2_0::AircraftTypeModelCode::A300MR,
    ::oo_2_0::AircraftTypeModelCode::A300SB,
    ::oo_2_0::AircraftTypeModelCode::A310,
    ::oo_2_0::AircraftTypeModelCode::A31020,
    ::oo_2_0::AircraftTypeModelCode::A31030,
    ::oo_2_0::AircraftTypeModelCode::A310AE,
    ::oo_2_0::AircraftTypeModelCode::A310CY,
    ::oo_2_0::AircraftTypeModelCode::A310MR,
    ::oo_2_0::AircraftTypeModelCode::A316,
    ::oo_2_0::AircraftTypeModelCode::A317,
    ::oo_2_0::AircraftTypeModelCode::A318,
    ::oo_2_0::AircraftTypeModelCode::A319,
    ::oo_2_0::AircraftTypeModelCode::A319CJ,
    ::oo_2_0::AircraftTypeModelCode::A32,
    ::oo_2_0::AircraftTypeModelCode::A320,
    ::oo_2_0::AircraftTypeModelCode::A32020,
    ::oo_2_0::AircraftTypeModelCode::A321,
    ::oo_2_0::AircraftTypeModelCode::A32120,
    ::oo_2_0::AircraftTypeModelCode::A32A,
    ::oo_2_0::AircraftTypeModelCode::A330,
    ::oo_2_0::AircraftTypeModelCode::A33020,
    ::oo_2_0::AircraftTypeModelCode::A33030,
    ::oo_2_0::AircraftTypeModelCode::A340,
    ::oo_2_0::AircraftTypeModelCode::A34040,
    ::oo_2_0::AircraftTypeModelCode::A34080,
    ::oo_2_0::AircraftTypeModelCode::A360,
    ::oo_2_0::AircraftTypeModelCode::A36H,
    ::oo_2_0::AircraftTypeModelCode::A36TC,
    ::oo_2_0::AircraftTypeModelCode::A37,
    ::oo_2_0::AircraftTypeModelCode::A37A,
    ::oo_2_0::AircraftTypeModelCode::A37B,
    ::oo_2_0::AircraftTypeModelCode::A3A,
    ::oo_2_0::AircraftTypeModelCode::A3B,
    ::oo_2_0::AircraftTypeModelCode::A4,
    ::oo_2_0::AircraftTypeModelCode::A4A,
    ::oo_2_0::AircraftTypeModelCode::A4B,
    ::oo_2_0::AircraftTypeModelCode::A4C,
    ::oo_2_0::AircraftTypeModelCode::A4D,
    ::oo_2_0::AircraftTypeModelCode::A4E,
    ::oo_2_0::AircraftTypeModelCode::A4F,
    ::oo_2_0::AircraftTypeModelCode::A4G,
    ::oo_2_0::AircraftTypeModelCode::A4H,
    ::oo_2_0::AircraftTypeModelCode::A4J,
    ::oo_2_0::AircraftTypeModelCode::A4K,
    ::oo_2_0::AircraftTypeModelCode::A4KU,
    ::oo_2_0::AircraftTypeModelCode::A4L,
    ::oo_2_0::AircraftTypeModelCode::A4M,
    ::oo_2_0::AircraftTypeModelCode::A4N,
    ::oo_2_0::AircraftTypeModelCode::A4P,
    ::oo_2_0::AircraftTypeModelCode::A4Q,
    ::oo_2_0::AircraftTypeModelCode::A4S,
    ::oo_2_0::AircraftTypeModelCode::A4SU,
    ::oo_2_0::AircraftTypeModelCode::A5,
    ::oo_2_0::AircraftTypeModelCode::A501,
    ::oo_2_0::AircraftTypeModelCode::A5M,
    ::oo_2_0::AircraftTypeModelCode::A6,
    ::oo_2_0::AircraftTypeModelCode::A60PLS,
    ::oo_2_0::AircraftTypeModelCode::A6A,
    ::oo_2_0::AircraftTypeModelCode::A6B,
    ::oo_2_0::AircraftTypeModelCode::A6C,
    ::oo_2_0::AircraftTypeModelCode::A6E,
    ::oo_2_0::AircraftTypeModelCode::A6F,
    ::oo_2_0::AircraftTypeModelCode::A6G,
    ::oo_2_0::AircraftTypeModelCode::A7,
    ::oo_2_0::AircraftTypeModelCode::A7A,
    ::oo_2_0::AircraftTypeModelCode::A7B,
    ::oo_2_0::AircraftTypeModelCode::A7C,
    ::oo_2_0::AircraftTypeModelCode::A7D,
    ::oo_2_0::AircraftTypeModelCode::A7E,
    ::oo_2_0::AircraftTypeModelCode::A7G,
    ::oo_2_0::AircraftTypeModelCode::A7H,
    ::oo_2_0::AircraftTypeModelCode::A7K,
    ::oo_2_0::AircraftTypeModelCode::A7P,
    ::oo_2_0::AircraftTypeModelCode::AA1,
    ::oo_2_0::AircraftTypeModelCode::AA1B,
    ::oo_2_0::AircraftTypeModelCode::AA5,
    ::oo_2_0::AircraftTypeModelCode::AB204,
    ::oo_2_0::AircraftTypeModelCode::AB204A,
    ::oo_2_0::AircraftTypeModelCode::AB204B,
    ::oo_2_0::AircraftTypeModelCode::AB205,
    ::oo_2_0::AircraftTypeModelCode::AB205A,
    ::oo_2_0::AircraftTypeModelCode::AB205B,
    ::oo_2_0::AircraftTypeModelCode::AB206,
    ::oo_2_0::AircraftTypeModelCode::AB2063,
    ::oo_2_0::AircraftTypeModelCode::AB2064,
    ::oo_2_0::AircraftTypeModelCode::AB206A,
    ::oo_2_0::AircraftTypeModelCode::AB206B,
    ::oo_2_0::AircraftTypeModelCode::AB206L,
    ::oo_2_0::AircraftTypeModelCode::AB209,
    ::oo_2_0::AircraftTypeModelCode::AB212,
    ::oo_2_0::AircraftTypeModelCode::AB212A,
    ::oo_2_0::AircraftTypeModelCode::AB212C,
    ::oo_2_0::AircraftTypeModelCode::AB212M,
    ::oo_2_0::AircraftTypeModelCode::AB212O,
    ::oo_2_0::AircraftTypeModelCode::AB214,
    ::oo_2_0::AircraftTypeModelCode::AB214A,
    ::oo_2_0::AircraftTypeModelCode::AB214B,
    ::oo_2_0::AircraftTypeModelCode::AB214C,
    ::oo_2_0::AircraftTypeModelCode::AB214S,
    ::oo_2_0::AircraftTypeModelCode::AB222,
    ::oo_2_0::AircraftTypeModelCode::AB260,
    ::oo_2_0::AircraftTypeModelCode::AB406,
    ::oo_2_0::AircraftTypeModelCode::AB412,
    ::oo_2_0::AircraftTypeModelCode::AB47,
    ::oo_2_0::AircraftTypeModelCode::AB47G,
    ::oo_2_0::AircraftTypeModelCode::AB47J,
    ::oo_2_0::AircraftTypeModelCode::AB47SX,
    ::oo_2_0::AircraftTypeModelCode::ABE212,
    ::oo_2_0::AircraftTypeModelCode::AC05,
    ::oo_2_0::AircraftTypeModelCode::AC10,
    ::oo_2_0::AircraftTypeModelCode::AC119,
    ::oo_2_0::AircraftTypeModelCode::AC119K,
    ::oo_2_0::AircraftTypeModelCode::AC12,
    ::oo_2_0::AircraftTypeModelCode::AC130,
    ::oo_2_0::AircraftTypeModelCode::AC130A,
    ::oo_2_0::AircraftTypeModelCode::AC130H,
    ::oo_2_0::AircraftTypeModelCode::AC130U,
    ::oo_2_0::AircraftTypeModelCode::AC14,
    ::oo_2_0::AircraftTypeModelCode::AC20,
    ::oo_2_0::AircraftTypeModelCode::AC21,
    ::oo_2_0::AircraftTypeModelCode::AC2A,
    ::oo_2_0::AircraftTypeModelCode::AC2T,
    ::oo_2_0::AircraftTypeModelCode::AC47,
    ::oo_2_0::AircraftTypeModelCode::AC50,
    ::oo_2_0::AircraftTypeModelCode::AC52,
    ::oo_2_0::AircraftTypeModelCode::AC60,
    ::oo_2_0::AircraftTypeModelCode::AC69,
    ::oo_2_0::AircraftTypeModelCode::AC6T,
    ::oo_2_0::AircraftTypeModelCode::AC72,
    ::oo_2_0::AircraftTypeModelCode::AC90,
    ::oo_2_0::AircraftTypeModelCode::ACMD,
    ::oo_2_0::AircraftTypeModelCode::ACOCK,
    ::oo_2_0::AircraftTypeModelCode::ACOCKA,
    ::oo_2_0::AircraftTypeModelCode::ACOCKB,
    ::oo_2_0::AircraftTypeModelCode::ADA,
    ::oo_2_0::AircraftTypeModelCode::AE100,
    ::oo_2_0::AircraftTypeModelCode::AE206,
    ::oo_2_0::AircraftTypeModelCode::AE207,
    ::oo_2_0::AircraftTypeModelCode::AE209,
    ::oo_2_0::AircraftTypeModelCode::AE270,
    ::oo_2_0::AircraftTypeModelCode::AE316,
    ::oo_2_0::AircraftTypeModelCode::AE317,
    ::oo_2_0::AircraftTypeModelCode::AER50,
    ::oo_2_0::AircraftTypeModelCode::AEW2,
    ::oo_2_0::AircraftTypeModelCode::AFM526,
    ::oo_2_0::AircraftTypeModelCode::AFX,
    ::oo_2_0::AircraftTypeModelCode::AG6,
    ::oo_2_0::AircraftTypeModelCode::AGSYE1,
    ::oo_2_0::AircraftTypeModelCode::AH1,
    ::oo_2_0::AircraftTypeModelCode::AH12,
    ::oo_2_0::AircraftTypeModelCode::AH12A,
    ::oo_2_0::AircraftTypeModelCode::AH1E,
    ::oo_2_0::AircraftTypeModelCode::AH1F,
    ::oo_2_0::AircraftTypeModelCode::AH1G,
    ::oo_2_0::AircraftTypeModelCode::AH1J,
    ::oo_2_0::AircraftTypeModelCode::AH1LX,
    ::oo_2_0::AircraftTypeModelCode::AH1P,
    ::oo_2_0::AircraftTypeModelCode::AH1Q,
    ::oo_2_0::AircraftTypeModelCode::AH1R,
    ::oo_2_0::AircraftTypeModelCode::AH1RO,
    ::oo_2_0::AircraftTypeModelCode::AH1S,
    ::oo_2_0::AircraftTypeModelCode::AH1TSC,
    ::oo_2_0::AircraftTypeModelCode::AH1W,
    ::oo_2_0::AircraftTypeModelCode::AH1WSC,
    ::oo_2_0::AircraftTypeModelCode::AH58D,
    ::oo_2_0::AircraftTypeModelCode::AH6,
    ::oo_2_0::AircraftTypeModelCode::AH64,
    ::oo_2_0::AircraftTypeModelCode::AH64A,
    ::oo_2_0::AircraftTypeModelCode::AH64C,
    ::oo_2_0::AircraftTypeModelCode::AH64D,
    ::oo_2_0::AircraftTypeModelCode::AH6C,
    ::oo_2_0::AircraftTypeModelCode::AH6F,
    ::oo_2_0::AircraftTypeModelCode::AH6G,
    ::oo_2_0::AircraftTypeModelCode::AH6J,
    ::oo_2_0::AircraftTypeModelCode::AH7,
    ::oo_2_0::AircraftTypeModelCode::AH70,
    ::oo_2_0::AircraftTypeModelCode::AHA,
    ::oo_2_0::AircraftTypeModelCode::AHMK1,
    ::oo_2_0::AircraftTypeModelCode::AHMK5,
    ::oo_2_0::AircraftTypeModelCode::AHMK6,
    ::oo_2_0::AircraftTypeModelCode::AHMK7,
    ::oo_2_0::AircraftTypeModelCode::AHMK9,
    ::oo_2_0::AircraftTypeModelCode::AIEP,
    ::oo_2_0::AircraftTypeModelCode::AIRS,
    ::oo_2_0::AircraftTypeModelCode::AJ37,
    ::oo_2_0::AircraftTypeModelCode::AJS37,
    ::oo_2_0::AircraftTypeModelCode::AL1,
    ::oo_2_0::AircraftTypeModelCode::AL1A,
    ::oo_2_0::AircraftTypeModelCode::AL60,
    ::oo_2_0::AircraftTypeModelCode::AL60B,
    ::oo_2_0::AircraftTypeModelCode::ALA100,
    ::oo_2_0::AircraftTypeModelCode::ALA300,
    ::oo_2_0::AircraftTypeModelCode::ALA40,
    ::oo_2_0::AircraftTypeModelCode::ALA600,
    ::oo_2_0::AircraftTypeModelCode::ALI,
    ::oo_2_0::AircraftTypeModelCode::ALIZM,
    ::oo_2_0::AircraftTypeModelCode::ALPHA,
    ::oo_2_0::AircraftTypeModelCode::ALPHA1,
    ::oo_2_0::AircraftTypeModelCode::ALPHA2,
    ::oo_2_0::AircraftTypeModelCode::ALPHAT,
    ::oo_2_0::AircraftTypeModelCode::AM3C,
    ::oo_2_0::AircraftTypeModelCode::AMH,
    ::oo_2_0::AircraftTypeModelCode::AMT100,
    ::oo_2_0::AircraftTypeModelCode::AMT200,
    ::oo_2_0::AircraftTypeModelCode::AN10,
    ::oo_2_0::AircraftTypeModelCode::AN114,
    ::oo_2_0::AircraftTypeModelCode::AN12,
    ::oo_2_0::AircraftTypeModelCode::AN124,
    ::oo_2_0::AircraftTypeModelCode::AN1241,
    ::oo_2_0::AircraftTypeModelCode::AN1243,
    ::oo_2_0::AircraftTypeModelCode::AN124M,
    ::oo_2_0::AircraftTypeModelCode::AN14,
    ::oo_2_0::AircraftTypeModelCode::AN140,
    ::oo_2_0::AircraftTypeModelCode::AN180,
    ::oo_2_0::AircraftTypeModelCode::AN2,
    ::oo_2_0::AircraftTypeModelCode::AN22,
    ::oo_2_0::AircraftTypeModelCode::AN225,
    ::oo_2_0::AircraftTypeModelCode::AN22A,
    ::oo_2_0::AircraftTypeModelCode::AN22B,
    ::oo_2_0::AircraftTypeModelCode::AN24,
    ::oo_2_0::AircraftTypeModelCode::AN26,
    ::oo_2_0::AircraftTypeModelCode::AN26A,
    ::oo_2_0::AircraftTypeModelCode::AN26B,
    ::oo_2_0::AircraftTypeModelCode::AN26RT,
    ::oo_2_0::AircraftTypeModelCode::AN28,
    ::oo_2_0::AircraftTypeModelCode::AN28R1,
    ::oo_2_0::AircraftTypeModelCode::AN28R2,
    ::oo_2_0::AircraftTypeModelCode::AN28TD,
    ::oo_2_0::AircraftTypeModelCode::AN30,
    ::oo_2_0::AircraftTypeModelCode::AN32B,
    ::oo_2_0::AircraftTypeModelCode::AN32P,
    ::oo_2_0::AircraftTypeModelCode::AN38,
    ::oo_2_0::AircraftTypeModelCode::AN3820,
    ::oo_2_0::AircraftTypeModelCode::AN38K,
    ::oo_2_0::AircraftTypeModelCode::AN4,
    ::oo_2_0::AircraftTypeModelCode::AN40,
    ::oo_2_0::AircraftTypeModelCode::AN70,
    ::oo_2_0::AircraftTypeModelCode::AN7010,
    ::oo_2_0::AircraftTypeModelCode::AN70T,
    ::oo_2_0::AircraftTypeModelCode::AN70T1,
    ::oo_2_0::AircraftTypeModelCode::AN70TK,
    ::oo_2_0::AircraftTypeModelCode::AN71,
    ::oo_2_0::AircraftTypeModelCode::AN72,
    ::oo_2_0::AircraftTypeModelCode::AN72A,
    ::oo_2_0::AircraftTypeModelCode::AN72P,
    ::oo_2_0::AircraftTypeModelCode::AN72S,
    ::oo_2_0::AircraftTypeModelCode::AN74,
    ::oo_2_0::AircraftTypeModelCode::AN7420,
    ::oo_2_0::AircraftTypeModelCode::AN74AB,
    ::oo_2_0::AircraftTypeModelCode::AN74AC,
    ::oo_2_0::AircraftTypeModelCode::AN74C,
    ::oo_2_0::AircraftTypeModelCode::AN74K1,
    ::oo_2_0::AircraftTypeModelCode::AN74K2,
    ::oo_2_0::AircraftTypeModelCode::AN74MC,
    ::oo_2_0::AircraftTypeModelCode::AN74SA,
    ::oo_2_0::AircraftTypeModelCode::AN74SB,
    ::oo_2_0::AircraftTypeModelCode::AN74T1,
    ::oo_2_0::AircraftTypeModelCode::AN74T2,
    ::oo_2_0::AircraftTypeModelCode::AN74TB,
    ::oo_2_0::AircraftTypeModelCode::AN74TC,
    ::oo_2_0::AircraftTypeModelCode::AN8,
    ::oo_2_0::AircraftTypeModelCode::ANC1,
    ::oo_2_0::AircraftTypeModelCode::ANC2,
    ::oo_2_0::AircraftTypeModelCode::ANCC2,
    ::oo_2_0::AircraftTypeModelCode::ANDCC2,
    ::oo_2_0::AircraftTypeModelCode::ANDE3A,
    ::oo_2_0::AircraftTypeModelCode::ANE3,
    ::oo_2_0::AircraftTypeModelCode::ANSAT,
    ::oo_2_0::AircraftTypeModelCode::AP1P,
    ::oo_2_0::AircraftTypeModelCode::AP2S,
    ::oo_2_0::AircraftTypeModelCode::AP3M,
    ::oo_2_0::AircraftTypeModelCode::AP4S,
    ::oo_2_0::AircraftTypeModelCode::AP68TP,
    ::oo_2_0::AircraftTypeModelCode::APM20,
    ::oo_2_0::AircraftTypeModelCode::AR11,
    ::oo_2_0::AircraftTypeModelCode::AR15,
    ::oo_2_0::AircraftTypeModelCode::AR58,
    ::oo_2_0::AircraftTypeModelCode::ARA360,
    ::oo_2_0::AircraftTypeModelCode::ARGOSY,
    ::oo_2_0::AircraftTypeModelCode::ARL24,
    ::oo_2_0::AircraftTypeModelCode::AS1052,
    ::oo_2_0::AircraftTypeModelCode::AS2,
    ::oo_2_0::AircraftTypeModelCode::AS202,
    ::oo_2_0::AircraftTypeModelCode::AS2021,
    ::oo_2_0::AircraftTypeModelCode::AS2023,
    ::oo_2_0::AircraftTypeModelCode::AS300,
    ::oo_2_0::AircraftTypeModelCode::AS32L1,
    ::oo_2_0::AircraftTypeModelCode::AS32L2,
    ::oo_2_0::AircraftTypeModelCode::AS332,
    ::oo_2_0::AircraftTypeModelCode::AS332B,
    ::oo_2_0::AircraftTypeModelCode::AS332C,
    ::oo_2_0::AircraftTypeModelCode::AS332F,
    ::oo_2_0::AircraftTypeModelCode::AS332L,
    ::oo_2_0::AircraftTypeModelCode::AS332M,
    ::oo_2_0::AircraftTypeModelCode::AS332N,
    ::oo_2_0::AircraftTypeModelCode::AS332S,
    ::oo_2_0::AircraftTypeModelCode::AS350,
    ::oo_2_0::AircraftTypeModelCode::AS3502,
    ::oo_2_0::AircraftTypeModelCode::AS3503,
    ::oo_2_0::AircraftTypeModelCode::AS350B,
    ::oo_2_0::AircraftTypeModelCode::AS350C,
    ::oo_2_0::AircraftTypeModelCode::AS350D,
    ::oo_2_0::AircraftTypeModelCode::AS350E,
    ::oo_2_0::AircraftTypeModelCode::AS350F,
    ::oo_2_0::AircraftTypeModelCode::AS350L,
    ::oo_2_0::AircraftTypeModelCode::AS350M,
    ::oo_2_0::AircraftTypeModelCode::AS355,
    ::oo_2_0::AircraftTypeModelCode::AS3551,
    ::oo_2_0::AircraftTypeModelCode::AS355B,
    ::oo_2_0::AircraftTypeModelCode::AS355F,
    ::oo_2_0::AircraftTypeModelCode::AS355M,
    ::oo_2_0::AircraftTypeModelCode::AS365N,
    ::oo_2_0::AircraftTypeModelCode::AS366G,
    ::oo_2_0::AircraftTypeModelCode::AS532,
    ::oo_2_0::AircraftTypeModelCode::AS5321,
    ::oo_2_0::AircraftTypeModelCode::AS5322,
    ::oo_2_0::AircraftTypeModelCode::AS532C,
    ::oo_2_0::AircraftTypeModelCode::AS532H,
    ::oo_2_0::AircraftTypeModelCode::AS550,
    ::oo_2_0::AircraftTypeModelCode::AS555,
    ::oo_2_0::AircraftTypeModelCode::AS555A,
    ::oo_2_0::AircraftTypeModelCode::AS555U,
    ::oo_2_0::AircraftTypeModelCode::AS565,
    ::oo_2_0::AircraftTypeModelCode::AS565A,
    ::oo_2_0::AircraftTypeModelCode::AS565B,
    ::oo_2_0::AircraftTypeModelCode::AS565C,
    ::oo_2_0::AircraftTypeModelCode::AS565M,
    ::oo_2_0::AircraftTypeModelCode::AS565S,
    ::oo_2_0::AircraftTypeModelCode::AS565U,
    ::oo_2_0::AircraftTypeModelCode::AS61,
    ::oo_2_0::AircraftTypeModelCode::AS61A,
    ::oo_2_0::AircraftTypeModelCode::AS61N1,
    ::oo_2_0::AircraftTypeModelCode::AS61R,
    ::oo_2_0::AircraftTypeModelCode::AS61SK,
    ::oo_2_0::AircraftTypeModelCode::AS61TS,
    ::oo_2_0::AircraftTypeModelCode::AS6ISK,
    ::oo_2_0::AircraftTypeModelCode::AS6ITS,
    ::oo_2_0::AircraftTypeModelCode::AS80M2,
    ::oo_2_0::AircraftTypeModelCode::AS90M2,
    ::oo_2_0::AircraftTypeModelCode::ASTRA,
    ::oo_2_0::AircraftTypeModelCode::AT1150,
    ::oo_2_0::AircraftTypeModelCode::AT2000,
    ::oo_2_0::AircraftTypeModelCode::AT26,
    ::oo_2_0::AircraftTypeModelCode::AT28,
    ::oo_2_0::AircraftTypeModelCode::AT33,
    ::oo_2_0::AircraftTypeModelCode::AT37D,
    ::oo_2_0::AircraftTypeModelCode::AT38B,
    ::oo_2_0::AircraftTypeModelCode::AT401,
    ::oo_2_0::AircraftTypeModelCode::AT402,
    ::oo_2_0::AircraftTypeModelCode::AT502,
    ::oo_2_0::AircraftTypeModelCode::AT503,
    ::oo_2_0::AircraftTypeModelCode::AT50A2,
    ::oo_2_0::AircraftTypeModelCode::AT6G,
    ::oo_2_0::AircraftTypeModelCode::AT802,
    ::oo_2_0::AircraftTypeModelCode::ATL2,
    ::oo_2_0::AircraftTypeModelCode::ATLA,
    ::oo_2_0::AircraftTypeModelCode::ATR42,
    ::oo_2_0::AircraftTypeModelCode::ATR421,
    ::oo_2_0::AircraftTypeModelCode::ATR422,
    ::oo_2_0::AircraftTypeModelCode::ATR423,
    ::oo_2_0::AircraftTypeModelCode::ATR424,
    ::oo_2_0::AircraftTypeModelCode::ATR425,
    ::oo_2_0::AircraftTypeModelCode::ATR42F,
    ::oo_2_0::AircraftTypeModelCode::ATR42M,
    ::oo_2_0::AircraftTypeModelCode::ATR42S,
    ::oo_2_0::AircraftTypeModelCode::ATR52C,
    ::oo_2_0::AircraftTypeModelCode::ATR72,
    ::oo_2_0::AircraftTypeModelCode::ATR722,
    ::oo_2_0::AircraftTypeModelCode::ATTA30,
    ::oo_2_0::AircraftTypeModelCode::ATTC3,
    ::oo_2_0::AircraftTypeModelCode::ATTC3C,
    ::oo_2_0::AircraftTypeModelCode::AU23,
    ::oo_2_0::AircraftTypeModelCode::AU23A,
    ::oo_2_0::AircraftTypeModelCode::AU24,
    ::oo_2_0::AircraftTypeModelCode::AU24A,
    ::oo_2_0::AircraftTypeModelCode::AUH76,
    ::oo_2_0::AircraftTypeModelCode::AUR,
    ::oo_2_0::AircraftTypeModelCode::AV400A,
    ::oo_2_0::AircraftTypeModelCode::AV52,
    ::oo_2_0::AircraftTypeModelCode::AV8A,
    ::oo_2_0::AircraftTypeModelCode::AV8AA,
    ::oo_2_0::AircraftTypeModelCode::AV8B,
    ::oo_2_0::AircraftTypeModelCode::AV8B2,
    ::oo_2_0::AircraftTypeModelCode::AV8B2P,
    ::oo_2_0::AircraftTypeModelCode::AV8BAH,
    ::oo_2_0::AircraftTypeModelCode::AV8C,
    ::oo_2_0::AircraftTypeModelCode::AV8S,
    ::oo_2_0::AircraftTypeModelCode::AV8T4,
    ::oo_2_0::AircraftTypeModelCode::AVIA89,
    ::oo_2_0::AircraftTypeModelCode::AVIA90,
    ::oo_2_0::AircraftTypeModelCode::AVIA96,
    ::oo_2_0::AircraftTypeModelCode::AVIAA1,
    ::oo_2_0::AircraftTypeModelCode::AW1,
    ::oo_2_0::AircraftTypeModelCode::AW2,
    ::oo_2_0::AircraftTypeModelCode::AY600,
    ::oo_2_0::AircraftTypeModelCode::AY700,
    ::oo_2_0::AircraftTypeModelCode::AYLLM2,
    ::oo_2_0::AircraftTypeModelCode::AYLM20,
    ::oo_2_0::AircraftTypeModelCode::AYS2RG,
    ::oo_2_0::AircraftTypeModelCode::AZTEC,
    ::oo_2_0::AircraftTypeModelCode::B0108,
    ::oo_2_0::AircraftTypeModelCode::B1,
    ::oo_2_0::AircraftTypeModelCode::B100,
    ::oo_2_0::AircraftTypeModelCode::B105,
    ::oo_2_0::AircraftTypeModelCode::B111,
    ::oo_2_0::AircraftTypeModelCode::B1112,
    ::oo_2_0::AircraftTypeModelCode::B1113,
    ::oo_2_0::AircraftTypeModelCode::B1114,
    ::oo_2_0::AircraftTypeModelCode::B11147,
    ::oo_2_0::AircraftTypeModelCode::B1115,
    ::oo_2_0::AircraftTypeModelCode::B1B,
    ::oo_2_0::AircraftTypeModelCode::B2,
    ::oo_2_0::AircraftTypeModelCode::B200TM,
    ::oo_2_0::AircraftTypeModelCode::B214ST,
    ::oo_2_0::AircraftTypeModelCode::B25,
    ::oo_2_0::AircraftTypeModelCode::B26,
    ::oo_2_0::AircraftTypeModelCode::B2A,
    ::oo_2_0::AircraftTypeModelCode::B2SM,
    ::oo_2_0::AircraftTypeModelCode::B350,
    ::oo_2_0::AircraftTypeModelCode::B36TC,
    ::oo_2_0::AircraftTypeModelCode::B3LA,
    ::oo_2_0::AircraftTypeModelCode::B47,
    ::oo_2_0::AircraftTypeModelCode::B5,
    ::oo_2_0::AircraftTypeModelCode::B52,
    ::oo_2_0::AircraftTypeModelCode::B52G,
    ::oo_2_0::AircraftTypeModelCode::B52H,
    ::oo_2_0::AircraftTypeModelCode::B57,
    ::oo_2_0::AircraftTypeModelCode::B5BGL,
    ::oo_2_0::AircraftTypeModelCode::B66,
    ::oo_2_0::AircraftTypeModelCode::B707,
    ::oo_2_0::AircraftTypeModelCode::B70713,
    ::oo_2_0::AircraftTypeModelCode::B70732,
    ::oo_2_0::AircraftTypeModelCode::B707AM,
    ::oo_2_0::AircraftTypeModelCode::B707TT,
    ::oo_2_0::AircraftTypeModelCode::B720,
    ::oo_2_0::AircraftTypeModelCode::B720B,
    ::oo_2_0::AircraftTypeModelCode::B720M,
    ::oo_2_0::AircraftTypeModelCode::B720PH,
    ::oo_2_0::AircraftTypeModelCode::B727,
    ::oo_2_0::AircraftTypeModelCode::B72710,
    ::oo_2_0::AircraftTypeModelCode::B72720,
    ::oo_2_0::AircraftTypeModelCode::B737,
    ::oo_2_0::AircraftTypeModelCode::B73710,
    ::oo_2_0::AircraftTypeModelCode::B73712,
    ::oo_2_0::AircraftTypeModelCode::B73720,
    ::oo_2_0::AircraftTypeModelCode::B73730,
    ::oo_2_0::AircraftTypeModelCode::B73740,
    ::oo_2_0::AircraftTypeModelCode::B73750,
    ::oo_2_0::AircraftTypeModelCode::B73760,
    ::oo_2_0::AircraftTypeModelCode::B73770,
    ::oo_2_0::AircraftTypeModelCode::B73780,
    ::oo_2_0::AircraftTypeModelCode::B737AE,
    ::oo_2_0::AircraftTypeModelCode::B737S,
    ::oo_2_0::AircraftTypeModelCode::B747,
    ::oo_2_0::AircraftTypeModelCode::B74710,
    ::oo_2_0::AircraftTypeModelCode::B74720,
    ::oo_2_0::AircraftTypeModelCode::B74730,
    ::oo_2_0::AircraftTypeModelCode::B74740,
    ::oo_2_0::AircraftTypeModelCode::B7474F,
    ::oo_2_0::AircraftTypeModelCode::B747SP,
    ::oo_2_0::AircraftTypeModelCode::B75,
    ::oo_2_0::AircraftTypeModelCode::B757,
    ::oo_2_0::AircraftTypeModelCode::B75720,
    ::oo_2_0::AircraftTypeModelCode::B767,
    ::oo_2_0::AircraftTypeModelCode::B76710,
    ::oo_2_0::AircraftTypeModelCode::B76720,
    ::oo_2_0::AircraftTypeModelCode::B76730,
    ::oo_2_0::AircraftTypeModelCode::B7673T,
    ::oo_2_0::AircraftTypeModelCode::B76740,
    ::oo_2_0::AircraftTypeModelCode::B767AE,
    ::oo_2_0::AircraftTypeModelCode::B767TC,
    ::oo_2_0::AircraftTypeModelCode::B777,
    ::oo_2_0::AircraftTypeModelCode::B77720,
    ::oo_2_0::AircraftTypeModelCode::B77730,
    ::oo_2_0::AircraftTypeModelCode::BA1257,
    ::oo_2_0::AircraftTypeModelCode::BA1258,
    ::oo_2_0::AircraftTypeModelCode::BA125S,
    ::oo_2_0::AircraftTypeModelCode::BA14,
    ::oo_2_0::AircraftTypeModelCode::BA146,
    ::oo_2_0::AircraftTypeModelCode::BA1462,
    ::oo_2_0::AircraftTypeModelCode::BA146Q,
    ::oo_2_0::AircraftTypeModelCode::BA146S,
    ::oo_2_0::AircraftTypeModelCode::BA15,
    ::oo_2_0::AircraftTypeModelCode::BA2400,
    ::oo_2_0::AircraftTypeModelCode::BA2500,
    ::oo_2_0::AircraftTypeModelCode::BA748,
    ::oo_2_0::AircraftTypeModelCode::BAC111,
    ::oo_2_0::AircraftTypeModelCode::BAC145,
    ::oo_2_0::AircraftTypeModelCode::BAC167,
    ::oo_2_0::AircraftTypeModelCode::BAE125,
    ::oo_2_0::AircraftTypeModelCode::BAE146,
    ::oo_2_0::AircraftTypeModelCode::BAE748,
    ::oo_2_0::AircraftTypeModelCode::BAETRI,
    ::oo_2_0::AircraftTypeModelCode::BAEVIC,
    ::oo_2_0::AircraftTypeModelCode::BATP,
    ::oo_2_0::AircraftTypeModelCode::BC02,
    ::oo_2_0::AircraftTypeModelCode::BC114B,
    ::oo_2_0::AircraftTypeModelCode::BC17,
    ::oo_2_0::AircraftTypeModelCode::BC18L,
    ::oo_2_0::AircraftTypeModelCode::BC19,
    ::oo_2_0::AircraftTypeModelCode::BC190D,
    ::oo_2_0::AircraftTypeModelCode::BC200,
    ::oo_2_0::AircraftTypeModelCode::BC2000,
    ::oo_2_0::AircraftTypeModelCode::BC200A,
    ::oo_2_0::AircraftTypeModelCode::BC200B,
    ::oo_2_0::AircraftTypeModelCode::BC200C,
    ::oo_2_0::AircraftTypeModelCode::BC200D,
    ::oo_2_0::AircraftTypeModelCode::BC200E,
    ::oo_2_0::AircraftTypeModelCode::BC200F,
    ::oo_2_0::AircraftTypeModelCode::BC200G,
    ::oo_2_0::AircraftTypeModelCode::BC200H,
    ::oo_2_0::AircraftTypeModelCode::BC200K,
    ::oo_2_0::AircraftTypeModelCode::BC200L,
    ::oo_2_0::AircraftTypeModelCode::BC200M,
    ::oo_2_0::AircraftTypeModelCode::BC200N,
    ::oo_2_0::AircraftTypeModelCode::BC200P,
    ::oo_2_0::AircraftTypeModelCode::BC200Q,
    ::oo_2_0::AircraftTypeModelCode::BC200R,
    ::oo_2_0::AircraftTypeModelCode::BC200S,
    ::oo_2_0::AircraftTypeModelCode::BC200T,
    ::oo_2_0::AircraftTypeModelCode::BC20BC,
    ::oo_2_0::AircraftTypeModelCode::BC23,
    ::oo_2_0::AircraftTypeModelCode::BC24,
    ::oo_2_0::AircraftTypeModelCode::BC30,
    ::oo_2_0::AircraftTypeModelCode::BC30LW,
    ::oo_2_0::AircraftTypeModelCode::BC33,
    ::oo_2_0::AircraftTypeModelCode::BC33FA,
    ::oo_2_0::AircraftTypeModelCode::BC33FC,
    ::oo_2_0::AircraftTypeModelCode::BC33L,
    ::oo_2_0::AircraftTypeModelCode::BC35,
    ::oo_2_0::AircraftTypeModelCode::BC350,
    ::oo_2_0::AircraftTypeModelCode::BC35L,
    ::oo_2_0::AircraftTypeModelCode::BC35V,
    ::oo_2_0::AircraftTypeModelCode::BC36,
    ::oo_2_0::AircraftTypeModelCode::BC36A,
    ::oo_2_0::AircraftTypeModelCode::BC36AT,
    ::oo_2_0::AircraftTypeModelCode::BC36L,
    ::oo_2_0::AircraftTypeModelCode::BC36TC,
    ::oo_2_0::AircraftTypeModelCode::BC400,
    ::oo_2_0::AircraftTypeModelCode::BC400A,
    ::oo_2_0::AircraftTypeModelCode::BC50,
    ::oo_2_0::AircraftTypeModelCode::BC60,
    ::oo_2_0::AircraftTypeModelCode::BC65,
    ::oo_2_0::AircraftTypeModelCode::BC76,
    ::oo_2_0::AircraftTypeModelCode::BC77,
    ::oo_2_0::AircraftTypeModelCode::BC80,
    ::oo_2_0::AircraftTypeModelCode::BC88,
    ::oo_2_0::AircraftTypeModelCode::BC8S,
    ::oo_2_0::AircraftTypeModelCode::BC90,
    ::oo_2_0::AircraftTypeModelCode::BC90B,
    ::oo_2_0::AircraftTypeModelCode::BC90C,
    ::oo_2_0::AircraftTypeModelCode::BC90F,
    ::oo_2_0::AircraftTypeModelCode::BC90SE,
    ::oo_2_0::AircraftTypeModelCode::BC95,
    ::oo_2_0::AircraftTypeModelCode::BCQU80,
    ::oo_2_0::AircraftTypeModelCode::BCT42A,
    ::oo_2_0::AircraftTypeModelCode::BCT42B,
    ::oo_2_0::AircraftTypeModelCode::BCTWBE,
    ::oo_2_0::AircraftTypeModelCode::BCV35B,
    ::oo_2_0::AircraftTypeModelCode::BD10,
    ::oo_2_0::AircraftTypeModelCode::BD12,
    ::oo_2_0::AircraftTypeModelCode::BD700,
    ::oo_2_0::AircraftTypeModelCode::BE12,
    ::oo_2_0::AircraftTypeModelCode::BE205,
    ::oo_2_0::AircraftTypeModelCode::BE205B,
    ::oo_2_0::AircraftTypeModelCode::BE2063,
    ::oo_2_0::AircraftTypeModelCode::BE2064,
    ::oo_2_0::AircraftTypeModelCode::BE206A,
    ::oo_2_0::AircraftTypeModelCode::BE206B,
    ::oo_2_0::AircraftTypeModelCode::BE206G,
    ::oo_2_0::AircraftTypeModelCode::BE206L,
    ::oo_2_0::AircraftTypeModelCode::BE206T,
    ::oo_2_0::AircraftTypeModelCode::BE209,
    ::oo_2_0::AircraftTypeModelCode::BE209S,
    ::oo_2_0::AircraftTypeModelCode::BE212T,
    ::oo_2_0::AircraftTypeModelCode::BE230,
    ::oo_2_0::AircraftTypeModelCode::BE30,
    ::oo_2_0::AircraftTypeModelCode::BE300S,
    ::oo_2_0::AircraftTypeModelCode::BE407,
    ::oo_2_0::AircraftTypeModelCode::BE412,
    ::oo_2_0::AircraftTypeModelCode::BE412C,
    ::oo_2_0::AircraftTypeModelCode::BE42,
    ::oo_2_0::AircraftTypeModelCode::BE427,
    ::oo_2_0::AircraftTypeModelCode::BE430,
    ::oo_2_0::AircraftTypeModelCode::BE442,
    ::oo_2_0::AircraftTypeModelCode::BE45,
    ::oo_2_0::AircraftTypeModelCode::BE58,
    ::oo_2_0::AircraftTypeModelCode::BE6,
    ::oo_2_0::AircraftTypeModelCode::BE609,
    ::oo_2_0::AircraftTypeModelCode::BE620,
    ::oo_2_0::AircraftTypeModelCode::BE901,
    ::oo_2_0::AircraftTypeModelCode::BE99,
    ::oo_2_0::AircraftTypeModelCode::BEKIO,
    ::oo_2_0::AircraftTypeModelCode::BEKIOW,
    ::oo_2_0::AircraftTypeModelCode::BELL,
    ::oo_2_0::AircraftTypeModelCode::BEQU80,
    ::oo_2_0::AircraftTypeModelCode::BER,
    ::oo_2_0::AircraftTypeModelCode::BER103,
    ::oo_2_0::AircraftTypeModelCode::BER200,
    ::oo_2_0::AircraftTypeModelCode::BER32,
    ::oo_2_0::AircraftTypeModelCode::BER32K,
    ::oo_2_0::AircraftTypeModelCode::BER42,
    ::oo_2_0::AircraftTypeModelCode::BERA,
    ::oo_2_0::AircraftTypeModelCode::BERA45,
    ::oo_2_0::AircraftTypeModelCode::BERA50,
    ::oo_2_0::AircraftTypeModelCode::BERB,
    ::oo_2_0::AircraftTypeModelCode::BERC,
    ::oo_2_0::AircraftTypeModelCode::BERD,
    ::oo_2_0::AircraftTypeModelCode::BERE,
    ::oo_2_0::AircraftTypeModelCode::BERF,
    ::oo_2_0::AircraftTypeModelCode::BERG,
    ::oo_2_0::AircraftTypeModelCode::BERH,
    ::oo_2_0::AircraftTypeModelCode::BERJ,
    ::oo_2_0::AircraftTypeModelCode::BETA22,
    ::oo_2_0::AircraftTypeModelCode::BGCMOD,
    ::oo_2_0::AircraftTypeModelCode::BGL,
    ::oo_2_0::AircraftTypeModelCode::BGR,
    ::oo_2_0::AircraftTypeModelCode::BGRA,
    ::oo_2_0::AircraftTypeModelCode::BGRB,
    ::oo_2_0::AircraftTypeModelCode::BGRC,
    ::oo_2_0::AircraftTypeModelCode::BGRCMO,
    ::oo_2_0::AircraftTypeModelCode::BGRD,
    ::oo_2_0::AircraftTypeModelCode::BGRE,
    ::oo_2_0::AircraftTypeModelCode::BGRF,
    ::oo_2_0::AircraftTypeModelCode::BGRG,
    ::oo_2_0::AircraftTypeModelCode::BGRH,
    ::oo_2_0::AircraftTypeModelCode::BGRJ,
    ::oo_2_0::AircraftTypeModelCode::BGRK,
    ::oo_2_0::AircraftTypeModelCode::BGRL,
    ::oo_2_0::AircraftTypeModelCode::BH14,
    ::oo_2_0::AircraftTypeModelCode::BH22,
    ::oo_2_0::AircraftTypeModelCode::BHST,
    ::oo_2_0::AircraftTypeModelCode::BJT400,
    ::oo_2_0::AircraftTypeModelCode::BK117,
    ::oo_2_0::AircraftTypeModelCode::BK117B,
    ::oo_2_0::AircraftTypeModelCode::BK117C,
    ::oo_2_0::AircraftTypeModelCode::BK117M,
    ::oo_2_0::AircraftTypeModelCode::BK117P,
    ::oo_2_0::AircraftTypeModelCode::BKF,
    ::oo_2_0::AircraftTypeModelCode::BKFA,
    ::oo_2_0::AircraftTypeModelCode::BKFB,
    ::oo_2_0::AircraftTypeModelCode::BKFC,
    ::oo_2_0::AircraftTypeModelCode::BL14,
    ::oo_2_0::AircraftTypeModelCode::BL26,
    ::oo_2_0::AircraftTypeModelCode::BL28,
    ::oo_2_0::AircraftTypeModelCode::BL30,
    ::oo_2_0::AircraftTypeModelCode::BL31,
    ::oo_2_0::AircraftTypeModelCode::BLN,
    ::oo_2_0::AircraftTypeModelCode::BLNA,
    ::oo_2_0::AircraftTypeModelCode::BLNB,
    ::oo_2_0::AircraftTypeModelCode::BLNC,
    ::oo_2_0::AircraftTypeModelCode::BLNE,
    ::oo_2_0::AircraftTypeModelCode::BN2,
    ::oo_2_0::AircraftTypeModelCode::BN2A,
    ::oo_2_0::AircraftTypeModelCode::BN2A3,
    ::oo_2_0::AircraftTypeModelCode::BN2AB,
    ::oo_2_0::AircraftTypeModelCode::BN2AEW,
    ::oo_2_0::AircraftTypeModelCode::BN2ASW,
    ::oo_2_0::AircraftTypeModelCode::BN2B,
    ::oo_2_0::AircraftTypeModelCode::BN2BI,
    ::oo_2_0::AircraftTypeModelCode::BN2BM,
    ::oo_2_0::AircraftTypeModelCode::BN2T,
    ::oo_2_0::AircraftTypeModelCode::BN2T1S,
    ::oo_2_0::AircraftTypeModelCode::BN2T4R,
    ::oo_2_0::AircraftTypeModelCode::BN2T4S,
    ::oo_2_0::AircraftTypeModelCode::BN2TAL,
    ::oo_2_0::AircraftTypeModelCode::BN2TED,
    ::oo_2_0::AircraftTypeModelCode::BN2TI,
    ::oo_2_0::AircraftTypeModelCode::BN2TIS,
    ::oo_2_0::AircraftTypeModelCode::BN3,
    ::oo_2_0::AircraftTypeModelCode::BN4000,
    ::oo_2_0::AircraftTypeModelCode::BO105,
    ::oo_2_0::AircraftTypeModelCode::BO105C,
    ::oo_2_0::AircraftTypeModelCode::BO105D,
    ::oo_2_0::AircraftTypeModelCode::BO105L,
    ::oo_2_0::AircraftTypeModelCode::BO105M,
    ::oo_2_0::AircraftTypeModelCode::BO105P,
    ::oo_2_0::AircraftTypeModelCode::BO105T,
    ::oo_2_0::AircraftTypeModelCode::BO106,
    ::oo_2_0::AircraftTypeModelCode::BO108,
    ::oo_2_0::AircraftTypeModelCode::BO115,
    ::oo_2_0::AircraftTypeModelCode::BOE115,
    ::oo_2_0::AircraftTypeModelCode::BOE18P,
    ::oo_2_0::AircraftTypeModelCode::BOE18R,
    ::oo_2_0::AircraftTypeModelCode::BOP,
    ::oo_2_0::AircraftTypeModelCode::BOPAH,
    ::oo_2_0::AircraftTypeModelCode::BR1050,
    ::oo_2_0::AircraftTypeModelCode::BR1150,
    ::oo_2_0::AircraftTypeModelCode::BR31,
    ::oo_2_0::AircraftTypeModelCode::BRC707,
    ::oo_2_0::AircraftTypeModelCode::BRE,
    ::oo_2_0::AircraftTypeModelCode::BREA,
    ::oo_2_0::AircraftTypeModelCode::BREB,
    ::oo_2_0::AircraftTypeModelCode::BREC,
    ::oo_2_0::AircraftTypeModelCode::BRED,
    ::oo_2_0::AircraftTypeModelCode::BREE,
    ::oo_2_0::AircraftTypeModelCode::BRFT,
    ::oo_2_0::AircraftTypeModelCode::BRJ110,
    ::oo_2_0::AircraftTypeModelCode::BRJ115,
    ::oo_2_0::AircraftTypeModelCode::BRJ70,
    ::oo_2_0::AircraftTypeModelCode::BRJ85,
    ::oo_2_0::AircraftTypeModelCode::BRNG,
    ::oo_2_0::AircraftTypeModelCode::BSN,
    ::oo_2_0::AircraftTypeModelCode::BSNA,
    ::oo_2_0::AircraftTypeModelCode::BSNB,
    ::oo_2_0::AircraftTypeModelCode::BSNC,
    ::oo_2_0::AircraftTypeModelCode::BT10,
    ::oo_2_0::AircraftTypeModelCode::BT6S,
    ::oo_2_0::AircraftTypeModelCode::BU20,
    ::oo_2_0::AircraftTypeModelCode::BUC,
    ::oo_2_0::AircraftTypeModelCode::BUCMK2,
    ::oo_2_0::AircraftTypeModelCode::BULLAC,
    ::oo_2_0::AircraftTypeModelCode::BULMK1,
    ::oo_2_0::AircraftTypeModelCode::BULMK2,
    ::oo_2_0::AircraftTypeModelCode::BV234,
    ::oo_2_0::AircraftTypeModelCode::C020H,
    ::oo_2_0::AircraftTypeModelCode::C022B,
    ::oo_2_0::AircraftTypeModelCode::C0M500,
    ::oo_2_0::AircraftTypeModelCode::C0M600,
    ::oo_2_0::AircraftTypeModelCode::C101,
    ::oo_2_0::AircraftTypeModelCode::C101BB,
    ::oo_2_0::AircraftTypeModelCode::C101CC,
    ::oo_2_0::AircraftTypeModelCode::C101DD,
    ::oo_2_0::AircraftTypeModelCode::C101EB,
    ::oo_2_0::AircraftTypeModelCode::C118,
    ::oo_2_0::AircraftTypeModelCode::C118A,
    ::oo_2_0::AircraftTypeModelCode::C118B,
    ::oo_2_0::AircraftTypeModelCode::C119,
    ::oo_2_0::AircraftTypeModelCode::C119A,
    ::oo_2_0::AircraftTypeModelCode::C119G,
    ::oo_2_0::AircraftTypeModelCode::C119J,
    ::oo_2_0::AircraftTypeModelCode::C119JP,
    ::oo_2_0::AircraftTypeModelCode::C119RQ,
    ::oo_2_0::AircraftTypeModelCode::C12,
    ::oo_2_0::AircraftTypeModelCode::C120,
    ::oo_2_0::AircraftTypeModelCode::C121,
    ::oo_2_0::AircraftTypeModelCode::C121G,
    ::oo_2_0::AircraftTypeModelCode::C123,
    ::oo_2_0::AircraftTypeModelCode::C123B,
    ::oo_2_0::AircraftTypeModelCode::C123H,
    ::oo_2_0::AircraftTypeModelCode::C123J,
    ::oo_2_0::AircraftTypeModelCode::C123K,
    ::oo_2_0::AircraftTypeModelCode::C123L,
    ::oo_2_0::AircraftTypeModelCode::C123T,
    ::oo_2_0::AircraftTypeModelCode::C124,
    ::oo_2_0::AircraftTypeModelCode::C12A,
    ::oo_2_0::AircraftTypeModelCode::C12F,
    ::oo_2_0::AircraftTypeModelCode::C12FT,
    ::oo_2_0::AircraftTypeModelCode::C12J,
    ::oo_2_0::AircraftTypeModelCode::C130,
    ::oo_2_0::AircraftTypeModelCode::C130A,
    ::oo_2_0::AircraftTypeModelCode::C130B,
    ::oo_2_0::AircraftTypeModelCode::C130C,
    ::oo_2_0::AircraftTypeModelCode::C130D,
    ::oo_2_0::AircraftTypeModelCode::C130E,
    ::oo_2_0::AircraftTypeModelCode::C130F,
    ::oo_2_0::AircraftTypeModelCode::C130G,
    ::oo_2_0::AircraftTypeModelCode::C130H,
    ::oo_2_0::AircraftTypeModelCode::C130H3,
    ::oo_2_0::AircraftTypeModelCode::C130J,
    ::oo_2_0::AircraftTypeModelCode::C130J3,
    ::oo_2_0::AircraftTypeModelCode::C130K,
    ::oo_2_0::AircraftTypeModelCode::C130M,
    ::oo_2_0::AircraftTypeModelCode::C130MP,
    ::oo_2_0::AircraftTypeModelCode::C130N,
    ::oo_2_0::AircraftTypeModelCode::C130P,
    ::oo_2_0::AircraftTypeModelCode::C130T,
    ::oo_2_0::AircraftTypeModelCode::C131,
    ::oo_2_0::AircraftTypeModelCode::C131CO,
    ::oo_2_0::AircraftTypeModelCode::C131F,
    ::oo_2_0::AircraftTypeModelCode::C131G,
    ::oo_2_0::AircraftTypeModelCode::C131H,
    ::oo_2_0::AircraftTypeModelCode::C133,
    ::oo_2_0::AircraftTypeModelCode::C133A,
    ::oo_2_0::AircraftTypeModelCode::C135,
    ::oo_2_0::AircraftTypeModelCode::C135A,
    ::oo_2_0::AircraftTypeModelCode::C135B,
    ::oo_2_0::AircraftTypeModelCode::C135C,
    ::oo_2_0::AircraftTypeModelCode::C135E,
    ::oo_2_0::AircraftTypeModelCode::C135F,
    ::oo_2_0::AircraftTypeModelCode::C135FR,
    ::oo_2_0::AircraftTypeModelCode::C137B,
    ::oo_2_0::AircraftTypeModelCode::C137C,
    ::oo_2_0::AircraftTypeModelCode::C139A,
    ::oo_2_0::AircraftTypeModelCode::C13OF,
    ::oo_2_0::AircraftTypeModelCode::C14,
    ::oo_2_0::AircraftTypeModelCode::C140,
    ::oo_2_0::AircraftTypeModelCode::C140A,
    ::oo_2_0::AircraftTypeModelCode::C141,
    ::oo_2_0::AircraftTypeModelCode::C141B,
    ::oo_2_0::AircraftTypeModelCode::C141C,
    ::oo_2_0::AircraftTypeModelCode::C150,
    ::oo_2_0::AircraftTypeModelCode::C152,
    ::oo_2_0::AircraftTypeModelCode::C160,
    ::oo_2_0::AircraftTypeModelCode::C160AL,
    ::oo_2_0::AircraftTypeModelCode::C160AS,
    ::oo_2_0::AircraftTypeModelCode::C160F,
    ::oo_2_0::AircraftTypeModelCode::C160G,
    ::oo_2_0::AircraftTypeModelCode::C160H,
    ::oo_2_0::AircraftTypeModelCode::C160NG,
    ::oo_2_0::AircraftTypeModelCode::C17,
    ::oo_2_0::AircraftTypeModelCode::C170,
    ::oo_2_0::AircraftTypeModelCode::C175,
    ::oo_2_0::AircraftTypeModelCode::C177,
    ::oo_2_0::AircraftTypeModelCode::C17A,
    ::oo_2_0::AircraftTypeModelCode::C18,
    ::oo_2_0::AircraftTypeModelCode::C180,
    ::oo_2_0::AircraftTypeModelCode::C182,
    ::oo_2_0::AircraftTypeModelCode::C188,
    ::oo_2_0::AircraftTypeModelCode::C19,
    ::oo_2_0::AircraftTypeModelCode::C190,
    ::oo_2_0::AircraftTypeModelCode::C195,
    ::oo_2_0::AircraftTypeModelCode::C19A,
    ::oo_2_0::AircraftTypeModelCode::C1A,
    ::oo_2_0::AircraftTypeModelCode::C1K,
    ::oo_2_0::AircraftTypeModelCode::C1KAW,
    ::oo_2_0::AircraftTypeModelCode::C1PR,
    ::oo_2_0::AircraftTypeModelCode::C1S,
    ::oo_2_0::AircraftTypeModelCode::C1T,
    ::oo_2_0::AircraftTypeModelCode::C2,
    ::oo_2_0::AircraftTypeModelCode::C20,
    ::oo_2_0::AircraftTypeModelCode::C205,
    ::oo_2_0::AircraftTypeModelCode::C206,
    ::oo_2_0::AircraftTypeModelCode::C207,
    ::oo_2_0::AircraftTypeModelCode::C207A,
    ::oo_2_0::AircraftTypeModelCode::C208,
    ::oo_2_0::AircraftTypeModelCode::C208CA,
    ::oo_2_0::AircraftTypeModelCode::C20A,
    ::oo_2_0::AircraftTypeModelCode::C20B,
    ::oo_2_0::AircraftTypeModelCode::C20C,
    ::oo_2_0::AircraftTypeModelCode::C20D,
    ::oo_2_0::AircraftTypeModelCode::C20F,
    ::oo_2_0::AircraftTypeModelCode::C20G,
    ::oo_2_0::AircraftTypeModelCode::C20H,
    ::oo_2_0::AircraftTypeModelCode::C20S,
    ::oo_2_0::AircraftTypeModelCode::C21,
    ::oo_2_0::AircraftTypeModelCode::C210,
    ::oo_2_0::AircraftTypeModelCode::C212,
    ::oo_2_0::AircraftTypeModelCode::C2121M,
    ::oo_2_0::AircraftTypeModelCode::C2122M,
    ::oo_2_0::AircraftTypeModelCode::C2123D,
    ::oo_2_0::AircraftTypeModelCode::C2123E,
    ::oo_2_0::AircraftTypeModelCode::C2123M,
    ::oo_2_0::AircraftTypeModelCode::C2123P,
    ::oo_2_0::AircraftTypeModelCode::C21240,
    ::oo_2_0::AircraftTypeModelCode::C212A,
    ::oo_2_0::AircraftTypeModelCode::C212C,
    ::oo_2_0::AircraftTypeModelCode::C212M,
    ::oo_2_0::AircraftTypeModelCode::C212P,
    ::oo_2_0::AircraftTypeModelCode::C21A,
    ::oo_2_0::AircraftTypeModelCode::C22,
    ::oo_2_0::AircraftTypeModelCode::C223,
    ::oo_2_0::AircraftTypeModelCode::C22J,
    ::oo_2_0::AircraftTypeModelCode::C23,
    ::oo_2_0::AircraftTypeModelCode::C233,
    ::oo_2_0::AircraftTypeModelCode::C233FL,
    ::oo_2_0::AircraftTypeModelCode::C235,
    ::oo_2_0::AircraftTypeModelCode::C23A,
    ::oo_2_0::AircraftTypeModelCode::C23ASU,
    ::oo_2_0::AircraftTypeModelCode::C23SUN,
    ::oo_2_0::AircraftTypeModelCode::C26,
    ::oo_2_0::AircraftTypeModelCode::C26A,
    ::oo_2_0::AircraftTypeModelCode::C26B,
    ::oo_2_0::AircraftTypeModelCode::C27A,
    ::oo_2_0::AircraftTypeModelCode::C27J,
    ::oo_2_0::AircraftTypeModelCode::C295,
    ::oo_2_0::AircraftTypeModelCode::C29A,
    ::oo_2_0::AircraftTypeModelCode::C2A,
    ::oo_2_0::AircraftTypeModelCode::C3,
    ::oo_2_0::AircraftTypeModelCode::C303,
    ::oo_2_0::AircraftTypeModelCode::C320,
    ::oo_2_0::AircraftTypeModelCode::C32A,
    ::oo_2_0::AircraftTypeModelCode::C335,
    ::oo_2_0::AircraftTypeModelCode::C336,
    ::oo_2_0::AircraftTypeModelCode::C337,
    ::oo_2_0::AircraftTypeModelCode::C337G,
    ::oo_2_0::AircraftTypeModelCode::C340,
    ::oo_2_0::AircraftTypeModelCode::C3605,
    ::oo_2_0::AircraftTypeModelCode::C37A,
    ::oo_2_0::AircraftTypeModelCode::C38,
    ::oo_2_0::AircraftTypeModelCode::C38A,
    ::oo_2_0::AircraftTypeModelCode::C401,
    ::oo_2_0::AircraftTypeModelCode::C402,
    ::oo_2_0::AircraftTypeModelCode::C404,
    ::oo_2_0::AircraftTypeModelCode::C411,
    ::oo_2_0::AircraftTypeModelCode::C414,
    ::oo_2_0::AircraftTypeModelCode::C42,
    ::oo_2_0::AircraftTypeModelCode::C421,
    ::oo_2_0::AircraftTypeModelCode::C425,
    ::oo_2_0::AircraftTypeModelCode::C42R,
    ::oo_2_0::AircraftTypeModelCode::C441,
    ::oo_2_0::AircraftTypeModelCode::C45,
    ::oo_2_0::AircraftTypeModelCode::C46,
    ::oo_2_0::AircraftTypeModelCode::C461,
    ::oo_2_0::AircraftTypeModelCode::C46A,
    ::oo_2_0::AircraftTypeModelCode::C46FW,
    ::oo_2_0::AircraftTypeModelCode::C47,
    ::oo_2_0::AircraftTypeModelCode::C47A,
    ::oo_2_0::AircraftTypeModelCode::C47DC3,
    ::oo_2_0::AircraftTypeModelCode::C4M,
    ::oo_2_0::AircraftTypeModelCode::C5,
    ::oo_2_0::AircraftTypeModelCode::C500,
    ::oo_2_0::AircraftTypeModelCode::C501,
    ::oo_2_0::AircraftTypeModelCode::C501SP,
    ::oo_2_0::AircraftTypeModelCode::C54,
    ::oo_2_0::AircraftTypeModelCode::C54B,
    ::oo_2_0::AircraftTypeModelCode::C54D,
    ::oo_2_0::AircraftTypeModelCode::C550,
    ::oo_2_0::AircraftTypeModelCode::C553,
    ::oo_2_0::AircraftTypeModelCode::C560,
    ::oo_2_0::AircraftTypeModelCode::C5A,
    ::oo_2_0::AircraftTypeModelCode::C5B,
    ::oo_2_0::AircraftTypeModelCode::C5C,
    ::oo_2_0::AircraftTypeModelCode::C650,
    ::oo_2_0::AircraftTypeModelCode::C7,
    ::oo_2_0::AircraftTypeModelCode::C7A,
    ::oo_2_0::AircraftTypeModelCode::C7DASH,
    ::oo_2_0::AircraftTypeModelCode::C7KFIR,
    ::oo_2_0::AircraftTypeModelCode::C8,
    ::oo_2_0::AircraftTypeModelCode::C8A,
    ::oo_2_0::AircraftTypeModelCode::C9,
    ::oo_2_0::AircraftTypeModelCode::C91,
    ::oo_2_0::AircraftTypeModelCode::C95,
    ::oo_2_0::AircraftTypeModelCode::C95A,
    ::oo_2_0::AircraftTypeModelCode::C95MAR,
    ::oo_2_0::AircraftTypeModelCode::C97,
    ::oo_2_0::AircraftTypeModelCode::C99,
    ::oo_2_0::AircraftTypeModelCode::C9A,
    ::oo_2_0::AircraftTypeModelCode::C9B,
    ::oo_2_0::AircraftTypeModelCode::C9C,
    ::oo_2_0::AircraftTypeModelCode::CA1,
    ::oo_2_0::AircraftTypeModelCode::CA223A,
    ::oo_2_0::AircraftTypeModelCode::CA223K,
    ::oo_2_0::AircraftTypeModelCode::CA25,
    ::oo_2_0::AircraftTypeModelCode::CA25E,
    ::oo_2_0::AircraftTypeModelCode::CA25G,
    ::oo_2_0::AircraftTypeModelCode::CA25I,
    ::oo_2_0::AircraftTypeModelCode::CA25N,
    ::oo_2_0::AircraftTypeModelCode::CA61MA,
    ::oo_2_0::AircraftTypeModelCode::CA65,
    ::oo_2_0::AircraftTypeModelCode::CA65A,
    ::oo_2_0::AircraftTypeModelCode::CAL,
    ::oo_2_0::AircraftTypeModelCode::CALA,
    ::oo_2_0::AircraftTypeModelCode::CAM,
    ::oo_2_0::AircraftTypeModelCode::CAN215,
    ::oo_2_0::AircraftTypeModelCode::CANB2,
    ::oo_2_0::AircraftTypeModelCode::CANBER,
    ::oo_2_0::AircraftTypeModelCode::CANE13,
    ::oo_2_0::AircraftTypeModelCode::CANPR7,
    ::oo_2_0::AircraftTypeModelCode::CANPR9,
    ::oo_2_0::AircraftTypeModelCode::CANT17,
    ::oo_2_0::AircraftTypeModelCode::CANT1B,
    ::oo_2_0::AircraftTypeModelCode::CANT4,
    ::oo_2_0::AircraftTypeModelCode::CAP10,
    ::oo_2_0::AircraftTypeModelCode::CAP10B,
    ::oo_2_0::AircraftTypeModelCode::CAP231,
    ::oo_2_0::AircraftTypeModelCode::CAP232,
    ::oo_2_0::AircraftTypeModelCode::CASHA,
    ::oo_2_0::AircraftTypeModelCode::CAT,
    ::oo_2_0::AircraftTypeModelCode::CAYDEF,
    ::oo_2_0::AircraftTypeModelCode::CAYU,
    ::oo_2_0::AircraftTypeModelCode::CC108C,
    ::oo_2_0::AircraftTypeModelCode::CC109,
    ::oo_2_0::AircraftTypeModelCode::CC115,
    ::oo_2_0::AircraftTypeModelCode::CC117,
    ::oo_2_0::AircraftTypeModelCode::CC132D,
    ::oo_2_0::AircraftTypeModelCode::CC138,
    ::oo_2_0::AircraftTypeModelCode::CC142,
    ::oo_2_0::AircraftTypeModelCode::CC144,
    ::oo_2_0::AircraftTypeModelCode::CC3,
    ::oo_2_0::AircraftTypeModelCode::CCH,
    ::oo_2_0::AircraftTypeModelCode::CDR,
    ::oo_2_0::AircraftTypeModelCode::CDRA,
    ::oo_2_0::AircraftTypeModelCode::CE144A,
    ::oo_2_0::AircraftTypeModelCode::CE206,
    ::oo_2_0::AircraftTypeModelCode::CE208,
    ::oo_2_0::AircraftTypeModelCode::CE310,
    ::oo_2_0::AircraftTypeModelCode::CE337,
    ::oo_2_0::AircraftTypeModelCode::CE414A,
    ::oo_2_0::AircraftTypeModelCode::CE425,
    ::oo_2_0::AircraftTypeModelCode::CE441,
    ::oo_2_0::AircraftTypeModelCode::CE501,
    ::oo_2_0::AircraftTypeModelCode::CE525,
    ::oo_2_0::AircraftTypeModelCode::CE526,
    ::oo_2_0::AircraftTypeModelCode::CE550,
    ::oo_2_0::AircraftTypeModelCode::CE560,
    ::oo_2_0::AircraftTypeModelCode::CE560E,
    ::oo_2_0::AircraftTypeModelCode::CE650,
    ::oo_2_0::AircraftTypeModelCode::CE660,
    ::oo_2_0::AircraftTypeModelCode::CE670,
    ::oo_2_0::AircraftTypeModelCode::CE750,
    ::oo_2_0::AircraftTypeModelCode::CEAGH,
    ::oo_2_0::AircraftTypeModelCode::CEAGT,
    ::oo_2_0::AircraftTypeModelCode::CECON1,
    ::oo_2_0::AircraftTypeModelCode::CECON2,
    ::oo_2_0::AircraftTypeModelCode::CET41A,
    ::oo_2_0::AircraftTypeModelCode::CET41B,
    ::oo_2_0::AircraftTypeModelCode::CET41D,
    ::oo_2_0::AircraftTypeModelCode::CET47A,
    ::oo_2_0::AircraftTypeModelCode::CF00,
    ::oo_2_0::AircraftTypeModelCode::CF101,
    ::oo_2_0::AircraftTypeModelCode::CF104,
    ::oo_2_0::AircraftTypeModelCode::CF18,
    ::oo_2_0::AircraftTypeModelCode::CF18A,
    ::oo_2_0::AircraftTypeModelCode::CF18B,
    ::oo_2_0::AircraftTypeModelCode::CF5,
    ::oo_2_0::AircraftTypeModelCode::CF5A,
    ::oo_2_0::AircraftTypeModelCode::CF5D,
    ::oo_2_0::AircraftTypeModelCode::CF5F,
    ::oo_2_0::AircraftTypeModelCode::CG,
    ::oo_2_0::AircraftTypeModelCode::CH10,
    ::oo_2_0::AircraftTypeModelCode::CH113,
    ::oo_2_0::AircraftTypeModelCode::CH113A,
    ::oo_2_0::AircraftTypeModelCode::CH118,
    ::oo_2_0::AircraftTypeModelCode::CH124,
    ::oo_2_0::AircraftTypeModelCode::CH124B,
    ::oo_2_0::AircraftTypeModelCode::CH135,
    ::oo_2_0::AircraftTypeModelCode::CH135A,
    ::oo_2_0::AircraftTypeModelCode::CH135I,
    ::oo_2_0::AircraftTypeModelCode::CH136,
    ::oo_2_0::AircraftTypeModelCode::CH136J,
    ::oo_2_0::AircraftTypeModelCode::CH146,
    ::oo_2_0::AircraftTypeModelCode::CH147,
    ::oo_2_0::AircraftTypeModelCode::CH200,
    ::oo_2_0::AircraftTypeModelCode::CH2000,
    ::oo_2_0::AircraftTypeModelCode::CH250,
    ::oo_2_0::AircraftTypeModelCode::CH3,
    ::oo_2_0::AircraftTypeModelCode::CH34,
    ::oo_2_0::AircraftTypeModelCode::CH34A,
    ::oo_2_0::AircraftTypeModelCode::CH34D,
    ::oo_2_0::AircraftTypeModelCode::CH34SP,
    ::oo_2_0::AircraftTypeModelCode::CH37,
    ::oo_2_0::AircraftTypeModelCode::CH3E,
    ::oo_2_0::AircraftTypeModelCode::CH40,
    ::oo_2_0::AircraftTypeModelCode::CH46,
    ::oo_2_0::AircraftTypeModelCode::CH46A,
    ::oo_2_0::AircraftTypeModelCode::CH46D,
    ::oo_2_0::AircraftTypeModelCode::CH46E,
    ::oo_2_0::AircraftTypeModelCode::CH46F,
    ::oo_2_0::AircraftTypeModelCode::CH47,
    ::oo_2_0::AircraftTypeModelCode::CH47A,
    ::oo_2_0::AircraftTypeModelCode::CH47B,
    ::oo_2_0::AircraftTypeModelCode::CH47C,
    ::oo_2_0::AircraftTypeModelCode::CH47D,
    ::oo_2_0::AircraftTypeModelCode::CH47J,
    ::oo_2_0::AircraftTypeModelCode::CH47JA,
    ::oo_2_0::AircraftTypeModelCode::CH5,
    ::oo_2_0::AircraftTypeModelCode::CH50,
    ::oo_2_0::AircraftTypeModelCode::CH53,
    ::oo_2_0::AircraftTypeModelCode::CH53A,
    ::oo_2_0::AircraftTypeModelCode::CH53B,
    ::oo_2_0::AircraftTypeModelCode::CH53C,
    ::oo_2_0::AircraftTypeModelCode::CH53D,
    ::oo_2_0::AircraftTypeModelCode::CH53DG,
    ::oo_2_0::AircraftTypeModelCode::CH53E,
    ::oo_2_0::AircraftTypeModelCode::CH53ES,
    ::oo_2_0::AircraftTypeModelCode::CH53G,
    ::oo_2_0::AircraftTypeModelCode::CH54,
    ::oo_2_0::AircraftTypeModelCode::CH54A,
    ::oo_2_0::AircraftTypeModelCode::CH54B,
    ::oo_2_0::AircraftTypeModelCode::CH54LS,
    ::oo_2_0::AircraftTypeModelCode::CH54SC,
    ::oo_2_0::AircraftTypeModelCode::CH55,
    ::oo_2_0::AircraftTypeModelCode::CH601H,
    ::oo_2_0::AircraftTypeModelCode::CH601S,
    ::oo_2_0::AircraftTypeModelCode::CH7,
    ::oo_2_0::AircraftTypeModelCode::CH701,
    ::oo_2_0::AircraftTypeModelCode::CH8,
    ::oo_2_0::AircraftTypeModelCode::CH9,
    ::oo_2_0::AircraftTypeModelCode::CHALC,
    ::oo_2_0::AircraftTypeModelCode::CHE22,
    ::oo_2_0::AircraftTypeModelCode::CHE25,
    ::oo_2_0::AircraftTypeModelCode::CHEROK,
    ::oo_2_0::AircraftTypeModelCode::CHETA,
    ::oo_2_0::AircraftTypeModelCode::CHEY,
    ::oo_2_0::AircraftTypeModelCode::CHGZ11,
    ::oo_2_0::AircraftTypeModelCode::CHGZ8,
    ::oo_2_0::AircraftTypeModelCode::CHIEF,
    ::oo_2_0::AircraftTypeModelCode::CHIII,
    ::oo_2_0::AircraftTypeModelCode::CHIP,
    ::oo_2_0::AircraftTypeModelCode::CHK91,
    ::oo_2_0::AircraftTypeModelCode::CHKII,
    ::oo_2_0::AircraftTypeModelCode::CHKIII,
    ::oo_2_0::AircraftTypeModelCode::CHM1,
    ::oo_2_0::AircraftTypeModelCode::CJ5,
    ::oo_2_0::AircraftTypeModelCode::CJ6A,
    ::oo_2_0::AircraftTypeModelCode::CKP,
    ::oo_2_0::AircraftTypeModelCode::CL214,
    ::oo_2_0::AircraftTypeModelCode::CL215,
    ::oo_2_0::AircraftTypeModelCode::CL2156,
    ::oo_2_0::AircraftTypeModelCode::CL215T,
    ::oo_2_0::AircraftTypeModelCode::CL41,
    ::oo_2_0::AircraftTypeModelCode::CL415,
    ::oo_2_0::AircraftTypeModelCode::CL415M,
    ::oo_2_0::AircraftTypeModelCode::CL41G,
    ::oo_2_0::AircraftTypeModelCode::CL44,
    ::oo_2_0::AircraftTypeModelCode::CL600,
    ::oo_2_0::AircraftTypeModelCode::CL600C,
    ::oo_2_0::AircraftTypeModelCode::CL601,
    ::oo_2_0::AircraftTypeModelCode::CL601C,
    ::oo_2_0::AircraftTypeModelCode::CL604,
    ::oo_2_0::AircraftTypeModelCode::CL66,
    ::oo_2_0::AircraftTypeModelCode::CLD,
    ::oo_2_0::AircraftTypeModelCode::CLK,
    ::oo_2_0::AircraftTypeModelCode::CLKA,
    ::oo_2_0::AircraftTypeModelCode::CLN,
    ::oo_2_0::AircraftTypeModelCode::CLNA,
    ::oo_2_0::AircraftTypeModelCode::CLO,
    ::oo_2_0::AircraftTypeModelCode::CLR,
    ::oo_2_0::AircraftTypeModelCode::CLRA,
    ::oo_2_0::AircraftTypeModelCode::CLRB,
    ::oo_2_0::AircraftTypeModelCode::CLRC,
    ::oo_2_0::AircraftTypeModelCode::CLT,
    ::oo_2_0::AircraftTypeModelCode::CM170,
    ::oo_2_0::AircraftTypeModelCode::CM175,
    ::oo_2_0::AircraftTypeModelCode::CM48,
    ::oo_2_0::AircraftTypeModelCode::CMAU,
    ::oo_2_0::AircraftTypeModelCode::CMCLEO,
    ::oo_2_0::AircraftTypeModelCode::CMK1,
    ::oo_2_0::AircraftTypeModelCode::CMK3,
    ::oo_2_0::AircraftTypeModelCode::CMMK1,
    ::oo_2_0::AircraftTypeModelCode::CMMK2,
    ::oo_2_0::AircraftTypeModelCode::CMMK2E,
    ::oo_2_0::AircraftTypeModelCode::CMMK3,
    ::oo_2_0::AircraftTypeModelCode::CMMK4,
    ::oo_2_0::AircraftTypeModelCode::CMP,
    ::oo_2_0::AircraftTypeModelCode::CN235,
    ::oo_2_0::AircraftTypeModelCode::CN2351,
    ::oo_2_0::AircraftTypeModelCode::CN2352,
    ::oo_2_0::AircraftTypeModelCode::CN2353,
    ::oo_2_0::AircraftTypeModelCode::CN235A,
    ::oo_2_0::AircraftTypeModelCode::CN235M,
    ::oo_2_0::AircraftTypeModelCode::CN245,
    ::oo_2_0::AircraftTypeModelCode::CND,
    ::oo_2_0::AircraftTypeModelCode::CNDA,
    ::oo_2_0::AircraftTypeModelCode::CNDB,
    ::oo_2_0::AircraftTypeModelCode::CO114B,
    ::oo_2_0::AircraftTypeModelCode::CO681B,
    ::oo_2_0::AircraftTypeModelCode::CO685,
    ::oo_2_0::AircraftTypeModelCode::CO690,
    ::oo_2_0::AircraftTypeModelCode::COC,
    ::oo_2_0::AircraftTypeModelCode::COCH,
    ::oo_2_0::AircraftTypeModelCode::COD,
    ::oo_2_0::AircraftTypeModelCode::COK,
    ::oo_2_0::AircraftTypeModelCode::COM500,
    ::oo_2_0::AircraftTypeModelCode::COM560,
    ::oo_2_0::AircraftTypeModelCode::COM600,
    ::oo_2_0::AircraftTypeModelCode::COMAN,
    ::oo_2_0::AircraftTypeModelCode::COMM1,
    ::oo_2_0::AircraftTypeModelCode::COMM2A,
    ::oo_2_0::AircraftTypeModelCode::COMM3,
    ::oo_2_0::AircraftTypeModelCode::CON202,
    ::oo_2_0::AircraftTypeModelCode::CON303,
    ::oo_2_0::AircraftTypeModelCode::CON606,
    ::oo_2_0::AircraftTypeModelCode::CONF27,
    ::oo_2_0::AircraftTypeModelCode::CONTUR,
    ::oo_2_0::AircraftTypeModelCode::CORA,
    ::oo_2_0::AircraftTypeModelCode::COT,
    ::oo_2_0::AircraftTypeModelCode::COTA,
    ::oo_2_0::AircraftTypeModelCode::COTB,
    ::oo_2_0::AircraftTypeModelCode::COUMK1,
    ::oo_2_0::AircraftTypeModelCode::COUMK2,
    ::oo_2_0::AircraftTypeModelCode::COURS7,
    ::oo_2_0::AircraftTypeModelCode::CP121,
    ::oo_2_0::AircraftTypeModelCode::CP140,
    ::oo_2_0::AircraftTypeModelCode::CP140A,
    ::oo_2_0::AircraftTypeModelCode::CR100,
    ::oo_2_0::AircraftTypeModelCode::CR110,
    ::oo_2_0::AircraftTypeModelCode::CRT,
    ::oo_2_0::AircraftTypeModelCode::CRU,
    ::oo_2_0::AircraftTypeModelCode::CS2FA,
    ::oo_2_0::AircraftTypeModelCode::CSH,
    ::oo_2_0::AircraftTypeModelCode::CSH2,
    ::oo_2_0::AircraftTypeModelCode::CSHA,
    ::oo_2_0::AircraftTypeModelCode::CT114,
    ::oo_2_0::AircraftTypeModelCode::CT133,
    ::oo_2_0::AircraftTypeModelCode::CT134,
    ::oo_2_0::AircraftTypeModelCode::CT134A,
    ::oo_2_0::AircraftTypeModelCode::CT142,
    ::oo_2_0::AircraftTypeModelCode::CT33,
    ::oo_2_0::AircraftTypeModelCode::CT39,
    ::oo_2_0::AircraftTypeModelCode::CT39A,
    ::oo_2_0::AircraftTypeModelCode::CT39E,
    ::oo_2_0::AircraftTypeModelCode::CT39F,
    ::oo_2_0::AircraftTypeModelCode::CT39G,
    ::oo_2_0::AircraftTypeModelCode::CT4,
    ::oo_2_0::AircraftTypeModelCode::CT43A,
    ::oo_2_0::AircraftTypeModelCode::CT4A,
    ::oo_2_0::AircraftTypeModelCode::CT50,
    ::oo_2_0::AircraftTypeModelCode::CUB,
    ::oo_2_0::AircraftTypeModelCode::CUBA,
    ::oo_2_0::AircraftTypeModelCode::CUBB,
    ::oo_2_0::AircraftTypeModelCode::CUBC,
    ::oo_2_0::AircraftTypeModelCode::CUBD,
    ::oo_2_0::AircraftTypeModelCode::CUF,
    ::oo_2_0::AircraftTypeModelCode::CUR,
    ::oo_2_0::AircraftTypeModelCode::CURB,
    ::oo_2_0::AircraftTypeModelCode::CURLA,
    ::oo_2_0::AircraftTypeModelCode::CV13,
    ::oo_2_0::AircraftTypeModelCode::CV14,
    ::oo_2_0::AircraftTypeModelCode::CV22,
    ::oo_2_0::AircraftTypeModelCode::CV22A,
    ::oo_2_0::AircraftTypeModelCode::CV24,
    ::oo_2_0::AircraftTypeModelCode::CV34,
    ::oo_2_0::AircraftTypeModelCode::CV440,
    ::oo_2_0::AircraftTypeModelCode::CV580,
    ::oo_2_0::AircraftTypeModelCode::CV60,
    ::oo_2_0::AircraftTypeModelCode::CV64,
    ::oo_2_0::AircraftTypeModelCode::CV880,
    ::oo_2_0::AircraftTypeModelCode::CV99,
    ::oo_2_0::AircraftTypeModelCode::CX3,
    ::oo_2_0::AircraftTypeModelCode::CX3B,
    ::oo_2_0::AircraftTypeModelCode::CX3C,
    ::oo_2_0::AircraftTypeModelCode::CXX1,
    ::oo_2_0::AircraftTypeModelCode::CXX2,
    ::oo_2_0::AircraftTypeModelCode::D139,
    ::oo_2_0::AircraftTypeModelCode::D139P1,
    ::oo_2_0::AircraftTypeModelCode::D22811,
    ::oo_2_0::AircraftTypeModelCode::D22821,
    ::oo_2_0::AircraftTypeModelCode::D328,
    ::oo_2_0::AircraftTypeModelCode::D32810,
    ::oo_2_0::AircraftTypeModelCode::D32811,
    ::oo_2_0::AircraftTypeModelCode::D32812,
    ::oo_2_0::AircraftTypeModelCode::D32813,
    ::oo_2_0::AircraftTypeModelCode::D32821,
    ::oo_2_0::AircraftTypeModelCode::D32830,
    ::oo_2_0::AircraftTypeModelCode::D32850,
    ::oo_2_0::AircraftTypeModelCode::D32870,
    ::oo_2_0::AircraftTypeModelCode::DA01,
    ::oo_2_0::AircraftTypeModelCode::DA10,
    ::oo_2_0::AircraftTypeModelCode::DA20,
    ::oo_2_0::AircraftTypeModelCode::DA2000,
    ::oo_2_0::AircraftTypeModelCode::DA20A1,
    ::oo_2_0::AircraftTypeModelCode::DA20C1,
    ::oo_2_0::AircraftTypeModelCode::DA2A,
    ::oo_2_0::AircraftTypeModelCode::DA40,
    ::oo_2_0::AircraftTypeModelCode::DA50,
    ::oo_2_0::AircraftTypeModelCode::DALD4,
    ::oo_2_0::AircraftTypeModelCode::DAUPH,
    ::oo_2_0::AircraftTypeModelCode::DC10,
    ::oo_2_0::AircraftTypeModelCode::DC1015,
    ::oo_2_0::AircraftTypeModelCode::DC101C,
    ::oo_2_0::AircraftTypeModelCode::DC1030,
    ::oo_2_0::AircraftTypeModelCode::DC103C,
    ::oo_2_0::AircraftTypeModelCode::DC103F,
    ::oo_2_0::AircraftTypeModelCode::DC1040,
    ::oo_2_0::AircraftTypeModelCode::DC10CF,
    ::oo_2_0::AircraftTypeModelCode::DC114,
    ::oo_2_0::AircraftTypeModelCode::DC130,
    ::oo_2_0::AircraftTypeModelCode::DC130A,
    ::oo_2_0::AircraftTypeModelCode::DC130H,
    ::oo_2_0::AircraftTypeModelCode::DC3,
    ::oo_2_0::AircraftTypeModelCode::DC4,
    ::oo_2_0::AircraftTypeModelCode::DC6,
    ::oo_2_0::AircraftTypeModelCode::DC6B,
    ::oo_2_0::AircraftTypeModelCode::DC6C,
    ::oo_2_0::AircraftTypeModelCode::DC7,
    ::oo_2_0::AircraftTypeModelCode::DC7B,
    ::oo_2_0::AircraftTypeModelCode::DC8,
    ::oo_2_0::AircraftTypeModelCode::DC810,
    ::oo_2_0::AircraftTypeModelCode::DC820,
    ::oo_2_0::AircraftTypeModelCode::DC830,
    ::oo_2_0::AircraftTypeModelCode::DC843,
    ::oo_2_0::AircraftTypeModelCode::DC850,
    ::oo_2_0::AircraftTypeModelCode::DC854,
    ::oo_2_0::AircraftTypeModelCode::DC855,
    ::oo_2_0::AircraftTypeModelCode::DC860,
    ::oo_2_0::AircraftTypeModelCode::DC861,
    ::oo_2_0::AircraftTypeModelCode::DC862,
    ::oo_2_0::AircraftTypeModelCode::DC863,
    ::oo_2_0::AircraftTypeModelCode::DC870,
    ::oo_2_0::AircraftTypeModelCode::DC871,
    ::oo_2_0::AircraftTypeModelCode::DC873,
    ::oo_2_0::AircraftTypeModelCode::DC8F,
    ::oo_2_0::AircraftTypeModelCode::DC8SAR,
    ::oo_2_0::AircraftTypeModelCode::DC9,
    ::oo_2_0::AircraftTypeModelCode::DC910,
    ::oo_2_0::AircraftTypeModelCode::DC910M,
    ::oo_2_0::AircraftTypeModelCode::DC920,
    ::oo_2_0::AircraftTypeModelCode::DC930,
    ::oo_2_0::AircraftTypeModelCode::DC932,
    ::oo_2_0::AircraftTypeModelCode::DC940,
    ::oo_2_0::AircraftTypeModelCode::DC950,
    ::oo_2_0::AircraftTypeModelCode::DC951,
    ::oo_2_0::AircraftTypeModelCode::DC9F30,
    ::oo_2_0::AircraftTypeModelCode::DC9M,
    ::oo_2_0::AircraftTypeModelCode::DEDE2,
    ::oo_2_0::AircraftTypeModelCode::DELFIN,
    ::oo_2_0::AircraftTypeModelCode::DG14,
    ::oo_2_0::AircraftTypeModelCode::DH10,
    ::oo_2_0::AircraftTypeModelCode::DH114A,
    ::oo_2_0::AircraftTypeModelCode::DH114B,
    ::oo_2_0::AircraftTypeModelCode::DH2T,
    ::oo_2_0::AircraftTypeModelCode::DH60,
    ::oo_2_0::AircraftTypeModelCode::DH62,
    ::oo_2_0::AircraftTypeModelCode::DH64,
    ::oo_2_0::AircraftTypeModelCode::DH80,
    ::oo_2_0::AircraftTypeModelCode::DH82,
    ::oo_2_0::AircraftTypeModelCode::DH83,
    ::oo_2_0::AircraftTypeModelCode::DH87,
    ::oo_2_0::AircraftTypeModelCode::DH89,
    ::oo_2_0::AircraftTypeModelCode::DH98,
    ::oo_2_0::AircraftTypeModelCode::DHC1,
    ::oo_2_0::AircraftTypeModelCode::DHC1T1,
    ::oo_2_0::AircraftTypeModelCode::DHC1T3,
    ::oo_2_0::AircraftTypeModelCode::DHC2,
    ::oo_2_0::AircraftTypeModelCode::DHC2A2,
    ::oo_2_0::AircraftTypeModelCode::DHC2M3,
    ::oo_2_0::AircraftTypeModelCode::DHC3,
    ::oo_2_0::AircraftTypeModelCode::DHC3U1,
    ::oo_2_0::AircraftTypeModelCode::DHC4,
    ::oo_2_0::AircraftTypeModelCode::DHC4A,
    ::oo_2_0::AircraftTypeModelCode::DHC5,
    ::oo_2_0::AircraftTypeModelCode::DHC5D,
    ::oo_2_0::AircraftTypeModelCode::DHC5E,
    ::oo_2_0::AircraftTypeModelCode::DHC6,
    ::oo_2_0::AircraftTypeModelCode::DHC610,
    ::oo_2_0::AircraftTypeModelCode::DHC620,
    ::oo_2_0::AircraftTypeModelCode::DHC630,
    ::oo_2_0::AircraftTypeModelCode::DHC63M,
    ::oo_2_0::AircraftTypeModelCode::DHC63R,
    ::oo_2_0::AircraftTypeModelCode::DHC63S,
    ::oo_2_0::AircraftTypeModelCode::DHC7,
    ::oo_2_0::AircraftTypeModelCode::DHC7R,
    ::oo_2_0::AircraftTypeModelCode::DHC8,
    ::oo_2_0::AircraftTypeModelCode::DHC810,
    ::oo_2_0::AircraftTypeModelCode::DHC820,
    ::oo_2_0::AircraftTypeModelCode::DHC830,
    ::oo_2_0::AircraftTypeModelCode::DHC840,
    ::oo_2_0::AircraftTypeModelCode::DHC8M,
    ::oo_2_0::AircraftTypeModelCode::DHC8TR,
    ::oo_2_0::AircraftTypeModelCode::DHCAL2,
    ::oo_2_0::AircraftTypeModelCode::DHCCSR,
    ::oo_2_0::AircraftTypeModelCode::DHCT10,
    ::oo_2_0::AircraftTypeModelCode::DHCT30,
    ::oo_2_0::AircraftTypeModelCode::DINGO,
    ::oo_2_0::AircraftTypeModelCode::DK10D,
    ::oo_2_0::AircraftTypeModelCode::DO128,
    ::oo_2_0::AircraftTypeModelCode::DO1282,
    ::oo_2_0::AircraftTypeModelCode::DO1286,
    ::oo_2_0::AircraftTypeModelCode::DO228,
    ::oo_2_0::AircraftTypeModelCode::DO2281,
    ::oo_2_0::AircraftTypeModelCode::DO228A,
    ::oo_2_0::AircraftTypeModelCode::DO228B,
    ::oo_2_0::AircraftTypeModelCode::DO228C,
    ::oo_2_0::AircraftTypeModelCode::DO228D,
    ::oo_2_0::AircraftTypeModelCode::DO228M,
    ::oo_2_0::AircraftTypeModelCode::DO228P,
    ::oo_2_0::AircraftTypeModelCode::DO27,
    ::oo_2_0::AircraftTypeModelCode::DO28,
    ::oo_2_0::AircraftTypeModelCode::DO28D,
    ::oo_2_0::AircraftTypeModelCode::DO28D1,
    ::oo_2_0::AircraftTypeModelCode::DO28DT,
    ::oo_2_0::AircraftTypeModelCode::DO328,
    ::oo_2_0::AircraftTypeModelCode::DO328J,
    ::oo_2_0::AircraftTypeModelCode::DO528J,
    ::oo_2_0::AircraftTypeModelCode::DOAJ,
    ::oo_2_0::AircraftTypeModelCode::DOM,
    ::oo_2_0::AircraftTypeModelCode::DOMIN,
    ::oo_2_0::AircraftTypeModelCode::DP60,
    ::oo_2_0::AircraftTypeModelCode::DP6000,
    ::oo_2_0::AircraftTypeModelCode::DP800,
    ::oo_2_0::AircraftTypeModelCode::DPN,
    ::oo_2_0::AircraftTypeModelCode::DR400,
    ::oo_2_0::AircraftTypeModelCode::DR4001,
    ::oo_2_0::AircraftTypeModelCode::DR4006,
    ::oo_2_0::AircraftTypeModelCode::DR4012,
    ::oo_2_0::AircraftTypeModelCode::DR4016,
    ::oo_2_0::AircraftTypeModelCode::DR4018,
    ::oo_2_0::AircraftTypeModelCode::DR401R,
    ::oo_2_0::AircraftTypeModelCode::DR4020,
    ::oo_2_0::AircraftTypeModelCode::DR402R,
    ::oo_2_0::AircraftTypeModelCode::DSH,
    ::oo_2_0::AircraftTypeModelCode::DUB60,
    ::oo_2_0::AircraftTypeModelCode::DUBNA2,
    ::oo_2_0::AircraftTypeModelCode::DV20,
    ::oo_2_0::AircraftTypeModelCode::DV40,
    ::oo_2_0::AircraftTypeModelCode::E1S,
    ::oo_2_0::AircraftTypeModelCode::E2,
    ::oo_2_0::AircraftTypeModelCode::E25,
    ::oo_2_0::AircraftTypeModelCode::E26,
    ::oo_2_0::AircraftTypeModelCode::E2A,
    ::oo_2_0::AircraftTypeModelCode::E2B,
    ::oo_2_0::AircraftTypeModelCode::E2C,
    ::oo_2_0::AircraftTypeModelCode::E2EST,
    ::oo_2_0::AircraftTypeModelCode::E3,
    ::oo_2_0::AircraftTypeModelCode::E3A,
    ::oo_2_0::AircraftTypeModelCode::E3B,
    ::oo_2_0::AircraftTypeModelCode::E3C,
    ::oo_2_0::AircraftTypeModelCode::E3D,
    ::oo_2_0::AircraftTypeModelCode::E3DMK1,
    ::oo_2_0::AircraftTypeModelCode::E3F,
    ::oo_2_0::AircraftTypeModelCode::E3INT,
    ::oo_2_0::AircraftTypeModelCode::E3NTC,
    ::oo_2_0::AircraftTypeModelCode::E4,
    ::oo_2_0::AircraftTypeModelCode::E4A,
    ::oo_2_0::AircraftTypeModelCode::E4AN,
    ::oo_2_0::AircraftTypeModelCode::E4B,
    ::oo_2_0::AircraftTypeModelCode::E4BN,
    ::oo_2_0::AircraftTypeModelCode::E4TN,
    ::oo_2_0::AircraftTypeModelCode::E6,
    ::oo_2_0::AircraftTypeModelCode::E6A,
    ::oo_2_0::AircraftTypeModelCode::E6B,
    ::oo_2_0::AircraftTypeModelCode::E767,
    ::oo_2_0::AircraftTypeModelCode::E8,
    ::oo_2_0::AircraftTypeModelCode::E8A,
    ::oo_2_0::AircraftTypeModelCode::E8B,
    ::oo_2_0::AircraftTypeModelCode::E8C,
    ::oo_2_0::AircraftTypeModelCode::E8D,
    ::oo_2_0::AircraftTypeModelCode::E9A,
    ::oo_2_0::AircraftTypeModelCode::EA1KF,
    ::oo_2_0::AircraftTypeModelCode::EA3B,
    ::oo_2_0::AircraftTypeModelCode::EA4F,
    ::oo_2_0::AircraftTypeModelCode::EA4J,
    ::oo_2_0::AircraftTypeModelCode::EA6,
    ::oo_2_0::AircraftTypeModelCode::EA6A,
    ::oo_2_0::AircraftTypeModelCode::EA6B,
    ::oo_2_0::AircraftTypeModelCode::EA6I,
    ::oo_2_0::AircraftTypeModelCode::EA7L,
    ::oo_2_0::AircraftTypeModelCode::EA7OPT,
    ::oo_2_0::AircraftTypeModelCode::EAV8B,
    ::oo_2_0::AircraftTypeModelCode::EB57B,
    ::oo_2_0::AircraftTypeModelCode::EB66,
    ::oo_2_0::AircraftTypeModelCode::EC018D,
    ::oo_2_0::AircraftTypeModelCode::EC1,
    ::oo_2_0::AircraftTypeModelCode::EC120B,
    ::oo_2_0::AircraftTypeModelCode::EC121,
    ::oo_2_0::AircraftTypeModelCode::EC121K,
    ::oo_2_0::AircraftTypeModelCode::EC130,
    ::oo_2_0::AircraftTypeModelCode::EC130B,
    ::oo_2_0::AircraftTypeModelCode::EC130C,
    ::oo_2_0::AircraftTypeModelCode::EC130E,
    ::oo_2_0::AircraftTypeModelCode::EC130G,
    ::oo_2_0::AircraftTypeModelCode::EC130H,
    ::oo_2_0::AircraftTypeModelCode::EC130J,
    ::oo_2_0::AircraftTypeModelCode::EC130L,
    ::oo_2_0::AircraftTypeModelCode::EC130Q,
    ::oo_2_0::AircraftTypeModelCode::EC130V,
    ::oo_2_0::AircraftTypeModelCode::EC135,
    ::oo_2_0::AircraftTypeModelCode::EC135A,
    ::oo_2_0::AircraftTypeModelCode::EC135C,
    ::oo_2_0::AircraftTypeModelCode::EC135E,
    ::oo_2_0::AircraftTypeModelCode::EC135G,
    ::oo_2_0::AircraftTypeModelCode::EC135H,
    ::oo_2_0::AircraftTypeModelCode::EC135J,
    ::oo_2_0::AircraftTypeModelCode::EC135K,
    ::oo_2_0::AircraftTypeModelCode::EC135L,
    ::oo_2_0::AircraftTypeModelCode::EC135P,
    ::oo_2_0::AircraftTypeModelCode::EC135Y,
    ::oo_2_0::AircraftTypeModelCode::EC137D,
    ::oo_2_0::AircraftTypeModelCode::EC145,
    ::oo_2_0::AircraftTypeModelCode::EC165,
    ::oo_2_0::AircraftTypeModelCode::EC18,
    ::oo_2_0::AircraftTypeModelCode::EC18B,
    ::oo_2_0::AircraftTypeModelCode::EC18C,
    ::oo_2_0::AircraftTypeModelCode::EC18D,
    ::oo_2_0::AircraftTypeModelCode::EC24A,
    ::oo_2_0::AircraftTypeModelCode::EC35A,
    ::oo_2_0::AircraftTypeModelCode::EC635,
    ::oo_2_0::AircraftTypeModelCode::EC6CRI,
    ::oo_2_0::AircraftTypeModelCode::EC95,
    ::oo_2_0::AircraftTypeModelCode::ECSUP5,
    ::oo_2_0::AircraftTypeModelCode::ECURE,
    ::oo_2_0::AircraftTypeModelCode::EF111,
    ::oo_2_0::AircraftTypeModelCode::EF111A,
    ::oo_2_0::AircraftTypeModelCode::EF111G,
    ::oo_2_0::AircraftTypeModelCode::EF18A,
    ::oo_2_0::AircraftTypeModelCode::EF18B,
    ::oo_2_0::AircraftTypeModelCode::EF4,
    ::oo_2_0::AircraftTypeModelCode::EF4B,
    ::oo_2_0::AircraftTypeModelCode::EF4G,
    ::oo_2_0::AircraftTypeModelCode::EF4J,
    ::oo_2_0::AircraftTypeModelCode::EFA,
    ::oo_2_0::AircraftTypeModelCode::EH1,
    ::oo_2_0::AircraftTypeModelCode::EH101,
    ::oo_2_0::AircraftTypeModelCode::EH1011,
    ::oo_2_0::AircraftTypeModelCode::EH1012,
    ::oo_2_0::AircraftTypeModelCode::EH1013,
    ::oo_2_0::AircraftTypeModelCode::EH1014,
    ::oo_2_0::AircraftTypeModelCode::EH1015,
    ::oo_2_0::AircraftTypeModelCode::EH1H,
    ::oo_2_0::AircraftTypeModelCode::EH1X,
    ::oo_2_0::AircraftTypeModelCode::EH60,
    ::oo_2_0::AircraftTypeModelCode::EH60A,
    ::oo_2_0::AircraftTypeModelCode::EH60B,
    ::oo_2_0::AircraftTypeModelCode::EH60C,
    ::oo_2_0::AircraftTypeModelCode::EH60QF,
    ::oo_2_0::AircraftTypeModelCode::EH6DEF,
    ::oo_2_0::AircraftTypeModelCode::EKA3B,
    ::oo_2_0::AircraftTypeModelCode::ELITE,
    ::oo_2_0::AircraftTypeModelCode::EM110C,
    ::oo_2_0::AircraftTypeModelCode::EM111,
    ::oo_2_0::AircraftTypeModelCode::EM111A,
    ::oo_2_0::AircraftTypeModelCode::EM11P1,
    ::oo_2_0::AircraftTypeModelCode::EM11P2,
    ::oo_2_0::AircraftTypeModelCode::EM120,
    ::oo_2_0::AircraftTypeModelCode::EM1211,
    ::oo_2_0::AircraftTypeModelCode::EM121A,
    ::oo_2_0::AircraftTypeModelCode::EM135,
    ::oo_2_0::AircraftTypeModelCode::EM145,
    ::oo_2_0::AircraftTypeModelCode::EM145R,
    ::oo_2_0::AircraftTypeModelCode::EM145S,
    ::oo_2_0::AircraftTypeModelCode::EM170,
    ::oo_2_0::AircraftTypeModelCode::EM201,
    ::oo_2_0::AircraftTypeModelCode::EM312,
    ::oo_2_0::AircraftTypeModelCode::EM312F,
    ::oo_2_0::AircraftTypeModelCode::EM312H,
    ::oo_2_0::AircraftTypeModelCode::EM326G,
    ::oo_2_0::AircraftTypeModelCode::EM710,
    ::oo_2_0::AircraftTypeModelCode::EM711,
    ::oo_2_0::AircraftTypeModelCode::EM720D,
    ::oo_2_0::AircraftTypeModelCode::EM810,
    ::oo_2_0::AircraftTypeModelCode::EM810C,
    ::oo_2_0::AircraftTypeModelCode::EM810D,
    ::oo_2_0::AircraftTypeModelCode::EMB100,
    ::oo_2_0::AircraftTypeModelCode::EMB110,
    ::oo_2_0::AircraftTypeModelCode::EMB111,
    ::oo_2_0::AircraftTypeModelCode::EMB120,
    ::oo_2_0::AircraftTypeModelCode::EMB121,
    ::oo_2_0::AircraftTypeModelCode::EMB211,
    ::oo_2_0::AircraftTypeModelCode::EMB212,
    ::oo_2_0::AircraftTypeModelCode::EMB21A,
    ::oo_2_0::AircraftTypeModelCode::EMB312,
    ::oo_2_0::AircraftTypeModelCode::EMB326,
    ::oo_2_0::AircraftTypeModelCode::EMBRAC,
    ::oo_2_0::AircraftTypeModelCode::EMS312,
    ::oo_2_0::AircraftTypeModelCode::ENS28,
    ::oo_2_0::AircraftTypeModelCode::ENS28F,
    ::oo_2_0::AircraftTypeModelCode::ENS28L,
    ::oo_2_0::AircraftTypeModelCode::ENS480,
    ::oo_2_0::AircraftTypeModelCode::ENTH28,
    ::oo_2_0::AircraftTypeModelCode::EP2J,
    ::oo_2_0::AircraftTypeModelCode::EP3,
    ::oo_2_0::AircraftTypeModelCode::EP3A,
    ::oo_2_0::AircraftTypeModelCode::EP3B,
    ::oo_2_0::AircraftTypeModelCode::EP3E,
    ::oo_2_0::AircraftTypeModelCode::EP3J,
    ::oo_2_0::AircraftTypeModelCode::ERA3B,
    ::oo_2_0::AircraftTypeModelCode::ES2D,
    ::oo_2_0::AircraftTypeModelCode::ES3A,
    ::oo_2_0::AircraftTypeModelCode::ESQ,
    ::oo_2_0::AircraftTypeModelCode::ETE4MP,
    ::oo_2_0::AircraftTypeModelCode::ETEN4,
    ::oo_2_0::AircraftTypeModelCode::ETEN4M,
    ::oo_2_0::AircraftTypeModelCode::ETEN4P,
    ::oo_2_0::AircraftTypeModelCode::ETEND,
    ::oo_2_0::AircraftTypeModelCode::ETENDH,
    ::oo_2_0::AircraftTypeModelCode::ETENSU,
    ::oo_2_0::AircraftTypeModelCode::EUROFA,
    ::oo_2_0::AircraftTypeModelCode::EX200,
    ::oo_2_0::AircraftTypeModelCode::EX300,
    ::oo_2_0::AircraftTypeModelCode::EX400,
    ::oo_2_0::AircraftTypeModelCode::EXC,
    ::oo_2_0::AircraftTypeModelCode::EXEC90,
    ::oo_2_0::AircraftTypeModelCode::F02,
    ::oo_2_0::AircraftTypeModelCode::F10,
    ::oo_2_0::AircraftTypeModelCode::F100,
    ::oo_2_0::AircraftTypeModelCode::F100A,
    ::oo_2_0::AircraftTypeModelCode::F100D,
    ::oo_2_0::AircraftTypeModelCode::F100F,
    ::oo_2_0::AircraftTypeModelCode::F101G,
    ::oo_2_0::AircraftTypeModelCode::F102,
    ::oo_2_0::AircraftTypeModelCode::F104,
    ::oo_2_0::AircraftTypeModelCode::F104A,
    ::oo_2_0::AircraftTypeModelCode::F104B,
    ::oo_2_0::AircraftTypeModelCode::F104C,
    ::oo_2_0::AircraftTypeModelCode::F104CF,
    ::oo_2_0::AircraftTypeModelCode::F104D,
    ::oo_2_0::AircraftTypeModelCode::F104DJ,
    ::oo_2_0::AircraftTypeModelCode::F104F,
    ::oo_2_0::AircraftTypeModelCode::F104G,
    ::oo_2_0::AircraftTypeModelCode::F104J,
    ::oo_2_0::AircraftTypeModelCode::F104S,
    ::oo_2_0::AircraftTypeModelCode::F104SA,
    ::oo_2_0::AircraftTypeModelCode::F105,
    ::oo_2_0::AircraftTypeModelCode::F105G,
    ::oo_2_0::AircraftTypeModelCode::F106,
    ::oo_2_0::AircraftTypeModelCode::F106A,
    ::oo_2_0::AircraftTypeModelCode::F10J10,
    ::oo_2_0::AircraftTypeModelCode::F111,
    ::oo_2_0::AircraftTypeModelCode::F111A,
    ::oo_2_0::AircraftTypeModelCode::F111B,
    ::oo_2_0::AircraftTypeModelCode::F111C,
    ::oo_2_0::AircraftTypeModelCode::F111D,
    ::oo_2_0::AircraftTypeModelCode::F111E,
    ::oo_2_0::AircraftTypeModelCode::F111F,
    ::oo_2_0::AircraftTypeModelCode::F111G,
    ::oo_2_0::AircraftTypeModelCode::F111K,
    ::oo_2_0::AircraftTypeModelCode::F117,
    ::oo_2_0::AircraftTypeModelCode::F117A,
    ::oo_2_0::AircraftTypeModelCode::F12,
    ::oo_2_0::AircraftTypeModelCode::F1300N,
    ::oo_2_0::AircraftTypeModelCode::F14,
    ::oo_2_0::AircraftTypeModelCode::F14A,
    ::oo_2_0::AircraftTypeModelCode::F14AP,
    ::oo_2_0::AircraftTypeModelCode::F14B,
    ::oo_2_0::AircraftTypeModelCode::F14D,
    ::oo_2_0::AircraftTypeModelCode::F14MOD,
    ::oo_2_0::AircraftTypeModelCode::F15,
    ::oo_2_0::AircraftTypeModelCode::F15A,
    ::oo_2_0::AircraftTypeModelCode::F15B,
    ::oo_2_0::AircraftTypeModelCode::F15C,
    ::oo_2_0::AircraftTypeModelCode::F15D,
    ::oo_2_0::AircraftTypeModelCode::F15DJ,
    ::oo_2_0::AircraftTypeModelCode::F15E,
    ::oo_2_0::AircraftTypeModelCode::F15F,
    ::oo_2_0::AircraftTypeModelCode::F15I,
    ::oo_2_0::AircraftTypeModelCode::F15J,
    ::oo_2_0::AircraftTypeModelCode::F15S,
    ::oo_2_0::AircraftTypeModelCode::F16,
    ::oo_2_0::AircraftTypeModelCode::F16A,
    ::oo_2_0::AircraftTypeModelCode::F16B,
    ::oo_2_0::AircraftTypeModelCode::F16C,
    ::oo_2_0::AircraftTypeModelCode::F16CG,
    ::oo_2_0::AircraftTypeModelCode::F16CJ,
    ::oo_2_0::AircraftTypeModelCode::F16D,
    ::oo_2_0::AircraftTypeModelCode::F16ES,
    ::oo_2_0::AircraftTypeModelCode::F16N,
    ::oo_2_0::AircraftTypeModelCode::F18,
    ::oo_2_0::AircraftTypeModelCode::F18A,
    ::oo_2_0::AircraftTypeModelCode::F18B,
    ::oo_2_0::AircraftTypeModelCode::F18C,
    ::oo_2_0::AircraftTypeModelCode::F18D,
    ::oo_2_0::AircraftTypeModelCode::F18DRC,
    ::oo_2_0::AircraftTypeModelCode::F18E,
    ::oo_2_0::AircraftTypeModelCode::F18F,
    ::oo_2_0::AircraftTypeModelCode::F1HNTR,
    ::oo_2_0::AircraftTypeModelCode::F1MSI,
    ::oo_2_0::AircraftTypeModelCode::F2,
    ::oo_2_0::AircraftTypeModelCode::F21,
    ::oo_2_0::AircraftTypeModelCode::F22,
    ::oo_2_0::AircraftTypeModelCode::F220,
    ::oo_2_0::AircraftTypeModelCode::F220AI,
    ::oo_2_0::AircraftTypeModelCode::F222,
    ::oo_2_0::AircraftTypeModelCode::F22A,
    ::oo_2_0::AircraftTypeModelCode::F22B,
    ::oo_2_0::AircraftTypeModelCode::F22PHO,
    ::oo_2_0::AircraftTypeModelCode::F22PIN,
    ::oo_2_0::AircraftTypeModelCode::F22R,
    ::oo_2_0::AircraftTypeModelCode::F27,
    ::oo_2_0::AircraftTypeModelCode::F27100,
    ::oo_2_0::AircraftTypeModelCode::F27200,
    ::oo_2_0::AircraftTypeModelCode::F27300,
    ::oo_2_0::AircraftTypeModelCode::F27400,
    ::oo_2_0::AircraftTypeModelCode::F27500,
    ::oo_2_0::AircraftTypeModelCode::F27600,
    ::oo_2_0::AircraftTypeModelCode::F27A,
    ::oo_2_0::AircraftTypeModelCode::F27AV,
    ::oo_2_0::AircraftTypeModelCode::F27KB,
    ::oo_2_0::AircraftTypeModelCode::F27M,
    ::oo_2_0::AircraftTypeModelCode::F27M4M,
    ::oo_2_0::AircraftTypeModelCode::F27ME,
    ::oo_2_0::AircraftTypeModelCode::F27SEN,
    ::oo_2_0::AircraftTypeModelCode::F28,
    ::oo_2_0::AircraftTypeModelCode::F28100,
    ::oo_2_0::AircraftTypeModelCode::F2810C,
    ::oo_2_0::AircraftTypeModelCode::F28200,
    ::oo_2_0::AircraftTypeModelCode::F28300,
    ::oo_2_0::AircraftTypeModelCode::F28400,
    ::oo_2_0::AircraftTypeModelCode::F28F,
    ::oo_2_0::AircraftTypeModelCode::F28FP,
    ::oo_2_0::AircraftTypeModelCode::F28FX,
    ::oo_2_0::AircraftTypeModelCode::F2A,
    ::oo_2_0::AircraftTypeModelCode::F2LTNG,
    ::oo_2_0::AircraftTypeModelCode::F3,
    ::oo_2_0::AircraftTypeModelCode::F33,
    ::oo_2_0::AircraftTypeModelCode::F337,
    ::oo_2_0::AircraftTypeModelCode::F337F,
    ::oo_2_0::AircraftTypeModelCode::F33A,
    ::oo_2_0::AircraftTypeModelCode::F35,
    ::oo_2_0::AircraftTypeModelCode::F4,
    ::oo_2_0::AircraftTypeModelCode::F4062,
    ::oo_2_0::AircraftTypeModelCode::F406CA,
    ::oo_2_0::AircraftTypeModelCode::F42000,
    ::oo_2_0::AircraftTypeModelCode::F45A,
    ::oo_2_0::AircraftTypeModelCode::F45B,
    ::oo_2_0::AircraftTypeModelCode::F4A,
    ::oo_2_0::AircraftTypeModelCode::F4B,
    ::oo_2_0::AircraftTypeModelCode::F4C,
    ::oo_2_0::AircraftTypeModelCode::F4D,
    ::oo_2_0::AircraftTypeModelCode::F4E,
    ::oo_2_0::AircraftTypeModelCode::F4EJ,
    ::oo_2_0::AircraftTypeModelCode::F4EJK,
    ::oo_2_0::AircraftTypeModelCode::F4F,
    ::oo_2_0::AircraftTypeModelCode::F4G,
    ::oo_2_0::AircraftTypeModelCode::F4J,
    ::oo_2_0::AircraftTypeModelCode::F4K,
    ::oo_2_0::AircraftTypeModelCode::F4M,
    ::oo_2_0::AircraftTypeModelCode::F4N,
    ::oo_2_0::AircraftTypeModelCode::F4S,
    ::oo_2_0::AircraftTypeModelCode::F4X20,
    ::oo_2_0::AircraftTypeModelCode::F5,
    ::oo_2_0::AircraftTypeModelCode::F50,
    ::oo_2_0::AircraftTypeModelCode::F5A,
    ::oo_2_0::AircraftTypeModelCode::F5B,
    ::oo_2_0::AircraftTypeModelCode::F5C,
    ::oo_2_0::AircraftTypeModelCode::F5D,
    ::oo_2_0::AircraftTypeModelCode::F5E,
    ::oo_2_0::AircraftTypeModelCode::F5F,
    ::oo_2_0::AircraftTypeModelCode::F6,
    ::oo_2_0::AircraftTypeModelCode::F6FARM,
    ::oo_2_0::AircraftTypeModelCode::F7,
    ::oo_2_0::AircraftTypeModelCode::F7A,
    ::oo_2_0::AircraftTypeModelCode::F7B,
    ::oo_2_0::AircraftTypeModelCode::F7BS,
    ::oo_2_0::AircraftTypeModelCode::F7C,
    ::oo_2_0::AircraftTypeModelCode::F7M,
    ::oo_2_0::AircraftTypeModelCode::F7MG,
    ::oo_2_0::AircraftTypeModelCode::F7P,
    ::oo_2_0::AircraftTypeModelCode::F8,
    ::oo_2_0::AircraftTypeModelCode::F82,
    ::oo_2_0::AircraftTypeModelCode::F84,
    ::oo_2_0::AircraftTypeModelCode::F86F,
    ::oo_2_0::AircraftTypeModelCode::F86M32,
    ::oo_2_0::AircraftTypeModelCode::F8A,
    ::oo_2_0::AircraftTypeModelCode::F8CRUS,
    ::oo_2_0::AircraftTypeModelCode::F8E,
    ::oo_2_0::AircraftTypeModelCode::F8F,
    ::oo_2_0::AircraftTypeModelCode::F8FB,
    ::oo_2_0::AircraftTypeModelCode::F8FB2,
    ::oo_2_0::AircraftTypeModelCode::F8FISH,
    ::oo_2_0::AircraftTypeModelCode::F8H,
    ::oo_2_0::AircraftTypeModelCode::F8LFAL,
    ::oo_2_0::AircraftTypeModelCode::F9,
    ::oo_2_0::AircraftTypeModelCode::F9A,
    ::oo_2_0::AircraftTypeModelCode::F9CG,
    ::oo_2_0::AircraftTypeModelCode::FA18,
    ::oo_2_0::AircraftTypeModelCode::FA18A,
    ::oo_2_0::AircraftTypeModelCode::FA18B,
    ::oo_2_0::AircraftTypeModelCode::FA18C,
    ::oo_2_0::AircraftTypeModelCode::FA18D,
    ::oo_2_0::AircraftTypeModelCode::FA18L,
    ::oo_2_0::AircraftTypeModelCode::FA2,
    ::oo_2_0::AircraftTypeModelCode::FA20,
    ::oo_2_0::AircraftTypeModelCode::FA2050,
    ::oo_2_0::AircraftTypeModelCode::FA25,
    ::oo_2_0::AircraftTypeModelCode::FA3,
    ::oo_2_0::AircraftTypeModelCode::FA50,
    ::oo_2_0::AircraftTypeModelCode::FA62,
    ::oo_2_0::AircraftTypeModelCode::FA71,
    ::oo_2_0::AircraftTypeModelCode::FAG,
    ::oo_2_0::AircraftTypeModelCode::FAL10,
    ::oo_2_0::AircraftTypeModelCode::FAL100,
    ::oo_2_0::AircraftTypeModelCode::FAL10M,
    ::oo_2_0::AircraftTypeModelCode::FAL20,
    ::oo_2_0::AircraftTypeModelCode::FAL200,
    ::oo_2_0::AircraftTypeModelCode::FAL205,
    ::oo_2_0::AircraftTypeModelCode::FAL21,
    ::oo_2_0::AircraftTypeModelCode::FAL21M,
    ::oo_2_0::AircraftTypeModelCode::FAL2T,
    ::oo_2_0::AircraftTypeModelCode::FAL50,
    ::oo_2_0::AircraftTypeModelCode::FAL900,
    ::oo_2_0::AircraftTypeModelCode::FAL90B,
    ::oo_2_0::AircraftTypeModelCode::FAL90E,
    ::oo_2_0::AircraftTypeModelCode::FALCN,
    ::oo_2_0::AircraftTypeModelCode::FALCN1,
    ::oo_2_0::AircraftTypeModelCode::FALCN2,
    ::oo_2_0::AircraftTypeModelCode::FALCN5,
    ::oo_2_0::AircraftTypeModelCode::FALMYS,
    ::oo_2_0::AircraftTypeModelCode::FB111,
    ::oo_2_0::AircraftTypeModelCode::FB111A,
    ::oo_2_0::AircraftTypeModelCode::FB111G,
    ::oo_2_0::AircraftTypeModelCode::FBA2E,
    ::oo_2_0::AircraftTypeModelCode::FBD,
    ::oo_2_0::AircraftTypeModelCode::FBDA,
    ::oo_2_0::AircraftTypeModelCode::FBDB,
    ::oo_2_0::AircraftTypeModelCode::FBDC,
    ::oo_2_0::AircraftTypeModelCode::FBDD,
    ::oo_2_0::AircraftTypeModelCode::FBDE,
    ::oo_2_0::AircraftTypeModelCode::FBDF,
    ::oo_2_0::AircraftTypeModelCode::FBDH,
    ::oo_2_0::AircraftTypeModelCode::FBDJ,
    ::oo_2_0::AircraftTypeModelCode::FBDK,
    ::oo_2_0::AircraftTypeModelCode::FBDL,
    ::oo_2_0::AircraftTypeModelCode::FBDN,
    ::oo_2_0::AircraftTypeModelCode::FBR,
    ::oo_2_0::AircraftTypeModelCode::FBRA,
    ::oo_2_0::AircraftTypeModelCode::FBRB,
    ::oo_2_0::AircraftTypeModelCode::FCM,
    ::oo_2_0::AircraftTypeModelCode::FCMA,
    ::oo_2_0::AircraftTypeModelCode::FCMB,
    ::oo_2_0::AircraftTypeModelCode::FCMBAZ,
    ::oo_2_0::AircraftTypeModelCode::FCMC,
    ::oo_2_0::AircraftTypeModelCode::FCMD,
    ::oo_2_0::AircraftTypeModelCode::FDL,
    ::oo_2_0::AircraftTypeModelCode::FDLB,
    ::oo_2_0::AircraftTypeModelCode::FDLC,
    ::oo_2_0::AircraftTypeModelCode::FEN,
    ::oo_2_0::AircraftTypeModelCode::FENA,
    ::oo_2_0::AircraftTypeModelCode::FENB,
    ::oo_2_0::AircraftTypeModelCode::FENC,
    ::oo_2_0::AircraftTypeModelCode::FENCEF,
    ::oo_2_0::AircraftTypeModelCode::FEND,
    ::oo_2_0::AircraftTypeModelCode::FENE,
    ::oo_2_0::AircraftTypeModelCode::FG1,
    ::oo_2_0::AircraftTypeModelCode::FG1A,
    ::oo_2_0::AircraftTypeModelCode::FGA5,
    ::oo_2_0::AircraftTypeModelCode::FGA6,
    ::oo_2_0::AircraftTypeModelCode::FGA7A,
    ::oo_2_0::AircraftTypeModelCode::FGR2,
    ::oo_2_0::AircraftTypeModelCode::FH1100,
    ::oo_2_0::AircraftTypeModelCode::FH227,
    ::oo_2_0::AircraftTypeModelCode::FHD,
    ::oo_2_0::AircraftTypeModelCode::FICR,
    ::oo_2_0::AircraftTypeModelCode::FIREB,
    ::oo_2_0::AircraftTypeModelCode::FISHJX,
    ::oo_2_0::AircraftTypeModelCode::FIT,
    ::oo_2_0::AircraftTypeModelCode::FITA,
    ::oo_2_0::AircraftTypeModelCode::FITB,
    ::oo_2_0::AircraftTypeModelCode::FITC,
    ::oo_2_0::AircraftTypeModelCode::FITD,
    ::oo_2_0::AircraftTypeModelCode::FITE,
    ::oo_2_0::AircraftTypeModelCode::FITF,
    ::oo_2_0::AircraftTypeModelCode::FITG,
    ::oo_2_0::AircraftTypeModelCode::FITH,
    ::oo_2_0::AircraftTypeModelCode::FITJ,
    ::oo_2_0::AircraftTypeModelCode::FITK,
    ::oo_2_0::AircraftTypeModelCode::FK27,
    ::oo_2_0::AircraftTypeModelCode::FLANKK,
    ::oo_2_0::AircraftTypeModelCode::FLG,
    ::oo_2_0::AircraftTypeModelCode::FLGA,
    ::oo_2_0::AircraftTypeModelCode::FLGC,
    ::oo_2_0::AircraftTypeModelCode::FLGD,
    ::oo_2_0::AircraftTypeModelCode::FLGE,
    ::oo_2_0::AircraftTypeModelCode::FLGF,
    ::oo_2_0::AircraftTypeModelCode::FLGG,
    ::oo_2_0::AircraftTypeModelCode::FLK,
    ::oo_2_0::AircraftTypeModelCode::FLKA,
    ::oo_2_0::AircraftTypeModelCode::FLKB,
    ::oo_2_0::AircraftTypeModelCode::FLKC,
    ::oo_2_0::AircraftTypeModelCode::FLO,
    ::oo_2_0::AircraftTypeModelCode::FLOA,
    ::oo_2_0::AircraftTypeModelCode::FLOB,
    ::oo_2_0::AircraftTypeModelCode::FLOC,
    ::oo_2_0::AircraftTypeModelCode::FLOD,
    ::oo_2_0::AircraftTypeModelCode::FLOE,
    ::oo_2_0::AircraftTypeModelCode::FLOF,
    ::oo_2_0::AircraftTypeModelCode::FLOG,
    ::oo_2_0::AircraftTypeModelCode::FLOGA,
    ::oo_2_0::AircraftTypeModelCode::FLOGD,
    ::oo_2_0::AircraftTypeModelCode::FLOGJ,
    ::oo_2_0::AircraftTypeModelCode::FLOGJ2,
    ::oo_2_0::AircraftTypeModelCode::FLOH,
    ::oo_2_0::AircraftTypeModelCode::FLOJ,
    ::oo_2_0::AircraftTypeModelCode::FLOK,
    ::oo_2_0::AircraftTypeModelCode::FLT,
    ::oo_2_0::AircraftTypeModelCode::FLTMAS,
    ::oo_2_0::AircraftTypeModelCode::FMK2,
    ::oo_2_0::AircraftTypeModelCode::FMK3,
    ::oo_2_0::AircraftTypeModelCode::FMR,
    ::oo_2_0::AircraftTypeModelCode::FMRA,
    ::oo_2_0::AircraftTypeModelCode::FMRB,
    ::oo_2_0::AircraftTypeModelCode::FMRC,
    ::oo_2_0::AircraftTypeModelCode::FMRD,
    ::oo_2_0::AircraftTypeModelCode::FMRE,
    ::oo_2_0::AircraftTypeModelCode::FMRF,
    ::oo_2_0::AircraftTypeModelCode::FNB,
    ::oo_2_0::AircraftTypeModelCode::FOK13,
    ::oo_2_0::AircraftTypeModelCode::FOK50,
    ::oo_2_0::AircraftTypeModelCode::FOK50M,
    ::oo_2_0::AircraftTypeModelCode::FOK60,
    ::oo_2_0::AircraftTypeModelCode::FOK70,
    ::oo_2_0::AircraftTypeModelCode::FOKER,
    ::oo_2_0::AircraftTypeModelCode::FOR,
    ::oo_2_0::AircraftTypeModelCode::FORA,
    ::oo_2_0::AircraftTypeModelCode::FORB,
    ::oo_2_0::AircraftTypeModelCode::FOX,
    ::oo_2_0::AircraftTypeModelCode::FOXA,
    ::oo_2_0::AircraftTypeModelCode::FOXB,
    ::oo_2_0::AircraftTypeModelCode::FOXC,
    ::oo_2_0::AircraftTypeModelCode::FOXD,
    ::oo_2_0::AircraftTypeModelCode::FOXE,
    ::oo_2_0::AircraftTypeModelCode::FOXF,
    ::oo_2_0::AircraftTypeModelCode::FPT,
    ::oo_2_0::AircraftTypeModelCode::FR74S,
    ::oo_2_0::AircraftTypeModelCode::FRBI5,
    ::oo_2_0::AircraftTypeModelCode::FRE,
    ::oo_2_0::AircraftTypeModelCode::FREA,
    ::oo_2_0::AircraftTypeModelCode::FREB,
    ::oo_2_0::AircraftTypeModelCode::FREC,
    ::oo_2_0::AircraftTypeModelCode::FRED,
    ::oo_2_0::AircraftTypeModelCode::FREE,
    ::oo_2_0::AircraftTypeModelCode::FREEFI,
    ::oo_2_0::AircraftTypeModelCode::FREEST,
    ::oo_2_0::AircraftTypeModelCode::FRELON,
    ::oo_2_0::AircraftTypeModelCode::FRF,
    ::oo_2_0::AircraftTypeModelCode::FRFA,
    ::oo_2_0::AircraftTypeModelCode::FRFB,
    ::oo_2_0::AircraftTypeModelCode::FS1000,
    ::oo_2_0::AircraftTypeModelCode::FS3000,
    ::oo_2_0::AircraftTypeModelCode::FS4000,
    ::oo_2_0::AircraftTypeModelCode::FT337,
    ::oo_2_0::AircraftTypeModelCode::FT7,
    ::oo_2_0::AircraftTypeModelCode::FTB337,
    ::oo_2_0::AircraftTypeModelCode::FU2495,
    ::oo_2_0::AircraftTypeModelCode::FUJI,
    ::oo_2_0::AircraftTypeModelCode::FUL,
    ::oo_2_0::AircraftTypeModelCode::FXH,
    ::oo_2_0::AircraftTypeModelCode::FXHA,
    ::oo_2_0::AircraftTypeModelCode::FXHB,
    ::oo_2_0::AircraftTypeModelCode::G115HE,
    ::oo_2_0::AircraftTypeModelCode::G115TA,
    ::oo_2_0::AircraftTypeModelCode::G164,
    ::oo_2_0::AircraftTypeModelCode::G21,
    ::oo_2_0::AircraftTypeModelCode::G22228,
    ::oo_2_0::AircraftTypeModelCode::G222AL,
    ::oo_2_0::AircraftTypeModelCode::G222EC,
    ::oo_2_0::AircraftTypeModelCode::G222GE,
    ::oo_2_0::AircraftTypeModelCode::G222R,
    ::oo_2_0::AircraftTypeModelCode::G222RM,
    ::oo_2_0::AircraftTypeModelCode::G222SA,
    ::oo_2_0::AircraftTypeModelCode::G222T,
    ::oo_2_0::AircraftTypeModelCode::G222VA,
    ::oo_2_0::AircraftTypeModelCode::G222VS,
    ::oo_2_0::AircraftTypeModelCode::G28,
    ::oo_2_0::AircraftTypeModelCode::G2A,
    ::oo_2_0::AircraftTypeModelCode::G44,
    ::oo_2_0::AircraftTypeModelCode::G4SEAG,
    ::oo_2_0::AircraftTypeModelCode::G4SG,
    ::oo_2_0::AircraftTypeModelCode::G500,
    ::oo_2_0::AircraftTypeModelCode::G520,
    ::oo_2_0::AircraftTypeModelCode::G73,
    ::oo_2_0::AircraftTypeModelCode::G91,
    ::oo_2_0::AircraftTypeModelCode::G91R1,
    ::oo_2_0::AircraftTypeModelCode::G91R3,
    ::oo_2_0::AircraftTypeModelCode::G91R4,
    ::oo_2_0::AircraftTypeModelCode::G91SM,
    ::oo_2_0::AircraftTypeModelCode::G91T1,
    ::oo_2_0::AircraftTypeModelCode::G91T3,
    ::oo_2_0::AircraftTypeModelCode::G91Y,
    ::oo_2_0::AircraftTypeModelCode::G91YEH,
    ::oo_2_0::AircraftTypeModelCode::GA7,
    ::oo_2_0::AircraftTypeModelCode::GA84,
    ::oo_2_0::AircraftTypeModelCode::GABR,
    ::oo_2_0::AircraftTypeModelCode::GAJ,
    ::oo_2_0::AircraftTypeModelCode::GAK22,
    ::oo_2_0::AircraftTypeModelCode::GARD2,
    ::oo_2_0::AircraftTypeModelCode::GARD50,
    ::oo_2_0::AircraftTypeModelCode::GAT,
    ::oo_2_0::AircraftTypeModelCode::GAT23,
    ::oo_2_0::AircraftTypeModelCode::GAT24A,
    ::oo_2_0::AircraftTypeModelCode::GAT25,
    ::oo_2_0::AircraftTypeModelCode::GAT28,
    ::oo_2_0::AircraftTypeModelCode::GAT29,
    ::oo_2_0::AircraftTypeModelCode::GAT35,
    ::oo_2_0::AircraftTypeModelCode::GAT35A,
    ::oo_2_0::AircraftTypeModelCode::GAT36,
    ::oo_2_0::AircraftTypeModelCode::GAT54,
    ::oo_2_0::AircraftTypeModelCode::GAT55,
    ::oo_2_0::AircraftTypeModelCode::GATT1,
    ::oo_2_0::AircraftTypeModelCode::GATT1D,
    ::oo_2_0::AircraftTypeModelCode::GAV,
    ::oo_2_0::AircraftTypeModelCode::GC1,
    ::oo_2_0::AircraftTypeModelCode::GE6650,
    ::oo_2_0::AircraftTypeModelCode::GEN,
    ::oo_2_0::AircraftTypeModelCode::GF1,
    ::oo_2_0::AircraftTypeModelCode::GF200,
    ::oo_2_0::AircraftTypeModelCode::GF250,
    ::oo_2_0::AircraftTypeModelCode::GF300,
    ::oo_2_0::AircraftTypeModelCode::GF350,
    ::oo_2_0::AircraftTypeModelCode::GH125,
    ::oo_2_0::AircraftTypeModelCode::GHMC4,
    ::oo_2_0::AircraftTypeModelCode::GHTMK2,
    ::oo_2_0::AircraftTypeModelCode::GHTMK3,
    ::oo_2_0::AircraftTypeModelCode::GJSA30,
    ::oo_2_0::AircraftTypeModelCode::GLAS2S,
    ::oo_2_0::AircraftTypeModelCode::GLAS3,
    ::oo_2_0::AircraftTypeModelCode::GLASTA,
    ::oo_2_0::AircraftTypeModelCode::GLB,
    ::oo_2_0::AircraftTypeModelCode::GLOEX,
    ::oo_2_0::AircraftTypeModelCode::GM01,
    ::oo_2_0::AircraftTypeModelCode::GNAT,
    ::oo_2_0::AircraftTypeModelCode::GNAT1,
    ::oo_2_0::AircraftTypeModelCode::GNAT2,
    ::oo_2_0::AircraftTypeModelCode::GOAIRT,
    ::oo_2_0::AircraftTypeModelCode::GOM,
    ::oo_2_0::AircraftTypeModelCode::GR1,
    ::oo_2_0::AircraftTypeModelCode::GR1A,
    ::oo_2_0::AircraftTypeModelCode::GR1J,
    ::oo_2_0::AircraftTypeModelCode::GR3,
    ::oo_2_0::AircraftTypeModelCode::GR4,
    ::oo_2_0::AircraftTypeModelCode::GR4A,
    ::oo_2_0::AircraftTypeModelCode::GR5,
    ::oo_2_0::AircraftTypeModelCode::GR7,
    ::oo_2_0::AircraftTypeModelCode::GRMK1,
    ::oo_2_0::AircraftTypeModelCode::GUL2B,
    ::oo_2_0::AircraftTypeModelCode::GUL4B,
    ::oo_2_0::AircraftTypeModelCode::GUL4MP,
    ::oo_2_0::AircraftTypeModelCode::GUL4SP,
    ::oo_2_0::AircraftTypeModelCode::GUL5,
    ::oo_2_0::AircraftTypeModelCode::GULI,
    ::oo_2_0::AircraftTypeModelCode::GULII,
    ::oo_2_0::AircraftTypeModelCode::GULIII,
    ::oo_2_0::AircraftTypeModelCode::GULIV,
    ::oo_2_0::AircraftTypeModelCode::H13,
    ::oo_2_0::AircraftTypeModelCode::H16E,
    ::oo_2_0::AircraftTypeModelCode::H16M1,
    ::oo_2_0::AircraftTypeModelCode::H19,
    ::oo_2_0::AircraftTypeModelCode::H23A,
    ::oo_2_0::AircraftTypeModelCode::H2X,
    ::oo_2_0::AircraftTypeModelCode::H3,
    ::oo_2_0::AircraftTypeModelCode::H34,
    ::oo_2_0::AircraftTypeModelCode::H36,
    ::oo_2_0::AircraftTypeModelCode::H37,
    ::oo_2_0::AircraftTypeModelCode::H5,
    ::oo_2_0::AircraftTypeModelCode::H500,
    ::oo_2_0::AircraftTypeModelCode::H500C,
    ::oo_2_0::AircraftTypeModelCode::H500D,
    ::oo_2_0::AircraftTypeModelCode::H500E,
    ::oo_2_0::AircraftTypeModelCode::H500F,
    ::oo_2_0::AircraftTypeModelCode::H500M,
    ::oo_2_0::AircraftTypeModelCode::H500MD,
    ::oo_2_0::AircraftTypeModelCode::H500ME,
    ::oo_2_0::AircraftTypeModelCode::H53E,
    ::oo_2_0::AircraftTypeModelCode::H57,
    ::oo_2_0::AircraftTypeModelCode::H5BGL,
    ::oo_2_0::AircraftTypeModelCode::H5HAR,
    ::oo_2_0::AircraftTypeModelCode::H6,
    ::oo_2_0::AircraftTypeModelCode::H7,
    ::oo_2_0::AircraftTypeModelCode::H7482B,
    ::oo_2_0::AircraftTypeModelCode::H74B,
    ::oo_2_0::AircraftTypeModelCode::H76,
    ::oo_2_0::AircraftTypeModelCode::H76N,
    ::oo_2_0::AircraftTypeModelCode::H76SIK,
    ::oo_2_0::AircraftTypeModelCode::HA1ESQ,
    ::oo_2_0::AircraftTypeModelCode::HA200,
    ::oo_2_0::AircraftTypeModelCode::HAB205,
    ::oo_2_0::AircraftTypeModelCode::HAK100,
    ::oo_2_0::AircraftTypeModelCode::HAK200,
    ::oo_2_0::AircraftTypeModelCode::HAK50,
    ::oo_2_0::AircraftTypeModelCode::HAK60,
    ::oo_2_0::AircraftTypeModelCode::HAKT1A,
    ::oo_2_0::AircraftTypeModelCode::HAKT1W,
    ::oo_2_0::AircraftTypeModelCode::HAKTM1,
    ::oo_2_0::AircraftTypeModelCode::HALSHA,
    ::oo_2_0::AircraftTypeModelCode::HANSA2,
    ::oo_2_0::AircraftTypeModelCode::HANSA3,
    ::oo_2_0::AircraftTypeModelCode::HAR,
    ::oo_2_0::AircraftTypeModelCode::HAR10,
    ::oo_2_0::AircraftTypeModelCode::HARBH5,
    ::oo_2_0::AircraftTypeModelCode::HARBZ5,
    ::oo_2_0::AircraftTypeModelCode::HARGM3,
    ::oo_2_0::AircraftTypeModelCode::HARGM4,
    ::oo_2_0::AircraftTypeModelCode::HARII,
    ::oo_2_0::AircraftTypeModelCode::HARIIP,
    ::oo_2_0::AircraftTypeModelCode::HARKEB,
    ::oo_2_0::AircraftTypeModelCode::HARTM6,
    ::oo_2_0::AircraftTypeModelCode::HARV,
    ::oo_2_0::AircraftTypeModelCode::HAS1,
    ::oo_2_0::AircraftTypeModelCode::HAS2,
    ::oo_2_0::AircraftTypeModelCode::HAS3,
    ::oo_2_0::AircraftTypeModelCode::HAS31B,
    ::oo_2_0::AircraftTypeModelCode::HAS3L,
    ::oo_2_0::AircraftTypeModelCode::HAS4L,
    ::oo_2_0::AircraftTypeModelCode::HASMK2,
    ::oo_2_0::AircraftTypeModelCode::HASMK5,
    ::oo_2_0::AircraftTypeModelCode::HASMK6,
    ::oo_2_0::AircraftTypeModelCode::HASMK8,
    ::oo_2_0::AircraftTypeModelCode::HAT21,
    ::oo_2_0::AircraftTypeModelCode::HAW100,
    ::oo_2_0::AircraftTypeModelCode::HAW400,
    ::oo_2_0::AircraftTypeModelCode::HAW80,
    ::oo_2_0::AircraftTypeModelCode::HAW80F,
    ::oo_2_0::AircraftTypeModelCode::HAW80M,
    ::oo_2_0::AircraftTypeModelCode::HAW80R,
    ::oo_2_0::AircraftTypeModelCode::HAW80S,
    ::oo_2_0::AircraftTypeModelCode::HAW80X,
    ::oo_2_0::AircraftTypeModelCode::HAW8SM,
    ::oo_2_0::AircraftTypeModelCode::HAZ,
    ::oo_2_0::AircraftTypeModelCode::HAZA,
    ::oo_2_0::AircraftTypeModelCode::HAZAPL,
    ::oo_2_0::AircraftTypeModelCode::HAZB,
    ::oo_2_0::AircraftTypeModelCode::HAZBT,
    ::oo_2_0::AircraftTypeModelCode::HAZCPS,
    ::oo_2_0::AircraftTypeModelCode::HB207,
    ::oo_2_0::AircraftTypeModelCode::HB315B,
    ::oo_2_0::AircraftTypeModelCode::HB315G,
    ::oo_2_0::AircraftTypeModelCode::HB315L,
    ::oo_2_0::AircraftTypeModelCode::HB350,
    ::oo_2_0::AircraftTypeModelCode::HB350B,
    ::oo_2_0::AircraftTypeModelCode::HB355F,
    ::oo_2_0::AircraftTypeModelCode::HB35B1,
    ::oo_2_0::AircraftTypeModelCode::HB42,
    ::oo_2_0::AircraftTypeModelCode::HB43,
    ::oo_2_0::AircraftTypeModelCode::HC1,
    ::oo_2_0::AircraftTypeModelCode::HC130,
    ::oo_2_0::AircraftTypeModelCode::HC130B,
    ::oo_2_0::AircraftTypeModelCode::HC130E,
    ::oo_2_0::AircraftTypeModelCode::HC130H,
    ::oo_2_0::AircraftTypeModelCode::HC130N,
    ::oo_2_0::AircraftTypeModelCode::HC130P,
    ::oo_2_0::AircraftTypeModelCode::HC131A,
    ::oo_2_0::AircraftTypeModelCode::HC2,
    ::oo_2_0::AircraftTypeModelCode::HC7,
    ::oo_2_0::AircraftTypeModelCode::HCC2,
    ::oo_2_0::AircraftTypeModelCode::HCC412,
    ::oo_2_0::AircraftTypeModelCode::HCM3,
    ::oo_2_0::AircraftTypeModelCode::HCMK1,
    ::oo_2_0::AircraftTypeModelCode::HCMK1K,
    ::oo_2_0::AircraftTypeModelCode::HCMK3,
    ::oo_2_0::AircraftTypeModelCode::HCMK4,
    ::oo_2_0::AircraftTypeModelCode::HCMK5,
    ::oo_2_0::AircraftTypeModelCode::HD21,
    ::oo_2_0::AircraftTypeModelCode::HE1,
    ::oo_2_0::AircraftTypeModelCode::HE4,
    ::oo_2_0::AircraftTypeModelCode::HEB320,
    ::oo_2_0::AircraftTypeModelCode::HEL,
    ::oo_2_0::AircraftTypeModelCode::HERON,
    ::oo_2_0::AircraftTypeModelCode::HF24,
    ::oo_2_0::AircraftTypeModelCode::HF241T,
    ::oo_2_0::AircraftTypeModelCode::HF24M1,
    ::oo_2_0::AircraftTypeModelCode::HF24MT,
    ::oo_2_0::AircraftTypeModelCode::HFB320,
    ::oo_2_0::AircraftTypeModelCode::HGRM1,
    ::oo_2_0::AircraftTypeModelCode::HGRM1A,
    ::oo_2_0::AircraftTypeModelCode::HGRM3,
    ::oo_2_0::AircraftTypeModelCode::HGRM5,
    ::oo_2_0::AircraftTypeModelCode::HGRM7,
    ::oo_2_0::AircraftTypeModelCode::HH1,
    ::oo_2_0::AircraftTypeModelCode::HH1H,
    ::oo_2_0::AircraftTypeModelCode::HH1K,
    ::oo_2_0::AircraftTypeModelCode::HH1SAR,
    ::oo_2_0::AircraftTypeModelCode::HH2,
    ::oo_2_0::AircraftTypeModelCode::HH25A,
    ::oo_2_0::AircraftTypeModelCode::HH2D,
    ::oo_2_0::AircraftTypeModelCode::HH3APL,
    ::oo_2_0::AircraftTypeModelCode::HH3ASR,
    ::oo_2_0::AircraftTypeModelCode::HH3E,
    ::oo_2_0::AircraftTypeModelCode::HH3SAR,
    ::oo_2_0::AircraftTypeModelCode::HH4,
    ::oo_2_0::AircraftTypeModelCode::HH42,
    ::oo_2_0::AircraftTypeModelCode::HH42B,
    ::oo_2_0::AircraftTypeModelCode::HH43F,
    ::oo_2_0::AircraftTypeModelCode::HH46,
    ::oo_2_0::AircraftTypeModelCode::HH46A,
    ::oo_2_0::AircraftTypeModelCode::HH52,
    ::oo_2_0::AircraftTypeModelCode::HH52A,
    ::oo_2_0::AircraftTypeModelCode::HH52AS,
    ::oo_2_0::AircraftTypeModelCode::HH52S,
    ::oo_2_0::AircraftTypeModelCode::HH53,
    ::oo_2_0::AircraftTypeModelCode::HH53A,
    ::oo_2_0::AircraftTypeModelCode::HH53B,
    ::oo_2_0::AircraftTypeModelCode::HH53C,
    ::oo_2_0::AircraftTypeModelCode::HH53E,
    ::oo_2_0::AircraftTypeModelCode::HH53H,
    ::oo_2_0::AircraftTypeModelCode::HH60A,
    ::oo_2_0::AircraftTypeModelCode::HH60D,
    ::oo_2_0::AircraftTypeModelCode::HH60G,
    ::oo_2_0::AircraftTypeModelCode::HH60H,
    ::oo_2_0::AircraftTypeModelCode::HH60J,
    ::oo_2_0::AircraftTypeModelCode::HH60JA,
    ::oo_2_0::AircraftTypeModelCode::HH65,
    ::oo_2_0::AircraftTypeModelCode::HH65II,
    ::oo_2_0::AircraftTypeModelCode::HIINF,
    ::oo_2_0::AircraftTypeModelCode::HIN,
    ::oo_2_0::AircraftTypeModelCode::HINA,
    ::oo_2_0::AircraftTypeModelCode::HINB,
    ::oo_2_0::AircraftTypeModelCode::HINC,
    ::oo_2_0::AircraftTypeModelCode::HIND,
    ::oo_2_0::AircraftTypeModelCode::HINE,
    ::oo_2_0::AircraftTypeModelCode::HINF,
    ::oo_2_0::AircraftTypeModelCode::HING2,
    ::oo_2_0::AircraftTypeModelCode::HINR,
    ::oo_2_0::AircraftTypeModelCode::HINW,
    ::oo_2_0::AircraftTypeModelCode::HIP,
    ::oo_2_0::AircraftTypeModelCode::HIPA,
    ::oo_2_0::AircraftTypeModelCode::HIPB,
    ::oo_2_0::AircraftTypeModelCode::HIPC,
    ::oo_2_0::AircraftTypeModelCode::HIPD,
    ::oo_2_0::AircraftTypeModelCode::HIPE,
    ::oo_2_0::AircraftTypeModelCode::HIPF,
    ::oo_2_0::AircraftTypeModelCode::HIPG,
    ::oo_2_0::AircraftTypeModelCode::HIPH,
    ::oo_2_0::AircraftTypeModelCode::HIPJ,
    ::oo_2_0::AircraftTypeModelCode::HIPJ1,
    ::oo_2_0::AircraftTypeModelCode::HIPK,
    ::oo_2_0::AircraftTypeModelCode::HIPK1,
    ::oo_2_0::AircraftTypeModelCode::HIPK17,
    ::oo_2_0::AircraftTypeModelCode::HJ5,
    ::oo_2_0::AircraftTypeModelCode::HJT161,
    ::oo_2_0::AircraftTypeModelCode::HJT162,
    ::oo_2_0::AircraftTypeModelCode::HKM,
    ::oo_2_0::AircraftTypeModelCode::HKMA,
    ::oo_2_0::AircraftTypeModelCode::HKP10,
    ::oo_2_0::AircraftTypeModelCode::HKP2,
    ::oo_2_0::AircraftTypeModelCode::HKP2II,
    ::oo_2_0::AircraftTypeModelCode::HKP3,
    ::oo_2_0::AircraftTypeModelCode::HKP4,
    ::oo_2_0::AircraftTypeModelCode::HKP5,
    ::oo_2_0::AircraftTypeModelCode::HKP6,
    ::oo_2_0::AircraftTypeModelCode::HKP7,
    ::oo_2_0::AircraftTypeModelCode::HLX,
    ::oo_2_0::AircraftTypeModelCode::HLXA,
    ::oo_2_0::AircraftTypeModelCode::HLXB,
    ::oo_2_0::AircraftTypeModelCode::HLXC,
    ::oo_2_0::AircraftTypeModelCode::HLXD,
    ::oo_2_0::AircraftTypeModelCode::HM1,
    ::oo_2_0::AircraftTypeModelCode::HN32,
    ::oo_2_0::AircraftTypeModelCode::HN433,
    ::oo_2_0::AircraftTypeModelCode::HN600,
    ::oo_2_0::AircraftTypeModelCode::HND,
    ::oo_2_0::AircraftTypeModelCode::HNDA,
    ::oo_2_0::AircraftTypeModelCode::HNDB,
    ::oo_2_0::AircraftTypeModelCode::HNDC,
    ::oo_2_0::AircraftTypeModelCode::HNDP,
    ::oo_2_0::AircraftTypeModelCode::HOD,
    ::oo_2_0::AircraftTypeModelCode::HODA,
    ::oo_2_0::AircraftTypeModelCode::HODB,
    ::oo_2_0::AircraftTypeModelCode::HOFH40,
    ::oo_2_0::AircraftTypeModelCode::HOK,
    ::oo_2_0::AircraftTypeModelCode::HOKA,
    ::oo_2_0::AircraftTypeModelCode::HOKB,
    ::oo_2_0::AircraftTypeModelCode::HOKC,
    ::oo_2_0::AircraftTypeModelCode::HOM,
    ::oo_2_0::AircraftTypeModelCode::HOP,
    ::oo_2_0::AircraftTypeModelCode::HOR,
    ::oo_2_0::AircraftTypeModelCode::HORA,
    ::oo_2_0::AircraftTypeModelCode::HORB,
    ::oo_2_0::AircraftTypeModelCode::HORC,
    ::oo_2_0::AircraftTypeModelCode::HP,
    ::oo_2_0::AircraftTypeModelCode::HP13,
    ::oo_2_0::AircraftTypeModelCode::HPT32,
    ::oo_2_0::AircraftTypeModelCode::HR55,
    ::oo_2_0::AircraftTypeModelCode::HRK,
    ::oo_2_0::AircraftTypeModelCode::HRKA,
    ::oo_2_0::AircraftTypeModelCode::HRKB,
    ::oo_2_0::AircraftTypeModelCode::HRKKB,
    ::oo_2_0::AircraftTypeModelCode::HS1182,
    ::oo_2_0::AircraftTypeModelCode::HS125,
    ::oo_2_0::AircraftTypeModelCode::HS1254,
    ::oo_2_0::AircraftTypeModelCode::HS1256,
    ::oo_2_0::AircraftTypeModelCode::HS1257,
    ::oo_2_0::AircraftTypeModelCode::HS1258,
    ::oo_2_0::AircraftTypeModelCode::HS146,
    ::oo_2_0::AircraftTypeModelCode::HS1462,
    ::oo_2_0::AircraftTypeModelCode::HS25,
    ::oo_2_0::AircraftTypeModelCode::HS650,
    ::oo_2_0::AircraftTypeModelCode::HS748,
    ::oo_2_0::AircraftTypeModelCode::HS7481,
    ::oo_2_0::AircraftTypeModelCode::HS7482,
    ::oo_2_0::AircraftTypeModelCode::HS7483,
    ::oo_2_0::AircraftTypeModelCode::HS748A,
    ::oo_2_0::AircraftTypeModelCode::HS748C,
    ::oo_2_0::AircraftTypeModelCode::HS801M,
    ::oo_2_0::AircraftTypeModelCode::HT17,
    ::oo_2_0::AircraftTypeModelCode::HTM1,
    ::oo_2_0::AircraftTypeModelCode::HTMK10,
    ::oo_2_0::AircraftTypeModelCode::HTMK2,
    ::oo_2_0::AircraftTypeModelCode::HTMK2A,
    ::oo_2_0::AircraftTypeModelCode::HTMK4,
    ::oo_2_0::AircraftTypeModelCode::HTMK4A,
    ::oo_2_0::AircraftTypeModelCode::HTMK4N,
    ::oo_2_0::AircraftTypeModelCode::HTT34,
    ::oo_2_0::AircraftTypeModelCode::HU16,
    ::oo_2_0::AircraftTypeModelCode::HU16B,
    ::oo_2_0::AircraftTypeModelCode::HU16C,
    ::oo_2_0::AircraftTypeModelCode::HU16E,
    ::oo_2_0::AircraftTypeModelCode::HU25,
    ::oo_2_0::AircraftTypeModelCode::HU25A,
    ::oo_2_0::AircraftTypeModelCode::HU25B,
    ::oo_2_0::AircraftTypeModelCode::HU25C,
    ::oo_2_0::AircraftTypeModelCode::HU2PET,
    ::oo_2_0::AircraftTypeModelCode::HU300C,
    ::oo_2_0::AircraftTypeModelCode::HU5,
    ::oo_2_0::AircraftTypeModelCode::HUG269,
    ::oo_2_0::AircraftTypeModelCode::HUG300,
    ::oo_2_0::AircraftTypeModelCode::HUG369,
    ::oo_2_0::AircraftTypeModelCode::HUG500,
    ::oo_2_0::AircraftTypeModelCode::HUNT8M,
    ::oo_2_0::AircraftTypeModelCode::HUNTER,
    ::oo_2_0::AircraftTypeModelCode::HUS1A,
    ::oo_2_0::AircraftTypeModelCode::HVC,
    ::oo_2_0::AircraftTypeModelCode::HVCA,
    ::oo_2_0::AircraftTypeModelCode::HW5,
    ::oo_2_0::AircraftTypeModelCode::HYDRO2,
    ::oo_2_0::AircraftTypeModelCode::I1123,
    ::oo_2_0::AircraftTypeModelCode::I1124,
    ::oo_2_0::AircraftTypeModelCode::I1L,
    ::oo_2_0::AircraftTypeModelCode::I22,
    ::oo_2_0::AircraftTypeModelCode::I23,
    ::oo_2_0::AircraftTypeModelCode::IA101,
    ::oo_2_0::AircraftTypeModelCode::IA1123,
    ::oo_2_0::AircraftTypeModelCode::IA1124,
    ::oo_2_0::AircraftTypeModelCode::IA1125,
    ::oo_2_0::AircraftTypeModelCode::IA202,
    ::oo_2_0::AircraftTypeModelCode::IA316B,
    ::oo_2_0::AircraftTypeModelCode::IA330,
    ::oo_2_0::AircraftTypeModelCode::IA35,
    ::oo_2_0::AircraftTypeModelCode::IA50,
    ::oo_2_0::AircraftTypeModelCode::IA58,
    ::oo_2_0::AircraftTypeModelCode::IA58A,
    ::oo_2_0::AircraftTypeModelCode::IA58B,
    ::oo_2_0::AircraftTypeModelCode::IA63,
    ::oo_2_0::AircraftTypeModelCode::IA66,
    ::oo_2_0::AircraftTypeModelCode::IAI,
    ::oo_2_0::AircraftTypeModelCode::IAI201,
    ::oo_2_0::AircraftTypeModelCode::IAIGAL,
    ::oo_2_0::AircraftTypeModelCode::IAK52,
    ::oo_2_0::AircraftTypeModelCode::IAR109,
    ::oo_2_0::AircraftTypeModelCode::IAR28M,
    ::oo_2_0::AircraftTypeModelCode::IAR316,
    ::oo_2_0::AircraftTypeModelCode::IAR317,
    ::oo_2_0::AircraftTypeModelCode::IAR330,
    ::oo_2_0::AircraftTypeModelCode::IAR33L,
    ::oo_2_0::AircraftTypeModelCode::IAR46,
    ::oo_2_0::AircraftTypeModelCode::IAR705,
    ::oo_2_0::AircraftTypeModelCode::IAR823,
    ::oo_2_0::AircraftTypeModelCode::IAR825,
    ::oo_2_0::AircraftTypeModelCode::IAR831,
    ::oo_2_0::AircraftTypeModelCode::IAR93,
    ::oo_2_0::AircraftTypeModelCode::IAR93O,
    ::oo_2_0::AircraftTypeModelCode::IAR99,
    ::oo_2_0::AircraftTypeModelCode::IL103,
    ::oo_2_0::AircraftTypeModelCode::IL106,
    ::oo_2_0::AircraftTypeModelCode::IL112,
    ::oo_2_0::AircraftTypeModelCode::IL114,
    ::oo_2_0::AircraftTypeModelCode::IL114C,
    ::oo_2_0::AircraftTypeModelCode::IL114F,
    ::oo_2_0::AircraftTypeModelCode::IL114M,
    ::oo_2_0::AircraftTypeModelCode::IL114P,
    ::oo_2_0::AircraftTypeModelCode::IL114T,
    ::oo_2_0::AircraftTypeModelCode::IL12,
    ::oo_2_0::AircraftTypeModelCode::IL14,
    ::oo_2_0::AircraftTypeModelCode::IL14P,
    ::oo_2_0::AircraftTypeModelCode::IL18,
    ::oo_2_0::AircraftTypeModelCode::IL18A,
    ::oo_2_0::AircraftTypeModelCode::IL18D,
    ::oo_2_0::AircraftTypeModelCode::IL20,
    ::oo_2_0::AircraftTypeModelCode::IL22,
    ::oo_2_0::AircraftTypeModelCode::IL24N,
    ::oo_2_0::AircraftTypeModelCode::IL28,
    ::oo_2_0::AircraftTypeModelCode::IL28BB,
    ::oo_2_0::AircraftTypeModelCode::IL28RB,
    ::oo_2_0::AircraftTypeModelCode::IL28U,
    ::oo_2_0::AircraftTypeModelCode::IL38,
    ::oo_2_0::AircraftTypeModelCode::IL38P,
    ::oo_2_0::AircraftTypeModelCode::IL62,
    ::oo_2_0::AircraftTypeModelCode::IL62M,
    ::oo_2_0::AircraftTypeModelCode::IL62MK,
    ::oo_2_0::AircraftTypeModelCode::IL76,
    ::oo_2_0::AircraftTypeModelCode::IL7697,
    ::oo_2_0::AircraftTypeModelCode::IL76A5,
    ::oo_2_0::AircraftTypeModelCode::IL76AE,
    ::oo_2_0::AircraftTypeModelCode::IL76K,
    ::oo_2_0::AircraftTypeModelCode::IL76LL,
    ::oo_2_0::AircraftTypeModelCode::IL76M,
    ::oo_2_0::AircraftTypeModelCode::IL76MD,
    ::oo_2_0::AircraftTypeModelCode::IL76MF,
    ::oo_2_0::AircraftTypeModelCode::IL76MK,
    ::oo_2_0::AircraftTypeModelCode::IL76MP,
    ::oo_2_0::AircraftTypeModelCode::IL76SK,
    ::oo_2_0::AircraftTypeModelCode::IL76T,
    ::oo_2_0::AircraftTypeModelCode::IL76TD,
    ::oo_2_0::AircraftTypeModelCode::IL76TF,
    ::oo_2_0::AircraftTypeModelCode::IL78,
    ::oo_2_0::AircraftTypeModelCode::IL781,
    ::oo_2_0::AircraftTypeModelCode::IL78M,
    ::oo_2_0::AircraftTypeModelCode::IL78MI,
    ::oo_2_0::AircraftTypeModelCode::IL82,
    ::oo_2_0::AircraftTypeModelCode::IL86,
    ::oo_2_0::AircraftTypeModelCode::IL87,
    ::oo_2_0::AircraftTypeModelCode::IL9630,
    ::oo_2_0::AircraftTypeModelCode::IL96M,
    ::oo_2_0::AircraftTypeModelCode::IL96MK,
    ::oo_2_0::AircraftTypeModelCode::IL96T,
    ::oo_2_0::AircraftTypeModelCode::IMPM2,
    ::oo_2_0::AircraftTypeModelCode::IMPMK2,
    ::oo_2_0::AircraftTypeModelCode::IMPX,
    ::oo_2_0::AircraftTypeModelCode::IP6201,
    ::oo_2_0::AircraftTypeModelCode::IPE04,
    ::oo_2_0::AircraftTypeModelCode::IR02,
    ::oo_2_0::AircraftTypeModelCode::IR12,
    ::oo_2_0::AircraftTypeModelCode::IRH5,
    ::oo_2_0::AircraftTypeModelCode::IS2,
    ::oo_2_0::AircraftTypeModelCode::ISK,
    ::oo_2_0::AircraftTypeModelCode::ISST50,
    ::oo_2_0::AircraftTypeModelCode::J1,
    ::oo_2_0::AircraftTypeModelCode::J10,
    ::oo_2_0::AircraftTypeModelCode::J1EJ,
    ::oo_2_0::AircraftTypeModelCode::J1J,
    ::oo_2_0::AircraftTypeModelCode::J2,
    ::oo_2_0::AircraftTypeModelCode::J22,
    ::oo_2_0::AircraftTypeModelCode::J32,
    ::oo_2_0::AircraftTypeModelCode::J32B,
    ::oo_2_0::AircraftTypeModelCode::J32D,
    ::oo_2_0::AircraftTypeModelCode::J32E,
    ::oo_2_0::AircraftTypeModelCode::J35,
    ::oo_2_0::AircraftTypeModelCode::J35A,
    ::oo_2_0::AircraftTypeModelCode::J35B,
    ::oo_2_0::AircraftTypeModelCode::J35D,
    ::oo_2_0::AircraftTypeModelCode::J35F,
    ::oo_2_0::AircraftTypeModelCode::J35F1,
    ::oo_2_0::AircraftTypeModelCode::J35F2,
    ::oo_2_0::AircraftTypeModelCode::J35J,
    ::oo_2_0::AircraftTypeModelCode::J35S,
    ::oo_2_0::AircraftTypeModelCode::J35X,
    ::oo_2_0::AircraftTypeModelCode::J35XD,
    ::oo_2_0::AircraftTypeModelCode::J37,
    ::oo_2_0::AircraftTypeModelCode::J37A,
    ::oo_2_0::AircraftTypeModelCode::J39,
    ::oo_2_0::AircraftTypeModelCode::J4,
    ::oo_2_0::AircraftTypeModelCode::J5,
    ::oo_2_0::AircraftTypeModelCode::J6,
    ::oo_2_0::AircraftTypeModelCode::J7,
    ::oo_2_0::AircraftTypeModelCode::J8,
    ::oo_2_0::AircraftTypeModelCode::JABIRU,
    ::oo_2_0::AircraftTypeModelCode::JAG,
    ::oo_2_0::AircraftTypeModelCode::JAGA,
    ::oo_2_0::AircraftTypeModelCode::JAGB,
    ::oo_2_0::AircraftTypeModelCode::JAGE,
    ::oo_2_0::AircraftTypeModelCode::JAGGR1,
    ::oo_2_0::AircraftTypeModelCode::JAGINT,
    ::oo_2_0::AircraftTypeModelCode::JAGM,
    ::oo_2_0::AircraftTypeModelCode::JAGS,
    ::oo_2_0::AircraftTypeModelCode::JAGSC,
    ::oo_2_0::AircraftTypeModelCode::JAGT2,
    ::oo_2_0::AircraftTypeModelCode::JAH1T,
    ::oo_2_0::AircraftTypeModelCode::JAS39,
    ::oo_2_0::AircraftTypeModelCode::JAS39A,
    ::oo_2_0::AircraftTypeModelCode::JAS39B,
    ::oo_2_0::AircraftTypeModelCode::JAS39C,
    ::oo_2_0::AircraftTypeModelCode::JAS39D,
    ::oo_2_0::AircraftTypeModelCode::JC130,
    ::oo_2_0::AircraftTypeModelCode::JC130H,
    ::oo_2_0::AircraftTypeModelCode::JCR450,
    ::oo_2_0::AircraftTypeModelCode::JCR500,
    ::oo_2_0::AircraftTypeModelCode::JCR650,
    ::oo_2_0::AircraftTypeModelCode::JGRM1A,
    ::oo_2_0::AircraftTypeModelCode::JGRMK1,
    ::oo_2_0::AircraftTypeModelCode::JGRMK3,
    ::oo_2_0::AircraftTypeModelCode::JH46E,
    ::oo_2_0::AircraftTypeModelCode::JH7,
    ::oo_2_0::AircraftTypeModelCode::JP1000,
    ::oo_2_0::AircraftTypeModelCode::JP840,
    ::oo_2_0::AircraftTypeModelCode::JP900,
    ::oo_2_0::AircraftTypeModelCode::JP980,
    ::oo_2_0::AircraftTypeModelCode::JS31,
    ::oo_2_0::AircraftTypeModelCode::JS41,
    ::oo_2_0::AircraftTypeModelCode::JS51,
    ::oo_2_0::AircraftTypeModelCode::JS61,
    ::oo_2_0::AircraftTypeModelCode::JSB,
    ::oo_2_0::AircraftTypeModelCode::JSS31,
    ::oo_2_0::AircraftTypeModelCode::JSTMK1,
    ::oo_2_0::AircraftTypeModelCode::JTM2B,
    ::oo_2_0::AircraftTypeModelCode::JTMK2,
    ::oo_2_0::AircraftTypeModelCode::JTMK4,
    ::oo_2_0::AircraftTypeModelCode::JU200,
    ::oo_2_0::AircraftTypeModelCode::K107A,
    ::oo_2_0::AircraftTypeModelCode::K107A2,
    ::oo_2_0::AircraftTypeModelCode::K107A3,
    ::oo_2_0::AircraftTypeModelCode::K107A4,
    ::oo_2_0::AircraftTypeModelCode::K107AS,
    ::oo_2_0::AircraftTypeModelCode::K1200,
    ::oo_2_0::AircraftTypeModelCode::K18,
    ::oo_2_0::AircraftTypeModelCode::K2,
    ::oo_2_0::AircraftTypeModelCode::K250,
    ::oo_2_0::AircraftTypeModelCode::K8,
    ::oo_2_0::AircraftTypeModelCode::KA115,
    ::oo_2_0::AircraftTypeModelCode::KA126B,
    ::oo_2_0::AircraftTypeModelCode::KA15,
    ::oo_2_0::AircraftTypeModelCode::KA226,
    ::oo_2_0::AircraftTypeModelCode::KA25,
    ::oo_2_0::AircraftTypeModelCode::KA25A,
    ::oo_2_0::AircraftTypeModelCode::KA25B,
    ::oo_2_0::AircraftTypeModelCode::KA25C,
    ::oo_2_0::AircraftTypeModelCode::KA27PL,
    ::oo_2_0::AircraftTypeModelCode::KA27PS,
    ::oo_2_0::AircraftTypeModelCode::KA28,
    ::oo_2_0::AircraftTypeModelCode::KA29A,
    ::oo_2_0::AircraftTypeModelCode::KA29B,
    ::oo_2_0::AircraftTypeModelCode::KA31,
    ::oo_2_0::AircraftTypeModelCode::KA32,
    ::oo_2_0::AircraftTypeModelCode::KA3211,
    ::oo_2_0::AircraftTypeModelCode::KA3212,
    ::oo_2_0::AircraftTypeModelCode::KA32A,
    ::oo_2_0::AircraftTypeModelCode::KA32A1,
    ::oo_2_0::AircraftTypeModelCode::KA32A2,
    ::oo_2_0::AircraftTypeModelCode::KA32A3,
    ::oo_2_0::AircraftTypeModelCode::KA32A7,
    ::oo_2_0::AircraftTypeModelCode::KA3B,
    ::oo_2_0::AircraftTypeModelCode::KA40,
    ::oo_2_0::AircraftTypeModelCode::KA50,
    ::oo_2_0::AircraftTypeModelCode::KA50N,
    ::oo_2_0::AircraftTypeModelCode::KA52,
    ::oo_2_0::AircraftTypeModelCode::KA6,
    ::oo_2_0::AircraftTypeModelCode::KA62,
    ::oo_2_0::AircraftTypeModelCode::KA62M,
    ::oo_2_0::AircraftTypeModelCode::KA6A,
    ::oo_2_0::AircraftTypeModelCode::KA6D,
    ::oo_2_0::AircraftTypeModelCode::KA6H,
    ::oo_2_0::AircraftTypeModelCode::KA7,
    ::oo_2_0::AircraftTypeModelCode::KA840,
    ::oo_2_0::AircraftTypeModelCode::KANIA,
    ::oo_2_0::AircraftTypeModelCode::KANMI2,
    ::oo_2_0::AircraftTypeModelCode::KATRAN,
    ::oo_2_0::AircraftTypeModelCode::KAXX,
    ::oo_2_0::AircraftTypeModelCode::KBMK2,
    ::oo_2_0::AircraftTypeModelCode::KC10,
    ::oo_2_0::AircraftTypeModelCode::KC10A,
    ::oo_2_0::AircraftTypeModelCode::KC130,
    ::oo_2_0::AircraftTypeModelCode::KC130F,
    ::oo_2_0::AircraftTypeModelCode::KC130H,
    ::oo_2_0::AircraftTypeModelCode::KC130Q,
    ::oo_2_0::AircraftTypeModelCode::KC130R,
    ::oo_2_0::AircraftTypeModelCode::KC130T,
    ::oo_2_0::AircraftTypeModelCode::KC135,
    ::oo_2_0::AircraftTypeModelCode::KC135A,
    ::oo_2_0::AircraftTypeModelCode::KC135E,
    ::oo_2_0::AircraftTypeModelCode::KC135F,
    ::oo_2_0::AircraftTypeModelCode::KC135Q,
    ::oo_2_0::AircraftTypeModelCode::KC135R,
    ::oo_2_0::AircraftTypeModelCode::KC135T,
    ::oo_2_0::AircraftTypeModelCode::KC137,
    ::oo_2_0::AircraftTypeModelCode::KC13T3,
    ::oo_2_0::AircraftTypeModelCode::KC707,
    ::oo_2_0::AircraftTypeModelCode::KC747,
    ::oo_2_0::AircraftTypeModelCode::KC8,
    ::oo_2_0::AircraftTypeModelCode::KC97,
    ::oo_2_0::AircraftTypeModelCode::KDC10,
    ::oo_2_0::AircraftTypeModelCode::KE3A,
    ::oo_2_0::AircraftTypeModelCode::KFIR,
    ::oo_2_0::AircraftTypeModelCode::KFIRC2,
    ::oo_2_0::AircraftTypeModelCode::KFIRC7,
    ::oo_2_0::AircraftTypeModelCode::KFIRLC,
    ::oo_2_0::AircraftTypeModelCode::KFIRR2,
    ::oo_2_0::AircraftTypeModelCode::KFIRT2,
    ::oo_2_0::AircraftTypeModelCode::KFIRT7,
    ::oo_2_0::AircraftTypeModelCode::KH4,
    ::oo_2_0::AircraftTypeModelCode::KIN44,
    ::oo_2_0::AircraftTypeModelCode::KIOWA,
    ::oo_2_0::AircraftTypeModelCode::KIRM1,
    ::oo_2_0::AircraftTypeModelCode::KIRM1A,
    ::oo_2_0::AircraftTypeModelCode::KIRM2,
    ::oo_2_0::AircraftTypeModelCode::KIRMII,
    ::oo_2_0::AircraftTypeModelCode::KMH,
    ::oo_2_0::AircraftTypeModelCode::KORSHU,
    ::oo_2_0::AircraftTypeModelCode::KORVET,
    ::oo_2_0::AircraftTypeModelCode::KS3A,
    ::oo_2_0::AircraftTypeModelCode::KTX1,
    ::oo_2_0::AircraftTypeModelCode::KTX2,
    ::oo_2_0::AircraftTypeModelCode::KUDU,
    ::oo_2_0::AircraftTypeModelCode::KV07A5,
    ::oo_2_0::AircraftTypeModelCode::KV107A,
    ::oo_2_0::AircraftTypeModelCode::KV107S,
    ::oo_2_0::AircraftTypeModelCode::KV107T,
    ::oo_2_0::AircraftTypeModelCode::L100,
    ::oo_2_0::AircraftTypeModelCode::L10020,
    ::oo_2_0::AircraftTypeModelCode::L10030,
    ::oo_2_0::AircraftTypeModelCode::L1003H,
    ::oo_2_0::AircraftTypeModelCode::L100J,
    ::oo_2_0::AircraftTypeModelCode::L1011,
    ::oo_2_0::AircraftTypeModelCode::L10110,
    ::oo_2_0::AircraftTypeModelCode::L10111,
    ::oo_2_0::AircraftTypeModelCode::L10112,
    ::oo_2_0::AircraftTypeModelCode::L10115,
    ::oo_2_0::AircraftTypeModelCode::L1011A,
    ::oo_2_0::AircraftTypeModelCode::L1011E,
    ::oo_2_0::AircraftTypeModelCode::L1011F,
    ::oo_2_0::AircraftTypeModelCode::L1011K,
    ::oo_2_0::AircraftTypeModelCode::L1049,
    ::oo_2_0::AircraftTypeModelCode::L11115,
    ::oo_2_0::AircraftTypeModelCode::L159,
    ::oo_2_0::AircraftTypeModelCode::L159T,
    ::oo_2_0::AircraftTypeModelCode::L164,
    ::oo_2_0::AircraftTypeModelCode::L18,
    ::oo_2_0::AircraftTypeModelCode::L188,
    ::oo_2_0::AircraftTypeModelCode::L188A,
    ::oo_2_0::AircraftTypeModelCode::L188C,
    ::oo_2_0::AircraftTypeModelCode::L19,
    ::oo_2_0::AircraftTypeModelCode::L20,
    ::oo_2_0::AircraftTypeModelCode::L21,
    ::oo_2_0::AircraftTypeModelCode::L235BB,
    ::oo_2_0::AircraftTypeModelCode::L29,
    ::oo_2_0::AircraftTypeModelCode::L29A,
    ::oo_2_0::AircraftTypeModelCode::L29CZ,
    ::oo_2_0::AircraftTypeModelCode::L29DEL,
    ::oo_2_0::AircraftTypeModelCode::L29R,
    ::oo_2_0::AircraftTypeModelCode::L382G,
    ::oo_2_0::AircraftTypeModelCode::L39,
    ::oo_2_0::AircraftTypeModelCode::L39C,
    ::oo_2_0::AircraftTypeModelCode::L39D,
    ::oo_2_0::AircraftTypeModelCode::L39MS,
    ::oo_2_0::AircraftTypeModelCode::L39V,
    ::oo_2_0::AircraftTypeModelCode::L39Z,
    ::oo_2_0::AircraftTypeModelCode::L39Z0,
    ::oo_2_0::AircraftTypeModelCode::L39ZA,
    ::oo_2_0::AircraftTypeModelCode::L410,
    ::oo_2_0::AircraftTypeModelCode::L410A,
    ::oo_2_0::AircraftTypeModelCode::L410U,
    ::oo_2_0::AircraftTypeModelCode::L410UE,
    ::oo_2_0::AircraftTypeModelCode::L420,
    ::oo_2_0::AircraftTypeModelCode::L430,
    ::oo_2_0::AircraftTypeModelCode::L450,
    ::oo_2_0::AircraftTypeModelCode::L59E,
    ::oo_2_0::AircraftTypeModelCode::L59T,
    ::oo_2_0::AircraftTypeModelCode::L610G,
    ::oo_2_0::AircraftTypeModelCode::L649,
    ::oo_2_0::AircraftTypeModelCode::L70,
    ::oo_2_0::AircraftTypeModelCode::L70VIN,
    ::oo_2_0::AircraftTypeModelCode::L749,
    ::oo_2_0::AircraftTypeModelCode::L90,
    ::oo_2_0::AircraftTypeModelCode::LA25,
    ::oo_2_0::AircraftTypeModelCode::LA250,
    ::oo_2_0::AircraftTypeModelCode::LA270,
    ::oo_2_0::AircraftTypeModelCode::LA4200,
    ::oo_2_0::AircraftTypeModelCode::LADO0,
    ::oo_2_0::AircraftTypeModelCode::LADO6,
    ::oo_2_0::AircraftTypeModelCode::LAKX,
    ::oo_2_0::AircraftTypeModelCode::LAN320,
    ::oo_2_0::AircraftTypeModelCode::LAN360,
    ::oo_2_0::AircraftTypeModelCode::LAN4,
    ::oo_2_0::AircraftTypeModelCode::LAN4P,
    ::oo_2_0::AircraftTypeModelCode::LANC,
    ::oo_2_0::AircraftTypeModelCode::LANES,
    ::oo_2_0::AircraftTypeModelCode::LANLC4,
    ::oo_2_0::AircraftTypeModelCode::LANSES,
    ::oo_2_0::AircraftTypeModelCode::LAR,
    ::oo_2_0::AircraftTypeModelCode::LARK,
    ::oo_2_0::AircraftTypeModelCode::LASEWO,
    ::oo_2_0::AircraftTypeModelCode::LASTA1,
    ::oo_2_0::AircraftTypeModelCode::LASTA2,
    ::oo_2_0::AircraftTypeModelCode::LBAT,
    ::oo_2_0::AircraftTypeModelCode::LC130,
    ::oo_2_0::AircraftTypeModelCode::LC130F,
    ::oo_2_0::AircraftTypeModelCode::LC130H,
    ::oo_2_0::AircraftTypeModelCode::LC130R,
    ::oo_2_0::AircraftTypeModelCode::LGTT5,
    ::oo_2_0::AircraftTypeModelCode::LHASM2,
    ::oo_2_0::AircraftTypeModelCode::LHASM3,
    ::oo_2_0::AircraftTypeModelCode::LHASM4,
    ::oo_2_0::AircraftTypeModelCode::LHM2,
    ::oo_2_0::AircraftTypeModelCode::LHM53,
    ::oo_2_0::AircraftTypeModelCode::LI2,
    ::oo_2_0::AircraftTypeModelCode::LIGHT,
    ::oo_2_0::AircraftTypeModelCode::LIM1,
    ::oo_2_0::AircraftTypeModelCode::LIM6,
    ::oo_2_0::AircraftTypeModelCode::LJ24,
    ::oo_2_0::AircraftTypeModelCode::LJ24A,
    ::oo_2_0::AircraftTypeModelCode::LJ25,
    ::oo_2_0::AircraftTypeModelCode::LJ25A,
    ::oo_2_0::AircraftTypeModelCode::LJ31,
    ::oo_2_0::AircraftTypeModelCode::LJ31A,
    ::oo_2_0::AircraftTypeModelCode::LJ35,
    ::oo_2_0::AircraftTypeModelCode::LJ35A,
    ::oo_2_0::AircraftTypeModelCode::LJ36A,
    ::oo_2_0::AircraftTypeModelCode::LJ45,
    ::oo_2_0::AircraftTypeModelCode::LJ55,
    ::oo_2_0::AircraftTypeModelCode::LJ55B,
    ::oo_2_0::AircraftTypeModelCode::LJ55C,
    ::oo_2_0::AircraftTypeModelCode::LJ60,
    ::oo_2_0::AircraftTypeModelCode::LR1,
    ::oo_2_0::AircraftTypeModelCode::LR2,
    ::oo_2_0::AircraftTypeModelCode::LX8,
    ::oo_2_0::AircraftTypeModelCode::LYAH1G,
    ::oo_2_0::AircraftTypeModelCode::LYAHM5,
    ::oo_2_0::AircraftTypeModelCode::LYAHM7,
    ::oo_2_0::AircraftTypeModelCode::LYAHM9,
    ::oo_2_0::AircraftTypeModelCode::LYHAM3,
    ::oo_2_0::AircraftTypeModelCode::LYHMM8,
    ::oo_2_0::AircraftTypeModelCode::LYHS2F,
    ::oo_2_0::AircraftTypeModelCode::LYHS4F,
    ::oo_2_0::AircraftTypeModelCode::LYHSM2,
    ::oo_2_0::AircraftTypeModelCode::LYM21A,
    ::oo_2_0::AircraftTypeModelCode::LYM88A,
    ::oo_2_0::AircraftTypeModelCode::LYMK21,
    ::oo_2_0::AircraftTypeModelCode::LYMK23,
    ::oo_2_0::AircraftTypeModelCode::LYMK25,
    ::oo_2_0::AircraftTypeModelCode::LYMK27,
    ::oo_2_0::AircraftTypeModelCode::LYMK28,
    ::oo_2_0::AircraftTypeModelCode::LYMK80,
    ::oo_2_0::AircraftTypeModelCode::LYMK81,
    ::oo_2_0::AircraftTypeModelCode::LYMK86,
    ::oo_2_0::AircraftTypeModelCode::LYMK88,
    ::oo_2_0::AircraftTypeModelCode::LYMK89,
    ::oo_2_0::AircraftTypeModelCode::LYMK90,
    ::oo_2_0::AircraftTypeModelCode::LYMK95,
    ::oo_2_0::AircraftTypeModelCode::LYMK99,
    ::oo_2_0::AircraftTypeModelCode::LYS100,
    ::oo_2_0::AircraftTypeModelCode::LYS200,
    ::oo_2_0::AircraftTypeModelCode::LYS300,
    ::oo_2_0::AircraftTypeModelCode::M101TG,
    ::oo_2_0::AircraftTypeModelCode::M102,
    ::oo_2_0::AircraftTypeModelCode::M102DS,
    ::oo_2_0::AircraftTypeModelCode::M112,
    ::oo_2_0::AircraftTypeModelCode::M15UTI,
    ::oo_2_0::AircraftTypeModelCode::M17MYS,
    ::oo_2_0::AircraftTypeModelCode::M18DRO,
    ::oo_2_0::AircraftTypeModelCode::M2000,
    ::oo_2_0::AircraftTypeModelCode::M20005,
    ::oo_2_0::AircraftTypeModelCode::M2000B,
    ::oo_2_0::AircraftTypeModelCode::M2000C,
    ::oo_2_0::AircraftTypeModelCode::M2000D,
    ::oo_2_0::AircraftTypeModelCode::M2000E,
    ::oo_2_0::AircraftTypeModelCode::M2000I,
    ::oo_2_0::AircraftTypeModelCode::M2000M,
    ::oo_2_0::AircraftTypeModelCode::M2000N,
    ::oo_2_0::AircraftTypeModelCode::M2000Y,
    ::oo_2_0::AircraftTypeModelCode::M2009,
    ::oo_2_0::AircraftTypeModelCode::M201SO,
    ::oo_2_0::AircraftTypeModelCode::M202,
    ::oo_2_0::AircraftTypeModelCode::M21B1,
    ::oo_2_0::AircraftTypeModelCode::M21BIS,
    ::oo_2_0::AircraftTypeModelCode::M21UM,
    ::oo_2_0::AircraftTypeModelCode::M21US,
    ::oo_2_0::AircraftTypeModelCode::M2600A,
    ::oo_2_0::AircraftTypeModelCode::M2601L,
    ::oo_2_0::AircraftTypeModelCode::M262,
    ::oo_2_0::AircraftTypeModelCode::M26ISK,
    ::oo_2_0::AircraftTypeModelCode::M28ST,
    ::oo_2_0::AircraftTypeModelCode::M290TP,
    ::oo_2_0::AircraftTypeModelCode::M4,
    ::oo_2_0::AircraftTypeModelCode::M4000,
    ::oo_2_0::AircraftTypeModelCode::M404,
    ::oo_2_0::AircraftTypeModelCode::M50,
    ::oo_2_0::AircraftTypeModelCode::M5000,
    ::oo_2_0::AircraftTypeModelCode::M58MAS,
    ::oo_2_0::AircraftTypeModelCode::M5F,
    ::oo_2_0::AircraftTypeModelCode::MAA,
    ::oo_2_0::AircraftTypeModelCode::MADCAP,
    ::oo_2_0::AircraftTypeModelCode::MAI,
    ::oo_2_0::AircraftTypeModelCode::MAR,
    ::oo_2_0::AircraftTypeModelCode::MARMK,
    ::oo_2_0::AircraftTypeModelCode::MARMK2,
    ::oo_2_0::AircraftTypeModelCode::MART,
    ::oo_2_0::AircraftTypeModelCode::MARUT,
    ::oo_2_0::AircraftTypeModelCode::MARWND,
    ::oo_2_0::AircraftTypeModelCode::MAS,
    ::oo_2_0::AircraftTypeModelCode::MASCOT,
    ::oo_2_0::AircraftTypeModelCode::MASH,
    ::oo_2_0::AircraftTypeModelCode::MATAD,
    ::oo_2_0::AircraftTypeModelCode::MAX,
    ::oo_2_0::AircraftTypeModelCode::MAY,
    ::oo_2_0::AircraftTypeModelCode::MB312,
    ::oo_2_0::AircraftTypeModelCode::MB326,
    ::oo_2_0::AircraftTypeModelCode::MB326A,
    ::oo_2_0::AircraftTypeModelCode::MB326B,
    ::oo_2_0::AircraftTypeModelCode::MB326D,
    ::oo_2_0::AircraftTypeModelCode::MB326F,
    ::oo_2_0::AircraftTypeModelCode::MB326G,
    ::oo_2_0::AircraftTypeModelCode::MB326H,
    ::oo_2_0::AircraftTypeModelCode::MB326K,
    ::oo_2_0::AircraftTypeModelCode::MB326L,
    ::oo_2_0::AircraftTypeModelCode::MB326M,
    ::oo_2_0::AircraftTypeModelCode::MB326X,
    ::oo_2_0::AircraftTypeModelCode::MB339,
    ::oo_2_0::AircraftTypeModelCode::MB339A,
    ::oo_2_0::AircraftTypeModelCode::MB339B,
    ::oo_2_0::AircraftTypeModelCode::MB339C,
    ::oo_2_0::AircraftTypeModelCode::MB339D,
    ::oo_2_0::AircraftTypeModelCode::MB339E,
    ::oo_2_0::AircraftTypeModelCode::MB339K,
    ::oo_2_0::AircraftTypeModelCode::MB339M,
    ::oo_2_0::AircraftTypeModelCode::MB339V,
    ::oo_2_0::AircraftTypeModelCode::MB39CB,
    ::oo_2_0::AircraftTypeModelCode::MBB223,
    ::oo_2_0::AircraftTypeModelCode::MC130,
    ::oo_2_0::AircraftTypeModelCode::MC130E,
    ::oo_2_0::AircraftTypeModelCode::MC130H,
    ::oo_2_0::AircraftTypeModelCode::MC130P,
    ::oo_2_0::AircraftTypeModelCode::MCP,
    ::oo_2_0::AircraftTypeModelCode::MD11,
    ::oo_2_0::AircraftTypeModelCode::MD11C,
    ::oo_2_0::AircraftTypeModelCode::MD11CF,
    ::oo_2_0::AircraftTypeModelCode::MD11ER,
    ::oo_2_0::AircraftTypeModelCode::MD11F,
    ::oo_2_0::AircraftTypeModelCode::MD17,
    ::oo_2_0::AircraftTypeModelCode::MD500,
    ::oo_2_0::AircraftTypeModelCode::MD500B,
    ::oo_2_0::AircraftTypeModelCode::MD500C,
    ::oo_2_0::AircraftTypeModelCode::MD500D,
    ::oo_2_0::AircraftTypeModelCode::MD500E,
    ::oo_2_0::AircraftTypeModelCode::MD50M,
    ::oo_2_0::AircraftTypeModelCode::MD50MD,
    ::oo_2_0::AircraftTypeModelCode::MD50ME,
    ::oo_2_0::AircraftTypeModelCode::MD50MG,
    ::oo_2_0::AircraftTypeModelCode::MD520N,
    ::oo_2_0::AircraftTypeModelCode::MD530,
    ::oo_2_0::AircraftTypeModelCode::MD530F,
    ::oo_2_0::AircraftTypeModelCode::MD600N,
    ::oo_2_0::AircraftTypeModelCode::MD80,
    ::oo_2_0::AircraftTypeModelCode::MD81,
    ::oo_2_0::AircraftTypeModelCode::MD82,
    ::oo_2_0::AircraftTypeModelCode::MD82T,
    ::oo_2_0::AircraftTypeModelCode::MD83,
    ::oo_2_0::AircraftTypeModelCode::MD87,
    ::oo_2_0::AircraftTypeModelCode::MD88,
    ::oo_2_0::AircraftTypeModelCode::MD90,
    ::oo_2_0::AircraftTypeModelCode::MD900,
    ::oo_2_0::AircraftTypeModelCode::MD903,
    ::oo_2_0::AircraftTypeModelCode::MD903E,
    ::oo_2_0::AircraftTypeModelCode::MD903T,
    ::oo_2_0::AircraftTypeModelCode::MD920,
    ::oo_2_0::AircraftTypeModelCode::MD95,
    ::oo_2_0::AircraftTypeModelCode::MD953,
    ::oo_2_0::AircraftTypeModelCode::MD955,
    ::oo_2_0::AircraftTypeModelCode::MDG,
    ::oo_2_0::AircraftTypeModelCode::MDN,
    ::oo_2_0::AircraftTypeModelCode::MDS,
    ::oo_2_0::AircraftTypeModelCode::ME29,
    ::oo_2_0::AircraftTypeModelCode::MEM20,
    ::oo_2_0::AircraftTypeModelCode::MER2,
    ::oo_2_0::AircraftTypeModelCode::MER23,
    ::oo_2_0::AircraftTypeModelCode::MER23E,
    ::oo_2_0::AircraftTypeModelCode::MER2A,
    ::oo_2_0::AircraftTypeModelCode::MER2B,
    ::oo_2_0::AircraftTypeModelCode::MER3,
    ::oo_2_0::AircraftTypeModelCode::MER3B,
    ::oo_2_0::AircraftTypeModelCode::MER4,
    ::oo_2_0::AircraftTypeModelCode::MERHC3,
    ::oo_2_0::AircraftTypeModelCode::MERHM2,
    ::oo_2_0::AircraftTypeModelCode::MET2,
    ::oo_2_0::AircraftTypeModelCode::MET23,
    ::oo_2_0::AircraftTypeModelCode::MET23C,
    ::oo_2_0::AircraftTypeModelCode::MET23D,
    ::oo_2_0::AircraftTypeModelCode::MET2A,
    ::oo_2_0::AircraftTypeModelCode::MET3,
    ::oo_2_0::AircraftTypeModelCode::MF1CR,
    ::oo_2_0::AircraftTypeModelCode::MF1CR2,
    ::oo_2_0::AircraftTypeModelCode::MF1CT,
    ::oo_2_0::AircraftTypeModelCode::MF1EQ,
    ::oo_2_0::AircraftTypeModelCode::MF1R,
    ::oo_2_0::AircraftTypeModelCode::MFI15,
    ::oo_2_0::AircraftTypeModelCode::MFI17,
    ::oo_2_0::AircraftTypeModelCode::MFI18,
    ::oo_2_0::AircraftTypeModelCode::MG21MF,
    ::oo_2_0::AircraftTypeModelCode::MG21PA,
    ::oo_2_0::AircraftTypeModelCode::MG21PF,
    ::oo_2_0::AircraftTypeModelCode::MG21PS,
    ::oo_2_0::AircraftTypeModelCode::MG21R,
    ::oo_2_0::AircraftTypeModelCode::MG21RF,
    ::oo_2_0::AircraftTypeModelCode::MG21SM,
    ::oo_2_0::AircraftTypeModelCode::MG21U,
    ::oo_2_0::AircraftTypeModelCode::MG21UM,
    ::oo_2_0::AircraftTypeModelCode::MG21US,
    ::oo_2_0::AircraftTypeModelCode::MG23MF,
    ::oo_2_0::AircraftTypeModelCode::MG23ML,
    ::oo_2_0::AircraftTypeModelCode::MG23MS,
    ::oo_2_0::AircraftTypeModelCode::MG23SM,
    ::oo_2_0::AircraftTypeModelCode::MG23UB,
    ::oo_2_0::AircraftTypeModelCode::MG23UM,
    ::oo_2_0::AircraftTypeModelCode::MG25BM,
    ::oo_2_0::AircraftTypeModelCode::MG25RB,
    ::oo_2_0::AircraftTypeModelCode::MG25RK,
    ::oo_2_0::AircraftTypeModelCode::MG25RU,
    ::oo_2_0::AircraftTypeModelCode::MG29ME,
    ::oo_2_0::AircraftTypeModelCode::MG29NU,
    ::oo_2_0::AircraftTypeModelCode::MG29SD,
    ::oo_2_0::AircraftTypeModelCode::MG29SE,
    ::oo_2_0::AircraftTypeModelCode::MG29SM,
    ::oo_2_0::AircraftTypeModelCode::MG29UB,
    ::oo_2_0::AircraftTypeModelCode::MG31BS,
    ::oo_2_0::AircraftTypeModelCode::MGS6,
    ::oo_2_0::AircraftTypeModelCode::MGS8,
    ::oo_2_0::AircraftTypeModelCode::MH1521,
    ::oo_2_0::AircraftTypeModelCode::MH47,
    ::oo_2_0::AircraftTypeModelCode::MH47D,
    ::oo_2_0::AircraftTypeModelCode::MH47E,
    ::oo_2_0::AircraftTypeModelCode::MH53,
    ::oo_2_0::AircraftTypeModelCode::MH53E,
    ::oo_2_0::AircraftTypeModelCode::MH53ED,
    ::oo_2_0::AircraftTypeModelCode::MH53EP,
    ::oo_2_0::AircraftTypeModelCode::MH53ES,
    ::oo_2_0::AircraftTypeModelCode::MH53H,
    ::oo_2_0::AircraftTypeModelCode::MH53J,
    ::oo_2_0::AircraftTypeModelCode::MH6,
    ::oo_2_0::AircraftTypeModelCode::MH60,
    ::oo_2_0::AircraftTypeModelCode::MH60A,
    ::oo_2_0::AircraftTypeModelCode::MH60G,
    ::oo_2_0::AircraftTypeModelCode::MH60K,
    ::oo_2_0::AircraftTypeModelCode::MH60L,
    ::oo_2_0::AircraftTypeModelCode::MH6B,
    ::oo_2_0::AircraftTypeModelCode::MI1,
    ::oo_2_0::AircraftTypeModelCode::MI10,
    ::oo_2_0::AircraftTypeModelCode::MI10K,
    ::oo_2_0::AircraftTypeModelCode::MI12,
    ::oo_2_0::AircraftTypeModelCode::MI14,
    ::oo_2_0::AircraftTypeModelCode::MI14BT,
    ::oo_2_0::AircraftTypeModelCode::MI14GP,
    ::oo_2_0::AircraftTypeModelCode::MI14P,
    ::oo_2_0::AircraftTypeModelCode::MI14PL,
    ::oo_2_0::AircraftTypeModelCode::MI14PM,
    ::oo_2_0::AircraftTypeModelCode::MI14PS,
    ::oo_2_0::AircraftTypeModelCode::MI14PW,
    ::oo_2_0::AircraftTypeModelCode::MI17,
    ::oo_2_0::AircraftTypeModelCode::MI171,
    ::oo_2_0::AircraftTypeModelCode::MI171V,
    ::oo_2_0::AircraftTypeModelCode::MI172,
    ::oo_2_0::AircraftTypeModelCode::MI17P,
    ::oo_2_0::AircraftTypeModelCode::MI17Z,
    ::oo_2_0::AircraftTypeModelCode::MI2,
    ::oo_2_0::AircraftTypeModelCode::MI22,
    ::oo_2_0::AircraftTypeModelCode::MI24,
    ::oo_2_0::AircraftTypeModelCode::MI24A,
    ::oo_2_0::AircraftTypeModelCode::MI24BM,
    ::oo_2_0::AircraftTypeModelCode::MI24DU,
    ::oo_2_0::AircraftTypeModelCode::MI24ES,
    ::oo_2_0::AircraftTypeModelCode::MI24K,
    ::oo_2_0::AircraftTypeModelCode::MI24P,
    ::oo_2_0::AircraftTypeModelCode::MI24PS,
    ::oo_2_0::AircraftTypeModelCode::MI24RK,
    ::oo_2_0::AircraftTypeModelCode::MI24V,
    ::oo_2_0::AircraftTypeModelCode::MI24VM,
    ::oo_2_0::AircraftTypeModelCode::MI24VP,
    ::oo_2_0::AircraftTypeModelCode::MI26,
    ::oo_2_0::AircraftTypeModelCode::MI26A,
    ::oo_2_0::AircraftTypeModelCode::MI26M,
    ::oo_2_0::AircraftTypeModelCode::MI26MS,
    ::oo_2_0::AircraftTypeModelCode::MI26T,
    ::oo_2_0::AircraftTypeModelCode::MI26TM,
    ::oo_2_0::AircraftTypeModelCode::MI26TS,
    ::oo_2_0::AircraftTypeModelCode::MI26TZ,
    ::oo_2_0::AircraftTypeModelCode::MI27,
    ::oo_2_0::AircraftTypeModelCode::MI28,
    ::oo_2_0::AircraftTypeModelCode::MI28N,
    ::oo_2_0::AircraftTypeModelCode::MI34,
    ::oo_2_0::AircraftTypeModelCode::MI34A,
    ::oo_2_0::AircraftTypeModelCode::MI34S,
    ::oo_2_0::AircraftTypeModelCode::MI34VA,
    ::oo_2_0::AircraftTypeModelCode::MI35,
    ::oo_2_0::AircraftTypeModelCode::MI35D,
    ::oo_2_0::AircraftTypeModelCode::MI35M,
    ::oo_2_0::AircraftTypeModelCode::MI35P,
    ::oo_2_0::AircraftTypeModelCode::MI38,
    ::oo_2_0::AircraftTypeModelCode::MI40,
    ::oo_2_0::AircraftTypeModelCode::MI52,
    ::oo_2_0::AircraftTypeModelCode::MI54,
    ::oo_2_0::AircraftTypeModelCode::MI58,
    ::oo_2_0::AircraftTypeModelCode::MI6A,
    ::oo_2_0::AircraftTypeModelCode::MI6AY,
    ::oo_2_0::AircraftTypeModelCode::MI6T,
    ::oo_2_0::AircraftTypeModelCode::MI6VKP,
    ::oo_2_0::AircraftTypeModelCode::MI8,
    ::oo_2_0::AircraftTypeModelCode::MI8AT,
    ::oo_2_0::AircraftTypeModelCode::MI8BT,
    ::oo_2_0::AircraftTypeModelCode::MI8K,
    ::oo_2_0::AircraftTypeModelCode::MI8MT,
    ::oo_2_0::AircraftTypeModelCode::MI8MTV,
    ::oo_2_0::AircraftTypeModelCode::MI8P,
    ::oo_2_0::AircraftTypeModelCode::MI8PPA,
    ::oo_2_0::AircraftTypeModelCode::MI8PS,
    ::oo_2_0::AircraftTypeModelCode::MI8R,
    ::oo_2_0::AircraftTypeModelCode::MI8S,
    ::oo_2_0::AircraftTypeModelCode::MI8SMV,
    ::oo_2_0::AircraftTypeModelCode::MI8T,
    ::oo_2_0::AircraftTypeModelCode::MI8TB,
    ::oo_2_0::AircraftTypeModelCode::MI8TBK,
    ::oo_2_0::AircraftTypeModelCode::MI8TG,
    ::oo_2_0::AircraftTypeModelCode::MI8TM,
    ::oo_2_0::AircraftTypeModelCode::MI8TP,
    ::oo_2_0::AircraftTypeModelCode::MI8TV,
    ::oo_2_0::AircraftTypeModelCode::MI8TZ,
    ::oo_2_0::AircraftTypeModelCode::MI8VIP,
    ::oo_2_0::AircraftTypeModelCode::MI8VZP,
    ::oo_2_0::AircraftTypeModelCode::MI9HPG,
    ::oo_2_0::AircraftTypeModelCode::MID,
    ::oo_2_0::AircraftTypeModelCode::MIDFAG,
    ::oo_2_0::AircraftTypeModelCode::MIG110,
    ::oo_2_0::AircraftTypeModelCode::MIG142,
    ::oo_2_0::AircraftTypeModelCode::MIG15,
    ::oo_2_0::AircraftTypeModelCode::MIG15U,
    ::oo_2_0::AircraftTypeModelCode::MIG21B,
    ::oo_2_0::AircraftTypeModelCode::MIG21F,
    ::oo_2_0::AircraftTypeModelCode::MIG21L,
    ::oo_2_0::AircraftTypeModelCode::MIG21M,
    ::oo_2_0::AircraftTypeModelCode::MIG23B,
    ::oo_2_0::AircraftTypeModelCode::MIG23M,
    ::oo_2_0::AircraftTypeModelCode::MIG23S,
    ::oo_2_0::AircraftTypeModelCode::MIG25M,
    ::oo_2_0::AircraftTypeModelCode::MIG25R,
    ::oo_2_0::AircraftTypeModelCode::MIG25U,
    ::oo_2_0::AircraftTypeModelCode::MIG27,
    ::oo_2_0::AircraftTypeModelCode::MIG27M,
    ::oo_2_0::AircraftTypeModelCode::MIG29K,
    ::oo_2_0::AircraftTypeModelCode::MIG29M,
    ::oo_2_0::AircraftTypeModelCode::MIG29N,
    ::oo_2_0::AircraftTypeModelCode::MIG29S,
    ::oo_2_0::AircraftTypeModelCode::MIG31B,
    ::oo_2_0::AircraftTypeModelCode::MIG31D,
    ::oo_2_0::AircraftTypeModelCode::MIG31M,
    ::oo_2_0::AircraftTypeModelCode::MIG33,
    ::oo_2_0::AircraftTypeModelCode::MIG35,
    ::oo_2_0::AircraftTypeModelCode::MIGAS,
    ::oo_2_0::AircraftTypeModelCode::MIGAT,
    ::oo_2_0::AircraftTypeModelCode::MIGATS,
    ::oo_2_0::AircraftTypeModelCode::MIGLFI,
    ::oo_2_0::AircraftTypeModelCode::MILL,
    ::oo_2_0::AircraftTypeModelCode::MILTR,
    ::oo_2_0::AircraftTypeModelCode::MINI50,
    ::oo_2_0::AircraftTypeModelCode::MIR3,
    ::oo_2_0::AircraftTypeModelCode::MIR3A,
    ::oo_2_0::AircraftTypeModelCode::MIR3AD,
    ::oo_2_0::AircraftTypeModelCode::MIR3BS,
    ::oo_2_0::AircraftTypeModelCode::MIR3BZ,
    ::oo_2_0::AircraftTypeModelCode::MIR3C,
    ::oo_2_0::AircraftTypeModelCode::MIR3CJ,
    ::oo_2_0::AircraftTypeModelCode::MIR3CZ,
    ::oo_2_0::AircraftTypeModelCode::MIR3D,
    ::oo_2_0::AircraftTypeModelCode::MIR3D2,
    ::oo_2_0::AircraftTypeModelCode::MIR3DO,
    ::oo_2_0::AircraftTypeModelCode::MIR3DZ,
    ::oo_2_0::AircraftTypeModelCode::MIR3E,
    ::oo_2_0::AircraftTypeModelCode::MIR3EA,
    ::oo_2_0::AircraftTypeModelCode::MIR3EB,
    ::oo_2_0::AircraftTypeModelCode::MIR3EE,
    ::oo_2_0::AircraftTypeModelCode::MIR3EL,
    ::oo_2_0::AircraftTypeModelCode::MIR3EP,
    ::oo_2_0::AircraftTypeModelCode::MIR3EV,
    ::oo_2_0::AircraftTypeModelCode::MIR3EZ,
    ::oo_2_0::AircraftTypeModelCode::MIR3O,
    ::oo_2_0::AircraftTypeModelCode::MIR3R2,
    ::oo_2_0::AircraftTypeModelCode::MIR3RP,
    ::oo_2_0::AircraftTypeModelCode::MIR3RS,
    ::oo_2_0::AircraftTypeModelCode::MIR3S,
    ::oo_2_0::AircraftTypeModelCode::MIR4P,
    ::oo_2_0::AircraftTypeModelCode::MIR5,
    ::oo_2_0::AircraftTypeModelCode::MIR5BA,
    ::oo_2_0::AircraftTypeModelCode::MIR5BD,
    ::oo_2_0::AircraftTypeModelCode::MIR5BR,
    ::oo_2_0::AircraftTypeModelCode::MIR5CA,
    ::oo_2_0::AircraftTypeModelCode::MIR5CD,
    ::oo_2_0::AircraftTypeModelCode::MIR5CR,
    ::oo_2_0::AircraftTypeModelCode::MIR5D,
    ::oo_2_0::AircraftTypeModelCode::MIR5DA,
    ::oo_2_0::AircraftTypeModelCode::MIR5DD,
    ::oo_2_0::AircraftTypeModelCode::MIR5DE,
    ::oo_2_0::AircraftTypeModelCode::MIR5DG,
    ::oo_2_0::AircraftTypeModelCode::MIR5DM,
    ::oo_2_0::AircraftTypeModelCode::MIR5DR,
    ::oo_2_0::AircraftTypeModelCode::MIR5DV,
    ::oo_2_0::AircraftTypeModelCode::MIR5E,
    ::oo_2_0::AircraftTypeModelCode::MIR5F,
    ::oo_2_0::AircraftTypeModelCode::MIR5M,
    ::oo_2_0::AircraftTypeModelCode::MIR5P,
    ::oo_2_0::AircraftTypeModelCode::MIR5PA,
    ::oo_2_0::AircraftTypeModelCode::MIR5R,
    ::oo_2_0::AircraftTypeModelCode::MIR5RA,
    ::oo_2_0::AircraftTypeModelCode::MIR5SD,
    ::oo_2_0::AircraftTypeModelCode::MIR5V,
    ::oo_2_0::AircraftTypeModelCode::MIREAD,
    ::oo_2_0::AircraftTypeModelCode::MIRF1,
    ::oo_2_0::AircraftTypeModelCode::MIRF1A,
    ::oo_2_0::AircraftTypeModelCode::MIRF1B,
    ::oo_2_0::AircraftTypeModelCode::MIRF1C,
    ::oo_2_0::AircraftTypeModelCode::MIRF1D,
    ::oo_2_0::AircraftTypeModelCode::MIRF1E,
    ::oo_2_0::AircraftTypeModelCode::MIRF1R,
    ::oo_2_0::AircraftTypeModelCode::MIST10,
    ::oo_2_0::AircraftTypeModelCode::MIST20,
    ::oo_2_0::AircraftTypeModelCode::MIST50,
    ::oo_2_0::AircraftTypeModelCode::MIV,
    ::oo_2_0::AircraftTypeModelCode::MJ53AU,
    ::oo_2_0::AircraftTypeModelCode::MJ5SCI,
    ::oo_2_0::AircraftTypeModelCode::MK1,
    ::oo_2_0::AircraftTypeModelCode::MK1NIM,
    ::oo_2_0::AircraftTypeModelCode::MK2,
    ::oo_2_0::AircraftTypeModelCode::MK21,
    ::oo_2_0::AircraftTypeModelCode::MK23,
    ::oo_2_0::AircraftTypeModelCode::MK25,
    ::oo_2_0::AircraftTypeModelCode::MK27,
    ::oo_2_0::AircraftTypeModelCode::MK2A,
    ::oo_2_0::AircraftTypeModelCode::MK2ACM,
    ::oo_2_0::AircraftTypeModelCode::MK2C,
    ::oo_2_0::AircraftTypeModelCode::MK2GNT,
    ::oo_2_0::AircraftTypeModelCode::MK3,
    ::oo_2_0::AircraftTypeModelCode::MK4,
    ::oo_2_0::AircraftTypeModelCode::MK41,
    ::oo_2_0::AircraftTypeModelCode::MK42,
    ::oo_2_0::AircraftTypeModelCode::MK42A,
    ::oo_2_0::AircraftTypeModelCode::MK42B,
    ::oo_2_0::AircraftTypeModelCode::MK45,
    ::oo_2_0::AircraftTypeModelCode::MK47,
    ::oo_2_0::AircraftTypeModelCode::MK48,
    ::oo_2_0::AircraftTypeModelCode::MK50,
    ::oo_2_0::AircraftTypeModelCode::MK8,
    ::oo_2_0::AircraftTypeModelCode::MK80,
    ::oo_2_0::AircraftTypeModelCode::MK80LX,
    ::oo_2_0::AircraftTypeModelCode::MK81,
    ::oo_2_0::AircraftTypeModelCode::MK86,
    ::oo_2_0::AircraftTypeModelCode::MK86LX,
    ::oo_2_0::AircraftTypeModelCode::MK88,
    ::oo_2_0::AircraftTypeModelCode::MK88LX,
    ::oo_2_0::AircraftTypeModelCode::MK89,
    ::oo_2_0::AircraftTypeModelCode::MKADV,
    ::oo_2_0::AircraftTypeModelCode::ML1000,
    ::oo_2_0::AircraftTypeModelCode::MMD,
    ::oo_2_0::AircraftTypeModelCode::MNG,
    ::oo_2_0::AircraftTypeModelCode::MO10,
    ::oo_2_0::AircraftTypeModelCode::MO20,
    ::oo_2_0::AircraftTypeModelCode::MO20JM,
    ::oo_2_0::AircraftTypeModelCode::MO20KE,
    ::oo_2_0::AircraftTypeModelCode::MO20MT,
    ::oo_2_0::AircraftTypeModelCode::MO20RO,
    ::oo_2_0::AircraftTypeModelCode::MO21,
    ::oo_2_0::AircraftTypeModelCode::MO22,
    ::oo_2_0::AircraftTypeModelCode::MO2J,
    ::oo_2_0::AircraftTypeModelCode::MO2K,
    ::oo_2_0::AircraftTypeModelCode::MOG,
    ::oo_2_0::AircraftTypeModelCode::MOGA,
    ::oo_2_0::AircraftTypeModelCode::MOGB,
    ::oo_2_0::AircraftTypeModelCode::MOGC,
    ::oo_2_0::AircraftTypeModelCode::MOL1,
    ::oo_2_0::AircraftTypeModelCode::MOL100,
    ::oo_2_0::AircraftTypeModelCode::MOL300,
    ::oo_2_0::AircraftTypeModelCode::MOL400,
    ::oo_2_0::AircraftTypeModelCode::MOM2M,
    ::oo_2_0::AircraftTypeModelCode::MOM400,
    ::oo_2_0::AircraftTypeModelCode::MONGOL,
    ::oo_2_0::AircraftTypeModelCode::MONGOS,
    ::oo_2_0::AircraftTypeModelCode::MOO,
    ::oo_2_0::AircraftTypeModelCode::MOSS,
    ::oo_2_0::AircraftTypeModelCode::MOU,
    ::oo_2_0::AircraftTypeModelCode::MOUJIK,
    ::oo_2_0::AircraftTypeModelCode::MR1,
    ::oo_2_0::AircraftTypeModelCode::MR1A,
    ::oo_2_0::AircraftTypeModelCode::MR2,
    ::oo_2_0::AircraftTypeModelCode::MR3,
    ::oo_2_0::AircraftTypeModelCode::MRC,
    ::oo_2_0::AircraftTypeModelCode::MRCAN,
    ::oo_2_0::AircraftTypeModelCode::MS760,
    ::oo_2_0::AircraftTypeModelCode::MU2,
    ::oo_2_0::AircraftTypeModelCode::MU2A,
    ::oo_2_0::AircraftTypeModelCode::MU2B,
    ::oo_2_0::AircraftTypeModelCode::MU2C,
    ::oo_2_0::AircraftTypeModelCode::MU2D,
    ::oo_2_0::AircraftTypeModelCode::MU2E,
    ::oo_2_0::AircraftTypeModelCode::MU2F,
    ::oo_2_0::AircraftTypeModelCode::MU2G,
    ::oo_2_0::AircraftTypeModelCode::MU2J,
    ::oo_2_0::AircraftTypeModelCode::MU2JMQ,
    ::oo_2_0::AircraftTypeModelCode::MU2K,
    ::oo_2_0::AircraftTypeModelCode::MU2S,
    ::oo_2_0::AircraftTypeModelCode::MU3,
    ::oo_2_0::AircraftTypeModelCode::MUREN2,
    ::oo_2_0::AircraftTypeModelCode::MURENS,
    ::oo_2_0::AircraftTypeModelCode::MUSH,
    ::oo_2_0::AircraftTypeModelCode::MUSR25,
    ::oo_2_0::AircraftTypeModelCode::MV22,
    ::oo_2_0::AircraftTypeModelCode::MX1,
    ::oo_2_0::AircraftTypeModelCode::MX2,
    ::oo_2_0::AircraftTypeModelCode::MY104,
    ::oo_2_0::AircraftTypeModelCode::MY20,
    ::oo_2_0::AircraftTypeModelCode::MYSTB2,
    ::oo_2_0::AircraftTypeModelCode::MYSTF,
    ::oo_2_0::AircraftTypeModelCode::MYSTS,
    ::oo_2_0::AircraftTypeModelCode::N145,
    ::oo_2_0::AircraftTypeModelCode::N2130,
    ::oo_2_0::AircraftTypeModelCode::N22,
    ::oo_2_0::AircraftTypeModelCode::N22A,
    ::oo_2_0::AircraftTypeModelCode::N22B,
    ::oo_2_0::AircraftTypeModelCode::N22BMI,
    ::oo_2_0::AircraftTypeModelCode::N22MIS,
    ::oo_2_0::AircraftTypeModelCode::N24,
    ::oo_2_0::AircraftTypeModelCode::N24A,
    ::oo_2_0::AircraftTypeModelCode::N250,
    ::oo_2_0::AircraftTypeModelCode::N25010,
    ::oo_2_0::AircraftTypeModelCode::N2501F,
    ::oo_2_0::AircraftTypeModelCode::N262,
    ::oo_2_0::AircraftTypeModelCode::N262A,
    ::oo_2_0::AircraftTypeModelCode::N262B,
    ::oo_2_0::AircraftTypeModelCode::N262C,
    ::oo_2_0::AircraftTypeModelCode::N262D,
    ::oo_2_0::AircraftTypeModelCode::N270,
    ::oo_2_0::AircraftTypeModelCode::N5A,
    ::oo_2_0::AircraftTypeModelCode::N621,
    ::oo_2_0::AircraftTypeModelCode::N821,
    ::oo_2_0::AircraftTypeModelCode::NA1,
    ::oo_2_0::AircraftTypeModelCode::NA16,
    ::oo_2_0::AircraftTypeModelCode::NAC100,
    ::oo_2_0::AircraftTypeModelCode::NAS332,
    ::oo_2_0::AircraftTypeModelCode::NBE407,
    ::oo_2_0::AircraftTypeModelCode::NBE412,
    ::oo_2_0::AircraftTypeModelCode::NBE430,
    ::oo_2_0::AircraftTypeModelCode::NBO105,
    ::oo_2_0::AircraftTypeModelCode::NC130,
    ::oo_2_0::AircraftTypeModelCode::NC130A,
    ::oo_2_0::AircraftTypeModelCode::NC130E,
    ::oo_2_0::AircraftTypeModelCode::NC130H,
    ::oo_2_0::AircraftTypeModelCode::NC141A,
    ::oo_2_0::AircraftTypeModelCode::NC212,
    ::oo_2_0::AircraftTypeModelCode::NC2121,
    ::oo_2_0::AircraftTypeModelCode::NC2122,
    ::oo_2_0::AircraftTypeModelCode::NCH46,
    ::oo_2_0::AircraftTypeModelCode::ND2501,
    ::oo_2_0::AircraftTypeModelCode::ND2504,
    ::oo_2_0::AircraftTypeModelCode::ND262C,
    ::oo_2_0::AircraftTypeModelCode::ND3202,
    ::oo_2_0::AircraftTypeModelCode::ND3400,
    ::oo_2_0::AircraftTypeModelCode::NEACP,
    ::oo_2_0::AircraftTypeModelCode::NEIVAR,
    ::oo_2_0::AircraftTypeModelCode::NEIVAU,
    ::oo_2_0::AircraftTypeModelCode::NESHD,
    ::oo_2_0::AircraftTypeModelCode::NF4J,
    ::oo_2_0::AircraftTypeModelCode::NF5,
    ::oo_2_0::AircraftTypeModelCode::NF5A,
    ::oo_2_0::AircraftTypeModelCode::NF5B,
    ::oo_2_0::AircraftTypeModelCode::NH90,
    ::oo_2_0::AircraftTypeModelCode::NH90NF,
    ::oo_2_0::AircraftTypeModelCode::NH90TT,
    ::oo_2_0::AircraftTypeModelCode::NHH2D,
    ::oo_2_0::AircraftTypeModelCode::NIM1,
    ::oo_2_0::AircraftTypeModelCode::NIM2,
    ::oo_2_0::AircraftTypeModelCode::NIM200,
    ::oo_2_0::AircraftTypeModelCode::NIMA3,
    ::oo_2_0::AircraftTypeModelCode::NIMMK3,
    ::oo_2_0::AircraftTypeModelCode::NIMMR1,
    ::oo_2_0::AircraftTypeModelCode::NIMMR2,
    ::oo_2_0::AircraftTypeModelCode::NIMR1,
    ::oo_2_0::AircraftTypeModelCode::NKC135,
    ::oo_2_0::AircraftTypeModelCode::NMM300,
    ::oo_2_0::AircraftTypeModelCode::NMSP20,
    ::oo_2_0::AircraftTypeModelCode::NOGA6,
    ::oo_2_0::AircraftTypeModelCode::NORD,
    ::oo_2_0::AircraftTypeModelCode::NP3A,
    ::oo_2_0::AircraftTypeModelCode::NRD626,
    ::oo_2_0::AircraftTypeModelCode::NSTR,
    ::oo_2_0::AircraftTypeModelCode::NU1B,
    ::oo_2_0::AircraftTypeModelCode::NUH1E,
    ::oo_2_0::AircraftTypeModelCode::NY4,
    ::oo_2_0::AircraftTypeModelCode::NY5,
    ::oo_2_0::AircraftTypeModelCode::O1,
    ::oo_2_0::AircraftTypeModelCode::O14,
    ::oo_2_0::AircraftTypeModelCode::O1A,
    ::oo_2_0::AircraftTypeModelCode::O1B,
    ::oo_2_0::AircraftTypeModelCode::O1C,
    ::oo_2_0::AircraftTypeModelCode::O1E,
    ::oo_2_0::AircraftTypeModelCode::O1G,
    ::oo_2_0::AircraftTypeModelCode::O2,
    ::oo_2_0::AircraftTypeModelCode::O2337S,
    ::oo_2_0::AircraftTypeModelCode::O29,
    ::oo_2_0::AircraftTypeModelCode::O2A,
    ::oo_2_0::AircraftTypeModelCode::O2B,
    ::oo_2_0::AircraftTypeModelCode::OA010A,
    ::oo_2_0::AircraftTypeModelCode::OA10,
    ::oo_2_0::AircraftTypeModelCode::OA37,
    ::oo_2_0::AircraftTypeModelCode::OA4,
    ::oo_2_0::AircraftTypeModelCode::OA4M,
    ::oo_2_0::AircraftTypeModelCode::OBS2,
    ::oo_2_0::AircraftTypeModelCode::OC135B,
    ::oo_2_0::AircraftTypeModelCode::OH1,
    ::oo_2_0::AircraftTypeModelCode::OH13,
    ::oo_2_0::AircraftTypeModelCode::OH13G,
    ::oo_2_0::AircraftTypeModelCode::OH13H,
    ::oo_2_0::AircraftTypeModelCode::OH13J,
    ::oo_2_0::AircraftTypeModelCode::OH13K,
    ::oo_2_0::AircraftTypeModelCode::OH13S,
    ::oo_2_0::AircraftTypeModelCode::OH23,
    ::oo_2_0::AircraftTypeModelCode::OH23A,
    ::oo_2_0::AircraftTypeModelCode::OH23B,
    ::oo_2_0::AircraftTypeModelCode::OH23C,
    ::oo_2_0::AircraftTypeModelCode::OH23D,
    ::oo_2_0::AircraftTypeModelCode::OH23F,
    ::oo_2_0::AircraftTypeModelCode::OH23G,
    ::oo_2_0::AircraftTypeModelCode::OH23HL,
    ::oo_2_0::AircraftTypeModelCode::OH5,
    ::oo_2_0::AircraftTypeModelCode::OH58,
    ::oo_2_0::AircraftTypeModelCode::OH58A,
    ::oo_2_0::AircraftTypeModelCode::OH58B,
    ::oo_2_0::AircraftTypeModelCode::OH58C,
    ::oo_2_0::AircraftTypeModelCode::OH58D,
    ::oo_2_0::AircraftTypeModelCode::OH58DC,
    ::oo_2_0::AircraftTypeModelCode::OH58JT,
    ::oo_2_0::AircraftTypeModelCode::OH5A,
    ::oo_2_0::AircraftTypeModelCode::OH6,
    ::oo_2_0::AircraftTypeModelCode::OH6A,
    ::oo_2_0::AircraftTypeModelCode::OH6B,
    ::oo_2_0::AircraftTypeModelCode::OH6C,
    ::oo_2_0::AircraftTypeModelCode::OH6D,
    ::oo_2_0::AircraftTypeModelCode::OH6DA,
    ::oo_2_0::AircraftTypeModelCode::OH6J,
    ::oo_2_0::AircraftTypeModelCode::OMEGA2,
    ::oo_2_0::AircraftTypeModelCode::ORAO1,
    ::oo_2_0::AircraftTypeModelCode::ORAO2,
    ::oo_2_0::AircraftTypeModelCode::ORAO2A,
    ::oo_2_0::AircraftTypeModelCode::OT47B,
    ::oo_2_0::AircraftTypeModelCode::OUR,
    ::oo_2_0::AircraftTypeModelCode::OV1,
    ::oo_2_0::AircraftTypeModelCode::OV10,
    ::oo_2_0::AircraftTypeModelCode::OV10A,
    ::oo_2_0::AircraftTypeModelCode::OV10B,
    ::oo_2_0::AircraftTypeModelCode::OV10C,
    ::oo_2_0::AircraftTypeModelCode::OV10D,
    ::oo_2_0::AircraftTypeModelCode::OV10E,
    ::oo_2_0::AircraftTypeModelCode::OV10F,
    ::oo_2_0::AircraftTypeModelCode::OV1A,
    ::oo_2_0::AircraftTypeModelCode::OV1B,
    ::oo_2_0::AircraftTypeModelCode::OV1C,
    ::oo_2_0::AircraftTypeModelCode::OV1D,
    ::oo_2_0::AircraftTypeModelCode::P136,
    ::oo_2_0::AircraftTypeModelCode::P148,
    ::oo_2_0::AircraftTypeModelCode::P149,
    ::oo_2_0::AircraftTypeModelCode::P149D,
    ::oo_2_0::AircraftTypeModelCode::P166,
    ::oo_2_0::AircraftTypeModelCode::P166B,
    ::oo_2_0::AircraftTypeModelCode::P166C,
    ::oo_2_0::AircraftTypeModelCode::P166D,
    ::oo_2_0::AircraftTypeModelCode::P166M,
    ::oo_2_0::AircraftTypeModelCode::P166S,
    ::oo_2_0::AircraftTypeModelCode::P16DL2,
    ::oo_2_0::AircraftTypeModelCode::P16DL3,
    ::oo_2_0::AircraftTypeModelCode::P180,
    ::oo_2_0::AircraftTypeModelCode::P2,
    ::oo_2_0::AircraftTypeModelCode::P2E,
    ::oo_2_0::AircraftTypeModelCode::P2F,
    ::oo_2_0::AircraftTypeModelCode::P2H,
    ::oo_2_0::AircraftTypeModelCode::P2J,
    ::oo_2_0::AircraftTypeModelCode::P2V,
    ::oo_2_0::AircraftTypeModelCode::P3A,
    ::oo_2_0::AircraftTypeModelCode::P3B,
    ::oo_2_0::AircraftTypeModelCode::P3C,
    ::oo_2_0::AircraftTypeModelCode::P3C1,
    ::oo_2_0::AircraftTypeModelCode::P3C2,
    ::oo_2_0::AircraftTypeModelCode::P3C3,
    ::oo_2_0::AircraftTypeModelCode::P3CAIP,
    ::oo_2_0::AircraftTypeModelCode::P3CJ,
    ::oo_2_0::AircraftTypeModelCode::P3SEN,
    ::oo_2_0::AircraftTypeModelCode::P4,
    ::oo_2_0::AircraftTypeModelCode::P51,
    ::oo_2_0::AircraftTypeModelCode::P55A,
    ::oo_2_0::AircraftTypeModelCode::P68,
    ::oo_2_0::AircraftTypeModelCode::P68A,
    ::oo_2_0::AircraftTypeModelCode::P68B,
    ::oo_2_0::AircraftTypeModelCode::P68C,
    ::oo_2_0::AircraftTypeModelCode::P68CTC,
    ::oo_2_0::AircraftTypeModelCode::P68OBS,
    ::oo_2_0::AircraftTypeModelCode::P95,
    ::oo_2_0::AircraftTypeModelCode::P95MAR,
    ::oo_2_0::AircraftTypeModelCode::PA11,
    ::oo_2_0::AircraftTypeModelCode::PA12,
    ::oo_2_0::AircraftTypeModelCode::PA14,
    ::oo_2_0::AircraftTypeModelCode::PA15,
    ::oo_2_0::AircraftTypeModelCode::PA16,
    ::oo_2_0::AircraftTypeModelCode::PA17,
    ::oo_2_0::AircraftTypeModelCode::PA18,
    ::oo_2_0::AircraftTypeModelCode::PA2,
    ::oo_2_0::AircraftTypeModelCode::PA20,
    ::oo_2_0::AircraftTypeModelCode::PA200A,
    ::oo_2_0::AircraftTypeModelCode::PA200E,
    ::oo_2_0::AircraftTypeModelCode::PA200I,
    ::oo_2_0::AircraftTypeModelCode::PA22,
    ::oo_2_0::AircraftTypeModelCode::PA23,
    ::oo_2_0::AircraftTypeModelCode::PA24,
    ::oo_2_0::AircraftTypeModelCode::PA25,
    ::oo_2_0::AircraftTypeModelCode::PA28,
    ::oo_2_0::AircraftTypeModelCode::PA2815,
    ::oo_2_0::AircraftTypeModelCode::PA2816,
    ::oo_2_0::AircraftTypeModelCode::PA2818,
    ::oo_2_0::AircraftTypeModelCode::PA2820,
    ::oo_2_0::AircraftTypeModelCode::PA2821,
    ::oo_2_0::AircraftTypeModelCode::PA2823,
    ::oo_2_0::AircraftTypeModelCode::PA2826,
    ::oo_2_0::AircraftTypeModelCode::PA28R,
    ::oo_2_0::AircraftTypeModelCode::PA29,
    ::oo_2_0::AircraftTypeModelCode::PA30,
    ::oo_2_0::AircraftTypeModelCode::PA31,
    ::oo_2_0::AircraftTypeModelCode::PA3131,
    ::oo_2_0::AircraftTypeModelCode::PA3135,
    ::oo_2_0::AircraftTypeModelCode::PA31T,
    ::oo_2_0::AircraftTypeModelCode::PA32,
    ::oo_2_0::AircraftTypeModelCode::PA3230,
    ::oo_2_0::AircraftTypeModelCode::PA34,
    ::oo_2_0::AircraftTypeModelCode::PA3422,
    ::oo_2_0::AircraftTypeModelCode::PA34II,
    ::oo_2_0::AircraftTypeModelCode::PA36,
    ::oo_2_0::AircraftTypeModelCode::PA38,
    ::oo_2_0::AircraftTypeModelCode::PA3811,
    ::oo_2_0::AircraftTypeModelCode::PA41,
    ::oo_2_0::AircraftTypeModelCode::PA42,
    ::oo_2_0::AircraftTypeModelCode::PA4210,
    ::oo_2_0::AircraftTypeModelCode::PA4272,
    ::oo_2_0::AircraftTypeModelCode::PA44,
    ::oo_2_0::AircraftTypeModelCode::PA4418,
    ::oo_2_0::AircraftTypeModelCode::PA46,
    ::oo_2_0::AircraftTypeModelCode::PA4635,
    ::oo_2_0::AircraftTypeModelCode::PA5,
    ::oo_2_0::AircraftTypeModelCode::PA60,
    ::oo_2_0::AircraftTypeModelCode::PACK,
    ::oo_2_0::AircraftTypeModelCode::PACMUS,
    ::oo_2_0::AircraftTypeModelCode::PACSHA,
    ::oo_2_0::AircraftTypeModelCode::PAH2,
    ::oo_2_0::AircraftTypeModelCode::PANATL,
    ::oo_2_0::AircraftTypeModelCode::PARO,
    ::oo_2_0::AircraftTypeModelCode::PAT1,
    ::oo_2_0::AircraftTypeModelCode::PAYE,
    ::oo_2_0::AircraftTypeModelCode::PC12,
    ::oo_2_0::AircraftTypeModelCode::PC1245,
    ::oo_2_0::AircraftTypeModelCode::PC12E,
    ::oo_2_0::AircraftTypeModelCode::PC6,
    ::oo_2_0::AircraftTypeModelCode::PC6A,
    ::oo_2_0::AircraftTypeModelCode::PC6B,
    ::oo_2_0::AircraftTypeModelCode::PC6C,
    ::oo_2_0::AircraftTypeModelCode::PC6CHR,
    ::oo_2_0::AircraftTypeModelCode::PC7,
    ::oo_2_0::AircraftTypeModelCode::PC7MK2,
    ::oo_2_0::AircraftTypeModelCode::PC8,
    ::oo_2_0::AircraftTypeModelCode::PC9,
    ::oo_2_0::AircraftTypeModelCode::PC9A,
    ::oo_2_0::AircraftTypeModelCode::PC9B,
    ::oo_2_0::AircraftTypeModelCode::PC9MK2,
    ::oo_2_0::AircraftTypeModelCode::PCHEL,
    ::oo_2_0::AircraftTypeModelCode::PD808,
    ::oo_2_0::AircraftTypeModelCode::PD808A,
    ::oo_2_0::AircraftTypeModelCode::PD808E,
    ::oo_2_0::AircraftTypeModelCode::PD808F,
    ::oo_2_0::AircraftTypeModelCode::PD808P,
    ::oo_2_0::AircraftTypeModelCode::PD808R,
    ::oo_2_0::AircraftTypeModelCode::PD808T,
    ::oo_2_0::AircraftTypeModelCode::PD808V,
    ::oo_2_0::AircraftTypeModelCode::PHFGR1,
    ::oo_2_0::AircraftTypeModelCode::PHFGR2,
    ::oo_2_0::AircraftTypeModelCode::PILL,
    ::oo_2_0::AircraftTypeModelCode::PINAVC,
    ::oo_2_0::AircraftTypeModelCode::PIPER,
    ::oo_2_0::AircraftTypeModelCode::PIR2C,
    ::oo_2_0::AircraftTypeModelCode::PIR2D,
    ::oo_2_0::AircraftTypeModelCode::PIR4,
    ::oo_2_0::AircraftTypeModelCode::PIR5,
    ::oo_2_0::AircraftTypeModelCode::PN200A,
    ::oo_2_0::AircraftTypeModelCode::PN200E,
    ::oo_2_0::AircraftTypeModelCode::PN200I,
    ::oo_2_0::AircraftTypeModelCode::PO2A,
    ::oo_2_0::AircraftTypeModelCode::PS1,
    ::oo_2_0::AircraftTypeModelCode::PS1SHM,
    ::oo_2_0::AircraftTypeModelCode::PS5,
    ::oo_2_0::AircraftTypeModelCode::PT1020,
    ::oo_2_0::AircraftTypeModelCode::PT1040,
    ::oo_2_0::AircraftTypeModelCode::PT6,
    ::oo_2_0::AircraftTypeModelCode::PT6A,
    ::oo_2_0::AircraftTypeModelCode::PZ105L,
    ::oo_2_0::AircraftTypeModelCode::PZ106B,
    ::oo_2_0::AircraftTypeModelCode::PZ106T,
    ::oo_2_0::AircraftTypeModelCode::PZ130T,
    ::oo_2_0::AircraftTypeModelCode::PZL104,
    ::oo_2_0::AircraftTypeModelCode::PZL110,
    ::oo_2_0::AircraftTypeModelCode::PZL111,
    ::oo_2_0::AircraftTypeModelCode::PZL126,
    ::oo_2_0::AircraftTypeModelCode::PZL130,
    ::oo_2_0::AircraftTypeModelCode::PZL230,
    ::oo_2_0::AircraftTypeModelCode::PZLDRO,
    ::oo_2_0::AircraftTypeModelCode::PZLM20,
    ::oo_2_0::AircraftTypeModelCode::PZLSW4,
    ::oo_2_0::AircraftTypeModelCode::PZLSW5,
    ::oo_2_0::AircraftTypeModelCode::PZLT45,
    ::oo_2_0::AircraftTypeModelCode::PZLW3,
    ::oo_2_0::AircraftTypeModelCode::PZLW3A,
    ::oo_2_0::AircraftTypeModelCode::PZLW3W,
    ::oo_2_0::AircraftTypeModelCode::PZTS11,
    ::oo_2_0::AircraftTypeModelCode::PZW3RM,
    ::oo_2_0::AircraftTypeModelCode::PZW3WA,
    ::oo_2_0::AircraftTypeModelCode::PZWI20,
    ::oo_2_0::AircraftTypeModelCode::PZWI35,
    ::oo_2_0::AircraftTypeModelCode::PZWI80,
    ::oo_2_0::AircraftTypeModelCode::Q5,
    ::oo_2_0::AircraftTypeModelCode::QF004E,
    ::oo_2_0::AircraftTypeModelCode::QF004G,
    ::oo_2_0::AircraftTypeModelCode::QU22,
    ::oo_2_0::AircraftTypeModelCode::QU800,
    ::oo_2_0::AircraftTypeModelCode::QU8800,
    ::oo_2_0::AircraftTypeModelCode::R1,
    ::oo_2_0::AircraftTypeModelCode::R1180,
    ::oo_2_0::AircraftTypeModelCode::R2160,
    ::oo_2_0::AircraftTypeModelCode::R235G,
    ::oo_2_0::AircraftTypeModelCode::R30012,
    ::oo_2_0::AircraftTypeModelCode::R30014,
    ::oo_2_0::AircraftTypeModelCode::R30016,
    ::oo_2_0::AircraftTypeModelCode::R90230,
    ::oo_2_0::AircraftTypeModelCode::R90420,
    ::oo_2_0::AircraftTypeModelCode::R95,
    ::oo_2_0::AircraftTypeModelCode::RA5,
    ::oo_2_0::AircraftTypeModelCode::RA7E,
    ::oo_2_0::AircraftTypeModelCode::RAFAL,
    ::oo_2_0::AircraftTypeModelCode::RAFALB,
    ::oo_2_0::AircraftTypeModelCode::RAFALC,
    ::oo_2_0::AircraftTypeModelCode::RAFALM,
    ::oo_2_0::AircraftTypeModelCode::RAH66,
    ::oo_2_0::AircraftTypeModelCode::RAL235,
    ::oo_2_0::AircraftTypeModelCode::RANGER,
    ::oo_2_0::AircraftTypeModelCode::RAY390,
    ::oo_2_0::AircraftTypeModelCode::RB57,
    ::oo_2_0::AircraftTypeModelCode::RC12,
    ::oo_2_0::AircraftTypeModelCode::RC121,
    ::oo_2_0::AircraftTypeModelCode::RC12DG,
    ::oo_2_0::AircraftTypeModelCode::RC12DS,
    ::oo_2_0::AircraftTypeModelCode::RC12F,
    ::oo_2_0::AircraftTypeModelCode::RC12HG,
    ::oo_2_0::AircraftTypeModelCode::RC12HS,
    ::oo_2_0::AircraftTypeModelCode::RC12KG,
    ::oo_2_0::AircraftTypeModelCode::RC12KS,
    ::oo_2_0::AircraftTypeModelCode::RC12M,
    ::oo_2_0::AircraftTypeModelCode::RC130,
    ::oo_2_0::AircraftTypeModelCode::RC130A,
    ::oo_2_0::AircraftTypeModelCode::RC130E,
    ::oo_2_0::AircraftTypeModelCode::RC130H,
    ::oo_2_0::AircraftTypeModelCode::RC130S,
    ::oo_2_0::AircraftTypeModelCode::RC135,
    ::oo_2_0::AircraftTypeModelCode::RC135A,
    ::oo_2_0::AircraftTypeModelCode::RC135C,
    ::oo_2_0::AircraftTypeModelCode::RC135D,
    ::oo_2_0::AircraftTypeModelCode::RC135M,
    ::oo_2_0::AircraftTypeModelCode::RC135S,
    ::oo_2_0::AircraftTypeModelCode::RC135T,
    ::oo_2_0::AircraftTypeModelCode::RC135U,
    ::oo_2_0::AircraftTypeModelCode::RC135V,
    ::oo_2_0::AircraftTypeModelCode::RC135W,
    ::oo_2_0::AircraftTypeModelCode::RC135X,
    ::oo_2_0::AircraftTypeModelCode::RCI2F,
    ::oo_2_0::AircraftTypeModelCode::RCI2HS,
    ::oo_2_0::AircraftTypeModelCode::RCI2M,
    ::oo_2_0::AircraftTypeModelCode::RCOBRA,
    ::oo_2_0::AircraftTypeModelCode::RDR400,
    ::oo_2_0::AircraftTypeModelCode::REBEL,
    ::oo_2_0::AircraftTypeModelCode::RF104G,
    ::oo_2_0::AircraftTypeModelCode::RF111A,
    ::oo_2_0::AircraftTypeModelCode::RF111C,
    ::oo_2_0::AircraftTypeModelCode::RF18,
    ::oo_2_0::AircraftTypeModelCode::RF18D,
    ::oo_2_0::AircraftTypeModelCode::RF35,
    ::oo_2_0::AircraftTypeModelCode::RF35XD,
    ::oo_2_0::AircraftTypeModelCode::RF4,
    ::oo_2_0::AircraftTypeModelCode::RF400,
    ::oo_2_0::AircraftTypeModelCode::RF47FO,
    ::oo_2_0::AircraftTypeModelCode::RF4B,
    ::oo_2_0::AircraftTypeModelCode::RF4C,
    ::oo_2_0::AircraftTypeModelCode::RF4E,
    ::oo_2_0::AircraftTypeModelCode::RF4EJ,
    ::oo_2_0::AircraftTypeModelCode::RF4K,
    ::oo_2_0::AircraftTypeModelCode::RF5,
    ::oo_2_0::AircraftTypeModelCode::RF5A,
    ::oo_2_0::AircraftTypeModelCode::RF5E,
    ::oo_2_0::AircraftTypeModelCode::RF5G,
    ::oo_2_0::AircraftTypeModelCode::RF5T,
    ::oo_2_0::AircraftTypeModelCode::RF600,
    ::oo_2_0::AircraftTypeModelCode::RF8,
    ::oo_2_0::AircraftTypeModelCode::RF84F,
    ::oo_2_0::AircraftTypeModelCode::RF8A,
    ::oo_2_0::AircraftTypeModelCode::RF8G,
    ::oo_2_0::AircraftTypeModelCode::RF9,
    ::oo_2_0::AircraftTypeModelCode::RFB100,
    ::oo_2_0::AircraftTypeModelCode::RFB400,
    ::oo_2_0::AircraftTypeModelCode::RFB600,
    ::oo_2_0::AircraftTypeModelCode::RH1100,
    ::oo_2_0::AircraftTypeModelCode::RH22,
    ::oo_2_0::AircraftTypeModelCode::RH53,
    ::oo_2_0::AircraftTypeModelCode::RH53A,
    ::oo_2_0::AircraftTypeModelCode::RH53D,
    ::oo_2_0::AircraftTypeModelCode::RJ1,
    ::oo_2_0::AircraftTypeModelCode::RJ100,
    ::oo_2_0::AircraftTypeModelCode::RJ115,
    ::oo_2_0::AircraftTypeModelCode::RJ1HK,
    ::oo_2_0::AircraftTypeModelCode::RJ200,
    ::oo_2_0::AircraftTypeModelCode::RJ700A,
    ::oo_2_0::AircraftTypeModelCode::RJ700B,
    ::oo_2_0::AircraftTypeModelCode::RO162F,
    ::oo_2_0::AircraftTypeModelCode::ROB100,
    ::oo_2_0::AircraftTypeModelCode::ROB200,
    ::oo_2_0::AircraftTypeModelCode::ROBX4,
    ::oo_2_0::AircraftTypeModelCode::ROMISL,
    ::oo_2_0::AircraftTypeModelCode::ROR22,
    ::oo_2_0::AircraftTypeModelCode::ROR44,
    ::oo_2_0::AircraftTypeModelCode::RP3A,
    ::oo_2_0::AircraftTypeModelCode::RP3D,
    ::oo_2_0::AircraftTypeModelCode::RQ1A,
    ::oo_2_0::AircraftTypeModelCode::RQ41,
    ::oo_2_0::AircraftTypeModelCode::RQ42,
    ::oo_2_0::AircraftTypeModelCode::RQ4A,
    ::oo_2_0::AircraftTypeModelCode::RSA40,
    ::oo_2_0::AircraftTypeModelCode::RSA40A,
    ::oo_2_0::AircraftTypeModelCode::RSA60,
    ::oo_2_0::AircraftTypeModelCode::RSA75,
    ::oo_2_0::AircraftTypeModelCode::RSA75A,
    ::oo_2_0::AircraftTypeModelCode::RT26,
    ::oo_2_0::AircraftTypeModelCode::RT33A,
    ::oo_2_0::AircraftTypeModelCode::RU21,
    ::oo_2_0::AircraftTypeModelCode::RU21J,
    ::oo_2_0::AircraftTypeModelCode::RU38A,
    ::oo_2_0::AircraftTypeModelCode::RUT151,
    ::oo_2_0::AircraftTypeModelCode::RUT202,
    ::oo_2_0::AircraftTypeModelCode::RV1,
    ::oo_2_0::AircraftTypeModelCode::RV1D,
    ::oo_2_0::AircraftTypeModelCode::RY21,
    ::oo_2_0::AircraftTypeModelCode::RY40,
    ::oo_2_0::AircraftTypeModelCode::RY65,
    ::oo_2_0::AircraftTypeModelCode::S100B,
    ::oo_2_0::AircraftTypeModelCode::S12E,
    ::oo_2_0::AircraftTypeModelCode::S16SHE,
    ::oo_2_0::AircraftTypeModelCode::S19,
    ::oo_2_0::AircraftTypeModelCode::S1B2,
    ::oo_2_0::AircraftTypeModelCode::S208,
    ::oo_2_0::AircraftTypeModelCode::S210,
    ::oo_2_0::AircraftTypeModelCode::S210M,
    ::oo_2_0::AircraftTypeModelCode::S211,
    ::oo_2_0::AircraftTypeModelCode::S211A,
    ::oo_2_0::AircraftTypeModelCode::S22C,
    ::oo_2_0::AircraftTypeModelCode::S235,
    ::oo_2_0::AircraftTypeModelCode::S235E,
    ::oo_2_0::AircraftTypeModelCode::S2A,
    ::oo_2_0::AircraftTypeModelCode::S2BUC,
    ::oo_2_0::AircraftTypeModelCode::S2C,
    ::oo_2_0::AircraftTypeModelCode::S2E,
    ::oo_2_0::AircraftTypeModelCode::S2G,
    ::oo_2_0::AircraftTypeModelCode::S2N,
    ::oo_2_0::AircraftTypeModelCode::S2RT,
    ::oo_2_0::AircraftTypeModelCode::S2T,
    ::oo_2_0::AircraftTypeModelCode::S2TRK,
    ::oo_2_0::AircraftTypeModelCode::S312,
    ::oo_2_0::AircraftTypeModelCode::S32C,
    ::oo_2_0::AircraftTypeModelCode::S35,
    ::oo_2_0::AircraftTypeModelCode::S35E,
    ::oo_2_0::AircraftTypeModelCode::S365N2,
    ::oo_2_0::AircraftTypeModelCode::S365N3,
    ::oo_2_0::AircraftTypeModelCode::S366G1,
    ::oo_2_0::AircraftTypeModelCode::S3A,
    ::oo_2_0::AircraftTypeModelCode::S3B,
    ::oo_2_0::AircraftTypeModelCode::S55CHK,
    ::oo_2_0::AircraftTypeModelCode::S55T,
    ::oo_2_0::AircraftTypeModelCode::S58,
    ::oo_2_0::AircraftTypeModelCode::S58T,
    ::oo_2_0::AircraftTypeModelCode::S600,
    ::oo_2_0::AircraftTypeModelCode::S61,
    ::oo_2_0::AircraftTypeModelCode::S61A,
    ::oo_2_0::AircraftTypeModelCode::S61AN,
    ::oo_2_0::AircraftTypeModelCode::S61L,
    ::oo_2_0::AircraftTypeModelCode::S61N,
    ::oo_2_0::AircraftTypeModelCode::S61N1,
    ::oo_2_0::AircraftTypeModelCode::S62,
    ::oo_2_0::AircraftTypeModelCode::S62B,
    ::oo_2_0::AircraftTypeModelCode::S64E,
    ::oo_2_0::AircraftTypeModelCode::S65A,
    ::oo_2_0::AircraftTypeModelCode::S65E,
    ::oo_2_0::AircraftTypeModelCode::S65SEA,
    ::oo_2_0::AircraftTypeModelCode::S70,
    ::oo_2_0::AircraftTypeModelCode::S70A,
    ::oo_2_0::AircraftTypeModelCode::S70A1L,
    ::oo_2_0::AircraftTypeModelCode::S70B2,
    ::oo_2_0::AircraftTypeModelCode::S70BS,
    ::oo_2_0::AircraftTypeModelCode::S70C,
    ::oo_2_0::AircraftTypeModelCode::S70LOG,
    ::oo_2_0::AircraftTypeModelCode::S76,
    ::oo_2_0::AircraftTypeModelCode::S76A,
    ::oo_2_0::AircraftTypeModelCode::S76B,
    ::oo_2_0::AircraftTypeModelCode::S76C,
    ::oo_2_0::AircraftTypeModelCode::S76E,
    ::oo_2_0::AircraftTypeModelCode::S76M2,
    ::oo_2_0::AircraftTypeModelCode::S76N,
    ::oo_2_0::AircraftTypeModelCode::S76S,
    ::oo_2_0::AircraftTypeModelCode::S7B,
    ::oo_2_0::AircraftTypeModelCode::S7BM,
    ::oo_2_0::AircraftTypeModelCode::S80E,
    ::oo_2_0::AircraftTypeModelCode::S80M,
    ::oo_2_0::AircraftTypeModelCode::S880,
    ::oo_2_0::AircraftTypeModelCode::S890,
    ::oo_2_0::AircraftTypeModelCode::S892,
    ::oo_2_0::AircraftTypeModelCode::S894,
    ::oo_2_0::AircraftTypeModelCode::S9,
    ::oo_2_0::AircraftTypeModelCode::S92C,
    ::oo_2_0::AircraftTypeModelCode::S92HB,
    ::oo_2_0::AircraftTypeModelCode::S92U,
    ::oo_2_0::AircraftTypeModelCode::SA237A,
    ::oo_2_0::AircraftTypeModelCode::SA238A,
    ::oo_2_0::AircraftTypeModelCode::SA315,
    ::oo_2_0::AircraftTypeModelCode::SA315B,
    ::oo_2_0::AircraftTypeModelCode::SA316,
    ::oo_2_0::AircraftTypeModelCode::SA316A,
    ::oo_2_0::AircraftTypeModelCode::SA316B,
    ::oo_2_0::AircraftTypeModelCode::SA318,
    ::oo_2_0::AircraftTypeModelCode::SA318C,
    ::oo_2_0::AircraftTypeModelCode::SA319A,
    ::oo_2_0::AircraftTypeModelCode::SA319B,
    ::oo_2_0::AircraftTypeModelCode::SA319W,
    ::oo_2_0::AircraftTypeModelCode::SA321,
    ::oo_2_0::AircraftTypeModelCode::SA321F,
    ::oo_2_0::AircraftTypeModelCode::SA321G,
    ::oo_2_0::AircraftTypeModelCode::SA321H,
    ::oo_2_0::AircraftTypeModelCode::SA321J,
    ::oo_2_0::AircraftTypeModelCode::SA321K,
    ::oo_2_0::AircraftTypeModelCode::SA321L,
    ::oo_2_0::AircraftTypeModelCode::SA321M,
    ::oo_2_0::AircraftTypeModelCode::SA330,
    ::oo_2_0::AircraftTypeModelCode::SA330B,
    ::oo_2_0::AircraftTypeModelCode::SA330E,
    ::oo_2_0::AircraftTypeModelCode::SA330H,
    ::oo_2_0::AircraftTypeModelCode::SA330J,
    ::oo_2_0::AircraftTypeModelCode::SA330L,
    ::oo_2_0::AircraftTypeModelCode::SA332,
    ::oo_2_0::AircraftTypeModelCode::SA341,
    ::oo_2_0::AircraftTypeModelCode::SA341B,
    ::oo_2_0::AircraftTypeModelCode::SA341C,
    ::oo_2_0::AircraftTypeModelCode::SA341D,
    ::oo_2_0::AircraftTypeModelCode::SA341E,
    ::oo_2_0::AircraftTypeModelCode::SA341F,
    ::oo_2_0::AircraftTypeModelCode::SA341G,
    ::oo_2_0::AircraftTypeModelCode::SA341H,
    ::oo_2_0::AircraftTypeModelCode::SA341M,
    ::oo_2_0::AircraftTypeModelCode::SA342,
    ::oo_2_0::AircraftTypeModelCode::SA342A,
    ::oo_2_0::AircraftTypeModelCode::SA342G,
    ::oo_2_0::AircraftTypeModelCode::SA342J,
    ::oo_2_0::AircraftTypeModelCode::SA342K,
    ::oo_2_0::AircraftTypeModelCode::SA342L,
    ::oo_2_0::AircraftTypeModelCode::SA342M,
    ::oo_2_0::AircraftTypeModelCode::SA342V,
    ::oo_2_0::AircraftTypeModelCode::SA350,
    ::oo_2_0::AircraftTypeModelCode::SA350B,
    ::oo_2_0::AircraftTypeModelCode::SA350E,
    ::oo_2_0::AircraftTypeModelCode::SA35B2,
    ::oo_2_0::AircraftTypeModelCode::SA35B3,
    ::oo_2_0::AircraftTypeModelCode::SA35BA,
    ::oo_2_0::AircraftTypeModelCode::SA360,
    ::oo_2_0::AircraftTypeModelCode::SA360C,
    ::oo_2_0::AircraftTypeModelCode::SA361,
    ::oo_2_0::AircraftTypeModelCode::SA365,
    ::oo_2_0::AircraftTypeModelCode::SA365C,
    ::oo_2_0::AircraftTypeModelCode::SA365F,
    ::oo_2_0::AircraftTypeModelCode::SA365K,
    ::oo_2_0::AircraftTypeModelCode::SA365M,
    ::oo_2_0::AircraftTypeModelCode::SA365N,
    ::oo_2_0::AircraftTypeModelCode::SA365S,
    ::oo_2_0::AircraftTypeModelCode::SA366G,
    ::oo_2_0::AircraftTypeModelCode::SA36BB,
    ::oo_2_0::AircraftTypeModelCode::SA37,
    ::oo_2_0::AircraftTypeModelCode::SA3BUL,
    ::oo_2_0::AircraftTypeModelCode::SA3TMK,
    ::oo_2_0::AircraftTypeModelCode::SAA300,
    ::oo_2_0::AircraftTypeModelCode::SAAB91,
    ::oo_2_0::AircraftTypeModelCode::SAR50,
    ::oo_2_0::AircraftTypeModelCode::SASS,
    ::oo_2_0::AircraftTypeModelCode::SB32,
    ::oo_2_0::AircraftTypeModelCode::SB34A,
    ::oo_2_0::AircraftTypeModelCode::SB34B,
    ::oo_2_0::AircraftTypeModelCode::SB35,
    ::oo_2_0::AircraftTypeModelCode::SB35E,
    ::oo_2_0::AircraftTypeModelCode::SB35M,
    ::oo_2_0::AircraftTypeModelCode::SB35X,
    ::oo_2_0::AircraftTypeModelCode::SB37,
    ::oo_2_0::AircraftTypeModelCode::SB37M,
    ::oo_2_0::AircraftTypeModelCode::SB39M,
    ::oo_2_0::AircraftTypeModelCode::SB7L,
    ::oo_2_0::AircraftTypeModelCode::SC269A,
    ::oo_2_0::AircraftTypeModelCode::SC3,
    ::oo_2_0::AircraftTypeModelCode::SC300C,
    ::oo_2_0::AircraftTypeModelCode::SC330,
    ::oo_2_0::AircraftTypeModelCode::SC7,
    ::oo_2_0::AircraftTypeModelCode::SC95B,
    ::oo_2_0::AircraftTypeModelCode::SCOUT,
    ::oo_2_0::AircraftTypeModelCode::SCP,
    ::oo_2_0::AircraftTypeModelCode::SCR125,
    ::oo_2_0::AircraftTypeModelCode::SCTP,
    ::oo_2_0::AircraftTypeModelCode::SD27,
    ::oo_2_0::AircraftTypeModelCode::SE210,
    ::oo_2_0::AircraftTypeModelCode::SE3130,
    ::oo_2_0::AircraftTypeModelCode::SE313B,
    ::oo_2_0::AircraftTypeModelCode::SEABAT,
    ::oo_2_0::AircraftTypeModelCode::SEACD2,
    ::oo_2_0::AircraftTypeModelCode::SEACOB,
    ::oo_2_0::AircraftTypeModelCode::SEAGUL,
    ::oo_2_0::AircraftTypeModelCode::SEALYX,
    ::oo_2_0::AircraftTypeModelCode::SEARNG,
    ::oo_2_0::AircraftTypeModelCode::SEASPT,
    ::oo_2_0::AircraftTypeModelCode::SEATA,
    ::oo_2_0::AircraftTypeModelCode::SEN,
    ::oo_2_0::AircraftTypeModelCode::SENMK2,
    ::oo_2_0::AircraftTypeModelCode::SETE4,
    ::oo_2_0::AircraftTypeModelCode::SF25A,
    ::oo_2_0::AircraftTypeModelCode::SF260,
    ::oo_2_0::AircraftTypeModelCode::SF260A,
    ::oo_2_0::AircraftTypeModelCode::SF260B,
    ::oo_2_0::AircraftTypeModelCode::SF260C,
    ::oo_2_0::AircraftTypeModelCode::SF260E,
    ::oo_2_0::AircraftTypeModelCode::SF260F,
    ::oo_2_0::AircraftTypeModelCode::SF260M,
    ::oo_2_0::AircraftTypeModelCode::SF260T,
    ::oo_2_0::AircraftTypeModelCode::SF260W,
    ::oo_2_0::AircraftTypeModelCode::SF260Z,
    ::oo_2_0::AircraftTypeModelCode::SF269D,
    ::oo_2_0::AircraftTypeModelCode::SF340,
    ::oo_2_0::AircraftTypeModelCode::SF37,
    ::oo_2_0::AircraftTypeModelCode::SF5,
    ::oo_2_0::AircraftTypeModelCode::SF5A,
    ::oo_2_0::AircraftTypeModelCode::SF5B,
    ::oo_2_0::AircraftTypeModelCode::SF600,
    ::oo_2_0::AircraftTypeModelCode::SF600A,
    ::oo_2_0::AircraftTypeModelCode::SF600T,
    ::oo_2_0::AircraftTypeModelCode::SG28SI,
    ::oo_2_0::AircraftTypeModelCode::SG300,
    ::oo_2_0::AircraftTypeModelCode::SGAL4,
    ::oo_2_0::AircraftTypeModelCode::SH14,
    ::oo_2_0::AircraftTypeModelCode::SH14B,
    ::oo_2_0::AircraftTypeModelCode::SH14C,
    ::oo_2_0::AircraftTypeModelCode::SH14D,
    ::oo_2_0::AircraftTypeModelCode::SH2,
    ::oo_2_0::AircraftTypeModelCode::SH2D,
    ::oo_2_0::AircraftTypeModelCode::SH2F,
    ::oo_2_0::AircraftTypeModelCode::SH3,
    ::oo_2_0::AircraftTypeModelCode::SH34,
    ::oo_2_0::AircraftTypeModelCode::SH34G,
    ::oo_2_0::AircraftTypeModelCode::SH34J,
    ::oo_2_0::AircraftTypeModelCode::SH37,
    ::oo_2_0::AircraftTypeModelCode::SH3A,
    ::oo_2_0::AircraftTypeModelCode::SH3D,
    ::oo_2_0::AircraftTypeModelCode::SH3DTS,
    ::oo_2_0::AircraftTypeModelCode::SH3G,
    ::oo_2_0::AircraftTypeModelCode::SH3H,
    ::oo_2_0::AircraftTypeModelCode::SH5,
    ::oo_2_0::AircraftTypeModelCode::SH5A,
    ::oo_2_0::AircraftTypeModelCode::SH60,
    ::oo_2_0::AircraftTypeModelCode::SH60B,
    ::oo_2_0::AircraftTypeModelCode::SH60D,
    ::oo_2_0::AircraftTypeModelCode::SH60F,
    ::oo_2_0::AircraftTypeModelCode::SH60J,
    ::oo_2_0::AircraftTypeModelCode::SH60R,
    ::oo_2_0::AircraftTypeModelCode::SHAEW2,
    ::oo_2_0::AircraftTypeModelCode::SHARF,
    ::oo_2_0::AircraftTypeModelCode::SHD3,
    ::oo_2_0::AircraftTypeModelCode::SHD6,
    ::oo_2_0::AircraftTypeModelCode::SHERPA,
    ::oo_2_0::AircraftTypeModelCode::SHF6,
    ::oo_2_0::AircraftTypeModelCode::SHFMK1,
    ::oo_2_0::AircraftTypeModelCode::SHFMK2,
    ::oo_2_0::AircraftTypeModelCode::SHFRM1,
    ::oo_2_0::AircraftTypeModelCode::SHFRM2,
    ::oo_2_0::AircraftTypeModelCode::SHFRM5,
    ::oo_2_0::AircraftTypeModelCode::SHM1,
    ::oo_2_0::AircraftTypeModelCode::SHM51,
    ::oo_2_0::AircraftTypeModelCode::SHT330,
    ::oo_2_0::AircraftTypeModelCode::SHTM4,
    ::oo_2_0::AircraftTypeModelCode::SHTSHE,
    ::oo_2_0::AircraftTypeModelCode::SHTSTR,
    ::oo_2_0::AircraftTypeModelCode::SISD27,
    ::oo_2_0::AircraftTypeModelCode::SJ302,
    ::oo_2_0::AircraftTypeModelCode::SK1100,
    ::oo_2_0::AircraftTypeModelCode::SK35C,
    ::oo_2_0::AircraftTypeModelCode::SK37,
    ::oo_2_0::AircraftTypeModelCode::SK50,
    ::oo_2_0::AircraftTypeModelCode::SK500,
    ::oo_2_0::AircraftTypeModelCode::SK51,
    ::oo_2_0::AircraftTypeModelCode::SK52,
    ::oo_2_0::AircraftTypeModelCode::SK55,
    ::oo_2_0::AircraftTypeModelCode::SK56,
    ::oo_2_0::AircraftTypeModelCode::SK56M,
    ::oo_2_0::AircraftTypeModelCode::SK58,
    ::oo_2_0::AircraftTypeModelCode::SK59,
    ::oo_2_0::AircraftTypeModelCode::SK60,
    ::oo_2_0::AircraftTypeModelCode::SK61,
    ::oo_2_0::AircraftTypeModelCode::SK70,
    ::oo_2_0::AircraftTypeModelCode::SK700,
    ::oo_2_0::AircraftTypeModelCode::SK700S,
    ::oo_2_0::AircraftTypeModelCode::SK71,
    ::oo_2_0::AircraftTypeModelCode::SKA,
    ::oo_2_0::AircraftTypeModelCode::SKAEM7,
    ::oo_2_0::AircraftTypeModelCode::SKHA3A,
    ::oo_2_0::AircraftTypeModelCode::SKHAM5,
    ::oo_2_0::AircraftTypeModelCode::SKHCM4,
    ::oo_2_0::AircraftTypeModelCode::SKHRM3,
    ::oo_2_0::AircraftTypeModelCode::SKHSM1,
    ::oo_2_0::AircraftTypeModelCode::SKJ,
    ::oo_2_0::AircraftTypeModelCode::SKM43,
    ::oo_2_0::AircraftTypeModelCode::SKM43B,
    ::oo_2_0::AircraftTypeModelCode::SKMK2A,
    ::oo_2_0::AircraftTypeModelCode::SKMK48,
    ::oo_2_0::AircraftTypeModelCode::SKMK50,
    ::oo_2_0::AircraftTypeModelCode::SKMK7,
    ::oo_2_0::AircraftTypeModelCode::SKW,
    ::oo_2_0::AircraftTypeModelCode::SKY28,
    ::oo_2_0::AircraftTypeModelCode::SKY3M,
    ::oo_2_0::AircraftTypeModelCode::SKYCR,
    ::oo_2_0::AircraftTypeModelCode::SKYFOX,
    ::oo_2_0::AircraftTypeModelCode::SKYROK,
    ::oo_2_0::AircraftTypeModelCode::SKYS,
    ::oo_2_0::AircraftTypeModelCode::SL8,
    ::oo_2_0::AircraftTypeModelCode::SL90L,
    ::oo_2_0::AircraftTypeModelCode::SLVSTR,
    ::oo_2_0::AircraftTypeModelCode::SM92,
    ::oo_2_0::AircraftTypeModelCode::SM92P,
    ::oo_2_0::AircraftTypeModelCode::SM94,
    ::oo_2_0::AircraftTypeModelCode::SN601,
    ::oo_2_0::AircraftTypeModelCode::SOKOG,
    ::oo_2_0::AircraftTypeModelCode::SOKOJ,
    ::oo_2_0::AircraftTypeModelCode::SOKOK,
    ::oo_2_0::AircraftTypeModelCode::SOL47,
    ::oo_2_0::AircraftTypeModelCode::SOLMRQ,
    ::oo_2_0::AircraftTypeModelCode::SP2,
    ::oo_2_0::AircraftTypeModelCode::SP2H,
    ::oo_2_0::AircraftTypeModelCode::SP95,
    ::oo_2_0::AircraftTypeModelCode::SPDFRT,
    ::oo_2_0::AircraftTypeModelCode::SPF22R,
    ::oo_2_0::AircraftTypeModelCode::SPK,
    ::oo_2_0::AircraftTypeModelCode::SPKA,
    ::oo_2_0::AircraftTypeModelCode::SPTE2E,
    ::oo_2_0::AircraftTypeModelCode::SR71,
    ::oo_2_0::AircraftTypeModelCode::SR71A,
    ::oo_2_0::AircraftTypeModelCode::SR71B,
    ::oo_2_0::AircraftTypeModelCode::SR71C,
    ::oo_2_0::AircraftTypeModelCode::SRA1,
    ::oo_2_0::AircraftTypeModelCode::SRA4,
    ::oo_2_0::AircraftTypeModelCode::SS22A,
    ::oo_2_0::AircraftTypeModelCode::SSCA,
    ::oo_2_0::AircraftTypeModelCode::SSLC65,
    ::oo_2_0::AircraftTypeModelCode::SST,
    ::oo_2_0::AircraftTypeModelCode::ST170,
    ::oo_2_0::AircraftTypeModelCode::ST1700,
    ::oo_2_0::AircraftTypeModelCode::ST17MD,
    ::oo_2_0::AircraftTypeModelCode::ST3320,
    ::oo_2_0::AircraftTypeModelCode::ST33UT,
    ::oo_2_0::AircraftTypeModelCode::ST360,
    ::oo_2_0::AircraftTypeModelCode::ST3630,
    ::oo_2_0::AircraftTypeModelCode::ST75,
    ::oo_2_0::AircraftTypeModelCode::ST77,
    ::oo_2_0::AircraftTypeModelCode::STRAT1,
    ::oo_2_0::AircraftTypeModelCode::STRAT2,
    ::oo_2_0::AircraftTypeModelCode::SU11,
    ::oo_2_0::AircraftTypeModelCode::SU11U,
    ::oo_2_0::AircraftTypeModelCode::SU15,
    ::oo_2_0::AircraftTypeModelCode::SU15U,
    ::oo_2_0::AircraftTypeModelCode::SU17,
    ::oo_2_0::AircraftTypeModelCode::SU17M,
    ::oo_2_0::AircraftTypeModelCode::SU17M1,
    ::oo_2_0::AircraftTypeModelCode::SU17M2,
    ::oo_2_0::AircraftTypeModelCode::SU17M3,
    ::oo_2_0::AircraftTypeModelCode::SU17M4,
    ::oo_2_0::AircraftTypeModelCode::SU17U,
    ::oo_2_0::AircraftTypeModelCode::SU17UM,
    ::oo_2_0::AircraftTypeModelCode::SU20,
    ::oo_2_0::AircraftTypeModelCode::SU20M,
    ::oo_2_0::AircraftTypeModelCode::SU20U,
    ::oo_2_0::AircraftTypeModelCode::SU22,
    ::oo_2_0::AircraftTypeModelCode::SU22BK,
    ::oo_2_0::AircraftTypeModelCode::SU22BM,
    ::oo_2_0::AircraftTypeModelCode::SU22G,
    ::oo_2_0::AircraftTypeModelCode::SU22H2,
    ::oo_2_0::AircraftTypeModelCode::SU22J2,
    ::oo_2_0::AircraftTypeModelCode::SU22M,
    ::oo_2_0::AircraftTypeModelCode::SU22M4,
    ::oo_2_0::AircraftTypeModelCode::SU22U,
    ::oo_2_0::AircraftTypeModelCode::SU24,
    ::oo_2_0::AircraftTypeModelCode::SU24M,
    ::oo_2_0::AircraftTypeModelCode::SU24MK,
    ::oo_2_0::AircraftTypeModelCode::SU24MP,
    ::oo_2_0::AircraftTypeModelCode::SU24MR,
    ::oo_2_0::AircraftTypeModelCode::SU25,
    ::oo_2_0::AircraftTypeModelCode::SU25BM,
    ::oo_2_0::AircraftTypeModelCode::SU25K,
    ::oo_2_0::AircraftTypeModelCode::SU25T,
    ::oo_2_0::AircraftTypeModelCode::SU25TK,
    ::oo_2_0::AircraftTypeModelCode::SU25TM,
    ::oo_2_0::AircraftTypeModelCode::SU25UB,
    ::oo_2_0::AircraftTypeModelCode::SU25UG,
    ::oo_2_0::AircraftTypeModelCode::SU25UK,
    ::oo_2_0::AircraftTypeModelCode::SU25UT,
    ::oo_2_0::AircraftTypeModelCode::SU26M,
    ::oo_2_0::AircraftTypeModelCode::SU27,
    ::oo_2_0::AircraftTypeModelCode::SU27IB,
    ::oo_2_0::AircraftTypeModelCode::SU27K,
    ::oo_2_0::AircraftTypeModelCode::SU27LL,
    ::oo_2_0::AircraftTypeModelCode::SU27M,
    ::oo_2_0::AircraftTypeModelCode::SU27P,
    ::oo_2_0::AircraftTypeModelCode::SU27PD,
    ::oo_2_0::AircraftTypeModelCode::SU27S,
    ::oo_2_0::AircraftTypeModelCode::SU27SM,
    ::oo_2_0::AircraftTypeModelCode::SU27UB,
    ::oo_2_0::AircraftTypeModelCode::SU28,
    ::oo_2_0::AircraftTypeModelCode::SU29,
    ::oo_2_0::AircraftTypeModelCode::SU30,
    ::oo_2_0::AircraftTypeModelCode::SU30K,
    ::oo_2_0::AircraftTypeModelCode::SU30M,
    ::oo_2_0::AircraftTypeModelCode::SU30MK,
    ::oo_2_0::AircraftTypeModelCode::SU32FN,
    ::oo_2_0::AircraftTypeModelCode::SU33,
    ::oo_2_0::AircraftTypeModelCode::SU34,
    ::oo_2_0::AircraftTypeModelCode::SU35,
    ::oo_2_0::AircraftTypeModelCode::SU37,
    ::oo_2_0::AircraftTypeModelCode::SU38,
    ::oo_2_0::AircraftTypeModelCode::SU39,
    ::oo_2_0::AircraftTypeModelCode::SU3MKI,
    ::oo_2_0::AircraftTypeModelCode::SU49,
    ::oo_2_0::AircraftTypeModelCode::SU7,
    ::oo_2_0::AircraftTypeModelCode::SU7B,
    ::oo_2_0::AircraftTypeModelCode::SU7BKL,
    ::oo_2_0::AircraftTypeModelCode::SU7BMK,
    ::oo_2_0::AircraftTypeModelCode::SU7U,
    ::oo_2_0::AircraftTypeModelCode::SU7UM,
    ::oo_2_0::AircraftTypeModelCode::SU7UMK,
    ::oo_2_0::AircraftTypeModelCode::SU9,
    ::oo_2_0::AircraftTypeModelCode::SU9U,
    ::oo_2_0::AircraftTypeModelCode::SULYNX,
    ::oo_2_0::AircraftTypeModelCode::SUMSEN,
    ::oo_2_0::AircraftTypeModelCode::SUPHOR,
    ::oo_2_0::AircraftTypeModelCode::SUROK,
    ::oo_2_0::AircraftTypeModelCode::SUS21,
    ::oo_2_0::AircraftTypeModelCode::SUS32,
    ::oo_2_0::AircraftTypeModelCode::SUS54,
    ::oo_2_0::AircraftTypeModelCode::SUS80,
    ::oo_2_0::AircraftTypeModelCode::SUS84,
    ::oo_2_0::AircraftTypeModelCode::SUS986,
    ::oo_2_0::AircraftTypeModelCode::SW3,
    ::oo_2_0::AircraftTypeModelCode::SW3IV,
    ::oo_2_0::AircraftTypeModelCode::SWATI,
    ::oo_2_0::AircraftTypeModelCode::SWSFED,
    ::oo_2_0::AircraftTypeModelCode::T1,
    ::oo_2_0::AircraftTypeModelCode::T101E,
    ::oo_2_0::AircraftTypeModelCode::T101GR,
    ::oo_2_0::AircraftTypeModelCode::T101S,
    ::oo_2_0::AircraftTypeModelCode::T106,
    ::oo_2_0::AircraftTypeModelCode::T10HER,
    ::oo_2_0::AircraftTypeModelCode::T11,
    ::oo_2_0::AircraftTypeModelCode::T11A,
    ::oo_2_0::AircraftTypeModelCode::T11CAC,
    ::oo_2_0::AircraftTypeModelCode::T12,
    ::oo_2_0::AircraftTypeModelCode::T130FR,
    ::oo_2_0::AircraftTypeModelCode::T134,
    ::oo_2_0::AircraftTypeModelCode::T154M2,
    ::oo_2_0::AircraftTypeModelCode::T16FAL,
    ::oo_2_0::AircraftTypeModelCode::T17,
    ::oo_2_0::AircraftTypeModelCode::T18FAL,
    ::oo_2_0::AircraftTypeModelCode::T19A,
    ::oo_2_0::AircraftTypeModelCode::T19B,
    ::oo_2_0::AircraftTypeModelCode::T1A,
    ::oo_2_0::AircraftTypeModelCode::T1AJAY,
    ::oo_2_0::AircraftTypeModelCode::T1B,
    ::oo_2_0::AircraftTypeModelCode::T2,
    ::oo_2_0::AircraftTypeModelCode::T201,
    ::oo_2_0::AircraftTypeModelCode::T201AI,
    ::oo_2_0::AircraftTypeModelCode::T203,
    ::oo_2_0::AircraftTypeModelCode::T203PC,
    ::oo_2_0::AircraftTypeModelCode::T204GR,
    ::oo_2_0::AircraftTypeModelCode::T205KA,
    ::oo_2_0::AircraftTypeModelCode::T23,
    ::oo_2_0::AircraftTypeModelCode::T25,
    ::oo_2_0::AircraftTypeModelCode::T25A,
    ::oo_2_0::AircraftTypeModelCode::T25B,
    ::oo_2_0::AircraftTypeModelCode::T27,
    ::oo_2_0::AircraftTypeModelCode::T274,
    ::oo_2_0::AircraftTypeModelCode::T274BR,
    ::oo_2_0::AircraftTypeModelCode::T274TI,
    ::oo_2_0::AircraftTypeModelCode::T27T,
    ::oo_2_0::AircraftTypeModelCode::T28,
    ::oo_2_0::AircraftTypeModelCode::T28A,
    ::oo_2_0::AircraftTypeModelCode::T28B,
    ::oo_2_0::AircraftTypeModelCode::T28C,
    ::oo_2_0::AircraftTypeModelCode::T28D,
    ::oo_2_0::AircraftTypeModelCode::T29,
    ::oo_2_0::AircraftTypeModelCode::T29A,
    ::oo_2_0::AircraftTypeModelCode::T2A,
    ::oo_2_0::AircraftTypeModelCode::T2B,
    ::oo_2_0::AircraftTypeModelCode::T2C,
    ::oo_2_0::AircraftTypeModelCode::T2D,
    ::oo_2_0::AircraftTypeModelCode::T2E,
    ::oo_2_0::AircraftTypeModelCode::T2KAI,
    ::oo_2_0::AircraftTypeModelCode::T2MIT,
    ::oo_2_0::AircraftTypeModelCode::T3,
    ::oo_2_0::AircraftTypeModelCode::T33,
    ::oo_2_0::AircraftTypeModelCode::T33A,
    ::oo_2_0::AircraftTypeModelCode::T33B,
    ::oo_2_0::AircraftTypeModelCode::T33N,
    ::oo_2_0::AircraftTypeModelCode::T34,
    ::oo_2_0::AircraftTypeModelCode::T34A,
    ::oo_2_0::AircraftTypeModelCode::T34B,
    ::oo_2_0::AircraftTypeModelCode::T34C,
    ::oo_2_0::AircraftTypeModelCode::T35,
    ::oo_2_0::AircraftTypeModelCode::T35A,
    ::oo_2_0::AircraftTypeModelCode::T35B,
    ::oo_2_0::AircraftTypeModelCode::T35C,
    ::oo_2_0::AircraftTypeModelCode::T35D,
    ::oo_2_0::AircraftTypeModelCode::T35S,
    ::oo_2_0::AircraftTypeModelCode::T35T,
    ::oo_2_0::AircraftTypeModelCode::T36,
    ::oo_2_0::AircraftTypeModelCode::T37,
    ::oo_2_0::AircraftTypeModelCode::T37A,
    ::oo_2_0::AircraftTypeModelCode::T37B,
    ::oo_2_0::AircraftTypeModelCode::T37C,
    ::oo_2_0::AircraftTypeModelCode::T37T,
    ::oo_2_0::AircraftTypeModelCode::T38,
    ::oo_2_0::AircraftTypeModelCode::T38A,
    ::oo_2_0::AircraftTypeModelCode::T38B,
    ::oo_2_0::AircraftTypeModelCode::T38D,
    ::oo_2_0::AircraftTypeModelCode::T39,
    ::oo_2_0::AircraftTypeModelCode::T39A,
    ::oo_2_0::AircraftTypeModelCode::T39B,
    ::oo_2_0::AircraftTypeModelCode::T39D,
    ::oo_2_0::AircraftTypeModelCode::T39F,
    ::oo_2_0::AircraftTypeModelCode::T4,
    ::oo_2_0::AircraftTypeModelCode::T401SO,
    ::oo_2_0::AircraftTypeModelCode::T407SK,
    ::oo_2_0::AircraftTypeModelCode::T41,
    ::oo_2_0::AircraftTypeModelCode::T411AI,
    ::oo_2_0::AircraftTypeModelCode::T411WO,
    ::oo_2_0::AircraftTypeModelCode::T417PE,
    ::oo_2_0::AircraftTypeModelCode::T41A,
    ::oo_2_0::AircraftTypeModelCode::T41B,
    ::oo_2_0::AircraftTypeModelCode::T41D,
    ::oo_2_0::AircraftTypeModelCode::T42,
    ::oo_2_0::AircraftTypeModelCode::T420A,
    ::oo_2_0::AircraftTypeModelCode::T420CL,
    ::oo_2_0::AircraftTypeModelCode::T420ST,
    ::oo_2_0::AircraftTypeModelCode::T422YA,
    ::oo_2_0::AircraftTypeModelCode::T42A,
    ::oo_2_0::AircraftTypeModelCode::T42B,
    ::oo_2_0::AircraftTypeModelCode::T43,
    ::oo_2_0::AircraftTypeModelCode::T430SP,
    ::oo_2_0::AircraftTypeModelCode::T433FL,
    ::oo_2_0::AircraftTypeModelCode::T43A,
    ::oo_2_0::AircraftTypeModelCode::T44,
    ::oo_2_0::AircraftTypeModelCode::T44K,
    ::oo_2_0::AircraftTypeModelCode::T45,
    ::oo_2_0::AircraftTypeModelCode::T45A,
    ::oo_2_0::AircraftTypeModelCode::T45B,
    ::oo_2_0::AircraftTypeModelCode::T45TS,
    ::oo_2_0::AircraftTypeModelCode::T47,
    ::oo_2_0::AircraftTypeModelCode::T471,
    ::oo_2_0::AircraftTypeModelCode::T47A,
    ::oo_2_0::AircraftTypeModelCode::T4KAWA,
    ::oo_2_0::AircraftTypeModelCode::T5,
    ::oo_2_0::AircraftTypeModelCode::T501,
    ::oo_2_0::AircraftTypeModelCode::T6,
    ::oo_2_0::AircraftTypeModelCode::T610,
    ::oo_2_0::AircraftTypeModelCode::T610VO,
    ::oo_2_0::AircraftTypeModelCode::T66,
    ::oo_2_0::AircraftTypeModelCode::T67,
    ::oo_2_0::AircraftTypeModelCode::T67B,
    ::oo_2_0::AircraftTypeModelCode::T67C,
    ::oo_2_0::AircraftTypeModelCode::T67M,
    ::oo_2_0::AircraftTypeModelCode::T67M20,
    ::oo_2_0::AircraftTypeModelCode::T67M26,
    ::oo_2_0::AircraftTypeModelCode::T67MM2,
    ::oo_2_0::AircraftTypeModelCode::T6G,
    ::oo_2_0::AircraftTypeModelCode::T9,
    ::oo_2_0::AircraftTypeModelCode::T910,
    ::oo_2_0::AircraftTypeModelCode::T910KU,
    ::oo_2_0::AircraftTypeModelCode::T9STO,
    ::oo_2_0::AircraftTypeModelCode::TA16SF,
    ::oo_2_0::AircraftTypeModelCode::TA3B,
    ::oo_2_0::AircraftTypeModelCode::TA4,
    ::oo_2_0::AircraftTypeModelCode::TA4B,
    ::oo_2_0::AircraftTypeModelCode::TA4F,
    ::oo_2_0::AircraftTypeModelCode::TA4G,
    ::oo_2_0::AircraftTypeModelCode::TA4H,
    ::oo_2_0::AircraftTypeModelCode::TA4J,
    ::oo_2_0::AircraftTypeModelCode::TA4K,
    ::oo_2_0::AircraftTypeModelCode::TA4KU,
    ::oo_2_0::AircraftTypeModelCode::TA4M,
    ::oo_2_0::AircraftTypeModelCode::TA4S,
    ::oo_2_0::AircraftTypeModelCode::TA7,
    ::oo_2_0::AircraftTypeModelCode::TA7C,
    ::oo_2_0::AircraftTypeModelCode::TA7H,
    ::oo_2_0::AircraftTypeModelCode::TA7P,
    ::oo_2_0::AircraftTypeModelCode::TAGM23,
    ::oo_2_0::AircraftTypeModelCode::TAV8,
    ::oo_2_0::AircraftTypeModelCode::TAV8A,
    ::oo_2_0::AircraftTypeModelCode::TAV8B,
    ::oo_2_0::AircraftTypeModelCode::TAV8S,
    ::oo_2_0::AircraftTypeModelCode::TB10,
    ::oo_2_0::AircraftTypeModelCode::TB20,
    ::oo_2_0::AircraftTypeModelCode::TB200,
    ::oo_2_0::AircraftTypeModelCode::TB20PA,
    ::oo_2_0::AircraftTypeModelCode::TB21,
    ::oo_2_0::AircraftTypeModelCode::TB30,
    ::oo_2_0::AircraftTypeModelCode::TB31,
    ::oo_2_0::AircraftTypeModelCode::TB360,
    ::oo_2_0::AircraftTypeModelCode::TB6000,
    ::oo_2_0::AircraftTypeModelCode::TB9,
    ::oo_2_0::AircraftTypeModelCode::TB9TC,
    ::oo_2_0::AircraftTypeModelCode::TBM700,
    ::oo_2_0::AircraftTypeModelCode::TC018E,
    ::oo_2_0::AircraftTypeModelCode::TC130,
    ::oo_2_0::AircraftTypeModelCode::TC130G,
    ::oo_2_0::AircraftTypeModelCode::TC130Q,
    ::oo_2_0::AircraftTypeModelCode::TC135S,
    ::oo_2_0::AircraftTypeModelCode::TC135W,
    ::oo_2_0::AircraftTypeModelCode::TC15,
    ::oo_2_0::AircraftTypeModelCode::TC18F,
    ::oo_2_0::AircraftTypeModelCode::TC19,
    ::oo_2_0::AircraftTypeModelCode::TC20,
    ::oo_2_0::AircraftTypeModelCode::TC3,
    ::oo_2_0::AircraftTypeModelCode::TC4B,
    ::oo_2_0::AircraftTypeModelCode::TC4C,
    ::oo_2_0::AircraftTypeModelCode::TC4CA,
    ::oo_2_0::AircraftTypeModelCode::TCH1,
    ::oo_2_0::AircraftTypeModelCode::TCHAI,
    ::oo_2_0::AircraftTypeModelCode::TE2,
    ::oo_2_0::AircraftTypeModelCode::TE2A,
    ::oo_2_0::AircraftTypeModelCode::TE2C,
    ::oo_2_0::AircraftTypeModelCode::TF102A,
    ::oo_2_0::AircraftTypeModelCode::TF104,
    ::oo_2_0::AircraftTypeModelCode::TF104G,
    ::oo_2_0::AircraftTypeModelCode::TF15,
    ::oo_2_0::AircraftTypeModelCode::TF16N,
    ::oo_2_0::AircraftTypeModelCode::TF18,
    ::oo_2_0::AircraftTypeModelCode::TF18A,
    ::oo_2_0::AircraftTypeModelCode::TF1O2A,
    ::oo_2_0::AircraftTypeModelCode::TF35,
    ::oo_2_0::AircraftTypeModelCode::TF35XD,
    ::oo_2_0::AircraftTypeModelCode::TG10,
    ::oo_2_0::AircraftTypeModelCode::TG1X,
    ::oo_2_0::AircraftTypeModelCode::TH053A,
    ::oo_2_0::AircraftTypeModelCode::TH1,
    ::oo_2_0::AircraftTypeModelCode::TH13,
    ::oo_2_0::AircraftTypeModelCode::TH13M,
    ::oo_2_0::AircraftTypeModelCode::TH13S,
    ::oo_2_0::AircraftTypeModelCode::TH13T,
    ::oo_2_0::AircraftTypeModelCode::TH1F,
    ::oo_2_0::AircraftTypeModelCode::TH1G,
    ::oo_2_0::AircraftTypeModelCode::TH1L,
    ::oo_2_0::AircraftTypeModelCode::TH1S,
    ::oo_2_0::AircraftTypeModelCode::TH206,
    ::oo_2_0::AircraftTypeModelCode::TH50,
    ::oo_2_0::AircraftTypeModelCode::TH55,
    ::oo_2_0::AircraftTypeModelCode::TH55A,
    ::oo_2_0::AircraftTypeModelCode::TH55J,
    ::oo_2_0::AircraftTypeModelCode::TH57,
    ::oo_2_0::AircraftTypeModelCode::TH57A,
    ::oo_2_0::AircraftTypeModelCode::TH57B,
    ::oo_2_0::AircraftTypeModelCode::TH57C,
    ::oo_2_0::AircraftTypeModelCode::TH67,
    ::oo_2_0::AircraftTypeModelCode::TIGER,
    ::oo_2_0::AircraftTypeModelCode::TIMIT,
    ::oo_2_0::AircraftTypeModelCode::TK10,
    ::oo_2_0::AircraftTypeModelCode::TL10,
    ::oo_2_0::AircraftTypeModelCode::TORA,
    ::oo_2_0::AircraftTypeModelCode::TORAF3,
    ::oo_2_0::AircraftTypeModelCode::TORE,
    ::oo_2_0::AircraftTypeModelCode::TORF2,
    ::oo_2_0::AircraftTypeModelCode::TORF2A,
    ::oo_2_0::AircraftTypeModelCode::TORF3,
    ::oo_2_0::AircraftTypeModelCode::TORGMK,
    ::oo_2_0::AircraftTypeModelCode::TORI,
    ::oo_2_0::AircraftTypeModelCode::TORM1,
    ::oo_2_0::AircraftTypeModelCode::TORM1A,
    ::oo_2_0::AircraftTypeModelCode::TORM1B,
    ::oo_2_0::AircraftTypeModelCode::TORM4,
    ::oo_2_0::AircraftTypeModelCode::TORNAD,
    ::oo_2_0::AircraftTypeModelCode::TORR,
    ::oo_2_0::AircraftTypeModelCode::TOUCAN,
    ::oo_2_0::AircraftTypeModelCode::TP100,
    ::oo_2_0::AircraftTypeModelCode::TP101,
    ::oo_2_0::AircraftTypeModelCode::TP102,
    ::oo_2_0::AircraftTypeModelCode::TP400,
    ::oo_2_0::AircraftTypeModelCode::TP600,
    ::oo_2_0::AircraftTypeModelCode::TP84,
    ::oo_2_0::AircraftTypeModelCode::TP88,
    ::oo_2_0::AircraftTypeModelCode::TP883,
    ::oo_2_0::AircraftTypeModelCode::TP89,
    ::oo_2_0::AircraftTypeModelCode::TR1ATR,
    ::oo_2_0::AircraftTypeModelCode::TR1B,
    ::oo_2_0::AircraftTypeModelCode::TR1DRA,
    ::oo_2_0::AircraftTypeModelCode::TR1REC,
    ::oo_2_0::AircraftTypeModelCode::TR1TRI,
    ::oo_2_0::AircraftTypeModelCode::TRAN,
    ::oo_2_0::AircraftTypeModelCode::TRDT2E,
    ::oo_2_0::AircraftTypeModelCode::TRDT3B,
    ::oo_2_0::AircraftTypeModelCode::TRI300,
    ::oo_2_0::AircraftTypeModelCode::TRI3B,
    ::oo_2_0::AircraftTypeModelCode::TRI500,
    ::oo_2_0::AircraftTypeModelCode::TRIC2,
    ::oo_2_0::AircraftTypeModelCode::TRIC2A,
    ::oo_2_0::AircraftTypeModelCode::TRID2E,
    ::oo_2_0::AircraftTypeModelCode::TRIK1,
    ::oo_2_0::AircraftTypeModelCode::TRIKC1,
    ::oo_2_0::AircraftTypeModelCode::TROOP,
    ::oo_2_0::AircraftTypeModelCode::TS2A,
    ::oo_2_0::AircraftTypeModelCode::TS60,
    ::oo_2_0::AircraftTypeModelCode::TS8,
    ::oo_2_0::AircraftTypeModelCode::TSC1A3,
    ::oo_2_0::AircraftTypeModelCode::TT300,
    ::oo_2_0::AircraftTypeModelCode::TU104,
    ::oo_2_0::AircraftTypeModelCode::TU104A,
    ::oo_2_0::AircraftTypeModelCode::TU114,
    ::oo_2_0::AircraftTypeModelCode::TU116,
    ::oo_2_0::AircraftTypeModelCode::TU124,
    ::oo_2_0::AircraftTypeModelCode::TU126,
    ::oo_2_0::AircraftTypeModelCode::TU128,
    ::oo_2_0::AircraftTypeModelCode::TU130,
    ::oo_2_0::AircraftTypeModelCode::TU130L,
    ::oo_2_0::AircraftTypeModelCode::TU134,
    ::oo_2_0::AircraftTypeModelCode::TU1341,
    ::oo_2_0::AircraftTypeModelCode::TU1343,
    ::oo_2_0::AircraftTypeModelCode::TU134A,
    ::oo_2_0::AircraftTypeModelCode::TU134B,
    ::oo_2_0::AircraftTypeModelCode::TU142,
    ::oo_2_0::AircraftTypeModelCode::TU142C,
    ::oo_2_0::AircraftTypeModelCode::TU142D,
    ::oo_2_0::AircraftTypeModelCode::TU142E,
    ::oo_2_0::AircraftTypeModelCode::TU142H,
    ::oo_2_0::AircraftTypeModelCode::TU142M,
    ::oo_2_0::AircraftTypeModelCode::TU142R,
    ::oo_2_0::AircraftTypeModelCode::TU142S,
    ::oo_2_0::AircraftTypeModelCode::TU142Z,
    ::oo_2_0::AircraftTypeModelCode::TU144,
    ::oo_2_0::AircraftTypeModelCode::TU144D,
    ::oo_2_0::AircraftTypeModelCode::TU144L,
    ::oo_2_0::AircraftTypeModelCode::TU154,
    ::oo_2_0::AircraftTypeModelCode::TU1541,
    ::oo_2_0::AircraftTypeModelCode::TU1542,
    ::oo_2_0::AircraftTypeModelCode::TU154A,
    ::oo_2_0::AircraftTypeModelCode::TU154B,
    ::oo_2_0::AircraftTypeModelCode::TU154L,
    ::oo_2_0::AircraftTypeModelCode::TU154M,
    ::oo_2_0::AircraftTypeModelCode::TU154O,
    ::oo_2_0::AircraftTypeModelCode::TU154S,
    ::oo_2_0::AircraftTypeModelCode::TU154T,
    ::oo_2_0::AircraftTypeModelCode::TU156,
    ::oo_2_0::AircraftTypeModelCode::TU156S,
    ::oo_2_0::AircraftTypeModelCode::TU16,
    ::oo_2_0::AircraftTypeModelCode::TU160,
    ::oo_2_0::AircraftTypeModelCode::TU160S,
    ::oo_2_0::AircraftTypeModelCode::TU1610,
    ::oo_2_0::AircraftTypeModelCode::TU16KS,
    ::oo_2_0::AircraftTypeModelCode::TU16N,
    ::oo_2_0::AircraftTypeModelCode::TU16PH,
    ::oo_2_0::AircraftTypeModelCode::TU16PJ,
    ::oo_2_0::AircraftTypeModelCode::TU16PP,
    ::oo_2_0::AircraftTypeModelCode::TU16RD,
    ::oo_2_0::AircraftTypeModelCode::TU16RF,
    ::oo_2_0::AircraftTypeModelCode::TU16RK,
    ::oo_2_0::AircraftTypeModelCode::TU16T,
    ::oo_2_0::AircraftTypeModelCode::TU20,
    ::oo_2_0::AircraftTypeModelCode::TU204,
    ::oo_2_0::AircraftTypeModelCode::TU2041,
    ::oo_2_0::AircraftTypeModelCode::TU2042,
    ::oo_2_0::AircraftTypeModelCode::TU204C,
    ::oo_2_0::AircraftTypeModelCode::TU204M,
    ::oo_2_0::AircraftTypeModelCode::TU214,
    ::oo_2_0::AircraftTypeModelCode::TU22,
    ::oo_2_0::AircraftTypeModelCode::TU22D,
    ::oo_2_0::AircraftTypeModelCode::TU22M1,
    ::oo_2_0::AircraftTypeModelCode::TU22M2,
    ::oo_2_0::AircraftTypeModelCode::TU22M3,
    ::oo_2_0::AircraftTypeModelCode::TU22MR,
    ::oo_2_0::AircraftTypeModelCode::TU22U,
    ::oo_2_0::AircraftTypeModelCode::TU2412,
    ::oo_2_0::AircraftTypeModelCode::TU2422,
    ::oo_2_0::AircraftTypeModelCode::TU2423,
    ::oo_2_0::AircraftTypeModelCode::TU244,
    ::oo_2_0::AircraftTypeModelCode::TU24S,
    ::oo_2_0::AircraftTypeModelCode::TU24T,
    ::oo_2_0::AircraftTypeModelCode::TU24U,
    ::oo_2_0::AircraftTypeModelCode::TU26,
    ::oo_2_0::AircraftTypeModelCode::TU28,
    ::oo_2_0::AircraftTypeModelCode::TU330,
    ::oo_2_0::AircraftTypeModelCode::TU334,
    ::oo_2_0::AircraftTypeModelCode::TU3341,
    ::oo_2_0::AircraftTypeModelCode::TU334C,
    ::oo_2_0::AircraftTypeModelCode::TU334D,
    ::oo_2_0::AircraftTypeModelCode::TU34,
    ::oo_2_0::AircraftTypeModelCode::TU354,
    ::oo_2_0::AircraftTypeModelCode::TU414,
    ::oo_2_0::AircraftTypeModelCode::TU95,
    ::oo_2_0::AircraftTypeModelCode::TU9522,
    ::oo_2_0::AircraftTypeModelCode::TU95K,
    ::oo_2_0::AircraftTypeModelCode::TU95K2,
    ::oo_2_0::AircraftTypeModelCode::TU95M,
    ::oo_2_0::AircraftTypeModelCode::TU95MR,
    ::oo_2_0::AircraftTypeModelCode::TU95RT,
    ::oo_2_0::AircraftTypeModelCode::TUCP,
    ::oo_2_0::AircraftTypeModelCode::TURBVR,
    ::oo_2_0::AircraftTypeModelCode::TURPOR,
    ::oo_2_0::AircraftTypeModelCode::TW18,
    ::oo_2_0::AircraftTypeModelCode::TWINOT,
    ::oo_2_0::AircraftTypeModelCode::TWINSQ,
    ::oo_2_0::AircraftTypeModelCode::TWINST,
    ::oo_2_0::AircraftTypeModelCode::TZUG,
    ::oo_2_0::AircraftTypeModelCode::U1,
    ::oo_2_0::AircraftTypeModelCode::U10,
    ::oo_2_0::AircraftTypeModelCode::U11,
    ::oo_2_0::AircraftTypeModelCode::U11A,
    ::oo_2_0::AircraftTypeModelCode::U125,
    ::oo_2_0::AircraftTypeModelCode::U125A,
    ::oo_2_0::AircraftTypeModelCode::U17,
    ::oo_2_0::AircraftTypeModelCode::U17A,
    ::oo_2_0::AircraftTypeModelCode::U17B,
    ::oo_2_0::AircraftTypeModelCode::U1A,
    ::oo_2_0::AircraftTypeModelCode::U2,
    ::oo_2_0::AircraftTypeModelCode::U21,
    ::oo_2_0::AircraftTypeModelCode::U21F,
    ::oo_2_0::AircraftTypeModelCode::U25,
    ::oo_2_0::AircraftTypeModelCode::U27A,
    ::oo_2_0::AircraftTypeModelCode::U2R,
    ::oo_2_0::AircraftTypeModelCode::U3,
    ::oo_2_0::AircraftTypeModelCode::U36,
    ::oo_2_0::AircraftTypeModelCode::U3A,
    ::oo_2_0::AircraftTypeModelCode::U3B,
    ::oo_2_0::AircraftTypeModelCode::U4,
    ::oo_2_0::AircraftTypeModelCode::U42,
    ::oo_2_0::AircraftTypeModelCode::U5,
    ::oo_2_0::AircraftTypeModelCode::U6,
    ::oo_2_0::AircraftTypeModelCode::U6A,
    ::oo_2_0::AircraftTypeModelCode::U7,
    ::oo_2_0::AircraftTypeModelCode::U7A,
    ::oo_2_0::AircraftTypeModelCode::U7B,
    ::oo_2_0::AircraftTypeModelCode::U7SC,
    ::oo_2_0::AircraftTypeModelCode::U8,
    ::oo_2_0::AircraftTypeModelCode::U8D,
    ::oo_2_0::AircraftTypeModelCode::U8F,
    ::oo_2_0::AircraftTypeModelCode::U8TB,
    ::oo_2_0::AircraftTypeModelCode::U8TE,
    ::oo_2_0::AircraftTypeModelCode::U9,
    ::oo_2_0::AircraftTypeModelCode::U93,
    ::oo_2_0::AircraftTypeModelCode::U9D,
    ::oo_2_0::AircraftTypeModelCode::U9X,
    ::oo_2_0::AircraftTypeModelCode::U9XI,
    ::oo_2_0::AircraftTypeModelCode::UC026C,
    ::oo_2_0::AircraftTypeModelCode::UC12B,
    ::oo_2_0::AircraftTypeModelCode::UC12B2,
    ::oo_2_0::AircraftTypeModelCode::UC12BH,
    ::oo_2_0::AircraftTypeModelCode::UC12D,
    ::oo_2_0::AircraftTypeModelCode::UC12F,
    ::oo_2_0::AircraftTypeModelCode::UC12M,
    ::oo_2_0::AircraftTypeModelCode::UC12M2,
    ::oo_2_0::AircraftTypeModelCode::UC26C,
    ::oo_2_0::AircraftTypeModelCode::UC35A,
    ::oo_2_0::AircraftTypeModelCode::UC45J,
    ::oo_2_0::AircraftTypeModelCode::UH1,
    ::oo_2_0::AircraftTypeModelCode::UH12,
    ::oo_2_0::AircraftTypeModelCode::UH12E,
    ::oo_2_0::AircraftTypeModelCode::UH14,
    ::oo_2_0::AircraftTypeModelCode::UH14A,
    ::oo_2_0::AircraftTypeModelCode::UH19,
    ::oo_2_0::AircraftTypeModelCode::UH19A,
    ::oo_2_0::AircraftTypeModelCode::UH19B,
    ::oo_2_0::AircraftTypeModelCode::UH19C,
    ::oo_2_0::AircraftTypeModelCode::UH19D,
    ::oo_2_0::AircraftTypeModelCode::UH19F,
    ::oo_2_0::AircraftTypeModelCode::UH1AB,
    ::oo_2_0::AircraftTypeModelCode::UH1B,
    ::oo_2_0::AircraftTypeModelCode::UH1C,
    ::oo_2_0::AircraftTypeModelCode::UH1D,
    ::oo_2_0::AircraftTypeModelCode::UH1E,
    ::oo_2_0::AircraftTypeModelCode::UH1F,
    ::oo_2_0::AircraftTypeModelCode::UH1H,
    ::oo_2_0::AircraftTypeModelCode::UH1J,
    ::oo_2_0::AircraftTypeModelCode::UH1L,
    ::oo_2_0::AircraftTypeModelCode::UH1M,
    ::oo_2_0::AircraftTypeModelCode::UH1NTH,
    ::oo_2_0::AircraftTypeModelCode::UH1P,
    ::oo_2_0::AircraftTypeModelCode::UH1T,
    ::oo_2_0::AircraftTypeModelCode::UH1V,
    ::oo_2_0::AircraftTypeModelCode::UH2,
    ::oo_2_0::AircraftTypeModelCode::UH2A,
    ::oo_2_0::AircraftTypeModelCode::UH2B,
    ::oo_2_0::AircraftTypeModelCode::UH3,
    ::oo_2_0::AircraftTypeModelCode::UH34D,
    ::oo_2_0::AircraftTypeModelCode::UH3A,
    ::oo_2_0::AircraftTypeModelCode::UH3D,
    ::oo_2_0::AircraftTypeModelCode::UH46,
    ::oo_2_0::AircraftTypeModelCode::UH46A,
    ::oo_2_0::AircraftTypeModelCode::UH46C,
    ::oo_2_0::AircraftTypeModelCode::UH46D,
    ::oo_2_0::AircraftTypeModelCode::UH60,
    ::oo_2_0::AircraftTypeModelCode::UH60A,
    ::oo_2_0::AircraftTypeModelCode::UH60AP,
    ::oo_2_0::AircraftTypeModelCode::UH60B,
    ::oo_2_0::AircraftTypeModelCode::UH60C,
    ::oo_2_0::AircraftTypeModelCode::UH60J,
    ::oo_2_0::AircraftTypeModelCode::UH60JA,
    ::oo_2_0::AircraftTypeModelCode::UH60L,
    ::oo_2_0::AircraftTypeModelCode::UH60P,
    ::oo_2_0::AircraftTypeModelCode::UH60Q,
    ::oo_2_0::AircraftTypeModelCode::UHMK88,
    ::oo_2_0::AircraftTypeModelCode::UM1023,
    ::oo_2_0::AircraftTypeModelCode::UM3071,
    ::oo_2_0::AircraftTypeModelCode::UP2J,
    ::oo_2_0::AircraftTypeModelCode::US1,
    ::oo_2_0::AircraftTypeModelCode::US1A,
    ::oo_2_0::AircraftTypeModelCode::US1SAR,
    ::oo_2_0::AircraftTypeModelCode::US2,
    ::oo_2_0::AircraftTypeModelCode::US2A,
    ::oo_2_0::AircraftTypeModelCode::US2B,
    ::oo_2_0::AircraftTypeModelCode::US2C,
    ::oo_2_0::AircraftTypeModelCode::US2D,
    ::oo_2_0::AircraftTypeModelCode::US3A,
    ::oo_2_0::AircraftTypeModelCode::US496,
    ::oo_2_0::AircraftTypeModelCode::UTV,
    ::oo_2_0::AircraftTypeModelCode::UTVA75,
    ::oo_2_0::AircraftTypeModelCode::UTVA95,
    ::oo_2_0::AircraftTypeModelCode::UV18,
    ::oo_2_0::AircraftTypeModelCode::UV18A,
    ::oo_2_0::AircraftTypeModelCode::UV18AC,
    ::oo_2_0::AircraftTypeModelCode::UV18B,
    ::oo_2_0::AircraftTypeModelCode::UV20,
    ::oo_2_0::AircraftTypeModelCode::UV20A,
    ::oo_2_0::AircraftTypeModelCode::V22,
    ::oo_2_0::AircraftTypeModelCode::V234,
    ::oo_2_0::AircraftTypeModelCode::VA10,
    ::oo_2_0::AircraftTypeModelCode::VA2,
    ::oo_2_0::AircraftTypeModelCode::VA3B,
    ::oo_2_0::AircraftTypeModelCode::VAR,
    ::oo_2_0::AircraftTypeModelCode::VC025A,
    ::oo_2_0::AircraftTypeModelCode::VC10,
    ::oo_2_0::AircraftTypeModelCode::VC10C1,
    ::oo_2_0::AircraftTypeModelCode::VC10CM,
    ::oo_2_0::AircraftTypeModelCode::VC10K2,
    ::oo_2_0::AircraftTypeModelCode::VC10K3,
    ::oo_2_0::AircraftTypeModelCode::VC10M2,
    ::oo_2_0::AircraftTypeModelCode::VC10M3,
    ::oo_2_0::AircraftTypeModelCode::VC11,
    ::oo_2_0::AircraftTypeModelCode::VC118,
    ::oo_2_0::AircraftTypeModelCode::VC118A,
    ::oo_2_0::AircraftTypeModelCode::VC118B,
    ::oo_2_0::AircraftTypeModelCode::VC11A,
    ::oo_2_0::AircraftTypeModelCode::VC11AG,
    ::oo_2_0::AircraftTypeModelCode::VC11II,
    ::oo_2_0::AircraftTypeModelCode::VC130,
    ::oo_2_0::AircraftTypeModelCode::VC130H,
    ::oo_2_0::AircraftTypeModelCode::VC131,
    ::oo_2_0::AircraftTypeModelCode::VC131A,
    ::oo_2_0::AircraftTypeModelCode::VC131H,
    ::oo_2_0::AircraftTypeModelCode::VC135B,
    ::oo_2_0::AircraftTypeModelCode::VC137,
    ::oo_2_0::AircraftTypeModelCode::VC137C,
    ::oo_2_0::AircraftTypeModelCode::VC137G,
    ::oo_2_0::AircraftTypeModelCode::VC140,
    ::oo_2_0::AircraftTypeModelCode::VC140B,
    ::oo_2_0::AircraftTypeModelCode::VC1KK2,
    ::oo_2_0::AircraftTypeModelCode::VC1KK3,
    ::oo_2_0::AircraftTypeModelCode::VC1KK4,
    ::oo_2_0::AircraftTypeModelCode::VC25,
    ::oo_2_0::AircraftTypeModelCode::VC25A,
    ::oo_2_0::AircraftTypeModelCode::VC26,
    ::oo_2_0::AircraftTypeModelCode::VC6,
    ::oo_2_0::AircraftTypeModelCode::VC6B,
    ::oo_2_0::AircraftTypeModelCode::VC7,
    ::oo_2_0::AircraftTypeModelCode::VC9,
    ::oo_2_0::AircraftTypeModelCode::VC97,
    ::oo_2_0::AircraftTypeModelCode::VC9C,
    ::oo_2_0::AircraftTypeModelCode::VCONT,
    ::oo_2_0::AircraftTypeModelCode::VFW614,
    ::oo_2_0::AircraftTypeModelCode::VG21,
    ::oo_2_0::AircraftTypeModelCode::VH3,
    ::oo_2_0::AircraftTypeModelCode::VH34D,
    ::oo_2_0::AircraftTypeModelCode::VH3A,
    ::oo_2_0::AircraftTypeModelCode::VH3D,
    ::oo_2_0::AircraftTypeModelCode::VH4,
    ::oo_2_0::AircraftTypeModelCode::VH60N,
    ::oo_2_0::AircraftTypeModelCode::VICTK2,
    ::oo_2_0::AircraftTypeModelCode::VICTOR,
    ::oo_2_0::AircraftTypeModelCode::VJ22,
    ::oo_2_0::AircraftTypeModelCode::VKVNGD,
    ::oo_2_0::AircraftTypeModelCode::VLCN,
    ::oo_2_0::AircraftTypeModelCode::VOY,
    ::oo_2_0::AircraftTypeModelCode::VP3A,
    ::oo_2_0::AircraftTypeModelCode::VRT44A,
    ::oo_2_0::AircraftTypeModelCode::VRT44B,
    ::oo_2_0::AircraftTypeModelCode::VTOUR2,
    ::oo_2_0::AircraftTypeModelCode::VU9,
    ::oo_2_0::AircraftTypeModelCode::WAG22,
    ::oo_2_0::AircraftTypeModelCode::WAGABO,
    ::oo_2_0::AircraftTypeModelCode::WAI100,
    ::oo_2_0::AircraftTypeModelCode::WAI500,
    ::oo_2_0::AircraftTypeModelCode::WAI50H,
    ::oo_2_0::AircraftTypeModelCode::WAI600,
    ::oo_2_0::AircraftTypeModelCode::WC130,
    ::oo_2_0::AircraftTypeModelCode::WC130B,
    ::oo_2_0::AircraftTypeModelCode::WC130E,
    ::oo_2_0::AircraftTypeModelCode::WC130H,
    ::oo_2_0::AircraftTypeModelCode::WC135,
    ::oo_2_0::AircraftTypeModelCode::WC135B,
    ::oo_2_0::AircraftTypeModelCode::WC135N,
    ::oo_2_0::AircraftTypeModelCode::WC135W,
    ::oo_2_0::AircraftTypeModelCode::WG13,
    ::oo_2_0::AircraftTypeModelCode::WG30,
    ::oo_2_0::AircraftTypeModelCode::WG34,
    ::oo_2_0::AircraftTypeModelCode::WSPRT,
    ::oo_2_0::AircraftTypeModelCode::WSX,
    ::oo_2_0::AircraftTypeModelCode::WW,
    ::oo_2_0::AircraftTypeModelCode::WW24,
    ::oo_2_0::AircraftTypeModelCode::X31A,
    ::oo_2_0::AircraftTypeModelCode::XC2,
    ::oo_2_0::AircraftTypeModelCode::XIANF7,
    ::oo_2_0::AircraftTypeModelCode::XIHU5,
    ::oo_2_0::AircraftTypeModelCode::XTS,
    ::oo_2_0::AircraftTypeModelCode::Y11,
    ::oo_2_0::AircraftTypeModelCode::Y11B,
    ::oo_2_0::AircraftTypeModelCode::Y11M,
    ::oo_2_0::AircraftTypeModelCode::Y11T,
    ::oo_2_0::AircraftTypeModelCode::Y12,
    ::oo_2_0::AircraftTypeModelCode::Y122,
    ::oo_2_0::AircraftTypeModelCode::Y124,
    ::oo_2_0::AircraftTypeModelCode::Y18MOO,
    ::oo_2_0::AircraftTypeModelCode::Y27,
    ::oo_2_0::AircraftTypeModelCode::Y36MP,
    ::oo_2_0::AircraftTypeModelCode::Y36MPA,
    ::oo_2_0::AircraftTypeModelCode::Y36MPB,
    ::oo_2_0::AircraftTypeModelCode::Y5,
    ::oo_2_0::AircraftTypeModelCode::Y5B,
    ::oo_2_0::AircraftTypeModelCode::Y5C,
    ::oo_2_0::AircraftTypeModelCode::Y7,
    ::oo_2_0::AircraftTypeModelCode::Y710,
    ::oo_2_0::AircraftTypeModelCode::Y7100,
    ::oo_2_0::AircraftTypeModelCode::Y710C,
    ::oo_2_0::AircraftTypeModelCode::Y720A,
    ::oo_2_0::AircraftTypeModelCode::Y720B,
    ::oo_2_0::AircraftTypeModelCode::Y7E,
    ::oo_2_0::AircraftTypeModelCode::Y7H,
    ::oo_2_0::AircraftTypeModelCode::Y7H50,
    ::oo_2_0::AircraftTypeModelCode::Y7H500,
    ::oo_2_0::AircraftTypeModelCode::Y8,
    ::oo_2_0::AircraftTypeModelCode::Y8A,
    ::oo_2_0::AircraftTypeModelCode::Y8B,
    ::oo_2_0::AircraftTypeModelCode::Y8C,
    ::oo_2_0::AircraftTypeModelCode::Y8D,
    ::oo_2_0::AircraftTypeModelCode::Y8E,
    ::oo_2_0::AircraftTypeModelCode::Y8ECM,
    ::oo_2_0::AircraftTypeModelCode::Y8F,
    ::oo_2_0::AircraftTypeModelCode::Y8H,
    ::oo_2_0::AircraftTypeModelCode::Y8X,
    ::oo_2_0::AircraftTypeModelCode::YA27U,
    ::oo_2_0::AircraftTypeModelCode::YAK11,
    ::oo_2_0::AircraftTypeModelCode::YAK112,
    ::oo_2_0::AircraftTypeModelCode::YAK12,
    ::oo_2_0::AircraftTypeModelCode::YAK13,
    ::oo_2_0::AircraftTypeModelCode::YAK130,
    ::oo_2_0::AircraftTypeModelCode::YAK142,
    ::oo_2_0::AircraftTypeModelCode::YAK14V,
    ::oo_2_0::AircraftTypeModelCode::YAK18,
    ::oo_2_0::AircraftTypeModelCode::YAK18T,
    ::oo_2_0::AircraftTypeModelCode::YAK242,
    ::oo_2_0::AircraftTypeModelCode::YAK25,
    ::oo_2_0::AircraftTypeModelCode::YAK27,
    ::oo_2_0::AircraftTypeModelCode::YAK28,
    ::oo_2_0::AircraftTypeModelCode::YAK28P,
    ::oo_2_0::AircraftTypeModelCode::YAK28U,
    ::oo_2_0::AircraftTypeModelCode::YAK30,
    ::oo_2_0::AircraftTypeModelCode::YAK32,
    ::oo_2_0::AircraftTypeModelCode::YAK36M,
    ::oo_2_0::AircraftTypeModelCode::YAK38,
    ::oo_2_0::AircraftTypeModelCode::YAK38A,
    ::oo_2_0::AircraftTypeModelCode::YAK38B,
    ::oo_2_0::AircraftTypeModelCode::YAK40,
    ::oo_2_0::AircraftTypeModelCode::YAK41,
    ::oo_2_0::AircraftTypeModelCode::YAK42,
    ::oo_2_0::AircraftTypeModelCode::YAK42A,
    ::oo_2_0::AircraftTypeModelCode::YAK42D,
    ::oo_2_0::AircraftTypeModelCode::YAK42E,
    ::oo_2_0::AircraftTypeModelCode::YAK42M,
    ::oo_2_0::AircraftTypeModelCode::YAK42T,
    ::oo_2_0::AircraftTypeModelCode::YAK461,
    ::oo_2_0::AircraftTypeModelCode::YAK462,
    ::oo_2_0::AircraftTypeModelCode::YAK52,
    ::oo_2_0::AircraftTypeModelCode::YAK54,
    ::oo_2_0::AircraftTypeModelCode::YAK56,
    ::oo_2_0::AircraftTypeModelCode::YAK58,
    ::oo_2_0::AircraftTypeModelCode::YAKFBA,
    ::oo_2_0::AircraftTypeModelCode::YAMAL,
    ::oo_2_0::AircraftTypeModelCode::YAS70A,
    ::oo_2_0::AircraftTypeModelCode::YF11,
    ::oo_2_0::AircraftTypeModelCode::YS11,
    ::oo_2_0::AircraftTypeModelCode::YT25B,
    ::oo_2_0::AircraftTypeModelCode::YUN12,
    ::oo_2_0::AircraftTypeModelCode::Z11,
    ::oo_2_0::AircraftTypeModelCode::Z142,
    ::oo_2_0::AircraftTypeModelCode::Z142C,
    ::oo_2_0::AircraftTypeModelCode::Z142CA,
    ::oo_2_0::AircraftTypeModelCode::Z142L,
    ::oo_2_0::AircraftTypeModelCode::Z143,
    ::oo_2_0::AircraftTypeModelCode::Z242L,
    ::oo_2_0::AircraftTypeModelCode::Z326,
    ::oo_2_0::AircraftTypeModelCode::Z5,
    ::oo_2_0::AircraftTypeModelCode::Z50,
    ::oo_2_0::AircraftTypeModelCode::Z6,
    ::oo_2_0::AircraftTypeModelCode::Z8,
    ::oo_2_0::AircraftTypeModelCode::Z9,
    ::oo_2_0::AircraftTypeModelCode::Z9100,
    ::oo_2_0::AircraftTypeModelCode::Z9A,
    ::oo_2_0::AircraftTypeModelCode::ZEPN05,
    ::oo_2_0::AircraftTypeModelCode::ZEPN07,
    ::oo_2_0::AircraftTypeModelCode::ZLNAER,
    ::oo_2_0::AircraftTypeModelCode::ZLNAIR,
    ::oo_2_0::AircraftTypeModelCode::ZLNATL,
    ::oo_2_0::AircraftTypeModelCode::ZLNBAL,
    ::oo_2_0::AircraftTypeModelCode::ZLNBAR,
    ::oo_2_0::AircraftTypeModelCode::ZLNCHI,
    ::oo_2_0::AircraftTypeModelCode::ZLNCON,
    ::oo_2_0::AircraftTypeModelCode::ZLNCOO,
    ::oo_2_0::AircraftTypeModelCode::ZLNDAS,
    ::oo_2_0::AircraftTypeModelCode::ZLNDOL,
    ::oo_2_0::AircraftTypeModelCode::ZLNHAR,
    ::oo_2_0::AircraftTypeModelCode::ZLNHDC,
    ::oo_2_0::AircraftTypeModelCode::ZLNHKB,
    ::oo_2_0::AircraftTypeModelCode::ZLNHKC,
    ::oo_2_0::AircraftTypeModelCode::ZLNHPD,
    ::oo_2_0::AircraftTypeModelCode::ZLNHPF,
    ::oo_2_0::AircraftTypeModelCode::ZLNHPH,
    ::oo_2_0::AircraftTypeModelCode::ZLNIDF,
    ::oo_2_0::AircraftTypeModelCode::ZLNQUE,
    ::oo_2_0::AircraftTypeModelCode::ZLNSEA,
    ::oo_2_0::AircraftTypeModelCode::ZLNSOK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeModelCode >
  _xsd_AircraftTypeModelCode_type_factory_init (
    "AircraftTypeModelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeTakeoffAndLandingCode
  //

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeTakeoffAndLandingCode_convert ();
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeTakeoffAndLandingCode_convert ();
  }

  AircraftTypeTakeoffAndLandingCode::
  AircraftTypeTakeoffAndLandingCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeTakeoffAndLandingCode_convert ();
  }

  AircraftTypeTakeoffAndLandingCode* AircraftTypeTakeoffAndLandingCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeTakeoffAndLandingCode (*this, f, c);
  }

  AircraftTypeTakeoffAndLandingCode::value AircraftTypeTakeoffAndLandingCode::
  _xsd_AircraftTypeTakeoffAndLandingCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeTakeoffAndLandingCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeTakeoffAndLandingCode_indexes_,
                      _xsd_AircraftTypeTakeoffAndLandingCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeTakeoffAndLandingCode_indexes_ + 5 || _xsd_AircraftTypeTakeoffAndLandingCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeTakeoffAndLandingCode::
  _xsd_AircraftTypeTakeoffAndLandingCode_literals_[5] =
  {
    "NKN",
    "NOS",
    "STOL",
    "VSTOL",
    "VTOL"
  };

  const AircraftTypeTakeoffAndLandingCode::value AircraftTypeTakeoffAndLandingCode::
  _xsd_AircraftTypeTakeoffAndLandingCode_indexes_[5] =
  {
    ::oo_2_0::AircraftTypeTakeoffAndLandingCode::NKN,
    ::oo_2_0::AircraftTypeTakeoffAndLandingCode::NOS,
    ::oo_2_0::AircraftTypeTakeoffAndLandingCode::STOL,
    ::oo_2_0::AircraftTypeTakeoffAndLandingCode::VSTOL,
    ::oo_2_0::AircraftTypeTakeoffAndLandingCode::VTOL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeTakeoffAndLandingCode >
  _xsd_AircraftTypeTakeoffAndLandingCode_type_factory_init (
    "AircraftTypeTakeoffAndLandingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeTrainingCategoryCode
  //

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeTrainingCategoryCode_convert ();
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeTrainingCategoryCode_convert ();
  }

  AircraftTypeTrainingCategoryCode::
  AircraftTypeTrainingCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeTrainingCategoryCode_convert ();
  }

  AircraftTypeTrainingCategoryCode* AircraftTypeTrainingCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeTrainingCategoryCode (*this, f, c);
  }

  AircraftTypeTrainingCategoryCode::value AircraftTypeTrainingCategoryCode::
  _xsd_AircraftTypeTrainingCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeTrainingCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeTrainingCategoryCode_indexes_,
                      _xsd_AircraftTypeTrainingCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeTrainingCategoryCode_indexes_ + 3 || _xsd_AircraftTypeTrainingCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeTrainingCategoryCode::
  _xsd_AircraftTypeTrainingCategoryCode_literals_[3] =
  {
    "NKN",
    "NO",
    "YES"
  };

  const AircraftTypeTrainingCategoryCode::value AircraftTypeTrainingCategoryCode::
  _xsd_AircraftTypeTrainingCategoryCode_indexes_[3] =
  {
    ::oo_2_0::AircraftTypeTrainingCategoryCode::NKN,
    ::oo_2_0::AircraftTypeTrainingCategoryCode::NO,
    ::oo_2_0::AircraftTypeTrainingCategoryCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeTrainingCategoryCode >
  _xsd_AircraftTypeTrainingCategoryCode_type_factory_init (
    "AircraftTypeTrainingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AircraftTypeWeatherQualifierCode
  //

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AircraftTypeWeatherQualifierCode_convert ();
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AircraftTypeWeatherQualifierCode_convert ();
  }

  AircraftTypeWeatherQualifierCode::
  AircraftTypeWeatherQualifierCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AircraftTypeWeatherQualifierCode_convert ();
  }

  AircraftTypeWeatherQualifierCode* AircraftTypeWeatherQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AircraftTypeWeatherQualifierCode (*this, f, c);
  }

  AircraftTypeWeatherQualifierCode::value AircraftTypeWeatherQualifierCode::
  _xsd_AircraftTypeWeatherQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AircraftTypeWeatherQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AircraftTypeWeatherQualifierCode_indexes_,
                      _xsd_AircraftTypeWeatherQualifierCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AircraftTypeWeatherQualifierCode_indexes_ + 3 || _xsd_AircraftTypeWeatherQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AircraftTypeWeatherQualifierCode::
  _xsd_AircraftTypeWeatherQualifierCode_literals_[3] =
  {
    "ALL",
    "CLEAR",
    "NKN"
  };

  const AircraftTypeWeatherQualifierCode::value AircraftTypeWeatherQualifierCode::
  _xsd_AircraftTypeWeatherQualifierCode_indexes_[3] =
  {
    ::oo_2_0::AircraftTypeWeatherQualifierCode::ALL,
    ::oo_2_0::AircraftTypeWeatherQualifierCode::CLEAR,
    ::oo_2_0::AircraftTypeWeatherQualifierCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AircraftTypeWeatherQualifierCode >
  _xsd_AircraftTypeWeatherQualifierCode_type_factory_init (
    "AircraftTypeWeatherQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldAirTrafficControlPresenceIndicatorCode
  //

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_convert ();
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_convert ();
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::
  AirfieldAirTrafficControlPresenceIndicatorCode (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_convert ();
  }

  AirfieldAirTrafficControlPresenceIndicatorCode* AirfieldAirTrafficControlPresenceIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldAirTrafficControlPresenceIndicatorCode (*this, f, c);
  }

  AirfieldAirTrafficControlPresenceIndicatorCode::value AirfieldAirTrafficControlPresenceIndicatorCode::
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_indexes_,
                      _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_indexes_ + 2 || _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldAirTrafficControlPresenceIndicatorCode::
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const AirfieldAirTrafficControlPresenceIndicatorCode::value AirfieldAirTrafficControlPresenceIndicatorCode::
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::AirfieldAirTrafficControlPresenceIndicatorCode::NO,
    ::oo_2_0::AirfieldAirTrafficControlPresenceIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldAirTrafficControlPresenceIndicatorCode >
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_type_factory_init (
    "AirfieldAirTrafficControlPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldInstrumentLandingSystemPresenceIndicatorCode
  //

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_convert ();
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const ::xercesc::DOMAttr& a,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_convert ();
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  AirfieldInstrumentLandingSystemPresenceIndicatorCode (const ::std::string& s,
                                                        const ::xercesc::DOMElement* e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_convert ();
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode* AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldInstrumentLandingSystemPresenceIndicatorCode (*this, f, c);
  }

  AirfieldInstrumentLandingSystemPresenceIndicatorCode::value AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_indexes_,
                      _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_indexes_ + 2 || _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const AirfieldInstrumentLandingSystemPresenceIndicatorCode::value AirfieldInstrumentLandingSystemPresenceIndicatorCode::
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::AirfieldInstrumentLandingSystemPresenceIndicatorCode::NO,
    ::oo_2_0::AirfieldInstrumentLandingSystemPresenceIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldInstrumentLandingSystemPresenceIndicatorCode >
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_type_factory_init (
    "AirfieldInstrumentLandingSystemPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldStatusDayOperationsCode
  //

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldStatusDayOperationsCode_convert ();
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldStatusDayOperationsCode_convert ();
  }

  AirfieldStatusDayOperationsCode::
  AirfieldStatusDayOperationsCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldStatusDayOperationsCode_convert ();
  }

  AirfieldStatusDayOperationsCode* AirfieldStatusDayOperationsCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldStatusDayOperationsCode (*this, f, c);
  }

  AirfieldStatusDayOperationsCode::value AirfieldStatusDayOperationsCode::
  _xsd_AirfieldStatusDayOperationsCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldStatusDayOperationsCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldStatusDayOperationsCode_indexes_,
                      _xsd_AirfieldStatusDayOperationsCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_AirfieldStatusDayOperationsCode_indexes_ + 4 || _xsd_AirfieldStatusDayOperationsCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldStatusDayOperationsCode::
  _xsd_AirfieldStatusDayOperationsCode_literals_[4] =
  {
    "BOTH",
    "DAY",
    "NIGHT",
    "NKN"
  };

  const AirfieldStatusDayOperationsCode::value AirfieldStatusDayOperationsCode::
  _xsd_AirfieldStatusDayOperationsCode_indexes_[4] =
  {
    ::oo_2_0::AirfieldStatusDayOperationsCode::BOTH,
    ::oo_2_0::AirfieldStatusDayOperationsCode::DAY,
    ::oo_2_0::AirfieldStatusDayOperationsCode::NIGHT,
    ::oo_2_0::AirfieldStatusDayOperationsCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldStatusDayOperationsCode >
  _xsd_AirfieldStatusDayOperationsCode_type_factory_init (
    "AirfieldStatusDayOperationsCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldStatusEvaluationIndicatorCode
  //

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldStatusEvaluationIndicatorCode_convert ();
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldStatusEvaluationIndicatorCode_convert ();
  }

  AirfieldStatusEvaluationIndicatorCode::
  AirfieldStatusEvaluationIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldStatusEvaluationIndicatorCode_convert ();
  }

  AirfieldStatusEvaluationIndicatorCode* AirfieldStatusEvaluationIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldStatusEvaluationIndicatorCode (*this, f, c);
  }

  AirfieldStatusEvaluationIndicatorCode::value AirfieldStatusEvaluationIndicatorCode::
  _xsd_AirfieldStatusEvaluationIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldStatusEvaluationIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldStatusEvaluationIndicatorCode_indexes_,
                      _xsd_AirfieldStatusEvaluationIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AirfieldStatusEvaluationIndicatorCode_indexes_ + 2 || _xsd_AirfieldStatusEvaluationIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldStatusEvaluationIndicatorCode::
  _xsd_AirfieldStatusEvaluationIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const AirfieldStatusEvaluationIndicatorCode::value AirfieldStatusEvaluationIndicatorCode::
  _xsd_AirfieldStatusEvaluationIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::AirfieldStatusEvaluationIndicatorCode::NO,
    ::oo_2_0::AirfieldStatusEvaluationIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldStatusEvaluationIndicatorCode >
  _xsd_AirfieldStatusEvaluationIndicatorCode_type_factory_init (
    "AirfieldStatusEvaluationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldStatusFlightSupportCategoryCode
  //

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldStatusFlightSupportCategoryCode_convert ();
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldStatusFlightSupportCategoryCode_convert ();
  }

  AirfieldStatusFlightSupportCategoryCode::
  AirfieldStatusFlightSupportCategoryCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldStatusFlightSupportCategoryCode_convert ();
  }

  AirfieldStatusFlightSupportCategoryCode* AirfieldStatusFlightSupportCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldStatusFlightSupportCategoryCode (*this, f, c);
  }

  AirfieldStatusFlightSupportCategoryCode::value AirfieldStatusFlightSupportCategoryCode::
  _xsd_AirfieldStatusFlightSupportCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldStatusFlightSupportCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldStatusFlightSupportCategoryCode_indexes_,
                      _xsd_AirfieldStatusFlightSupportCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AirfieldStatusFlightSupportCategoryCode_indexes_ + 3 || _xsd_AirfieldStatusFlightSupportCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldStatusFlightSupportCategoryCode::
  _xsd_AirfieldStatusFlightSupportCategoryCode_literals_[3] =
  {
    "IFR",
    "NKN",
    "VFR"
  };

  const AirfieldStatusFlightSupportCategoryCode::value AirfieldStatusFlightSupportCategoryCode::
  _xsd_AirfieldStatusFlightSupportCategoryCode_indexes_[3] =
  {
    ::oo_2_0::AirfieldStatusFlightSupportCategoryCode::IFR,
    ::oo_2_0::AirfieldStatusFlightSupportCategoryCode::NKN,
    ::oo_2_0::AirfieldStatusFlightSupportCategoryCode::VFR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldStatusFlightSupportCategoryCode >
  _xsd_AirfieldStatusFlightSupportCategoryCode_type_factory_init (
    "AirfieldStatusFlightSupportCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldTypeUseCategoryCode
  //

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldTypeUseCategoryCode_convert ();
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldTypeUseCategoryCode_convert ();
  }

  AirfieldTypeUseCategoryCode::
  AirfieldTypeUseCategoryCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldTypeUseCategoryCode_convert ();
  }

  AirfieldTypeUseCategoryCode* AirfieldTypeUseCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldTypeUseCategoryCode (*this, f, c);
  }

  AirfieldTypeUseCategoryCode::value AirfieldTypeUseCategoryCode::
  _xsd_AirfieldTypeUseCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldTypeUseCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldTypeUseCategoryCode_indexes_,
                      _xsd_AirfieldTypeUseCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_AirfieldTypeUseCategoryCode_indexes_ + 4 || _xsd_AirfieldTypeUseCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldTypeUseCategoryCode::
  _xsd_AirfieldTypeUseCategoryCode_literals_[4] =
  {
    "A",
    "B",
    "C",
    "D"
  };

  const AirfieldTypeUseCategoryCode::value AirfieldTypeUseCategoryCode::
  _xsd_AirfieldTypeUseCategoryCode_indexes_[4] =
  {
    ::oo_2_0::AirfieldTypeUseCategoryCode::A,
    ::oo_2_0::AirfieldTypeUseCategoryCode::B,
    ::oo_2_0::AirfieldTypeUseCategoryCode::C,
    ::oo_2_0::AirfieldTypeUseCategoryCode::D
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldTypeUseCategoryCode >
  _xsd_AirfieldTypeUseCategoryCode_type_factory_init (
    "AirfieldTypeUseCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AirfieldVisualNavigationalAidIndicatorCode
  //

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AirfieldVisualNavigationalAidIndicatorCode_convert ();
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AirfieldVisualNavigationalAidIndicatorCode_convert ();
  }

  AirfieldVisualNavigationalAidIndicatorCode::
  AirfieldVisualNavigationalAidIndicatorCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AirfieldVisualNavigationalAidIndicatorCode_convert ();
  }

  AirfieldVisualNavigationalAidIndicatorCode* AirfieldVisualNavigationalAidIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AirfieldVisualNavigationalAidIndicatorCode (*this, f, c);
  }

  AirfieldVisualNavigationalAidIndicatorCode::value AirfieldVisualNavigationalAidIndicatorCode::
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AirfieldVisualNavigationalAidIndicatorCode_indexes_,
                      _xsd_AirfieldVisualNavigationalAidIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AirfieldVisualNavigationalAidIndicatorCode_indexes_ + 2 || _xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AirfieldVisualNavigationalAidIndicatorCode::
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const AirfieldVisualNavigationalAidIndicatorCode::value AirfieldVisualNavigationalAidIndicatorCode::
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::AirfieldVisualNavigationalAidIndicatorCode::NO,
    ::oo_2_0::AirfieldVisualNavigationalAidIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirfieldVisualNavigationalAidIndicatorCode >
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_type_factory_init (
    "AirfieldVisualNavigationalAidIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AmmunitionTypeCategoryCode
  //

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AmmunitionTypeCategoryCode_convert ();
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AmmunitionTypeCategoryCode_convert ();
  }

  AmmunitionTypeCategoryCode::
  AmmunitionTypeCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AmmunitionTypeCategoryCode_convert ();
  }

  AmmunitionTypeCategoryCode* AmmunitionTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AmmunitionTypeCategoryCode (*this, f, c);
  }

  AmmunitionTypeCategoryCode::value AmmunitionTypeCategoryCode::
  _xsd_AmmunitionTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AmmunitionTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AmmunitionTypeCategoryCode_indexes_,
                      _xsd_AmmunitionTypeCategoryCode_indexes_ + 48,
                      *this,
                      c));

    if (i == _xsd_AmmunitionTypeCategoryCode_indexes_ + 48 || _xsd_AmmunitionTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AmmunitionTypeCategoryCode::
  _xsd_AmmunitionTypeCategoryCode_literals_[48] =
  {
    "AAMIS",
    "ALMIS",
    "ASMIS",
    "ATGDWP",
    "BOMB",
    "BOMBLT",
    "CRUMSL",
    "DPTHCH",
    "EXPLOS",
    "GNSHEL",
    "HNDGRN",
    "MINAHL",
    "MINAPR",
    "MINAT",
    "MINATA",
    "MINDPM",
    "MINMOR",
    "MINNKN",
    "MINNOS",
    "MINOFR",
    "MINSEG",
    "MINSEL",
    "MINSHM",
    "MINWAR",
    "MISATR",
    "MISGUI",
    "MNMRTM",
    "MRTMDC",
    "MRTRBM",
    "MVSEAM",
    "NKN",
    "NOS",
    "PRJNOS",
    "PRXFUS",
    "PYROTC",
    "RCKET",
    "RKTATP",
    "RKTATT",
    "RKTHEV",
    "RKTLGT",
    "RKTMED",
    "SEABDM",
    "SEAMIN",
    "SMAMMO",
    "SRAMIS",
    "SRSMIS",
    "SUBMUN",
    "TRPEDO"
  };

  const AmmunitionTypeCategoryCode::value AmmunitionTypeCategoryCode::
  _xsd_AmmunitionTypeCategoryCode_indexes_[48] =
  {
    ::oo_2_0::AmmunitionTypeCategoryCode::AAMIS,
    ::oo_2_0::AmmunitionTypeCategoryCode::ALMIS,
    ::oo_2_0::AmmunitionTypeCategoryCode::ASMIS,
    ::oo_2_0::AmmunitionTypeCategoryCode::ATGDWP,
    ::oo_2_0::AmmunitionTypeCategoryCode::BOMB,
    ::oo_2_0::AmmunitionTypeCategoryCode::BOMBLT,
    ::oo_2_0::AmmunitionTypeCategoryCode::CRUMSL,
    ::oo_2_0::AmmunitionTypeCategoryCode::DPTHCH,
    ::oo_2_0::AmmunitionTypeCategoryCode::EXPLOS,
    ::oo_2_0::AmmunitionTypeCategoryCode::GNSHEL,
    ::oo_2_0::AmmunitionTypeCategoryCode::HNDGRN,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINAHL,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINAPR,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINAT,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINATA,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINDPM,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINMOR,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINNKN,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINNOS,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINOFR,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINSEG,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINSEL,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINSHM,
    ::oo_2_0::AmmunitionTypeCategoryCode::MINWAR,
    ::oo_2_0::AmmunitionTypeCategoryCode::MISATR,
    ::oo_2_0::AmmunitionTypeCategoryCode::MISGUI,
    ::oo_2_0::AmmunitionTypeCategoryCode::MNMRTM,
    ::oo_2_0::AmmunitionTypeCategoryCode::MRTMDC,
    ::oo_2_0::AmmunitionTypeCategoryCode::MRTRBM,
    ::oo_2_0::AmmunitionTypeCategoryCode::MVSEAM,
    ::oo_2_0::AmmunitionTypeCategoryCode::NKN,
    ::oo_2_0::AmmunitionTypeCategoryCode::NOS,
    ::oo_2_0::AmmunitionTypeCategoryCode::PRJNOS,
    ::oo_2_0::AmmunitionTypeCategoryCode::PRXFUS,
    ::oo_2_0::AmmunitionTypeCategoryCode::PYROTC,
    ::oo_2_0::AmmunitionTypeCategoryCode::RCKET,
    ::oo_2_0::AmmunitionTypeCategoryCode::RKTATP,
    ::oo_2_0::AmmunitionTypeCategoryCode::RKTATT,
    ::oo_2_0::AmmunitionTypeCategoryCode::RKTHEV,
    ::oo_2_0::AmmunitionTypeCategoryCode::RKTLGT,
    ::oo_2_0::AmmunitionTypeCategoryCode::RKTMED,
    ::oo_2_0::AmmunitionTypeCategoryCode::SEABDM,
    ::oo_2_0::AmmunitionTypeCategoryCode::SEAMIN,
    ::oo_2_0::AmmunitionTypeCategoryCode::SMAMMO,
    ::oo_2_0::AmmunitionTypeCategoryCode::SRAMIS,
    ::oo_2_0::AmmunitionTypeCategoryCode::SRSMIS,
    ::oo_2_0::AmmunitionTypeCategoryCode::SUBMUN,
    ::oo_2_0::AmmunitionTypeCategoryCode::TRPEDO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AmmunitionTypeCategoryCode >
  _xsd_AmmunitionTypeCategoryCode_type_factory_init (
    "AmmunitionTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AmmunitionTypeExerciseMineFlareColourCode
  //

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AmmunitionTypeExerciseMineFlareColourCode_convert ();
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AmmunitionTypeExerciseMineFlareColourCode_convert ();
  }

  AmmunitionTypeExerciseMineFlareColourCode::
  AmmunitionTypeExerciseMineFlareColourCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AmmunitionTypeExerciseMineFlareColourCode_convert ();
  }

  AmmunitionTypeExerciseMineFlareColourCode* AmmunitionTypeExerciseMineFlareColourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AmmunitionTypeExerciseMineFlareColourCode (*this, f, c);
  }

  AmmunitionTypeExerciseMineFlareColourCode::value AmmunitionTypeExerciseMineFlareColourCode::
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AmmunitionTypeExerciseMineFlareColourCode_indexes_,
                      _xsd_AmmunitionTypeExerciseMineFlareColourCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_AmmunitionTypeExerciseMineFlareColourCode_indexes_ + 5 || _xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AmmunitionTypeExerciseMineFlareColourCode::
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_[5] =
  {
    "GREEN",
    "ORANGE",
    "RED",
    "WHITE",
    "YELLOW"
  };

  const AmmunitionTypeExerciseMineFlareColourCode::value AmmunitionTypeExerciseMineFlareColourCode::
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_indexes_[5] =
  {
    ::oo_2_0::AmmunitionTypeExerciseMineFlareColourCode::GREEN,
    ::oo_2_0::AmmunitionTypeExerciseMineFlareColourCode::ORANGE,
    ::oo_2_0::AmmunitionTypeExerciseMineFlareColourCode::RED,
    ::oo_2_0::AmmunitionTypeExerciseMineFlareColourCode::WHITE,
    ::oo_2_0::AmmunitionTypeExerciseMineFlareColourCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AmmunitionTypeExerciseMineFlareColourCode >
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_type_factory_init (
    "AmmunitionTypeExerciseMineFlareColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AmmunitionTypeMineMaritimeFiringCode
  //

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AmmunitionTypeMineMaritimeFiringCode_convert ();
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AmmunitionTypeMineMaritimeFiringCode_convert ();
  }

  AmmunitionTypeMineMaritimeFiringCode::
  AmmunitionTypeMineMaritimeFiringCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AmmunitionTypeMineMaritimeFiringCode_convert ();
  }

  AmmunitionTypeMineMaritimeFiringCode* AmmunitionTypeMineMaritimeFiringCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AmmunitionTypeMineMaritimeFiringCode (*this, f, c);
  }

  AmmunitionTypeMineMaritimeFiringCode::value AmmunitionTypeMineMaritimeFiringCode::
  _xsd_AmmunitionTypeMineMaritimeFiringCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AmmunitionTypeMineMaritimeFiringCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AmmunitionTypeMineMaritimeFiringCode_indexes_,
                      _xsd_AmmunitionTypeMineMaritimeFiringCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_AmmunitionTypeMineMaritimeFiringCode_indexes_ + 25 || _xsd_AmmunitionTypeMineMaritimeFiringCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AmmunitionTypeMineMaritimeFiringCode::
  _xsd_AmmunitionTypeMineMaritimeFiringCode_literals_[25] =
  {
    "ACOUAF",
    "ACOUHF",
    "ACOULF",
    "ACOUST",
    "ACTIVE",
    "ANTENA",
    "COARAS",
    "COMBIN",
    "CONTCT",
    "FITWDA",
    "FITWSC",
    "INFLUN",
    "MAGNET",
    "MAGNHH",
    "MAGNTT",
    "MAGNVV",
    "MINHSD",
    "MULTLM",
    "NKN",
    "NOS",
    "PASIVE",
    "PRESUR",
    "SENFNT",
    "SEQUEN",
    "VERSEN"
  };

  const AmmunitionTypeMineMaritimeFiringCode::value AmmunitionTypeMineMaritimeFiringCode::
  _xsd_AmmunitionTypeMineMaritimeFiringCode_indexes_[25] =
  {
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ACOUAF,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ACOUHF,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ACOULF,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ACOUST,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ACTIVE,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::ANTENA,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::COARAS,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::COMBIN,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::CONTCT,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::FITWDA,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::FITWSC,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::INFLUN,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MAGNET,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MAGNHH,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MAGNTT,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MAGNVV,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MINHSD,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::MULTLM,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::NKN,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::NOS,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::PASIVE,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::PRESUR,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::SENFNT,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::SEQUEN,
    ::oo_2_0::AmmunitionTypeMineMaritimeFiringCode::VERSEN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AmmunitionTypeMineMaritimeFiringCode >
  _xsd_AmmunitionTypeMineMaritimeFiringCode_type_factory_init (
    "AmmunitionTypeMineMaritimeFiringCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AnchorageBottomTypeCode
  //

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AnchorageBottomTypeCode_convert ();
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AnchorageBottomTypeCode_convert ();
  }

  AnchorageBottomTypeCode::
  AnchorageBottomTypeCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AnchorageBottomTypeCode_convert ();
  }

  AnchorageBottomTypeCode* AnchorageBottomTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AnchorageBottomTypeCode (*this, f, c);
  }

  AnchorageBottomTypeCode::value AnchorageBottomTypeCode::
  _xsd_AnchorageBottomTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AnchorageBottomTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AnchorageBottomTypeCode_indexes_,
                      _xsd_AnchorageBottomTypeCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_AnchorageBottomTypeCode_indexes_ + 21 || _xsd_AnchorageBottomTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AnchorageBottomTypeCode::
  _xsd_AnchorageBottomTypeCode_literals_[21] =
  {
    "BOULDR",
    "CLAY",
    "COBBLS",
    "CORAL",
    "GRAVEL",
    "LMNSTN",
    "MUD",
    "MUDSND",
    "NOS",
    "PEBBLS",
    "RGHCRL",
    "ROCK",
    "ROUGH",
    "SAND",
    "SANDCR",
    "SANDFN",
    "SANDMD",
    "SANDVC",
    "SANDVF",
    "SMTHFL",
    "STBLSM"
  };

  const AnchorageBottomTypeCode::value AnchorageBottomTypeCode::
  _xsd_AnchorageBottomTypeCode_indexes_[21] =
  {
    ::oo_2_0::AnchorageBottomTypeCode::BOULDR,
    ::oo_2_0::AnchorageBottomTypeCode::CLAY,
    ::oo_2_0::AnchorageBottomTypeCode::COBBLS,
    ::oo_2_0::AnchorageBottomTypeCode::CORAL,
    ::oo_2_0::AnchorageBottomTypeCode::GRAVEL,
    ::oo_2_0::AnchorageBottomTypeCode::LMNSTN,
    ::oo_2_0::AnchorageBottomTypeCode::MUD,
    ::oo_2_0::AnchorageBottomTypeCode::MUDSND,
    ::oo_2_0::AnchorageBottomTypeCode::NOS,
    ::oo_2_0::AnchorageBottomTypeCode::PEBBLS,
    ::oo_2_0::AnchorageBottomTypeCode::RGHCRL,
    ::oo_2_0::AnchorageBottomTypeCode::ROCK,
    ::oo_2_0::AnchorageBottomTypeCode::ROUGH,
    ::oo_2_0::AnchorageBottomTypeCode::SAND,
    ::oo_2_0::AnchorageBottomTypeCode::SANDCR,
    ::oo_2_0::AnchorageBottomTypeCode::SANDFN,
    ::oo_2_0::AnchorageBottomTypeCode::SANDMD,
    ::oo_2_0::AnchorageBottomTypeCode::SANDVC,
    ::oo_2_0::AnchorageBottomTypeCode::SANDVF,
    ::oo_2_0::AnchorageBottomTypeCode::SMTHFL,
    ::oo_2_0::AnchorageBottomTypeCode::STBLSM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnchorageBottomTypeCode >
  _xsd_AnchorageBottomTypeCode_type_factory_init (
    "AnchorageBottomTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AnchorageMooringsTypeCode
  //

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AnchorageMooringsTypeCode_convert ();
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AnchorageMooringsTypeCode_convert ();
  }

  AnchorageMooringsTypeCode::
  AnchorageMooringsTypeCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AnchorageMooringsTypeCode_convert ();
  }

  AnchorageMooringsTypeCode* AnchorageMooringsTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AnchorageMooringsTypeCode (*this, f, c);
  }

  AnchorageMooringsTypeCode::value AnchorageMooringsTypeCode::
  _xsd_AnchorageMooringsTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AnchorageMooringsTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AnchorageMooringsTypeCode_indexes_,
                      _xsd_AnchorageMooringsTypeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_AnchorageMooringsTypeCode_indexes_ + 4 || _xsd_AnchorageMooringsTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AnchorageMooringsTypeCode::
  _xsd_AnchorageMooringsTypeCode_literals_[4] =
  {
    "BUOY",
    "DOLPIN",
    "FXDPST",
    "NOS"
  };

  const AnchorageMooringsTypeCode::value AnchorageMooringsTypeCode::
  _xsd_AnchorageMooringsTypeCode_indexes_[4] =
  {
    ::oo_2_0::AnchorageMooringsTypeCode::BUOY,
    ::oo_2_0::AnchorageMooringsTypeCode::DOLPIN,
    ::oo_2_0::AnchorageMooringsTypeCode::FXDPST,
    ::oo_2_0::AnchorageMooringsTypeCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnchorageMooringsTypeCode >
  _xsd_AnchorageMooringsTypeCode_type_factory_init (
    "AnchorageMooringsTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AnglePrecisionCode
  //

  AnglePrecisionCode::
  AnglePrecisionCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AnglePrecisionCode_convert ();
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AnglePrecisionCode_convert ();
  }

  AnglePrecisionCode::
  AnglePrecisionCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AnglePrecisionCode_convert ();
  }

  AnglePrecisionCode* AnglePrecisionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AnglePrecisionCode (*this, f, c);
  }

  AnglePrecisionCode::value AnglePrecisionCode::
  _xsd_AnglePrecisionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AnglePrecisionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AnglePrecisionCode_indexes_,
                      _xsd_AnglePrecisionCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_AnglePrecisionCode_indexes_ + 10 || _xsd_AnglePrecisionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AnglePrecisionCode::
  _xsd_AnglePrecisionCode_literals_[10] =
  {
    "1000MN",
    "100MN",
    "100SEC",
    "10DEG",
    "10MN",
    "10SEC",
    "DEGREE",
    "MIL",
    "MINUTE",
    "SECOND"
  };

  const AnglePrecisionCode::value AnglePrecisionCode::
  _xsd_AnglePrecisionCode_indexes_[10] =
  {
    ::oo_2_0::AnglePrecisionCode::cxx_1000MN,
    ::oo_2_0::AnglePrecisionCode::cxx_100MN,
    ::oo_2_0::AnglePrecisionCode::cxx_100SEC,
    ::oo_2_0::AnglePrecisionCode::cxx_10DEG,
    ::oo_2_0::AnglePrecisionCode::cxx_10MN,
    ::oo_2_0::AnglePrecisionCode::cxx_10SEC,
    ::oo_2_0::AnglePrecisionCode::DEGREE,
    ::oo_2_0::AnglePrecisionCode::MIL,
    ::oo_2_0::AnglePrecisionCode::MINUTE,
    ::oo_2_0::AnglePrecisionCode::SECOND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnglePrecisionCode >
  _xsd_AnglePrecisionCode_type_factory_init (
    "AnglePrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ApproachDirectionCategoryCode
  //

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ApproachDirectionCategoryCode_convert ();
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ApproachDirectionCategoryCode_convert ();
  }

  ApproachDirectionCategoryCode::
  ApproachDirectionCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ApproachDirectionCategoryCode_convert ();
  }

  ApproachDirectionCategoryCode* ApproachDirectionCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ApproachDirectionCategoryCode (*this, f, c);
  }

  ApproachDirectionCategoryCode::value ApproachDirectionCategoryCode::
  _xsd_ApproachDirectionCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ApproachDirectionCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ApproachDirectionCategoryCode_indexes_,
                      _xsd_ApproachDirectionCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ApproachDirectionCategoryCode_indexes_ + 5 || _xsd_ApproachDirectionCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ApproachDirectionCategoryCode::
  _xsd_ApproachDirectionCategoryCode_literals_[5] =
  {
    "C",
    "L",
    "R",
    "S",
    "T"
  };

  const ApproachDirectionCategoryCode::value ApproachDirectionCategoryCode::
  _xsd_ApproachDirectionCategoryCode_indexes_[5] =
  {
    ::oo_2_0::ApproachDirectionCategoryCode::C,
    ::oo_2_0::ApproachDirectionCategoryCode::L,
    ::oo_2_0::ApproachDirectionCategoryCode::R,
    ::oo_2_0::ApproachDirectionCategoryCode::S,
    ::oo_2_0::ApproachDirectionCategoryCode::T
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ApproachDirectionCategoryCode >
  _xsd_ApproachDirectionCategoryCode_type_factory_init (
    "ApproachDirectionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AssociationStatusCategoryCode
  //

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AssociationStatusCategoryCode_convert ();
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AssociationStatusCategoryCode_convert ();
  }

  AssociationStatusCategoryCode::
  AssociationStatusCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AssociationStatusCategoryCode_convert ();
  }

  AssociationStatusCategoryCode* AssociationStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AssociationStatusCategoryCode (*this, f, c);
  }

  AssociationStatusCategoryCode::value AssociationStatusCategoryCode::
  _xsd_AssociationStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AssociationStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AssociationStatusCategoryCode_indexes_,
                      _xsd_AssociationStatusCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_AssociationStatusCategoryCode_indexes_ + 2 || _xsd_AssociationStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AssociationStatusCategoryCode::
  _xsd_AssociationStatusCategoryCode_literals_[2] =
  {
    "END",
    "START"
  };

  const AssociationStatusCategoryCode::value AssociationStatusCategoryCode::
  _xsd_AssociationStatusCategoryCode_indexes_[2] =
  {
    ::oo_2_0::AssociationStatusCategoryCode::END,
    ::oo_2_0::AssociationStatusCategoryCode::START
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AssociationStatusCategoryCode >
  _xsd_AssociationStatusCategoryCode_type_factory_init (
    "AssociationStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AtmosphereInversionLayerCode
  //

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AtmosphereInversionLayerCode_convert ();
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AtmosphereInversionLayerCode_convert ();
  }

  AtmosphereInversionLayerCode::
  AtmosphereInversionLayerCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AtmosphereInversionLayerCode_convert ();
  }

  AtmosphereInversionLayerCode* AtmosphereInversionLayerCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AtmosphereInversionLayerCode (*this, f, c);
  }

  AtmosphereInversionLayerCode::value AtmosphereInversionLayerCode::
  _xsd_AtmosphereInversionLayerCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AtmosphereInversionLayerCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AtmosphereInversionLayerCode_indexes_,
                      _xsd_AtmosphereInversionLayerCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_AtmosphereInversionLayerCode_indexes_ + 3 || _xsd_AtmosphereInversionLayerCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AtmosphereInversionLayerCode::
  _xsd_AtmosphereInversionLayerCode_literals_[3] =
  {
    "A",
    "B",
    "C"
  };

  const AtmosphereInversionLayerCode::value AtmosphereInversionLayerCode::
  _xsd_AtmosphereInversionLayerCode_indexes_[3] =
  {
    ::oo_2_0::AtmosphereInversionLayerCode::A,
    ::oo_2_0::AtmosphereInversionLayerCode::B,
    ::oo_2_0::AtmosphereInversionLayerCode::C
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AtmosphereInversionLayerCode >
  _xsd_AtmosphereInversionLayerCode_type_factory_init (
    "AtmosphereInversionLayerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AtmospherePressureSystemCategoryCode
  //

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AtmospherePressureSystemCategoryCode_convert ();
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AtmospherePressureSystemCategoryCode_convert ();
  }

  AtmospherePressureSystemCategoryCode::
  AtmospherePressureSystemCategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AtmospherePressureSystemCategoryCode_convert ();
  }

  AtmospherePressureSystemCategoryCode* AtmospherePressureSystemCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AtmospherePressureSystemCategoryCode (*this, f, c);
  }

  AtmospherePressureSystemCategoryCode::value AtmospherePressureSystemCategoryCode::
  _xsd_AtmospherePressureSystemCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AtmospherePressureSystemCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AtmospherePressureSystemCategoryCode_indexes_,
                      _xsd_AtmospherePressureSystemCategoryCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_AtmospherePressureSystemCategoryCode_indexes_ + 11 || _xsd_AtmospherePressureSystemCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AtmospherePressureSystemCategoryCode::
  _xsd_AtmospherePressureSystemCategoryCode_literals_[11] =
  {
    "CLDFRT",
    "HGHPRS",
    "LOWPRS",
    "OCCFRT",
    "RDGLIN",
    "SQLLIN",
    "STAFRT",
    "TRGLIN",
    "UPCFRT",
    "UPWFRT",
    "WRMFRT"
  };

  const AtmospherePressureSystemCategoryCode::value AtmospherePressureSystemCategoryCode::
  _xsd_AtmospherePressureSystemCategoryCode_indexes_[11] =
  {
    ::oo_2_0::AtmospherePressureSystemCategoryCode::CLDFRT,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::HGHPRS,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::LOWPRS,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::OCCFRT,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::RDGLIN,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::SQLLIN,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::STAFRT,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::TRGLIN,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::UPCFRT,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::UPWFRT,
    ::oo_2_0::AtmospherePressureSystemCategoryCode::WRMFRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AtmospherePressureSystemCategoryCode >
  _xsd_AtmospherePressureSystemCategoryCode_type_factory_init (
    "AtmospherePressureSystemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // AtmosphereTemperatureGradientCode
  //

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_AtmosphereTemperatureGradientCode_convert ();
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_AtmosphereTemperatureGradientCode_convert ();
  }

  AtmosphereTemperatureGradientCode::
  AtmosphereTemperatureGradientCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_AtmosphereTemperatureGradientCode_convert ();
  }

  AtmosphereTemperatureGradientCode* AtmosphereTemperatureGradientCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AtmosphereTemperatureGradientCode (*this, f, c);
  }

  AtmosphereTemperatureGradientCode::value AtmosphereTemperatureGradientCode::
  _xsd_AtmosphereTemperatureGradientCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AtmosphereTemperatureGradientCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_AtmosphereTemperatureGradientCode_indexes_,
                      _xsd_AtmosphereTemperatureGradientCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_AtmosphereTemperatureGradientCode_indexes_ + 4 || _xsd_AtmosphereTemperatureGradientCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const AtmosphereTemperatureGradientCode::
  _xsd_AtmosphereTemperatureGradientCode_literals_[4] =
  {
    "NEUTRL",
    "NKN",
    "STABLE",
    "UNSTAB"
  };

  const AtmosphereTemperatureGradientCode::value AtmosphereTemperatureGradientCode::
  _xsd_AtmosphereTemperatureGradientCode_indexes_[4] =
  {
    ::oo_2_0::AtmosphereTemperatureGradientCode::NEUTRL,
    ::oo_2_0::AtmosphereTemperatureGradientCode::NKN,
    ::oo_2_0::AtmosphereTemperatureGradientCode::STABLE,
    ::oo_2_0::AtmosphereTemperatureGradientCode::UNSTAB
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AtmosphereTemperatureGradientCode >
  _xsd_AtmosphereTemperatureGradientCode_type_factory_init (
    "AtmosphereTemperatureGradientCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BerthMajorVesselClassCode
  //

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BerthMajorVesselClassCode_convert ();
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BerthMajorVesselClassCode_convert ();
  }

  BerthMajorVesselClassCode::
  BerthMajorVesselClassCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BerthMajorVesselClassCode_convert ();
  }

  BerthMajorVesselClassCode* BerthMajorVesselClassCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BerthMajorVesselClassCode (*this, f, c);
  }

  BerthMajorVesselClassCode::value BerthMajorVesselClassCode::
  _xsd_BerthMajorVesselClassCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BerthMajorVesselClassCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BerthMajorVesselClassCode_indexes_,
                      _xsd_BerthMajorVesselClassCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_BerthMajorVesselClassCode_indexes_ + 5 || _xsd_BerthMajorVesselClassCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BerthMajorVesselClassCode::
  _xsd_BerthMajorVesselClassCode_literals_[5] =
  {
    "BARGE",
    "BRKBLK",
    "CONTNR",
    "NOS",
    "RORO"
  };

  const BerthMajorVesselClassCode::value BerthMajorVesselClassCode::
  _xsd_BerthMajorVesselClassCode_indexes_[5] =
  {
    ::oo_2_0::BerthMajorVesselClassCode::BARGE,
    ::oo_2_0::BerthMajorVesselClassCode::BRKBLK,
    ::oo_2_0::BerthMajorVesselClassCode::CONTNR,
    ::oo_2_0::BerthMajorVesselClassCode::NOS,
    ::oo_2_0::BerthMajorVesselClassCode::RORO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BerthMajorVesselClassCode >
  _xsd_BerthMajorVesselClassCode_type_factory_init (
    "BerthMajorVesselClassCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BerthRailAvailabilityIndicatorCode
  //

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BerthRailAvailabilityIndicatorCode_convert ();
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BerthRailAvailabilityIndicatorCode_convert ();
  }

  BerthRailAvailabilityIndicatorCode::
  BerthRailAvailabilityIndicatorCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BerthRailAvailabilityIndicatorCode_convert ();
  }

  BerthRailAvailabilityIndicatorCode* BerthRailAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BerthRailAvailabilityIndicatorCode (*this, f, c);
  }

  BerthRailAvailabilityIndicatorCode::value BerthRailAvailabilityIndicatorCode::
  _xsd_BerthRailAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BerthRailAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BerthRailAvailabilityIndicatorCode_indexes_,
                      _xsd_BerthRailAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_BerthRailAvailabilityIndicatorCode_indexes_ + 2 || _xsd_BerthRailAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BerthRailAvailabilityIndicatorCode::
  _xsd_BerthRailAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const BerthRailAvailabilityIndicatorCode::value BerthRailAvailabilityIndicatorCode::
  _xsd_BerthRailAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::BerthRailAvailabilityIndicatorCode::NO,
    ::oo_2_0::BerthRailAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BerthRailAvailabilityIndicatorCode >
  _xsd_BerthRailAvailabilityIndicatorCode_type_factory_init (
    "BerthRailAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BerthRollOnRollOffIndicatorCode
  //

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BerthRollOnRollOffIndicatorCode_convert ();
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BerthRollOnRollOffIndicatorCode_convert ();
  }

  BerthRollOnRollOffIndicatorCode::
  BerthRollOnRollOffIndicatorCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BerthRollOnRollOffIndicatorCode_convert ();
  }

  BerthRollOnRollOffIndicatorCode* BerthRollOnRollOffIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BerthRollOnRollOffIndicatorCode (*this, f, c);
  }

  BerthRollOnRollOffIndicatorCode::value BerthRollOnRollOffIndicatorCode::
  _xsd_BerthRollOnRollOffIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BerthRollOnRollOffIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BerthRollOnRollOffIndicatorCode_indexes_,
                      _xsd_BerthRollOnRollOffIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_BerthRollOnRollOffIndicatorCode_indexes_ + 2 || _xsd_BerthRollOnRollOffIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BerthRollOnRollOffIndicatorCode::
  _xsd_BerthRollOnRollOffIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const BerthRollOnRollOffIndicatorCode::value BerthRollOnRollOffIndicatorCode::
  _xsd_BerthRollOnRollOffIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::BerthRollOnRollOffIndicatorCode::NO,
    ::oo_2_0::BerthRollOnRollOffIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BerthRollOnRollOffIndicatorCode >
  _xsd_BerthRollOnRollOffIndicatorCode_type_factory_init (
    "BerthRollOnRollOffIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BiologicalMaterielTypeCategoryCode
  //

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BiologicalMaterielTypeCategoryCode_convert ();
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BiologicalMaterielTypeCategoryCode_convert ();
  }

  BiologicalMaterielTypeCategoryCode::
  BiologicalMaterielTypeCategoryCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BiologicalMaterielTypeCategoryCode_convert ();
  }

  BiologicalMaterielTypeCategoryCode* BiologicalMaterielTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BiologicalMaterielTypeCategoryCode (*this, f, c);
  }

  BiologicalMaterielTypeCategoryCode::value BiologicalMaterielTypeCategoryCode::
  _xsd_BiologicalMaterielTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BiologicalMaterielTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BiologicalMaterielTypeCategoryCode_indexes_,
                      _xsd_BiologicalMaterielTypeCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_BiologicalMaterielTypeCategoryCode_indexes_ + 6 || _xsd_BiologicalMaterielTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BiologicalMaterielTypeCategoryCode::
  _xsd_BiologicalMaterielTypeCategoryCode_literals_[6] =
  {
    "BACTRL",
    "NKN",
    "NOS",
    "TOXIN",
    "TOXMAT",
    "VIRAL"
  };

  const BiologicalMaterielTypeCategoryCode::value BiologicalMaterielTypeCategoryCode::
  _xsd_BiologicalMaterielTypeCategoryCode_indexes_[6] =
  {
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::BACTRL,
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::NKN,
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::NOS,
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::TOXIN,
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::TOXMAT,
    ::oo_2_0::BiologicalMaterielTypeCategoryCode::VIRAL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BiologicalMaterielTypeCategoryCode >
  _xsd_BiologicalMaterielTypeCategoryCode_type_factory_init (
    "BiologicalMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BiologicalMaterielTypeSubcategoryCode
  //

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BiologicalMaterielTypeSubcategoryCode_convert ();
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BiologicalMaterielTypeSubcategoryCode_convert ();
  }

  BiologicalMaterielTypeSubcategoryCode::
  BiologicalMaterielTypeSubcategoryCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BiologicalMaterielTypeSubcategoryCode_convert ();
  }

  BiologicalMaterielTypeSubcategoryCode* BiologicalMaterielTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BiologicalMaterielTypeSubcategoryCode (*this, f, c);
  }

  BiologicalMaterielTypeSubcategoryCode::value BiologicalMaterielTypeSubcategoryCode::
  _xsd_BiologicalMaterielTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BiologicalMaterielTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BiologicalMaterielTypeSubcategoryCode_indexes_,
                      _xsd_BiologicalMaterielTypeSubcategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_BiologicalMaterielTypeSubcategoryCode_indexes_ + 3 || _xsd_BiologicalMaterielTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BiologicalMaterielTypeSubcategoryCode::
  _xsd_BiologicalMaterielTypeSubcategoryCode_literals_[3] =
  {
    "CHLMYD",
    "NOS",
    "RCKETS"
  };

  const BiologicalMaterielTypeSubcategoryCode::value BiologicalMaterielTypeSubcategoryCode::
  _xsd_BiologicalMaterielTypeSubcategoryCode_indexes_[3] =
  {
    ::oo_2_0::BiologicalMaterielTypeSubcategoryCode::CHLMYD,
    ::oo_2_0::BiologicalMaterielTypeSubcategoryCode::NOS,
    ::oo_2_0::BiologicalMaterielTypeSubcategoryCode::RCKETS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BiologicalMaterielTypeSubcategoryCode >
  _xsd_BiologicalMaterielTypeSubcategoryCode_type_factory_init (
    "BiologicalMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BridgeTypeDesignTypeCode
  //

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BridgeTypeDesignTypeCode_convert ();
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BridgeTypeDesignTypeCode_convert ();
  }

  BridgeTypeDesignTypeCode::
  BridgeTypeDesignTypeCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BridgeTypeDesignTypeCode_convert ();
  }

  BridgeTypeDesignTypeCode* BridgeTypeDesignTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BridgeTypeDesignTypeCode (*this, f, c);
  }

  BridgeTypeDesignTypeCode::value BridgeTypeDesignTypeCode::
  _xsd_BridgeTypeDesignTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BridgeTypeDesignTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BridgeTypeDesignTypeCode_indexes_,
                      _xsd_BridgeTypeDesignTypeCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_BridgeTypeDesignTypeCode_indexes_ + 18 || _xsd_BridgeTypeDesignTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BridgeTypeDesignTypeCode::
  _xsd_BridgeTypeDesignTypeCode_literals_[18] =
  {
    "ARCH",
    "BXGRDR",
    "CNTLVR",
    "FERRY",
    "FLTBOT",
    "FLTNOS",
    "FLTPNT",
    "LIFT",
    "MILMDG",
    "MILVHL",
    "NKN",
    "NOS",
    "RAFT",
    "SLAB",
    "SSPNSN",
    "STRNGR",
    "SWING",
    "TRUSS"
  };

  const BridgeTypeDesignTypeCode::value BridgeTypeDesignTypeCode::
  _xsd_BridgeTypeDesignTypeCode_indexes_[18] =
  {
    ::oo_2_0::BridgeTypeDesignTypeCode::ARCH,
    ::oo_2_0::BridgeTypeDesignTypeCode::BXGRDR,
    ::oo_2_0::BridgeTypeDesignTypeCode::CNTLVR,
    ::oo_2_0::BridgeTypeDesignTypeCode::FERRY,
    ::oo_2_0::BridgeTypeDesignTypeCode::FLTBOT,
    ::oo_2_0::BridgeTypeDesignTypeCode::FLTNOS,
    ::oo_2_0::BridgeTypeDesignTypeCode::FLTPNT,
    ::oo_2_0::BridgeTypeDesignTypeCode::LIFT,
    ::oo_2_0::BridgeTypeDesignTypeCode::MILMDG,
    ::oo_2_0::BridgeTypeDesignTypeCode::MILVHL,
    ::oo_2_0::BridgeTypeDesignTypeCode::NKN,
    ::oo_2_0::BridgeTypeDesignTypeCode::NOS,
    ::oo_2_0::BridgeTypeDesignTypeCode::RAFT,
    ::oo_2_0::BridgeTypeDesignTypeCode::SLAB,
    ::oo_2_0::BridgeTypeDesignTypeCode::SSPNSN,
    ::oo_2_0::BridgeTypeDesignTypeCode::STRNGR,
    ::oo_2_0::BridgeTypeDesignTypeCode::SWING,
    ::oo_2_0::BridgeTypeDesignTypeCode::TRUSS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BridgeTypeDesignTypeCode >
  _xsd_BridgeTypeDesignTypeCode_type_factory_init (
    "BridgeTypeDesignTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // BridgeUsageCode
  //

  BridgeUsageCode::
  BridgeUsageCode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_BridgeUsageCode_convert ();
  }

  BridgeUsageCode::
  BridgeUsageCode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_BridgeUsageCode_convert ();
  }

  BridgeUsageCode::
  BridgeUsageCode (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_BridgeUsageCode_convert ();
  }

  BridgeUsageCode* BridgeUsageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BridgeUsageCode (*this, f, c);
  }

  BridgeUsageCode::value BridgeUsageCode::
  _xsd_BridgeUsageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BridgeUsageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_BridgeUsageCode_indexes_,
                      _xsd_BridgeUsageCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_BridgeUsageCode_indexes_ + 7 || _xsd_BridgeUsageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const BridgeUsageCode::
  _xsd_BridgeUsageCode_literals_[7] =
  {
    "FOOT",
    "MLTUSE",
    "NKN",
    "NOS",
    "RAILWY",
    "RLWYVH",
    "VEHCLE"
  };

  const BridgeUsageCode::value BridgeUsageCode::
  _xsd_BridgeUsageCode_indexes_[7] =
  {
    ::oo_2_0::BridgeUsageCode::FOOT,
    ::oo_2_0::BridgeUsageCode::MLTUSE,
    ::oo_2_0::BridgeUsageCode::NKN,
    ::oo_2_0::BridgeUsageCode::NOS,
    ::oo_2_0::BridgeUsageCode::RAILWY,
    ::oo_2_0::BridgeUsageCode::RLWYVH,
    ::oo_2_0::BridgeUsageCode::VEHCLE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BridgeUsageCode >
  _xsd_BridgeUsageCode_type_factory_init (
    "BridgeUsageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetDetailAssociationCategoryCode
  //

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetDetailAssociationCategoryCode_convert ();
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetDetailAssociationCategoryCode_convert ();
  }

  CandidateTargetDetailAssociationCategoryCode::
  CandidateTargetDetailAssociationCategoryCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetDetailAssociationCategoryCode_convert ();
  }

  CandidateTargetDetailAssociationCategoryCode* CandidateTargetDetailAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetDetailAssociationCategoryCode (*this, f, c);
  }

  CandidateTargetDetailAssociationCategoryCode::value CandidateTargetDetailAssociationCategoryCode::
  _xsd_CandidateTargetDetailAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetDetailAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetDetailAssociationCategoryCode_indexes_,
                      _xsd_CandidateTargetDetailAssociationCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetDetailAssociationCategoryCode_indexes_ + 2 || _xsd_CandidateTargetDetailAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetDetailAssociationCategoryCode::
  _xsd_CandidateTargetDetailAssociationCategoryCode_literals_[2] =
  {
    "COLOC",
    "COMPNT"
  };

  const CandidateTargetDetailAssociationCategoryCode::value CandidateTargetDetailAssociationCategoryCode::
  _xsd_CandidateTargetDetailAssociationCategoryCode_indexes_[2] =
  {
    ::oo_2_0::CandidateTargetDetailAssociationCategoryCode::COLOC,
    ::oo_2_0::CandidateTargetDetailAssociationCategoryCode::COMPNT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetDetailAssociationCategoryCode >
  _xsd_CandidateTargetDetailAssociationCategoryCode_type_factory_init (
    "CandidateTargetDetailAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetDetailAuthorisationApprovalCode
  //

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetDetailAuthorisationApprovalCode_convert ();
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetDetailAuthorisationApprovalCode_convert ();
  }

  CandidateTargetDetailAuthorisationApprovalCode::
  CandidateTargetDetailAuthorisationApprovalCode (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetDetailAuthorisationApprovalCode_convert ();
  }

  CandidateTargetDetailAuthorisationApprovalCode* CandidateTargetDetailAuthorisationApprovalCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetDetailAuthorisationApprovalCode (*this, f, c);
  }

  CandidateTargetDetailAuthorisationApprovalCode::value CandidateTargetDetailAuthorisationApprovalCode::
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetDetailAuthorisationApprovalCode_indexes_,
                      _xsd_CandidateTargetDetailAuthorisationApprovalCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetDetailAuthorisationApprovalCode_indexes_ + 3 || _xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetDetailAuthorisationApprovalCode::
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_[3] =
  {
    "APPAVL",
    "APPEXC",
    "NOTAPP"
  };

  const CandidateTargetDetailAuthorisationApprovalCode::value CandidateTargetDetailAuthorisationApprovalCode::
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_indexes_[3] =
  {
    ::oo_2_0::CandidateTargetDetailAuthorisationApprovalCode::APPAVL,
    ::oo_2_0::CandidateTargetDetailAuthorisationApprovalCode::APPEXC,
    ::oo_2_0::CandidateTargetDetailAuthorisationApprovalCode::NOTAPP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetDetailAuthorisationApprovalCode >
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_type_factory_init (
    "CandidateTargetDetailAuthorisationApprovalCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetDetailCategoryCode
  //

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetDetailCategoryCode_convert ();
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetDetailCategoryCode_convert ();
  }

  CandidateTargetDetailCategoryCode::
  CandidateTargetDetailCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetDetailCategoryCode_convert ();
  }

  CandidateTargetDetailCategoryCode* CandidateTargetDetailCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetDetailCategoryCode (*this, f, c);
  }

  CandidateTargetDetailCategoryCode::value CandidateTargetDetailCategoryCode::
  _xsd_CandidateTargetDetailCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetDetailCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetDetailCategoryCode_indexes_,
                      _xsd_CandidateTargetDetailCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetDetailCategoryCode_indexes_ + 2 || _xsd_CandidateTargetDetailCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetDetailCategoryCode::
  _xsd_CandidateTargetDetailCategoryCode_literals_[2] =
  {
    "CTDITM",
    "CTDTYP"
  };

  const CandidateTargetDetailCategoryCode::value CandidateTargetDetailCategoryCode::
  _xsd_CandidateTargetDetailCategoryCode_indexes_[2] =
  {
    ::oo_2_0::CandidateTargetDetailCategoryCode::CTDITM,
    ::oo_2_0::CandidateTargetDetailCategoryCode::CTDTYP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetDetailCategoryCode >
  _xsd_CandidateTargetDetailCategoryCode_type_factory_init (
    "CandidateTargetDetailCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetDetailFocusTypeCode
  //

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetDetailFocusTypeCode_convert ();
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetDetailFocusTypeCode_convert ();
  }

  CandidateTargetDetailFocusTypeCode::
  CandidateTargetDetailFocusTypeCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetDetailFocusTypeCode_convert ();
  }

  CandidateTargetDetailFocusTypeCode* CandidateTargetDetailFocusTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetDetailFocusTypeCode (*this, f, c);
  }

  CandidateTargetDetailFocusTypeCode::value CandidateTargetDetailFocusTypeCode::
  _xsd_CandidateTargetDetailFocusTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetDetailFocusTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetDetailFocusTypeCode_indexes_,
                      _xsd_CandidateTargetDetailFocusTypeCode_indexes_ + 17,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetDetailFocusTypeCode_indexes_ + 17 || _xsd_CandidateTargetDetailFocusTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetDetailFocusTypeCode::
  _xsd_CandidateTargetDetailFocusTypeCode_literals_[17] =
  {
    "ATTACK",
    "CAPTUR",
    "DEFEAT",
    "DESTRY",
    "DONOTA",
    "ILLUMN",
    "INFILT",
    "INTCEP",
    "JAM",
    "LOCATE",
    "MARK",
    "NOS",
    "NUTRLS",
    "OBSRV",
    "OCCUPY",
    "RECCE",
    "SUPPRS"
  };

  const CandidateTargetDetailFocusTypeCode::value CandidateTargetDetailFocusTypeCode::
  _xsd_CandidateTargetDetailFocusTypeCode_indexes_[17] =
  {
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::ATTACK,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::CAPTUR,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::DEFEAT,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::DESTRY,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::DONOTA,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::ILLUMN,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::INFILT,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::INTCEP,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::JAM,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::LOCATE,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::MARK,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::NOS,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::NUTRLS,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::OBSRV,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::OCCUPY,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::RECCE,
    ::oo_2_0::CandidateTargetDetailFocusTypeCode::SUPPRS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetDetailFocusTypeCode >
  _xsd_CandidateTargetDetailFocusTypeCode_type_factory_init (
    "CandidateTargetDetailFocusTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetDetailSchemeCode
  //

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetDetailSchemeCode_convert ();
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetDetailSchemeCode_convert ();
  }

  CandidateTargetDetailSchemeCode::
  CandidateTargetDetailSchemeCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetDetailSchemeCode_convert ();
  }

  CandidateTargetDetailSchemeCode* CandidateTargetDetailSchemeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetDetailSchemeCode (*this, f, c);
  }

  CandidateTargetDetailSchemeCode::value CandidateTargetDetailSchemeCode::
  _xsd_CandidateTargetDetailSchemeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetDetailSchemeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetDetailSchemeCode_indexes_,
                      _xsd_CandidateTargetDetailSchemeCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetDetailSchemeCode_indexes_ + 5 || _xsd_CandidateTargetDetailSchemeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetDetailSchemeCode::
  _xsd_CandidateTargetDetailSchemeCode_literals_[5] =
  {
    "ABCA",
    "BE",
    "FIBE",
    "ORGANL",
    "SITENR"
  };

  const CandidateTargetDetailSchemeCode::value CandidateTargetDetailSchemeCode::
  _xsd_CandidateTargetDetailSchemeCode_indexes_[5] =
  {
    ::oo_2_0::CandidateTargetDetailSchemeCode::ABCA,
    ::oo_2_0::CandidateTargetDetailSchemeCode::BE,
    ::oo_2_0::CandidateTargetDetailSchemeCode::FIBE,
    ::oo_2_0::CandidateTargetDetailSchemeCode::ORGANL,
    ::oo_2_0::CandidateTargetDetailSchemeCode::SITENR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetDetailSchemeCode >
  _xsd_CandidateTargetDetailSchemeCode_type_factory_init (
    "CandidateTargetDetailSchemeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetListAssociationCategoryCode
  //

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetListAssociationCategoryCode_convert ();
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetListAssociationCategoryCode_convert ();
  }

  CandidateTargetListAssociationCategoryCode::
  CandidateTargetListAssociationCategoryCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetListAssociationCategoryCode_convert ();
  }

  CandidateTargetListAssociationCategoryCode* CandidateTargetListAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetListAssociationCategoryCode (*this, f, c);
  }

  CandidateTargetListAssociationCategoryCode::value CandidateTargetListAssociationCategoryCode::
  _xsd_CandidateTargetListAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetListAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetListAssociationCategoryCode_indexes_,
                      _xsd_CandidateTargetListAssociationCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetListAssociationCategoryCode_indexes_ + 4 || _xsd_CandidateTargetListAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetListAssociationCategoryCode::
  _xsd_CandidateTargetListAssociationCategoryCode_literals_[4] =
  {
    "COMPNT",
    "INCPRT",
    "PRECED",
    "REPLAC"
  };

  const CandidateTargetListAssociationCategoryCode::value CandidateTargetListAssociationCategoryCode::
  _xsd_CandidateTargetListAssociationCategoryCode_indexes_[4] =
  {
    ::oo_2_0::CandidateTargetListAssociationCategoryCode::COMPNT,
    ::oo_2_0::CandidateTargetListAssociationCategoryCode::INCPRT,
    ::oo_2_0::CandidateTargetListAssociationCategoryCode::PRECED,
    ::oo_2_0::CandidateTargetListAssociationCategoryCode::REPLAC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetListAssociationCategoryCode >
  _xsd_CandidateTargetListAssociationCategoryCode_type_factory_init (
    "CandidateTargetListAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CandidateTargetListAuthorisationIndicatorCode
  //

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CandidateTargetListAuthorisationIndicatorCode_convert ();
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CandidateTargetListAuthorisationIndicatorCode_convert ();
  }

  CandidateTargetListAuthorisationIndicatorCode::
  CandidateTargetListAuthorisationIndicatorCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CandidateTargetListAuthorisationIndicatorCode_convert ();
  }

  CandidateTargetListAuthorisationIndicatorCode* CandidateTargetListAuthorisationIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CandidateTargetListAuthorisationIndicatorCode (*this, f, c);
  }

  CandidateTargetListAuthorisationIndicatorCode::value CandidateTargetListAuthorisationIndicatorCode::
  _xsd_CandidateTargetListAuthorisationIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CandidateTargetListAuthorisationIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CandidateTargetListAuthorisationIndicatorCode_indexes_,
                      _xsd_CandidateTargetListAuthorisationIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_CandidateTargetListAuthorisationIndicatorCode_indexes_ + 2 || _xsd_CandidateTargetListAuthorisationIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CandidateTargetListAuthorisationIndicatorCode::
  _xsd_CandidateTargetListAuthorisationIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const CandidateTargetListAuthorisationIndicatorCode::value CandidateTargetListAuthorisationIndicatorCode::
  _xsd_CandidateTargetListAuthorisationIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::CandidateTargetListAuthorisationIndicatorCode::NO,
    ::oo_2_0::CandidateTargetListAuthorisationIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CandidateTargetListAuthorisationIndicatorCode >
  _xsd_CandidateTargetListAuthorisationIndicatorCode_type_factory_init (
    "CandidateTargetListAuthorisationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CapabilityCategoryCode
  //

  CapabilityCategoryCode::
  CapabilityCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CapabilityCategoryCode_convert ();
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CapabilityCategoryCode_convert ();
  }

  CapabilityCategoryCode::
  CapabilityCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CapabilityCategoryCode_convert ();
  }

  CapabilityCategoryCode* CapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CapabilityCategoryCode (*this, f, c);
  }

  CapabilityCategoryCode::value CapabilityCategoryCode::
  _xsd_CapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CapabilityCategoryCode_indexes_,
                      _xsd_CapabilityCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_CapabilityCategoryCode_indexes_ + 10 || _xsd_CapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CapabilityCategoryCode::
  _xsd_CapabilityCategoryCode_literals_[10] =
  {
    "ENGI",
    "FIRE",
    "HNDLNG",
    "MAIN",
    "MOBL",
    "OPERAT",
    "STOR",
    "SUPPRT",
    "SURV",
    "TRANSM"
  };

  const CapabilityCategoryCode::value CapabilityCategoryCode::
  _xsd_CapabilityCategoryCode_indexes_[10] =
  {
    ::oo_2_0::CapabilityCategoryCode::ENGI,
    ::oo_2_0::CapabilityCategoryCode::FIRE,
    ::oo_2_0::CapabilityCategoryCode::HNDLNG,
    ::oo_2_0::CapabilityCategoryCode::MAIN,
    ::oo_2_0::CapabilityCategoryCode::MOBL,
    ::oo_2_0::CapabilityCategoryCode::OPERAT,
    ::oo_2_0::CapabilityCategoryCode::STOR,
    ::oo_2_0::CapabilityCategoryCode::SUPPRT,
    ::oo_2_0::CapabilityCategoryCode::SURV,
    ::oo_2_0::CapabilityCategoryCode::TRANSM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityCategoryCode >
  _xsd_CapabilityCategoryCode_type_factory_init (
    "CapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CapabilityDayNightCode
  //

  CapabilityDayNightCode::
  CapabilityDayNightCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CapabilityDayNightCode_convert ();
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CapabilityDayNightCode_convert ();
  }

  CapabilityDayNightCode::
  CapabilityDayNightCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CapabilityDayNightCode_convert ();
  }

  CapabilityDayNightCode* CapabilityDayNightCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CapabilityDayNightCode (*this, f, c);
  }

  CapabilityDayNightCode::value CapabilityDayNightCode::
  _xsd_CapabilityDayNightCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CapabilityDayNightCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CapabilityDayNightCode_indexes_,
                      _xsd_CapabilityDayNightCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CapabilityDayNightCode_indexes_ + 3 || _xsd_CapabilityDayNightCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CapabilityDayNightCode::
  _xsd_CapabilityDayNightCode_literals_[3] =
  {
    "DAY",
    "DN",
    "N"
  };

  const CapabilityDayNightCode::value CapabilityDayNightCode::
  _xsd_CapabilityDayNightCode_indexes_[3] =
  {
    ::oo_2_0::CapabilityDayNightCode::DAY,
    ::oo_2_0::CapabilityDayNightCode::DN,
    ::oo_2_0::CapabilityDayNightCode::N
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityDayNightCode >
  _xsd_CapabilityDayNightCode_type_factory_init (
    "CapabilityDayNightCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CapabilityCitationAssociationCategoryCode
  //

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CapabilityCitationAssociationCategoryCode_convert ();
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CapabilityCitationAssociationCategoryCode_convert ();
  }

  CapabilityCitationAssociationCategoryCode::
  CapabilityCitationAssociationCategoryCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CapabilityCitationAssociationCategoryCode_convert ();
  }

  CapabilityCitationAssociationCategoryCode* CapabilityCitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CapabilityCitationAssociationCategoryCode (*this, f, c);
  }

  CapabilityCitationAssociationCategoryCode::value CapabilityCitationAssociationCategoryCode::
  _xsd_CapabilityCitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CapabilityCitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CapabilityCitationAssociationCategoryCode_indexes_,
                      _xsd_CapabilityCitationAssociationCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CapabilityCitationAssociationCategoryCode_indexes_ + 3 || _xsd_CapabilityCitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CapabilityCitationAssociationCategoryCode::
  _xsd_CapabilityCitationAssociationCategoryCode_literals_[3] =
  {
    "ISAMPL",
    "ISDFND",
    "ISDSCR"
  };

  const CapabilityCitationAssociationCategoryCode::value CapabilityCitationAssociationCategoryCode::
  _xsd_CapabilityCitationAssociationCategoryCode_indexes_[3] =
  {
    ::oo_2_0::CapabilityCitationAssociationCategoryCode::ISAMPL,
    ::oo_2_0::CapabilityCitationAssociationCategoryCode::ISDFND,
    ::oo_2_0::CapabilityCitationAssociationCategoryCode::ISDSCR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityCitationAssociationCategoryCode >
  _xsd_CapabilityCitationAssociationCategoryCode_type_factory_init (
    "CapabilityCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CapabilityUnitOfMeasureCode
  //

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CapabilityUnitOfMeasureCode_convert ();
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CapabilityUnitOfMeasureCode_convert ();
  }

  CapabilityUnitOfMeasureCode::
  CapabilityUnitOfMeasureCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CapabilityUnitOfMeasureCode_convert ();
  }

  CapabilityUnitOfMeasureCode* CapabilityUnitOfMeasureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CapabilityUnitOfMeasureCode (*this, f, c);
  }

  CapabilityUnitOfMeasureCode::value CapabilityUnitOfMeasureCode::
  _xsd_CapabilityUnitOfMeasureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CapabilityUnitOfMeasureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CapabilityUnitOfMeasureCode_indexes_,
                      _xsd_CapabilityUnitOfMeasureCode_indexes_ + 35,
                      *this,
                      c));

    if (i == _xsd_CapabilityUnitOfMeasureCode_indexes_ + 35 || _xsd_CapabilityUnitOfMeasureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CapabilityUnitOfMeasureCode::
  _xsd_CapabilityUnitOfMeasureCode_literals_[35] =
  {
    "CM",
    "CMH",
    "DEG",
    "EA",
    "GHZ",
    "HR",
    "HZ",
    "ITEMPD",
    "ITEMPH",
    "ITEMPM",
    "KG",
    "KGH",
    "KHZ",
    "KM",
    "KNOTS",
    "KPH",
    "LI",
    "LPH",
    "LPM",
    "MANHUR",
    "METRE",
    "MHPRHR",
    "MHZ",
    "MINUTE",
    "MPS",
    "MTRCTN",
    "NM",
    "PPS",
    "PRCNTG",
    "RDM",
    "SECOND",
    "SMH",
    "SQM",
    "UNTLS",
    "WATT"
  };

  const CapabilityUnitOfMeasureCode::value CapabilityUnitOfMeasureCode::
  _xsd_CapabilityUnitOfMeasureCode_indexes_[35] =
  {
    ::oo_2_0::CapabilityUnitOfMeasureCode::CM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::CMH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::DEG,
    ::oo_2_0::CapabilityUnitOfMeasureCode::EA,
    ::oo_2_0::CapabilityUnitOfMeasureCode::GHZ,
    ::oo_2_0::CapabilityUnitOfMeasureCode::HR,
    ::oo_2_0::CapabilityUnitOfMeasureCode::HZ,
    ::oo_2_0::CapabilityUnitOfMeasureCode::ITEMPD,
    ::oo_2_0::CapabilityUnitOfMeasureCode::ITEMPH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::ITEMPM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KG,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KGH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KHZ,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KNOTS,
    ::oo_2_0::CapabilityUnitOfMeasureCode::KPH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::LI,
    ::oo_2_0::CapabilityUnitOfMeasureCode::LPH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::LPM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MANHUR,
    ::oo_2_0::CapabilityUnitOfMeasureCode::METRE,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MHPRHR,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MHZ,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MINUTE,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MPS,
    ::oo_2_0::CapabilityUnitOfMeasureCode::MTRCTN,
    ::oo_2_0::CapabilityUnitOfMeasureCode::NM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::PPS,
    ::oo_2_0::CapabilityUnitOfMeasureCode::PRCNTG,
    ::oo_2_0::CapabilityUnitOfMeasureCode::RDM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::SECOND,
    ::oo_2_0::CapabilityUnitOfMeasureCode::SMH,
    ::oo_2_0::CapabilityUnitOfMeasureCode::SQM,
    ::oo_2_0::CapabilityUnitOfMeasureCode::UNTLS,
    ::oo_2_0::CapabilityUnitOfMeasureCode::WATT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityUnitOfMeasureCode >
  _xsd_CapabilityUnitOfMeasureCode_type_factory_init (
    "CapabilityUnitOfMeasureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CargoCategoryCode
  //

  CargoCategoryCode::
  CargoCategoryCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CargoCategoryCode_convert ();
  }

  CargoCategoryCode::
  CargoCategoryCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CargoCategoryCode_convert ();
  }

  CargoCategoryCode::
  CargoCategoryCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CargoCategoryCode_convert ();
  }

  CargoCategoryCode* CargoCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CargoCategoryCode (*this, f, c);
  }

  CargoCategoryCode::value CargoCategoryCode::
  _xsd_CargoCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CargoCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CargoCategoryCode_indexes_,
                      _xsd_CargoCategoryCode_indexes_ + 39,
                      *this,
                      c));

    if (i == _xsd_CargoCategoryCode_indexes_ + 39 || _xsd_CargoCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CargoCategoryCode::
  _xsd_CargoCategoryCode_literals_[39] =
  {
    "ACFT",
    "AGP",
    "AMMO",
    "ARAMEX",
    "BOATS",
    "BULK",
    "CHE",
    "CHILL",
    "CLASS",
    "COL",
    "CON",
    "CTR",
    "DRY",
    "FOP",
    "FREEZE",
    "GEN",
    "HAZMAT",
    "HYEQPT",
    "LIQUID",
    "MAC",
    "MAIL",
    "MAT",
    "MCH",
    "MED",
    "MIM",
    "OTR",
    "PAX",
    "PERS",
    "POL",
    "POW",
    "SPECL",
    "SUBS",
    "SUG",
    "TEX",
    "TROOPS",
    "VEH",
    "VEHT",
    "VEHW",
    "WOUND"
  };

  const CargoCategoryCode::value CargoCategoryCode::
  _xsd_CargoCategoryCode_indexes_[39] =
  {
    ::oo_2_0::CargoCategoryCode::ACFT,
    ::oo_2_0::CargoCategoryCode::AGP,
    ::oo_2_0::CargoCategoryCode::AMMO,
    ::oo_2_0::CargoCategoryCode::ARAMEX,
    ::oo_2_0::CargoCategoryCode::BOATS,
    ::oo_2_0::CargoCategoryCode::BULK,
    ::oo_2_0::CargoCategoryCode::CHE,
    ::oo_2_0::CargoCategoryCode::CHILL,
    ::oo_2_0::CargoCategoryCode::CLASS,
    ::oo_2_0::CargoCategoryCode::COL,
    ::oo_2_0::CargoCategoryCode::CON,
    ::oo_2_0::CargoCategoryCode::CTR,
    ::oo_2_0::CargoCategoryCode::DRY,
    ::oo_2_0::CargoCategoryCode::FOP,
    ::oo_2_0::CargoCategoryCode::FREEZE,
    ::oo_2_0::CargoCategoryCode::GEN,
    ::oo_2_0::CargoCategoryCode::HAZMAT,
    ::oo_2_0::CargoCategoryCode::HYEQPT,
    ::oo_2_0::CargoCategoryCode::LIQUID,
    ::oo_2_0::CargoCategoryCode::MAC,
    ::oo_2_0::CargoCategoryCode::MAIL,
    ::oo_2_0::CargoCategoryCode::MAT,
    ::oo_2_0::CargoCategoryCode::MCH,
    ::oo_2_0::CargoCategoryCode::MED,
    ::oo_2_0::CargoCategoryCode::MIM,
    ::oo_2_0::CargoCategoryCode::OTR,
    ::oo_2_0::CargoCategoryCode::PAX,
    ::oo_2_0::CargoCategoryCode::PERS,
    ::oo_2_0::CargoCategoryCode::POL,
    ::oo_2_0::CargoCategoryCode::POW,
    ::oo_2_0::CargoCategoryCode::SPECL,
    ::oo_2_0::CargoCategoryCode::SUBS,
    ::oo_2_0::CargoCategoryCode::SUG,
    ::oo_2_0::CargoCategoryCode::TEX,
    ::oo_2_0::CargoCategoryCode::TROOPS,
    ::oo_2_0::CargoCategoryCode::VEH,
    ::oo_2_0::CargoCategoryCode::VEHT,
    ::oo_2_0::CargoCategoryCode::VEHW,
    ::oo_2_0::CargoCategoryCode::WOUND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CargoCategoryCode >
  _xsd_CargoCategoryCode_type_factory_init (
    "CargoCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CasualtyGroupCode
  //

  CasualtyGroupCode::
  CasualtyGroupCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CasualtyGroupCode_convert ();
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CasualtyGroupCode_convert ();
  }

  CasualtyGroupCode::
  CasualtyGroupCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CasualtyGroupCode_convert ();
  }

  CasualtyGroupCode* CasualtyGroupCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CasualtyGroupCode (*this, f, c);
  }

  CasualtyGroupCode::value CasualtyGroupCode::
  _xsd_CasualtyGroupCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CasualtyGroupCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CasualtyGroupCode_indexes_,
                      _xsd_CasualtyGroupCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CasualtyGroupCode_indexes_ + 3 || _xsd_CasualtyGroupCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CasualtyGroupCode::
  _xsd_CasualtyGroupCode_literals_[3] =
  {
    "FRFOR",
    "LOCCIV",
    "OPFOR"
  };

  const CasualtyGroupCode::value CasualtyGroupCode::
  _xsd_CasualtyGroupCode_indexes_[3] =
  {
    ::oo_2_0::CasualtyGroupCode::FRFOR,
    ::oo_2_0::CasualtyGroupCode::LOCCIV,
    ::oo_2_0::CasualtyGroupCode::OPFOR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CasualtyGroupCode >
  _xsd_CasualtyGroupCode_type_factory_init (
    "CasualtyGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEquipmentTypeCategoryCode
  //

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEquipmentTypeCategoryCode_convert ();
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEquipmentTypeCategoryCode_convert ();
  }

  CbrnEquipmentTypeCategoryCode::
  CbrnEquipmentTypeCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEquipmentTypeCategoryCode_convert ();
  }

  CbrnEquipmentTypeCategoryCode* CbrnEquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEquipmentTypeCategoryCode (*this, f, c);
  }

  CbrnEquipmentTypeCategoryCode::value CbrnEquipmentTypeCategoryCode::
  _xsd_CbrnEquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEquipmentTypeCategoryCode_indexes_,
                      _xsd_CbrnEquipmentTypeCategoryCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_CbrnEquipmentTypeCategoryCode_indexes_ + 14 || _xsd_CbrnEquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEquipmentTypeCategoryCode::
  _xsd_CbrnEquipmentTypeCategoryCode_literals_[14] =
  {
    "ABICHM",
    "ABIDET",
    "ACHDET",
    "ARDDET",
    "BIOINT",
    "BIOSTO",
    "CBRNDC",
    "CBRNRC",
    "CHMMON",
    "MSSPTR",
    "NKN",
    "NOS",
    "RADKIT",
    "RDSPTR"
  };

  const CbrnEquipmentTypeCategoryCode::value CbrnEquipmentTypeCategoryCode::
  _xsd_CbrnEquipmentTypeCategoryCode_indexes_[14] =
  {
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::ABICHM,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::ABIDET,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::ACHDET,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::ARDDET,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::BIOINT,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::BIOSTO,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::CBRNDC,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::CBRNRC,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::CHMMON,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::MSSPTR,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::NKN,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::NOS,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::RADKIT,
    ::oo_2_0::CbrnEquipmentTypeCategoryCode::RDSPTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEquipmentTypeCategoryCode >
  _xsd_CbrnEquipmentTypeCategoryCode_type_factory_init (
    "CbrnEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEventAlarmResultIndicatorCode
  //

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEventAlarmResultIndicatorCode_convert ();
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEventAlarmResultIndicatorCode_convert ();
  }

  CbrnEventAlarmResultIndicatorCode::
  CbrnEventAlarmResultIndicatorCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEventAlarmResultIndicatorCode_convert ();
  }

  CbrnEventAlarmResultIndicatorCode* CbrnEventAlarmResultIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEventAlarmResultIndicatorCode (*this, f, c);
  }

  CbrnEventAlarmResultIndicatorCode::value CbrnEventAlarmResultIndicatorCode::
  _xsd_CbrnEventAlarmResultIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEventAlarmResultIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEventAlarmResultIndicatorCode_indexes_,
                      _xsd_CbrnEventAlarmResultIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_CbrnEventAlarmResultIndicatorCode_indexes_ + 2 || _xsd_CbrnEventAlarmResultIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEventAlarmResultIndicatorCode::
  _xsd_CbrnEventAlarmResultIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const CbrnEventAlarmResultIndicatorCode::value CbrnEventAlarmResultIndicatorCode::
  _xsd_CbrnEventAlarmResultIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::CbrnEventAlarmResultIndicatorCode::NO,
    ::oo_2_0::CbrnEventAlarmResultIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEventAlarmResultIndicatorCode >
  _xsd_CbrnEventAlarmResultIndicatorCode_type_factory_init (
    "CbrnEventAlarmResultIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEventCategoryCode
  //

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEventCategoryCode_convert ();
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEventCategoryCode_convert ();
  }

  CbrnEventCategoryCode::
  CbrnEventCategoryCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEventCategoryCode_convert ();
  }

  CbrnEventCategoryCode* CbrnEventCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEventCategoryCode (*this, f, c);
  }

  CbrnEventCategoryCode::value CbrnEventCategoryCode::
  _xsd_CbrnEventCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEventCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEventCategoryCode_indexes_,
                      _xsd_CbrnEventCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_CbrnEventCategoryCode_indexes_ + 4 || _xsd_CbrnEventCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEventCategoryCode::
  _xsd_CbrnEventCategoryCode_literals_[4] =
  {
    "CHMBIO",
    "NKN",
    "RADCTV",
    "UNROTA"
  };

  const CbrnEventCategoryCode::value CbrnEventCategoryCode::
  _xsd_CbrnEventCategoryCode_indexes_[4] =
  {
    ::oo_2_0::CbrnEventCategoryCode::CHMBIO,
    ::oo_2_0::CbrnEventCategoryCode::NKN,
    ::oo_2_0::CbrnEventCategoryCode::RADCTV,
    ::oo_2_0::CbrnEventCategoryCode::UNROTA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEventCategoryCode >
  _xsd_CbrnEventCategoryCode_type_factory_init (
    "CbrnEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEventConfirmationTestIndicatorCode
  //

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEventConfirmationTestIndicatorCode_convert ();
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEventConfirmationTestIndicatorCode_convert ();
  }

  CbrnEventConfirmationTestIndicatorCode::
  CbrnEventConfirmationTestIndicatorCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEventConfirmationTestIndicatorCode_convert ();
  }

  CbrnEventConfirmationTestIndicatorCode* CbrnEventConfirmationTestIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEventConfirmationTestIndicatorCode (*this, f, c);
  }

  CbrnEventConfirmationTestIndicatorCode::value CbrnEventConfirmationTestIndicatorCode::
  _xsd_CbrnEventConfirmationTestIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEventConfirmationTestIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEventConfirmationTestIndicatorCode_indexes_,
                      _xsd_CbrnEventConfirmationTestIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_CbrnEventConfirmationTestIndicatorCode_indexes_ + 2 || _xsd_CbrnEventConfirmationTestIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEventConfirmationTestIndicatorCode::
  _xsd_CbrnEventConfirmationTestIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const CbrnEventConfirmationTestIndicatorCode::value CbrnEventConfirmationTestIndicatorCode::
  _xsd_CbrnEventConfirmationTestIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::CbrnEventConfirmationTestIndicatorCode::NO,
    ::oo_2_0::CbrnEventConfirmationTestIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEventConfirmationTestIndicatorCode >
  _xsd_CbrnEventConfirmationTestIndicatorCode_type_factory_init (
    "CbrnEventConfirmationTestIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEventMaterielContainerTypeCode
  //

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEventMaterielContainerTypeCode_convert ();
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEventMaterielContainerTypeCode_convert ();
  }

  CbrnEventMaterielContainerTypeCode::
  CbrnEventMaterielContainerTypeCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEventMaterielContainerTypeCode_convert ();
  }

  CbrnEventMaterielContainerTypeCode* CbrnEventMaterielContainerTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEventMaterielContainerTypeCode (*this, f, c);
  }

  CbrnEventMaterielContainerTypeCode::value CbrnEventMaterielContainerTypeCode::
  _xsd_CbrnEventMaterielContainerTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEventMaterielContainerTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEventMaterielContainerTypeCode_indexes_,
                      _xsd_CbrnEventMaterielContainerTypeCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_CbrnEventMaterielContainerTypeCode_indexes_ + 18 || _xsd_CbrnEventMaterielContainerTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEventMaterielContainerTypeCode::
  _xsd_CbrnEventMaterielContainerTypeCode_literals_[18] =
  {
    "BML",
    "BOM",
    "BTL",
    "BUK",
    "CON",
    "DRM",
    "GEN",
    "MNE",
    "MSL",
    "NKN",
    "RCT",
    "RKT",
    "SHL",
    "SPR",
    "STK",
    "TNK",
    "TOR",
    "WST"
  };

  const CbrnEventMaterielContainerTypeCode::value CbrnEventMaterielContainerTypeCode::
  _xsd_CbrnEventMaterielContainerTypeCode_indexes_[18] =
  {
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::BML,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::BOM,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::BTL,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::BUK,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::CON,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::DRM,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::GEN,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::MNE,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::MSL,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::NKN,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::RCT,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::RKT,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::SHL,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::SPR,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::STK,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::TNK,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::TOR,
    ::oo_2_0::CbrnEventMaterielContainerTypeCode::WST
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEventMaterielContainerTypeCode >
  _xsd_CbrnEventMaterielContainerTypeCode_type_factory_init (
    "CbrnEventMaterielContainerTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CbrnEventSubcategoryCode
  //

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CbrnEventSubcategoryCode_convert ();
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CbrnEventSubcategoryCode_convert ();
  }

  CbrnEventSubcategoryCode::
  CbrnEventSubcategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CbrnEventSubcategoryCode_convert ();
  }

  CbrnEventSubcategoryCode* CbrnEventSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CbrnEventSubcategoryCode (*this, f, c);
  }

  CbrnEventSubcategoryCode::value CbrnEventSubcategoryCode::
  _xsd_CbrnEventSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CbrnEventSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CbrnEventSubcategoryCode_indexes_,
                      _xsd_CbrnEventSubcategoryCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_CbrnEventSubcategoryCode_indexes_ + 18 || _xsd_CbrnEventSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CbrnEventSubcategoryCode::
  _xsd_CbrnEventSubcategoryCode_literals_[18] =
  {
    "AIRSMP",
    "ALPRAD",
    "ARBRST",
    "BETRAD",
    "BRNFIR",
    "CBRNCL",
    "CNTFLW",
    "GAMRAD",
    "LQDSMP",
    "LRGSPL",
    "NEUTRN",
    "NKN",
    "NOS",
    "SBSRBU",
    "SIBCA",
    "SIRA",
    "SMLSPL",
    "SURBUR"
  };

  const CbrnEventSubcategoryCode::value CbrnEventSubcategoryCode::
  _xsd_CbrnEventSubcategoryCode_indexes_[18] =
  {
    ::oo_2_0::CbrnEventSubcategoryCode::AIRSMP,
    ::oo_2_0::CbrnEventSubcategoryCode::ALPRAD,
    ::oo_2_0::CbrnEventSubcategoryCode::ARBRST,
    ::oo_2_0::CbrnEventSubcategoryCode::BETRAD,
    ::oo_2_0::CbrnEventSubcategoryCode::BRNFIR,
    ::oo_2_0::CbrnEventSubcategoryCode::CBRNCL,
    ::oo_2_0::CbrnEventSubcategoryCode::CNTFLW,
    ::oo_2_0::CbrnEventSubcategoryCode::GAMRAD,
    ::oo_2_0::CbrnEventSubcategoryCode::LQDSMP,
    ::oo_2_0::CbrnEventSubcategoryCode::LRGSPL,
    ::oo_2_0::CbrnEventSubcategoryCode::NEUTRN,
    ::oo_2_0::CbrnEventSubcategoryCode::NKN,
    ::oo_2_0::CbrnEventSubcategoryCode::NOS,
    ::oo_2_0::CbrnEventSubcategoryCode::SBSRBU,
    ::oo_2_0::CbrnEventSubcategoryCode::SIBCA,
    ::oo_2_0::CbrnEventSubcategoryCode::SIRA,
    ::oo_2_0::CbrnEventSubcategoryCode::SMLSPL,
    ::oo_2_0::CbrnEventSubcategoryCode::SURBUR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CbrnEventSubcategoryCode >
  _xsd_CbrnEventSubcategoryCode_type_factory_init (
    "CbrnEventSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ChemicalBiologicalEventCategoryCode
  //

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ChemicalBiologicalEventCategoryCode_convert ();
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ChemicalBiologicalEventCategoryCode_convert ();
  }

  ChemicalBiologicalEventCategoryCode::
  ChemicalBiologicalEventCategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ChemicalBiologicalEventCategoryCode_convert ();
  }

  ChemicalBiologicalEventCategoryCode* ChemicalBiologicalEventCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ChemicalBiologicalEventCategoryCode (*this, f, c);
  }

  ChemicalBiologicalEventCategoryCode::value ChemicalBiologicalEventCategoryCode::
  _xsd_ChemicalBiologicalEventCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ChemicalBiologicalEventCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ChemicalBiologicalEventCategoryCode_indexes_,
                      _xsd_ChemicalBiologicalEventCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_ChemicalBiologicalEventCategoryCode_indexes_ + 10 || _xsd_ChemicalBiologicalEventCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ChemicalBiologicalEventCategoryCode::
  _xsd_ChemicalBiologicalEventCategoryCode_literals_[10] =
  {
    "BIOALM",
    "BIOATT",
    "BIOSMP",
    "BIROTA",
    "CBFAC",
    "CHMALM",
    "CHMATT",
    "CHMSMP",
    "CHROTA",
    "NKN"
  };

  const ChemicalBiologicalEventCategoryCode::value ChemicalBiologicalEventCategoryCode::
  _xsd_ChemicalBiologicalEventCategoryCode_indexes_[10] =
  {
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::BIOALM,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::BIOATT,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::BIOSMP,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::BIROTA,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::CBFAC,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::CHMALM,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::CHMATT,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::CHMSMP,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::CHROTA,
    ::oo_2_0::ChemicalBiologicalEventCategoryCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChemicalBiologicalEventCategoryCode >
  _xsd_ChemicalBiologicalEventCategoryCode_type_factory_init (
    "ChemicalBiologicalEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ChemicalBiologicalEventSpillSizeCode
  //

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ChemicalBiologicalEventSpillSizeCode_convert ();
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ChemicalBiologicalEventSpillSizeCode_convert ();
  }

  ChemicalBiologicalEventSpillSizeCode::
  ChemicalBiologicalEventSpillSizeCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ChemicalBiologicalEventSpillSizeCode_convert ();
  }

  ChemicalBiologicalEventSpillSizeCode* ChemicalBiologicalEventSpillSizeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ChemicalBiologicalEventSpillSizeCode (*this, f, c);
  }

  ChemicalBiologicalEventSpillSizeCode::value ChemicalBiologicalEventSpillSizeCode::
  _xsd_ChemicalBiologicalEventSpillSizeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ChemicalBiologicalEventSpillSizeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ChemicalBiologicalEventSpillSizeCode_indexes_,
                      _xsd_ChemicalBiologicalEventSpillSizeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ChemicalBiologicalEventSpillSizeCode_indexes_ + 4 || _xsd_ChemicalBiologicalEventSpillSizeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ChemicalBiologicalEventSpillSizeCode::
  _xsd_ChemicalBiologicalEventSpillSizeCode_literals_[4] =
  {
    "LRG",
    "NKN",
    "SML",
    "XLG"
  };

  const ChemicalBiologicalEventSpillSizeCode::value ChemicalBiologicalEventSpillSizeCode::
  _xsd_ChemicalBiologicalEventSpillSizeCode_indexes_[4] =
  {
    ::oo_2_0::ChemicalBiologicalEventSpillSizeCode::LRG,
    ::oo_2_0::ChemicalBiologicalEventSpillSizeCode::NKN,
    ::oo_2_0::ChemicalBiologicalEventSpillSizeCode::SML,
    ::oo_2_0::ChemicalBiologicalEventSpillSizeCode::XLG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChemicalBiologicalEventSpillSizeCode >
  _xsd_ChemicalBiologicalEventSpillSizeCode_type_factory_init (
    "ChemicalBiologicalEventSpillSizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ChemicalMaterielTypeCategoryCode
  //

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ChemicalMaterielTypeCategoryCode_convert ();
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ChemicalMaterielTypeCategoryCode_convert ();
  }

  ChemicalMaterielTypeCategoryCode::
  ChemicalMaterielTypeCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ChemicalMaterielTypeCategoryCode_convert ();
  }

  ChemicalMaterielTypeCategoryCode* ChemicalMaterielTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ChemicalMaterielTypeCategoryCode (*this, f, c);
  }

  ChemicalMaterielTypeCategoryCode::value ChemicalMaterielTypeCategoryCode::
  _xsd_ChemicalMaterielTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ChemicalMaterielTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ChemicalMaterielTypeCategoryCode_indexes_,
                      _xsd_ChemicalMaterielTypeCategoryCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_ChemicalMaterielTypeCategoryCode_indexes_ + 14 || _xsd_ChemicalMaterielTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ChemicalMaterielTypeCategoryCode::
  _xsd_ChemicalMaterielTypeCategoryCode_literals_[14] =
  {
    "BLISTR",
    "BLOOD",
    "CHKNG",
    "GAGENT",
    "INCPCT",
    "IRRTNT",
    "MUSTRD",
    "NERVE",
    "NKN",
    "NOS",
    "PNTRNG",
    "TOXMAT",
    "VAGENT",
    "VOMTNG"
  };

  const ChemicalMaterielTypeCategoryCode::value ChemicalMaterielTypeCategoryCode::
  _xsd_ChemicalMaterielTypeCategoryCode_indexes_[14] =
  {
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::BLISTR,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::BLOOD,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::CHKNG,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::GAGENT,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::INCPCT,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::IRRTNT,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::MUSTRD,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::NERVE,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::NKN,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::NOS,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::PNTRNG,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::TOXMAT,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::VAGENT,
    ::oo_2_0::ChemicalMaterielTypeCategoryCode::VOMTNG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChemicalMaterielTypeCategoryCode >
  _xsd_ChemicalMaterielTypeCategoryCode_type_factory_init (
    "ChemicalMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ChemicalMaterielTypeSubcategoryCode
  //

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ChemicalMaterielTypeSubcategoryCode_convert ();
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ChemicalMaterielTypeSubcategoryCode_convert ();
  }

  ChemicalMaterielTypeSubcategoryCode::
  ChemicalMaterielTypeSubcategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ChemicalMaterielTypeSubcategoryCode_convert ();
  }

  ChemicalMaterielTypeSubcategoryCode* ChemicalMaterielTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ChemicalMaterielTypeSubcategoryCode (*this, f, c);
  }

  ChemicalMaterielTypeSubcategoryCode::value ChemicalMaterielTypeSubcategoryCode::
  _xsd_ChemicalMaterielTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ChemicalMaterielTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ChemicalMaterielTypeSubcategoryCode_indexes_,
                      _xsd_ChemicalMaterielTypeSubcategoryCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_ChemicalMaterielTypeSubcategoryCode_indexes_ + 21 || _xsd_ChemicalMaterielTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ChemicalMaterielTypeSubcategoryCode::
  _xsd_ChemicalMaterielTypeSubcategoryCode_literals_[21] =
  {
    "ARSINE",
    "CHLRPC",
    "CYCLSR",
    "CYNGNC",
    "DIPSGN",
    "HDRNCY",
    "LWSITE",
    "MSTRDD",
    "MSTRDL",
    "NKN",
    "NOS",
    "NTRGNM",
    "PHOSGN",
    "PHSGNO",
    "QNCLDN",
    "SARIN",
    "SOMAN",
    "TABUN",
    "TRGAS",
    "TRMRCM",
    "VX"
  };

  const ChemicalMaterielTypeSubcategoryCode::value ChemicalMaterielTypeSubcategoryCode::
  _xsd_ChemicalMaterielTypeSubcategoryCode_indexes_[21] =
  {
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::ARSINE,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::CHLRPC,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::CYCLSR,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::CYNGNC,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::DIPSGN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::HDRNCY,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::LWSITE,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::MSTRDD,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::MSTRDL,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::NKN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::NOS,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::NTRGNM,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::PHOSGN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::PHSGNO,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::QNCLDN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::SARIN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::SOMAN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::TABUN,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::TRGAS,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::TRMRCM,
    ::oo_2_0::ChemicalMaterielTypeSubcategoryCode::VX
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChemicalMaterielTypeSubcategoryCode >
  _xsd_ChemicalMaterielTypeSubcategoryCode_type_factory_init (
    "ChemicalMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CivilianPostTypeCategoryCode
  //

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CivilianPostTypeCategoryCode_convert ();
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CivilianPostTypeCategoryCode_convert ();
  }

  CivilianPostTypeCategoryCode::
  CivilianPostTypeCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CivilianPostTypeCategoryCode_convert ();
  }

  CivilianPostTypeCategoryCode* CivilianPostTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CivilianPostTypeCategoryCode (*this, f, c);
  }

  CivilianPostTypeCategoryCode::value CivilianPostTypeCategoryCode::
  _xsd_CivilianPostTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CivilianPostTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CivilianPostTypeCategoryCode_indexes_,
                      _xsd_CivilianPostTypeCategoryCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_CivilianPostTypeCategoryCode_indexes_ + 13 || _xsd_CivilianPostTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CivilianPostTypeCategoryCode::
  _xsd_CivilianPostTypeCategoryCode_literals_[13] =
  {
    "AIDADM",
    "ALDRMN",
    "COREXC",
    "DEPTHD",
    "GOVMST",
    "GOVRNR",
    "HEADST",
    "MAYOR",
    "NOS",
    "POLCHF",
    "PUBLSR",
    "REGADM",
    "RELATH"
  };

  const CivilianPostTypeCategoryCode::value CivilianPostTypeCategoryCode::
  _xsd_CivilianPostTypeCategoryCode_indexes_[13] =
  {
    ::oo_2_0::CivilianPostTypeCategoryCode::AIDADM,
    ::oo_2_0::CivilianPostTypeCategoryCode::ALDRMN,
    ::oo_2_0::CivilianPostTypeCategoryCode::COREXC,
    ::oo_2_0::CivilianPostTypeCategoryCode::DEPTHD,
    ::oo_2_0::CivilianPostTypeCategoryCode::GOVMST,
    ::oo_2_0::CivilianPostTypeCategoryCode::GOVRNR,
    ::oo_2_0::CivilianPostTypeCategoryCode::HEADST,
    ::oo_2_0::CivilianPostTypeCategoryCode::MAYOR,
    ::oo_2_0::CivilianPostTypeCategoryCode::NOS,
    ::oo_2_0::CivilianPostTypeCategoryCode::POLCHF,
    ::oo_2_0::CivilianPostTypeCategoryCode::PUBLSR,
    ::oo_2_0::CivilianPostTypeCategoryCode::REGADM,
    ::oo_2_0::CivilianPostTypeCategoryCode::RELATH
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CivilianPostTypeCategoryCode >
  _xsd_CivilianPostTypeCategoryCode_type_factory_init (
    "CivilianPostTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CloudCoverAverageCoverageCode
  //

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CloudCoverAverageCoverageCode_convert ();
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CloudCoverAverageCoverageCode_convert ();
  }

  CloudCoverAverageCoverageCode::
  CloudCoverAverageCoverageCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CloudCoverAverageCoverageCode_convert ();
  }

  CloudCoverAverageCoverageCode* CloudCoverAverageCoverageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CloudCoverAverageCoverageCode (*this, f, c);
  }

  CloudCoverAverageCoverageCode::value CloudCoverAverageCoverageCode::
  _xsd_CloudCoverAverageCoverageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CloudCoverAverageCoverageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CloudCoverAverageCoverageCode_indexes_,
                      _xsd_CloudCoverAverageCoverageCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_CloudCoverAverageCoverageCode_indexes_ + 10 || _xsd_CloudCoverAverageCoverageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CloudCoverAverageCoverageCode::
  _xsd_CloudCoverAverageCoverageCode_literals_[10] =
  {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "78",
    "8"
  };

  const CloudCoverAverageCoverageCode::value CloudCoverAverageCoverageCode::
  _xsd_CloudCoverAverageCoverageCode_indexes_[10] =
  {
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_0,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_1,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_2,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_3,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_4,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_5,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_6,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_7,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_78,
    ::oo_2_0::CloudCoverAverageCoverageCode::cxx_8
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CloudCoverAverageCoverageCode >
  _xsd_CloudCoverAverageCoverageCode_type_factory_init (
    "CloudCoverAverageCoverageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CloudCoverCategoryCode
  //

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CloudCoverCategoryCode_convert ();
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CloudCoverCategoryCode_convert ();
  }

  CloudCoverCategoryCode::
  CloudCoverCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CloudCoverCategoryCode_convert ();
  }

  CloudCoverCategoryCode* CloudCoverCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CloudCoverCategoryCode (*this, f, c);
  }

  CloudCoverCategoryCode::value CloudCoverCategoryCode::
  _xsd_CloudCoverCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CloudCoverCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CloudCoverCategoryCode_indexes_,
                      _xsd_CloudCoverCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CloudCoverCategoryCode_indexes_ + 3 || _xsd_CloudCoverCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CloudCoverCategoryCode::
  _xsd_CloudCoverCategoryCode_literals_[3] =
  {
    "C",
    "RDACCL",
    "SMOKE"
  };

  const CloudCoverCategoryCode::value CloudCoverCategoryCode::
  _xsd_CloudCoverCategoryCode_indexes_[3] =
  {
    ::oo_2_0::CloudCoverCategoryCode::C,
    ::oo_2_0::CloudCoverCategoryCode::RDACCL,
    ::oo_2_0::CloudCoverCategoryCode::SMOKE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CloudCoverCategoryCode >
  _xsd_CloudCoverCategoryCode_type_factory_init (
    "CloudCoverCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeCategoryCode
  //

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeCategoryCode_convert ();
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeCategoryCode_convert ();
  }

  ConsumableMaterielTypeCategoryCode::
  ConsumableMaterielTypeCategoryCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeCategoryCode_convert ();
  }

  ConsumableMaterielTypeCategoryCode* ConsumableMaterielTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeCategoryCode (*this, f, c);
  }

  ConsumableMaterielTypeCategoryCode::value ConsumableMaterielTypeCategoryCode::
  _xsd_ConsumableMaterielTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeCategoryCode_indexes_,
                      _xsd_ConsumableMaterielTypeCategoryCode_indexes_ + 22,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeCategoryCode_indexes_ + 22 || _xsd_ConsumableMaterielTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeCategoryCode::
  _xsd_ConsumableMaterielTypeCategoryCode_literals_[22] =
  {
    "AMMO",
    "BIOMAT",
    "CHMMAT",
    "CON",
    "CROPS",
    "DRUG",
    "FLARE",
    "FOO",
    "FUEL",
    "FUSE",
    "GENSPL",
    "IMEXDE",
    "MAMNEX",
    "MAP",
    "MEDSPL",
    "MONEY",
    "NKN",
    "PEREQU",
    "POL",
    "RADMAT",
    "SPRPRT",
    "WAT"
  };

  const ConsumableMaterielTypeCategoryCode::value ConsumableMaterielTypeCategoryCode::
  _xsd_ConsumableMaterielTypeCategoryCode_indexes_[22] =
  {
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::AMMO,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::BIOMAT,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::CHMMAT,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::CON,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::CROPS,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::DRUG,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::FLARE,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::FOO,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::FUEL,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::FUSE,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::GENSPL,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::IMEXDE,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::MAMNEX,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::MAP,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::MEDSPL,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::MONEY,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::NKN,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::PEREQU,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::POL,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::RADMAT,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::SPRPRT,
    ::oo_2_0::ConsumableMaterielTypeCategoryCode::WAT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeCategoryCode >
  _xsd_ConsumableMaterielTypeCategoryCode_type_factory_init (
    "ConsumableMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeHazardCode
  //

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeHazardCode_convert ();
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeHazardCode_convert ();
  }

  ConsumableMaterielTypeHazardCode::
  ConsumableMaterielTypeHazardCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeHazardCode_convert ();
  }

  ConsumableMaterielTypeHazardCode* ConsumableMaterielTypeHazardCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeHazardCode (*this, f, c);
  }

  ConsumableMaterielTypeHazardCode::value ConsumableMaterielTypeHazardCode::
  _xsd_ConsumableMaterielTypeHazardCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeHazardCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeHazardCode_indexes_,
                      _xsd_ConsumableMaterielTypeHazardCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeHazardCode_indexes_ + 9 || _xsd_ConsumableMaterielTypeHazardCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeHazardCode::
  _xsd_ConsumableMaterielTypeHazardCode_literals_[9] =
  {
    "BIOLOG",
    "CHM",
    "COR",
    "EXPLOS",
    "INF",
    "NKN",
    "NOS",
    "RAD",
    "TOX"
  };

  const ConsumableMaterielTypeHazardCode::value ConsumableMaterielTypeHazardCode::
  _xsd_ConsumableMaterielTypeHazardCode_indexes_[9] =
  {
    ::oo_2_0::ConsumableMaterielTypeHazardCode::BIOLOG,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::CHM,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::COR,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::EXPLOS,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::INF,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::NKN,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::NOS,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::RAD,
    ::oo_2_0::ConsumableMaterielTypeHazardCode::TOX
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeHazardCode >
  _xsd_ConsumableMaterielTypeHazardCode_type_factory_init (
    "ConsumableMaterielTypeHazardCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeIssuingElementCode
  //

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingElementCode_convert ();
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingElementCode_convert ();
  }

  ConsumableMaterielTypeIssuingElementCode::
  ConsumableMaterielTypeIssuingElementCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingElementCode_convert ();
  }

  ConsumableMaterielTypeIssuingElementCode* ConsumableMaterielTypeIssuingElementCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeIssuingElementCode (*this, f, c);
  }

  ConsumableMaterielTypeIssuingElementCode::value ConsumableMaterielTypeIssuingElementCode::
  _xsd_ConsumableMaterielTypeIssuingElementCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeIssuingElementCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeIssuingElementCode_indexes_,
                      _xsd_ConsumableMaterielTypeIssuingElementCode_indexes_ + 16,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeIssuingElementCode_indexes_ + 16 || _xsd_ConsumableMaterielTypeIssuingElementCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeIssuingElementCode::
  _xsd_ConsumableMaterielTypeIssuingElementCode_literals_[16] =
  {
    "BALE",
    "BARREL",
    "BLK",
    "BOX",
    "CASE",
    "COIL",
    "CONTNR",
    "CRATE",
    "DAYSPL",
    "DRM",
    "JERCAN",
    "PAK",
    "PAL",
    "RATION",
    "ROUND",
    "UNT"
  };

  const ConsumableMaterielTypeIssuingElementCode::value ConsumableMaterielTypeIssuingElementCode::
  _xsd_ConsumableMaterielTypeIssuingElementCode_indexes_[16] =
  {
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::BALE,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::BARREL,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::BLK,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::BOX,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::CASE,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::COIL,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::CONTNR,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::CRATE,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::DAYSPL,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::DRM,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::JERCAN,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::PAK,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::PAL,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::RATION,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::ROUND,
    ::oo_2_0::ConsumableMaterielTypeIssuingElementCode::UNT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeIssuingElementCode >
  _xsd_ConsumableMaterielTypeIssuingElementCode_type_factory_init (
    "ConsumableMaterielTypeIssuingElementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeIssuingUnitOfMeasureCode
  //

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_convert ();
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_convert ();
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  ConsumableMaterielTypeIssuingUnitOfMeasureCode (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_convert ();
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode* ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeIssuingUnitOfMeasureCode (*this, f, c);
  }

  ConsumableMaterielTypeIssuingUnitOfMeasureCode::value ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_indexes_,
                      _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_indexes_ + 18 || _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_[18] =
  {
    "CM",
    "CNTMTR",
    "DOZEN",
    "EA",
    "GRAM",
    "GROSS",
    "KILTON",
    "KM",
    "LI",
    "LONGTN",
    "METRE",
    "MILGRM",
    "MILLTR",
    "MILMTR",
    "MTRCTN",
    "SHRTTN",
    "SQM",
    "KG"
  };

  const ConsumableMaterielTypeIssuingUnitOfMeasureCode::value ConsumableMaterielTypeIssuingUnitOfMeasureCode::
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_indexes_[18] =
  {
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::CM,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::CNTMTR,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::DOZEN,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::EA,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::GRAM,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::GROSS,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::KG,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::KILTON,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::KM,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::LI,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::LONGTN,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::METRE,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::MILGRM,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::MILLTR,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::MILMTR,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::MTRCTN,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::SHRTTN,
    ::oo_2_0::ConsumableMaterielTypeIssuingUnitOfMeasureCode::SQM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeIssuingUnitOfMeasureCode >
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_type_factory_init (
    "ConsumableMaterielTypeIssuingUnitOfMeasureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypePerishabilityIndicatorCode
  //

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_convert ();
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_convert ();
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::
  ConsumableMaterielTypePerishabilityIndicatorCode (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_convert ();
  }

  ConsumableMaterielTypePerishabilityIndicatorCode* ConsumableMaterielTypePerishabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypePerishabilityIndicatorCode (*this, f, c);
  }

  ConsumableMaterielTypePerishabilityIndicatorCode::value ConsumableMaterielTypePerishabilityIndicatorCode::
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_indexes_,
                      _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_indexes_ + 2 || _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypePerishabilityIndicatorCode::
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ConsumableMaterielTypePerishabilityIndicatorCode::value ConsumableMaterielTypePerishabilityIndicatorCode::
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ConsumableMaterielTypePerishabilityIndicatorCode::NO,
    ::oo_2_0::ConsumableMaterielTypePerishabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypePerishabilityIndicatorCode >
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_type_factory_init (
    "ConsumableMaterielTypePerishabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeSubcategoryCode
  //

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeSubcategoryCode_convert ();
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeSubcategoryCode_convert ();
  }

  ConsumableMaterielTypeSubcategoryCode::
  ConsumableMaterielTypeSubcategoryCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeSubcategoryCode_convert ();
  }

  ConsumableMaterielTypeSubcategoryCode* ConsumableMaterielTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeSubcategoryCode (*this, f, c);
  }

  ConsumableMaterielTypeSubcategoryCode::value ConsumableMaterielTypeSubcategoryCode::
  _xsd_ConsumableMaterielTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeSubcategoryCode_indexes_,
                      _xsd_ConsumableMaterielTypeSubcategoryCode_indexes_ + 74,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeSubcategoryCode_indexes_ + 74 || _xsd_ConsumableMaterielTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeSubcategoryCode::
  _xsd_ConsumableMaterielTypeSubcategoryCode_literals_[74] =
  {
    "2CB",
    "AMPHTM",
    "AVNFU",
    "BALNHH",
    "BATDWC",
    "BBYTRP",
    "BLOOD",
    "BNDDR",
    "BOOK",
    "CLTHNG",
    "COAL",
    "COCANE",
    "CRACK",
    "DIESEL",
    "DOB",
    "ECSMDA",
    "ECSMDE",
    "ECSMDM",
    "GHB",
    "HANDBL",
    "HASHSH",
    "HASOIL",
    "HEROIN",
    "JP4F",
    "JP5F",
    "JP7F",
    "JP8F",
    "KEROS",
    "KHAT",
    "KTMINE",
    "LEAFLT",
    "LPG",
    "LSD",
    "LTRBMB",
    "LUBRIC",
    "MAGZNE",
    "MARJUN",
    "MATING",
    "MEDICN",
    "MORFIN",
    "MSCLNE",
    "MTHAMP",
    "MURAL",
    "NASF18",
    "NASF34",
    "NASF35",
    "NASF40",
    "NASF44",
    "NATGAS",
    "NBCKIT",
    "NKN",
    "NWSPPR",
    "OIL",
    "OPIUM",
    "PAINT",
    "PAPER",
    "PCP",
    "PEAT",
    "PETROL",
    "PMPHLT",
    "PNTBRS",
    "POSTER",
    "PSLCYB",
    "RATCO",
    "RATFR",
    "RATTI",
    "REVET",
    "SPRAY",
    "UNIFRM",
    "WIRE",
    "WOOD",
    "WTRHUM",
    "WTRMED",
    "WTROTH"
  };

  const ConsumableMaterielTypeSubcategoryCode::value ConsumableMaterielTypeSubcategoryCode::
  _xsd_ConsumableMaterielTypeSubcategoryCode_indexes_[74] =
  {
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::cxx_2CB,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::AMPHTM,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::AVNFU,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BALNHH,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BATDWC,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BBYTRP,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BLOOD,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BNDDR,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::BOOK,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::CLTHNG,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::COAL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::COCANE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::CRACK,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::DIESEL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::DOB,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::ECSMDA,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::ECSMDE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::ECSMDM,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::GHB,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::HANDBL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::HASHSH,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::HASOIL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::HEROIN,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::JP4F,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::JP5F,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::JP7F,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::JP8F,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::KEROS,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::KHAT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::KTMINE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::LEAFLT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::LPG,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::LSD,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::LTRBMB,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::LUBRIC,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MAGZNE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MARJUN,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MATING,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MEDICN,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MORFIN,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MSCLNE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MTHAMP,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::MURAL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NASF18,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NASF34,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NASF35,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NASF40,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NASF44,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NATGAS,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NBCKIT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NKN,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::NWSPPR,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::OIL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::OPIUM,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PAINT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PAPER,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PCP,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PEAT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PETROL,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PMPHLT,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PNTBRS,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::POSTER,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::PSLCYB,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::RATCO,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::RATFR,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::RATTI,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::REVET,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::SPRAY,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::UNIFRM,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::WIRE,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::WOOD,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::WTRHUM,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::WTRMED,
    ::oo_2_0::ConsumableMaterielTypeSubcategoryCode::WTROTH
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeSubcategoryCode >
  _xsd_ConsumableMaterielTypeSubcategoryCode_type_factory_init (
    "ConsumableMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ConsumableMaterielTypeUnitedNationsNumberCode
  //

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_convert ();
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_convert ();
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::
  ConsumableMaterielTypeUnitedNationsNumberCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_convert ();
  }

  ConsumableMaterielTypeUnitedNationsNumberCode* ConsumableMaterielTypeUnitedNationsNumberCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ConsumableMaterielTypeUnitedNationsNumberCode (*this, f, c);
  }

  ConsumableMaterielTypeUnitedNationsNumberCode::value ConsumableMaterielTypeUnitedNationsNumberCode::
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_indexes_,
                      _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_indexes_ + 122,
                      *this,
                      c));

    if (i == _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_indexes_ + 122 || _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ConsumableMaterielTypeUnitedNationsNumberCode::
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_[122] =
  {
    "1005",
    "1008",
    "1016",
    "1017",
    "1040",
    "1045",
    "1048",
    "1050",
    "1051",
    "1053",
    "1062",
    "1064",
    "1067",
    "1076",
    "1079",
    "1080",
    "1092",
    "1093",
    "1098",
    "1114",
    "1131",
    "1134",
    "1135",
    "1143",
    "1158",
    "1184",
    "1198",
    "1238",
    "1244",
    "1245",
    "1268",
    "1282",
    "1294",
    "1338",
    "1381",
    "1541",
    "1556",
    "1557",
    "1560",
    "1569",
    "1580",
    "1589",
    "1595",
    "1605",
    "1693",
    "1695",
    "1697",
    "1698",
    "1699",
    "1722",
    "1741",
    "1754",
    "1790",
    "1809",
    "1810",
    "1830",
    "1834",
    "1836",
    "1838",
    "1859",
    "1888",
    "1889",
    "1897",
    "1911",
    "1972",
    "1978",
    "1994",
    "2029",
    "2032",
    "2055",
    "2188",
    "2194",
    "2195",
    "2196",
    "2198",
    "2199",
    "2202",
    "2204",
    "2323",
    "2329",
    "2334",
    "2382",
    "2442",
    "2480",
    "2485",
    "2521",
    "2534",
    "2668",
    "2676",
    "2692",
    "2783",
    "2810",
    "2811",
    "2814",
    "2831",
    "2900",
    "2908",
    "2909",
    "2910",
    "2911",
    "2912",
    "2913",
    "2915",
    "2916",
    "2917",
    "2919",
    "3172",
    "3246",
    "3321",
    "3322",
    "3323",
    "3324",
    "3325",
    "3326",
    "3327",
    "3328",
    "3329",
    "3330",
    "3331",
    "3332",
    "3333",
    "NOS"
  };

  const ConsumableMaterielTypeUnitedNationsNumberCode::value ConsumableMaterielTypeUnitedNationsNumberCode::
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_indexes_[122] =
  {
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1005,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1008,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1016,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1017,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1040,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1045,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1048,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1050,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1051,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1053,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1062,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1064,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1067,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1076,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1079,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1080,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1092,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1093,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1098,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1114,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1131,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1134,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1135,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1143,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1158,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1184,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1198,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1238,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1244,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1245,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1268,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1282,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1294,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1338,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1381,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1541,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1556,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1557,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1560,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1569,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1580,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1589,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1595,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1605,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1693,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1695,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1697,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1698,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1699,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1722,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1741,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1754,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1790,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1809,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1810,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1830,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1834,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1836,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1838,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1859,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1888,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1889,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1897,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1911,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1972,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1978,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_1994,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2029,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2032,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2055,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2188,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2194,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2195,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2196,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2198,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2199,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2202,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2204,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2323,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2329,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2334,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2382,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2442,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2480,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2485,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2521,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2534,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2668,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2676,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2692,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2783,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2810,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2811,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2814,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2831,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2900,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2908,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2909,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2910,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2911,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2912,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2913,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2915,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2916,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2917,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_2919,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3172,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3246,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3321,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3322,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3323,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3324,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3325,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3326,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3327,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3328,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3329,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3330,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3331,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3332,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::cxx_3333,
    ::oo_2_0::ConsumableMaterielTypeUnitedNationsNumberCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumableMaterielTypeUnitedNationsNumberCode >
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_type_factory_init (
    "ConsumableMaterielTypeUnitedNationsNumberCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextAssessmentLimitingFactorsCode
  //

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextAssessmentLimitingFactorsCode_convert ();
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextAssessmentLimitingFactorsCode_convert ();
  }

  ContextAssessmentLimitingFactorsCode::
  ContextAssessmentLimitingFactorsCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextAssessmentLimitingFactorsCode_convert ();
  }

  ContextAssessmentLimitingFactorsCode* ContextAssessmentLimitingFactorsCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextAssessmentLimitingFactorsCode (*this, f, c);
  }

  ContextAssessmentLimitingFactorsCode::value ContextAssessmentLimitingFactorsCode::
  _xsd_ContextAssessmentLimitingFactorsCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextAssessmentLimitingFactorsCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextAssessmentLimitingFactorsCode_indexes_,
                      _xsd_ContextAssessmentLimitingFactorsCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_ContextAssessmentLimitingFactorsCode_indexes_ + 13 || _xsd_ContextAssessmentLimitingFactorsCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextAssessmentLimitingFactorsCode::
  _xsd_ContextAssessmentLimitingFactorsCode_literals_[13] =
  {
    "CROSS",
    "EQPLMT",
    "EXPSPL",
    "FACLMT",
    "MEDLMT",
    "MNTCAP",
    "MUNCAP",
    "NOCHNG",
    "NOLMTN",
    "NOS",
    "POL",
    "PRSLMT",
    "RRRCAP"
  };

  const ContextAssessmentLimitingFactorsCode::value ContextAssessmentLimitingFactorsCode::
  _xsd_ContextAssessmentLimitingFactorsCode_indexes_[13] =
  {
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::CROSS,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::EQPLMT,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::EXPSPL,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::FACLMT,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::MEDLMT,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::MNTCAP,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::MUNCAP,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::NOCHNG,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::NOLMTN,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::NOS,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::POL,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::PRSLMT,
    ::oo_2_0::ContextAssessmentLimitingFactorsCode::RRRCAP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextAssessmentLimitingFactorsCode >
  _xsd_ContextAssessmentLimitingFactorsCode_type_factory_init (
    "ContextAssessmentLimitingFactorsCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextAssociationCategoryCode
  //

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextAssociationCategoryCode_convert ();
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextAssociationCategoryCode_convert ();
  }

  ContextAssociationCategoryCode::
  ContextAssociationCategoryCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextAssociationCategoryCode_convert ();
  }

  ContextAssociationCategoryCode* ContextAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextAssociationCategoryCode (*this, f, c);
  }

  ContextAssociationCategoryCode::value ContextAssociationCategoryCode::
  _xsd_ContextAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextAssociationCategoryCode_indexes_,
                      _xsd_ContextAssociationCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ContextAssociationCategoryCode_indexes_ + 4 || _xsd_ContextAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextAssociationCategoryCode::
  _xsd_ContextAssociationCategoryCode_literals_[4] =
  {
    "ISNEXT",
    "ISPART",
    "SPPLMN",
    "SPRCDS"
  };

  const ContextAssociationCategoryCode::value ContextAssociationCategoryCode::
  _xsd_ContextAssociationCategoryCode_indexes_[4] =
  {
    ::oo_2_0::ContextAssociationCategoryCode::ISNEXT,
    ::oo_2_0::ContextAssociationCategoryCode::ISPART,
    ::oo_2_0::ContextAssociationCategoryCode::SPPLMN,
    ::oo_2_0::ContextAssociationCategoryCode::SPRCDS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextAssociationCategoryCode >
  _xsd_ContextAssociationCategoryCode_type_factory_init (
    "ContextAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextCategoryCode
  //

  ContextCategoryCode::
  ContextCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextCategoryCode_convert ();
  }

  ContextCategoryCode::
  ContextCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextCategoryCode_convert ();
  }

  ContextCategoryCode::
  ContextCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextCategoryCode_convert ();
  }

  ContextCategoryCode* ContextCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextCategoryCode (*this, f, c);
  }

  ContextCategoryCode::value ContextCategoryCode::
  _xsd_ContextCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextCategoryCode_indexes_,
                      _xsd_ContextCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ContextCategoryCode_indexes_ + 8 || _xsd_ContextCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextCategoryCode::
  _xsd_ContextCategoryCode_literals_[8] =
  {
    "ASSESS",
    "CORREC",
    "CORREL",
    "NEGATE",
    "NOS",
    "OIG",
    "OVERLY",
    "PREDCT"
  };

  const ContextCategoryCode::value ContextCategoryCode::
  _xsd_ContextCategoryCode_indexes_[8] =
  {
    ::oo_2_0::ContextCategoryCode::ASSESS,
    ::oo_2_0::ContextCategoryCode::CORREC,
    ::oo_2_0::ContextCategoryCode::CORREL,
    ::oo_2_0::ContextCategoryCode::NEGATE,
    ::oo_2_0::ContextCategoryCode::NOS,
    ::oo_2_0::ContextCategoryCode::OIG,
    ::oo_2_0::ContextCategoryCode::OVERLY,
    ::oo_2_0::ContextCategoryCode::PREDCT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextCategoryCode >
  _xsd_ContextCategoryCode_type_factory_init (
    "ContextCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextElementStatusCategoryCode
  //

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextElementStatusCategoryCode_convert ();
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextElementStatusCategoryCode_convert ();
  }

  ContextElementStatusCategoryCode::
  ContextElementStatusCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextElementStatusCategoryCode_convert ();
  }

  ContextElementStatusCategoryCode* ContextElementStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextElementStatusCategoryCode (*this, f, c);
  }

  ContextElementStatusCategoryCode::value ContextElementStatusCategoryCode::
  _xsd_ContextElementStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextElementStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextElementStatusCategoryCode_indexes_,
                      _xsd_ContextElementStatusCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ContextElementStatusCategoryCode_indexes_ + 2 || _xsd_ContextElementStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextElementStatusCategoryCode::
  _xsd_ContextElementStatusCategoryCode_literals_[2] =
  {
    "ADDITN",
    "REMOVL"
  };

  const ContextElementStatusCategoryCode::value ContextElementStatusCategoryCode::
  _xsd_ContextElementStatusCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ContextElementStatusCategoryCode::ADDITN,
    ::oo_2_0::ContextElementStatusCategoryCode::REMOVL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextElementStatusCategoryCode >
  _xsd_ContextElementStatusCategoryCode_type_factory_init (
    "ContextElementStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextObjectItemAssociationCategoryCode
  //

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextObjectItemAssociationCategoryCode_convert ();
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextObjectItemAssociationCategoryCode_convert ();
  }

  ContextObjectItemAssociationCategoryCode::
  ContextObjectItemAssociationCategoryCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextObjectItemAssociationCategoryCode_convert ();
  }

  ContextObjectItemAssociationCategoryCode* ContextObjectItemAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextObjectItemAssociationCategoryCode (*this, f, c);
  }

  ContextObjectItemAssociationCategoryCode::value ContextObjectItemAssociationCategoryCode::
  _xsd_ContextObjectItemAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextObjectItemAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextObjectItemAssociationCategoryCode_indexes_,
                      _xsd_ContextObjectItemAssociationCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ContextObjectItemAssociationCategoryCode_indexes_ + 2 || _xsd_ContextObjectItemAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextObjectItemAssociationCategoryCode::
  _xsd_ContextObjectItemAssociationCategoryCode_literals_[2] =
  {
    "INCLDE",
    "ISRELV"
  };

  const ContextObjectItemAssociationCategoryCode::value ContextObjectItemAssociationCategoryCode::
  _xsd_ContextObjectItemAssociationCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ContextObjectItemAssociationCategoryCode::INCLDE,
    ::oo_2_0::ContextObjectItemAssociationCategoryCode::ISRELV
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextObjectItemAssociationCategoryCode >
  _xsd_ContextObjectItemAssociationCategoryCode_type_factory_init (
    "ContextObjectItemAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ContextReportingDataAssociationCategoryCode
  //

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ContextReportingDataAssociationCategoryCode_convert ();
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ContextReportingDataAssociationCategoryCode_convert ();
  }

  ContextReportingDataAssociationCategoryCode::
  ContextReportingDataAssociationCategoryCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ContextReportingDataAssociationCategoryCode_convert ();
  }

  ContextReportingDataAssociationCategoryCode* ContextReportingDataAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContextReportingDataAssociationCategoryCode (*this, f, c);
  }

  ContextReportingDataAssociationCategoryCode::value ContextReportingDataAssociationCategoryCode::
  _xsd_ContextReportingDataAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ContextReportingDataAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ContextReportingDataAssociationCategoryCode_indexes_,
                      _xsd_ContextReportingDataAssociationCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ContextReportingDataAssociationCategoryCode_indexes_ + 6 || _xsd_ContextReportingDataAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ContextReportingDataAssociationCategoryCode::
  _xsd_ContextReportingDataAssociationCategoryCode_literals_[6] =
  {
    "CONF",
    "CORR",
    "IMPL",
    "ISDFT",
    "NEGA",
    "SUPR"
  };

  const ContextReportingDataAssociationCategoryCode::value ContextReportingDataAssociationCategoryCode::
  _xsd_ContextReportingDataAssociationCategoryCode_indexes_[6] =
  {
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::CONF,
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::CORR,
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::IMPL,
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::ISDFT,
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::NEGA,
    ::oo_2_0::ContextReportingDataAssociationCategoryCode::SUPR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextReportingDataAssociationCategoryCode >
  _xsd_ContextReportingDataAssociationCategoryCode_type_factory_init (
    "ContextReportingDataAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ControlFeatureCategoryCode
  //

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ControlFeatureCategoryCode_convert ();
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ControlFeatureCategoryCode_convert ();
  }

  ControlFeatureCategoryCode::
  ControlFeatureCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ControlFeatureCategoryCode_convert ();
  }

  ControlFeatureCategoryCode* ControlFeatureCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ControlFeatureCategoryCode (*this, f, c);
  }

  ControlFeatureCategoryCode::value ControlFeatureCategoryCode::
  _xsd_ControlFeatureCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlFeatureCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ControlFeatureCategoryCode_indexes_,
                      _xsd_ControlFeatureCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ControlFeatureCategoryCode_indexes_ + 5 || _xsd_ControlFeatureCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ControlFeatureCategoryCode::
  _xsd_ControlFeatureCategoryCode_literals_[5] =
  {
    "ACM",
    "APPRDR",
    "NOS",
    "ROUTE",
    "RTESEG"
  };

  const ControlFeatureCategoryCode::value ControlFeatureCategoryCode::
  _xsd_ControlFeatureCategoryCode_indexes_[5] =
  {
    ::oo_2_0::ControlFeatureCategoryCode::ACM,
    ::oo_2_0::ControlFeatureCategoryCode::APPRDR,
    ::oo_2_0::ControlFeatureCategoryCode::NOS,
    ::oo_2_0::ControlFeatureCategoryCode::ROUTE,
    ::oo_2_0::ControlFeatureCategoryCode::RTESEG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ControlFeatureCategoryCode >
  _xsd_ControlFeatureCategoryCode_type_factory_init (
    "ControlFeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ControlFeatureStatusCbrnThreatLevelCode
  //

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ControlFeatureStatusCbrnThreatLevelCode_convert ();
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ControlFeatureStatusCbrnThreatLevelCode_convert ();
  }

  ControlFeatureStatusCbrnThreatLevelCode::
  ControlFeatureStatusCbrnThreatLevelCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ControlFeatureStatusCbrnThreatLevelCode_convert ();
  }

  ControlFeatureStatusCbrnThreatLevelCode* ControlFeatureStatusCbrnThreatLevelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ControlFeatureStatusCbrnThreatLevelCode (*this, f, c);
  }

  ControlFeatureStatusCbrnThreatLevelCode::value ControlFeatureStatusCbrnThreatLevelCode::
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ControlFeatureStatusCbrnThreatLevelCode_indexes_,
                      _xsd_ControlFeatureStatusCbrnThreatLevelCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ControlFeatureStatusCbrnThreatLevelCode_indexes_ + 3 || _xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ControlFeatureStatusCbrnThreatLevelCode::
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_[3] =
  {
    "HIGH",
    "LOW",
    "MEDIUM"
  };

  const ControlFeatureStatusCbrnThreatLevelCode::value ControlFeatureStatusCbrnThreatLevelCode::
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_indexes_[3] =
  {
    ::oo_2_0::ControlFeatureStatusCbrnThreatLevelCode::HIGH,
    ::oo_2_0::ControlFeatureStatusCbrnThreatLevelCode::LOW,
    ::oo_2_0::ControlFeatureStatusCbrnThreatLevelCode::MEDIUM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ControlFeatureStatusCbrnThreatLevelCode >
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_type_factory_init (
    "ControlFeatureStatusCbrnThreatLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ControlFeatureStatusInvestigationStatusCode
  //

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ControlFeatureStatusInvestigationStatusCode_convert ();
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ControlFeatureStatusInvestigationStatusCode_convert ();
  }

  ControlFeatureStatusInvestigationStatusCode::
  ControlFeatureStatusInvestigationStatusCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ControlFeatureStatusInvestigationStatusCode_convert ();
  }

  ControlFeatureStatusInvestigationStatusCode* ControlFeatureStatusInvestigationStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ControlFeatureStatusInvestigationStatusCode (*this, f, c);
  }

  ControlFeatureStatusInvestigationStatusCode::value ControlFeatureStatusInvestigationStatusCode::
  _xsd_ControlFeatureStatusInvestigationStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlFeatureStatusInvestigationStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ControlFeatureStatusInvestigationStatusCode_indexes_,
                      _xsd_ControlFeatureStatusInvestigationStatusCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ControlFeatureStatusInvestigationStatusCode_indexes_ + 6 || _xsd_ControlFeatureStatusInvestigationStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ControlFeatureStatusInvestigationStatusCode::
  _xsd_ControlFeatureStatusInvestigationStatusCode_literals_[6] =
  {
    "DENIED",
    "INVNEG",
    "INVPOS",
    "NKN",
    "NONE",
    "UNDINV"
  };

  const ControlFeatureStatusInvestigationStatusCode::value ControlFeatureStatusInvestigationStatusCode::
  _xsd_ControlFeatureStatusInvestigationStatusCode_indexes_[6] =
  {
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::DENIED,
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::INVNEG,
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::INVPOS,
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::NKN,
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::NONE,
    ::oo_2_0::ControlFeatureStatusInvestigationStatusCode::UNDINV
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ControlFeatureStatusInvestigationStatusCode >
  _xsd_ControlFeatureStatusInvestigationStatusCode_type_factory_init (
    "ControlFeatureStatusInvestigationStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ControlFeatureStatusSecurityStatusCode
  //

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ControlFeatureStatusSecurityStatusCode_convert ();
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ControlFeatureStatusSecurityStatusCode_convert ();
  }

  ControlFeatureStatusSecurityStatusCode::
  ControlFeatureStatusSecurityStatusCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ControlFeatureStatusSecurityStatusCode_convert ();
  }

  ControlFeatureStatusSecurityStatusCode* ControlFeatureStatusSecurityStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ControlFeatureStatusSecurityStatusCode (*this, f, c);
  }

  ControlFeatureStatusSecurityStatusCode::value ControlFeatureStatusSecurityStatusCode::
  _xsd_ControlFeatureStatusSecurityStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlFeatureStatusSecurityStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ControlFeatureStatusSecurityStatusCode_indexes_,
                      _xsd_ControlFeatureStatusSecurityStatusCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ControlFeatureStatusSecurityStatusCode_indexes_ + 4 || _xsd_ControlFeatureStatusSecurityStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ControlFeatureStatusSecurityStatusCode::
  _xsd_ControlFeatureStatusSecurityStatusCode_literals_[4] =
  {
    "GUARDD",
    "NKN",
    "NONE",
    "SECURD"
  };

  const ControlFeatureStatusSecurityStatusCode::value ControlFeatureStatusSecurityStatusCode::
  _xsd_ControlFeatureStatusSecurityStatusCode_indexes_[4] =
  {
    ::oo_2_0::ControlFeatureStatusSecurityStatusCode::GUARDD,
    ::oo_2_0::ControlFeatureStatusSecurityStatusCode::NKN,
    ::oo_2_0::ControlFeatureStatusSecurityStatusCode::NONE,
    ::oo_2_0::ControlFeatureStatusSecurityStatusCode::SECURD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ControlFeatureStatusSecurityStatusCode >
  _xsd_ControlFeatureStatusSecurityStatusCode_type_factory_init (
    "ControlFeatureStatusSecurityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ControlFeatureTypeCategoryCode
  //

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ControlFeatureTypeCategoryCode_convert ();
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ControlFeatureTypeCategoryCode_convert ();
  }

  ControlFeatureTypeCategoryCode::
  ControlFeatureTypeCategoryCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ControlFeatureTypeCategoryCode_convert ();
  }

  ControlFeatureTypeCategoryCode* ControlFeatureTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ControlFeatureTypeCategoryCode (*this, f, c);
  }

  ControlFeatureTypeCategoryCode::value ControlFeatureTypeCategoryCode::
  _xsd_ControlFeatureTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlFeatureTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ControlFeatureTypeCategoryCode_indexes_,
                      _xsd_ControlFeatureTypeCategoryCode_indexes_ + 287,
                      *this,
                      c));

    if (i == _xsd_ControlFeatureTypeCategoryCode_indexes_ + 287 || _xsd_ControlFeatureTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ControlFeatureTypeCategoryCode::
  _xsd_ControlFeatureTypeCategoryCode_literals_[287] =
  {
    "AAXIS",
    "ACCPOS",
    "ADACAR",
    "ADAREA",
    "ADIDZN",
    "ADOPAR",
    "AIMPT",
    "AIRCAR",
    "AIRCOA",
    "AIRCSA",
    "AIRCTP",
    "AIREWA",
    "AIRH",
    "AIRRFL",
    "ALRTAR",
    "ALTRAR",
    "AMBEXP",
    "AMPDZN",
    "AMPHOA",
    "AMPOZN",
    "AOC",
    "AOI",
    "AOP",
    "AOR",
    "APPRDR",
    "ARA",
    "ARFLDZ",
    "ASLTPO",
    "ASYGEN",
    "ASYSPL",
    "ATCAIR",
    "ATTFIR",
    "ATTPOS",
    "AXIS",
    "BASDZN",
    "BATPOS",
    "BCHH",
    "BDYOR",
    "BDYPOA",
    "BDYPT",
    "BERLIN",
    "BIOATC",
    "BIOCNT",
    "BIOCTM",
    "BIODPC",
    "BLOPOS",
    "BOMBAR",
    "BOUNDR",
    "BRDGH",
    "BRKUPP",
    "BUFRZN",
    "BULEYE",
    "CBRNHA",
    "CBRNRA",
    "CBRNRS",
    "CFL",
    "CHMATC",
    "CHMCNT",
    "CHMCTM",
    "CHMDPC",
    "CKPGEN",
    "CLDRAD",
    "CLSASP",
    "CLSBSP",
    "CLSCSP",
    "CLSDSP",
    "CLSESP",
    "CLSFSP",
    "CLSGSP",
    "CLSHAR",
    "CNTPTA",
    "CNTPTL",
    "COAPAR",
    "COMCKP",
    "COMMZ",
    "CONCA",
    "CONTAR",
    "CONTZN",
    "COOAAR",
    "COORLV",
    "CRCNZN",
    "CRDALT",
    "CRDPNT",
    "CRSBAR",
    "CRSVZN",
    "CTLPNT",
    "CZ",
    "DA",
    "DECPNT",
    "DEFPOS",
    "DEFZ",
    "DMPI",
    "DNGRAR",
    "DNPKPT",
    "DPBSLN",
    "DROPPT",
    "DZ",
    "EA",
    "ELCCAR",
    "ENCRCL",
    "ENDARP",
    "ENDMPT",
    "ENDRPT",
    "ENGREG",
    "ENTL",
    "ENTPT",
    "ENTRGT",
    "EXITGT",
    "EXITPT",
    "EXTZON",
    "FALRAR",
    "FARRFP",
    "FCZ",
    "FEBA",
    "FEZ",
    "FINAPF",
    "FIRING",
    "FIRUMB",
    "FLINRG",
    "FLT",
    "FNCOLN",
    "FNPRFR",
    "FOACAR",
    "FOOPLN",
    "FREFIR",
    "FRUPPL",
    "FSCL",
    "FWDZON",
    "GENARE",
    "HAMZON",
    "HDAZON",
    "HIDE",
    "HNDVGT",
    "HOLDLN",
    "IDSFPT",
    "IFFOFF",
    "IFFONL",
    "IMPTPT",
    "INCDPT",
    "INFLIN",
    "INIAPF",
    "INITPT",
    "INTOBJ",
    "ISR",
    "JEZ",
    "JNTOAR",
    "KEYTER",
    "KILBOX",
    "KILLA",
    "LA",
    "LAMZON",
    "LANDPT",
    "LFGEZN",
    "LGHTLN",
    "LIMADV",
    "LIMARE",
    "LNKPPT",
    "LNMEZN",
    "LOC",
    "LODLND",
    "LODSEA",
    "LOGNOD",
    "LRADLN",
    "LZ",
    "MAXIS",
    "MDASEA",
    "MEZ",
    "MFGEZN",
    "MLOPAR",
    "MNBMAX",
    "MNBTAR",
    "MNSFD1",
    "MNSFD2",
    "MNTHAX",
    "MRMEZN",
    "MRSHGT",
    "MSLARC",
    "MSLDET",
    "NAGTPT",
    "NAMAIN",
    "NFL",
    "NFRARE",
    "NGA",
    "NGACIV",
    "NOFLZN",
    "NOS",
    "NUCTGT",
    "OBFARE",
    "OBJA",
    "OBRARE",
    "OBSBLT",
    "OBSGAP",
    "OBSLAN",
    "OBSLIN",
    "OBSZON",
    "OPERZN",
    "ORBTPT",
    "PHLINE",
    "PIRAZN",
    "PNTRBX",
    "POPUPT",
    "PRHBAR",
    "PRITPT",
    "PSSGPT",
    "PTDPRT",
    "PTINT",
    "PZ",
    "QZONE",
    "RADARE",
    "RADATC",
    "RADCLD",
    "RADDOS",
    "RADDPC",
    "RADDSR",
    "RALYPT",
    "RBFA",
    "RCNSAR",
    "RCZ",
    "RDCOSP",
    "REFCPT",
    "REFLPT",
    "REFRPT",
    "RELL",
    "RELPT",
    "REPLIN",
    "REPRPT",
    "RFL",
    "RIPL",
    "RNDZPT",
    "ROMIAR",
    "ROTAAR",
    "RRADLN",
    "RSFARE",
    "RSOPAR",
    "RSOPZN",
    "RSTRAR",
    "RTETYP",
    "SAFELN",
    "SAFZ",
    "SARPNT",
    "SAWCTP",
    "SEREAR",
    "SFAREV",
    "SFSCTR",
    "SGA",
    "SHPCZN",
    "SITKIL",
    "SMOKTG",
    "SPEMAR",
    "SPOFSP",
    "SPRDPT",
    "SPTPOS",
    "SRADZN",
    "SRCHAR",
    "SSAMEN",
    "SSAMEZ",
    "SSMSAR",
    "STAGA",
    "STPT",
    "STRTPT",
    "SUPARE",
    "SUSASP",
    "TERMPT",
    "TGTAOI",
    "TGTLOC",
    "TGTRPT",
    "TKEOFF",
    "TMREPT",
    "TMSGAR",
    "TRCNAR",
    "TRNGAR",
    "TRRSAR",
    "TRSCRD",
    "TRVLVL",
    "TURNPT",
    "UAVASP",
    "UNEXOD",
    "WAITA",
    "WARNAR",
    "WAYPT",
    "WPNCTA",
    "WPNFZN",
    "XA",
    "XSITE",
    "ZFIRE",
    "ZONEI",
    "ZONEII"
  };

  const ControlFeatureTypeCategoryCode::value ControlFeatureTypeCategoryCode::
  _xsd_ControlFeatureTypeCategoryCode_indexes_[287] =
  {
    ::oo_2_0::ControlFeatureTypeCategoryCode::AAXIS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ACCPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ADACAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ADAREA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ADIDZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ADOPAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIMPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRCAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRCOA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRCSA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRCTP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIREWA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRH,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AIRRFL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ALRTAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ALTRAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AMBEXP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AMPDZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AMPHOA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AMPOZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AOC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AOI,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AOP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AOR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::APPRDR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ARA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ARFLDZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ASLTPO,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ASYGEN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ASYSPL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ATCAIR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ATTFIR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ATTPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::AXIS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BASDZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BATPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BCHH,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BDYOR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BDYPOA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BDYPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BERLIN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BIOATC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BIOCNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BIOCTM,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BIODPC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BLOPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BOMBAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BOUNDR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BRDGH,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BRKUPP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BUFRZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::BULEYE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CBRNHA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CBRNRA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CBRNRS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CFL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CHMATC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CHMCNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CHMCTM,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CHMDPC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CKPGEN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLDRAD,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSASP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSBSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSCSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSDSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSESP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSFSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSGSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CLSHAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CNTPTA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CNTPTL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::COAPAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::COMCKP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::COMMZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CONCA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CONTAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CONTZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::COOAAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::COORLV,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CRCNZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CRDALT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CRDPNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CRSBAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CRSVZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CTLPNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::CZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DECPNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DEFPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DEFZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DMPI,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DNGRAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DNPKPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DPBSLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DROPPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::DZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::EA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ELCCAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENCRCL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENDARP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENDMPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENDRPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENGREG,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENTL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENTPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ENTRGT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::EXITGT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::EXITPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::EXTZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FALRAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FARRFP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FCZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FEBA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FEZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FINAPF,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FIRING,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FIRUMB,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FLINRG,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FLT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FNCOLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FNPRFR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FOACAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FOOPLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FREFIR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FRUPPL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FSCL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::FWDZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::GENARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::HAMZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::HDAZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::HIDE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::HNDVGT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::HOLDLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::IDSFPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::IFFOFF,
    ::oo_2_0::ControlFeatureTypeCategoryCode::IFFONL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::IMPTPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::INCDPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::INFLIN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::INIAPF,
    ::oo_2_0::ControlFeatureTypeCategoryCode::INITPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::INTOBJ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ISR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::JEZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::JNTOAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::KEYTER,
    ::oo_2_0::ControlFeatureTypeCategoryCode::KILBOX,
    ::oo_2_0::ControlFeatureTypeCategoryCode::KILLA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LAMZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LANDPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LFGEZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LGHTLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LIMADV,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LIMARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LNKPPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LNMEZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LOC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LODLND,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LODSEA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LOGNOD,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LRADLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::LZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MAXIS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MDASEA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MEZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MFGEZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MLOPAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MNBMAX,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MNBTAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MNSFD1,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MNSFD2,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MNTHAX,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MRMEZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MRSHGT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MSLARC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::MSLDET,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NAGTPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NAMAIN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NFL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NFRARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NGA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NGACIV,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NOFLZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::NUCTGT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBFARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBJA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBRARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBSBLT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBSGAP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBSLAN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBSLIN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OBSZON,
    ::oo_2_0::ControlFeatureTypeCategoryCode::OPERZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ORBTPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PHLINE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PIRAZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PNTRBX,
    ::oo_2_0::ControlFeatureTypeCategoryCode::POPUPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PRHBAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PRITPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PSSGPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PTDPRT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PTINT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::PZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::QZONE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADATC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADCLD,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADDOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADDPC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RADDSR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RALYPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RBFA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RCNSAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RCZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RDCOSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::REFCPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::REFLPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::REFRPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RELL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RELPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::REPLIN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::REPRPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RFL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RIPL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RNDZPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ROMIAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ROTAAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RRADLN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RSFARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RSOPAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RSOPZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RSTRAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::RTETYP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SAFELN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SAFZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SARPNT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SAWCTP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SEREAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SFAREV,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SFSCTR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SGA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SHPCZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SITKIL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SMOKTG,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SPEMAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SPOFSP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SPRDPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SPTPOS,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SRADZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SRCHAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SSAMEN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SSAMEZ,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SSMSAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::STAGA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::STPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::STRTPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SUPARE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::SUSASP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TERMPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TGTAOI,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TGTLOC,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TGTRPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TKEOFF,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TMREPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TMSGAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TRCNAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TRNGAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TRRSAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TRSCRD,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TRVLVL,
    ::oo_2_0::ControlFeatureTypeCategoryCode::TURNPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::UAVASP,
    ::oo_2_0::ControlFeatureTypeCategoryCode::UNEXOD,
    ::oo_2_0::ControlFeatureTypeCategoryCode::WAITA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::WARNAR,
    ::oo_2_0::ControlFeatureTypeCategoryCode::WAYPT,
    ::oo_2_0::ControlFeatureTypeCategoryCode::WPNCTA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::WPNFZN,
    ::oo_2_0::ControlFeatureTypeCategoryCode::XA,
    ::oo_2_0::ControlFeatureTypeCategoryCode::XSITE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ZFIRE,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ZONEI,
    ::oo_2_0::ControlFeatureTypeCategoryCode::ZONEII
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ControlFeatureTypeCategoryCode >
  _xsd_ControlFeatureTypeCategoryCode_type_factory_init (
    "ControlFeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // DemolitionStatusCode
  //

  DemolitionStatusCode::
  DemolitionStatusCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_DemolitionStatusCode_convert ();
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_DemolitionStatusCode_convert ();
  }

  DemolitionStatusCode::
  DemolitionStatusCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_DemolitionStatusCode_convert ();
  }

  DemolitionStatusCode* DemolitionStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DemolitionStatusCode (*this, f, c);
  }

  DemolitionStatusCode::value DemolitionStatusCode::
  _xsd_DemolitionStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DemolitionStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_DemolitionStatusCode_indexes_,
                      _xsd_DemolitionStatusCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_DemolitionStatusCode_indexes_ + 9 || _xsd_DemolitionStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DemolitionStatusCode::
  _xsd_DemolitionStatusCode_literals_[9] =
  {
    "ABNDIN",
    "CANCLD",
    "EXECTD",
    "NKN",
    "PLNPRL",
    "PLNRES",
    "PRPEXE",
    "STATE1",
    "STATE2"
  };

  const DemolitionStatusCode::value DemolitionStatusCode::
  _xsd_DemolitionStatusCode_indexes_[9] =
  {
    ::oo_2_0::DemolitionStatusCode::ABNDIN,
    ::oo_2_0::DemolitionStatusCode::CANCLD,
    ::oo_2_0::DemolitionStatusCode::EXECTD,
    ::oo_2_0::DemolitionStatusCode::NKN,
    ::oo_2_0::DemolitionStatusCode::PLNPRL,
    ::oo_2_0::DemolitionStatusCode::PLNRES,
    ::oo_2_0::DemolitionStatusCode::PRPEXE,
    ::oo_2_0::DemolitionStatusCode::STATE1,
    ::oo_2_0::DemolitionStatusCode::STATE2
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DemolitionStatusCode >
  _xsd_DemolitionStatusCode_type_factory_init (
    "DemolitionStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // DirectionCode
  //

  DirectionCode::
  DirectionCode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_DirectionCode_convert ();
  }

  DirectionCode::
  DirectionCode (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_DirectionCode_convert ();
  }

  DirectionCode::
  DirectionCode (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_DirectionCode_convert ();
  }

  DirectionCode* DirectionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DirectionCode (*this, f, c);
  }

  DirectionCode::value DirectionCode::
  _xsd_DirectionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DirectionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_DirectionCode_indexes_,
                      _xsd_DirectionCode_indexes_ + 17,
                      *this,
                      c));

    if (i == _xsd_DirectionCode_indexes_ + 17 || _xsd_DirectionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DirectionCode::
  _xsd_DirectionCode_literals_[17] =
  {
    "ALL",
    "E",
    "ENE",
    "ESE",
    "N",
    "NE",
    "NNE",
    "NNW",
    "NW",
    "S",
    "SE",
    "SSE",
    "SSW",
    "SW",
    "W",
    "WNW",
    "WSW"
  };

  const DirectionCode::value DirectionCode::
  _xsd_DirectionCode_indexes_[17] =
  {
    ::oo_2_0::DirectionCode::ALL,
    ::oo_2_0::DirectionCode::E,
    ::oo_2_0::DirectionCode::ENE,
    ::oo_2_0::DirectionCode::ESE,
    ::oo_2_0::DirectionCode::N,
    ::oo_2_0::DirectionCode::NE,
    ::oo_2_0::DirectionCode::NNE,
    ::oo_2_0::DirectionCode::NNW,
    ::oo_2_0::DirectionCode::NW,
    ::oo_2_0::DirectionCode::S,
    ::oo_2_0::DirectionCode::SE,
    ::oo_2_0::DirectionCode::SSE,
    ::oo_2_0::DirectionCode::SSW,
    ::oo_2_0::DirectionCode::SW,
    ::oo_2_0::DirectionCode::W,
    ::oo_2_0::DirectionCode::WNW,
    ::oo_2_0::DirectionCode::WSW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DirectionCode >
  _xsd_DirectionCode_type_factory_init (
    "DirectionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // DistancePrecisionCode
  //

  DistancePrecisionCode::
  DistancePrecisionCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_DistancePrecisionCode_convert ();
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_DistancePrecisionCode_convert ();
  }

  DistancePrecisionCode::
  DistancePrecisionCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_DistancePrecisionCode_convert ();
  }

  DistancePrecisionCode* DistancePrecisionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DistancePrecisionCode (*this, f, c);
  }

  DistancePrecisionCode::value DistancePrecisionCode::
  _xsd_DistancePrecisionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DistancePrecisionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_DistancePrecisionCode_indexes_,
                      _xsd_DistancePrecisionCode_indexes_ + 17,
                      *this,
                      c));

    if (i == _xsd_DistancePrecisionCode_indexes_ + 17 || _xsd_DistancePrecisionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DistancePrecisionCode::
  _xsd_DistancePrecisionCode_literals_[17] =
  {
    "100FT",
    "100MTR",
    "10FT",
    "10MTR",
    "300MTR",
    "30MTR",
    "3MTR",
    "CM",
    "FOOT",
    "INCH",
    "KILYRD",
    "KM",
    "METRE",
    "MILE",
    "MM",
    "NM",
    "YARD"
  };

  const DistancePrecisionCode::value DistancePrecisionCode::
  _xsd_DistancePrecisionCode_indexes_[17] =
  {
    ::oo_2_0::DistancePrecisionCode::cxx_100FT,
    ::oo_2_0::DistancePrecisionCode::cxx_100MTR,
    ::oo_2_0::DistancePrecisionCode::cxx_10FT,
    ::oo_2_0::DistancePrecisionCode::cxx_10MTR,
    ::oo_2_0::DistancePrecisionCode::cxx_300MTR,
    ::oo_2_0::DistancePrecisionCode::cxx_30MTR,
    ::oo_2_0::DistancePrecisionCode::cxx_3MTR,
    ::oo_2_0::DistancePrecisionCode::CM,
    ::oo_2_0::DistancePrecisionCode::FOOT,
    ::oo_2_0::DistancePrecisionCode::INCH,
    ::oo_2_0::DistancePrecisionCode::KILYRD,
    ::oo_2_0::DistancePrecisionCode::KM,
    ::oo_2_0::DistancePrecisionCode::METRE,
    ::oo_2_0::DistancePrecisionCode::MILE,
    ::oo_2_0::DistancePrecisionCode::MM,
    ::oo_2_0::DistancePrecisionCode::NM,
    ::oo_2_0::DistancePrecisionCode::YARD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DistancePrecisionCode >
  _xsd_DistancePrecisionCode_type_factory_init (
    "DistancePrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // DryDockMarineRailwaySizeCode
  //

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_DryDockMarineRailwaySizeCode_convert ();
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_DryDockMarineRailwaySizeCode_convert ();
  }

  DryDockMarineRailwaySizeCode::
  DryDockMarineRailwaySizeCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_DryDockMarineRailwaySizeCode_convert ();
  }

  DryDockMarineRailwaySizeCode* DryDockMarineRailwaySizeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DryDockMarineRailwaySizeCode (*this, f, c);
  }

  DryDockMarineRailwaySizeCode::value DryDockMarineRailwaySizeCode::
  _xsd_DryDockMarineRailwaySizeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DryDockMarineRailwaySizeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_DryDockMarineRailwaySizeCode_indexes_,
                      _xsd_DryDockMarineRailwaySizeCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_DryDockMarineRailwaySizeCode_indexes_ + 3 || _xsd_DryDockMarineRailwaySizeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DryDockMarineRailwaySizeCode::
  _xsd_DryDockMarineRailwaySizeCode_literals_[3] =
  {
    "L",
    "M",
    "S"
  };

  const DryDockMarineRailwaySizeCode::value DryDockMarineRailwaySizeCode::
  _xsd_DryDockMarineRailwaySizeCode_indexes_[3] =
  {
    ::oo_2_0::DryDockMarineRailwaySizeCode::L,
    ::oo_2_0::DryDockMarineRailwaySizeCode::M,
    ::oo_2_0::DryDockMarineRailwaySizeCode::S
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DryDockMarineRailwaySizeCode >
  _xsd_DryDockMarineRailwaySizeCode_type_factory_init (
    "DryDockMarineRailwaySizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ElectronicEquipmentTypeCategoryCode
  //

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ElectronicEquipmentTypeCategoryCode_convert ();
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ElectronicEquipmentTypeCategoryCode_convert ();
  }

  ElectronicEquipmentTypeCategoryCode::
  ElectronicEquipmentTypeCategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ElectronicEquipmentTypeCategoryCode_convert ();
  }

  ElectronicEquipmentTypeCategoryCode* ElectronicEquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ElectronicEquipmentTypeCategoryCode (*this, f, c);
  }

  ElectronicEquipmentTypeCategoryCode::value ElectronicEquipmentTypeCategoryCode::
  _xsd_ElectronicEquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ElectronicEquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ElectronicEquipmentTypeCategoryCode_indexes_,
                      _xsd_ElectronicEquipmentTypeCategoryCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_ElectronicEquipmentTypeCategoryCode_indexes_ + 12 || _xsd_ElectronicEquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ElectronicEquipmentTypeCategoryCode::
  _xsd_ElectronicEquipmentTypeCategoryCode_literals_[12] =
  {
    "C3I",
    "COM",
    "DPE",
    "EW",
    "FRC",
    "ILS",
    "NAV",
    "NKN",
    "NOS",
    "PAS",
    "RADAR",
    "SEN"
  };

  const ElectronicEquipmentTypeCategoryCode::value ElectronicEquipmentTypeCategoryCode::
  _xsd_ElectronicEquipmentTypeCategoryCode_indexes_[12] =
  {
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::C3I,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::COM,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::DPE,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::EW,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::FRC,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::ILS,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::NAV,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::NKN,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::NOS,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::PAS,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::RADAR,
    ::oo_2_0::ElectronicEquipmentTypeCategoryCode::SEN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectronicEquipmentTypeCategoryCode >
  _xsd_ElectronicEquipmentTypeCategoryCode_type_factory_init (
    "ElectronicEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ElectronicEquipmentTypeSubcategoryCode
  //

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ElectronicEquipmentTypeSubcategoryCode_convert ();
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ElectronicEquipmentTypeSubcategoryCode_convert ();
  }

  ElectronicEquipmentTypeSubcategoryCode::
  ElectronicEquipmentTypeSubcategoryCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ElectronicEquipmentTypeSubcategoryCode_convert ();
  }

  ElectronicEquipmentTypeSubcategoryCode* ElectronicEquipmentTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ElectronicEquipmentTypeSubcategoryCode (*this, f, c);
  }

  ElectronicEquipmentTypeSubcategoryCode::value ElectronicEquipmentTypeSubcategoryCode::
  _xsd_ElectronicEquipmentTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ElectronicEquipmentTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ElectronicEquipmentTypeSubcategoryCode_indexes_,
                      _xsd_ElectronicEquipmentTypeSubcategoryCode_indexes_ + 118,
                      *this,
                      c));

    if (i == _xsd_ElectronicEquipmentTypeSubcategoryCode_indexes_ + 118 || _xsd_ElectronicEquipmentTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ElectronicEquipmentTypeSubcategoryCode::
  _xsd_ElectronicEquipmentTypeSubcategoryCode_literals_[118] =
  {
    "AMTRAD",
    "AUDSTD",
    "BEACON",
    "BRAHMS",
    "BTHTGE",
    "BTHTGH",
    "BUOYCL",
    "C2IS",
    "CBDCFD",
    "CLSWZD",
    "COMANT",
    "COMSYS",
    "COMVEH",
    "CTRYTB",
    "CVRRAD",
    "DATLNK",
    "DM40AP",
    "DTLOPT",
    "DTLRAD",
    "ELSPSM",
    "ELTOPT",
    "FLIR",
    "GPSCOM",
    "GPSMIL",
    "HFDFBL",
    "HFDFOT",
    "HFRDFD",
    "IDNTFF",
    "ILSLOC",
    "INDETS",
    "INTERC",
    "INUWSS",
    "LFRACS",
    "LFRARC",
    "LGLVTV",
    "LORANC",
    "LOUDSP",
    "MBRPOS",
    "MEGPHN",
    "MGANDT",
    "MINIRN",
    "MRKRBA",
    "MRKRIN",
    "MRKRMD",
    "MRKROU",
    "NESTOR",
    "NGOBDV",
    "NKN",
    "NOS",
    "OPTICL",
    "PANOVW",
    "PHOTOG",
    "PINS",
    "PRKHLL",
    "RADBRD",
    "RADDFD",
    "RADGDN",
    "RADTLP",
    "RADTLT",
    "RDISAR",
    "RDOTHR",
    "RDRADT",
    "RDRARB",
    "RDRARS",
    "RDRASA",
    "RDRATC",
    "RDRBNV",
    "RDRCAT",
    "RDRCBR",
    "RDRCMR",
    "RDRDFD",
    "RDREST",
    "RDREWA",
    "RDRFC",
    "RDRGRS",
    "RDRGUD",
    "RDRHFD",
    "RDRHRL",
    "RDRJST",
    "RDRMET",
    "RDRNAV",
    "RDRPRI",
    "RDRRNG",
    "RDRSCP",
    "RDRSLR",
    "RDSLAR",
    "RDSNRS",
    "RNGLAS",
    "RROTHR",
    "RTINDD",
    "RYDSTD",
    "RYDSTN",
    "SDRANG",
    "SDSVST",
    "SHETLC",
    "SHINST",
    "SNGSDE",
    "SONAR",
    "SWCBRD",
    "TACTAN",
    "TARPHS",
    "TELEPH",
    "TELEVS",
    "TELGPH",
    "TELSWT",
    "TELTYP",
    "THEINF",
    "THRTWS",
    "TORAN",
    "TRNRCV",
    "TRTMWV",
    "VIDBRD",
    "VINSON",
    "VISSTR",
    "VISUAL",
    "VLAD",
    "VSLBRG",
    "WCSAIR"
  };

  const ElectronicEquipmentTypeSubcategoryCode::value ElectronicEquipmentTypeSubcategoryCode::
  _xsd_ElectronicEquipmentTypeSubcategoryCode_indexes_[118] =
  {
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::AMTRAD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::AUDSTD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::BEACON,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::BRAHMS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::BTHTGE,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::BTHTGH,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::BUOYCL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::C2IS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::CBDCFD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::CLSWZD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::COMANT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::COMSYS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::COMVEH,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::CTRYTB,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::CVRRAD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::DATLNK,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::DM40AP,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::DTLOPT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::DTLRAD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::ELSPSM,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::ELTOPT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::FLIR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::GPSCOM,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::GPSMIL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::HFDFBL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::HFDFOT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::HFRDFD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::IDNTFF,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::ILSLOC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::INDETS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::INTERC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::INUWSS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::LFRACS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::LFRARC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::LGLVTV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::LORANC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::LOUDSP,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MBRPOS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MEGPHN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MGANDT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MINIRN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MRKRBA,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MRKRIN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MRKRMD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::MRKROU,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::NESTOR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::NGOBDV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::NKN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::NOS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::OPTICL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::PANOVW,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::PHOTOG,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::PINS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::PRKHLL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RADBRD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RADDFD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RADGDN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RADTLP,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RADTLT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDISAR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDOTHR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRADT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRARB,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRARS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRASA,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRATC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRBNV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRCAT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRCBR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRCMR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRDFD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDREST,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDREWA,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRFC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRGRS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRGUD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRHFD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRHRL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRJST,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRMET,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRNAV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRPRI,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRRNG,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRSCP,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDRSLR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDSLAR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RDSNRS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RNGLAS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RROTHR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RTINDD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RYDSTD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::RYDSTN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SDRANG,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SDSVST,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SHETLC,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SHINST,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SNGSDE,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SONAR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::SWCBRD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TACTAN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TARPHS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TELEPH,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TELEVS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TELGPH,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TELSWT,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TELTYP,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::THEINF,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::THRTWS,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TORAN,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TRNRCV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::TRTMWV,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VIDBRD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VINSON,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VISSTR,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VISUAL,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VLAD,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::VSLBRG,
    ::oo_2_0::ElectronicEquipmentTypeSubcategoryCode::WCSAIR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectronicEquipmentTypeSubcategoryCode >
  _xsd_ElectronicEquipmentTypeSubcategoryCode_type_factory_init (
    "ElectronicEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // EngineeringCapabilityCategoryCode
  //

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_EngineeringCapabilityCategoryCode_convert ();
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_EngineeringCapabilityCategoryCode_convert ();
  }

  EngineeringCapabilityCategoryCode::
  EngineeringCapabilityCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_EngineeringCapabilityCategoryCode_convert ();
  }

  EngineeringCapabilityCategoryCode* EngineeringCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EngineeringCapabilityCategoryCode (*this, f, c);
  }

  EngineeringCapabilityCategoryCode::value EngineeringCapabilityCategoryCode::
  _xsd_EngineeringCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EngineeringCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_EngineeringCapabilityCategoryCode_indexes_,
                      _xsd_EngineeringCapabilityCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_EngineeringCapabilityCategoryCode_indexes_ + 3 || _xsd_EngineeringCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const EngineeringCapabilityCategoryCode::
  _xsd_EngineeringCapabilityCategoryCode_literals_[3] =
  {
    "BRCH",
    "CNST",
    "DEMO"
  };

  const EngineeringCapabilityCategoryCode::value EngineeringCapabilityCategoryCode::
  _xsd_EngineeringCapabilityCategoryCode_indexes_[3] =
  {
    ::oo_2_0::EngineeringCapabilityCategoryCode::BRCH,
    ::oo_2_0::EngineeringCapabilityCategoryCode::CNST,
    ::oo_2_0::EngineeringCapabilityCategoryCode::DEMO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, EngineeringCapabilityCategoryCode >
  _xsd_EngineeringCapabilityCategoryCode_type_factory_init (
    "EngineeringCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // EngineeringCapabilityDescriptorCode
  //

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_EngineeringCapabilityDescriptorCode_convert ();
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_EngineeringCapabilityDescriptorCode_convert ();
  }

  EngineeringCapabilityDescriptorCode::
  EngineeringCapabilityDescriptorCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_EngineeringCapabilityDescriptorCode_convert ();
  }

  EngineeringCapabilityDescriptorCode* EngineeringCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EngineeringCapabilityDescriptorCode (*this, f, c);
  }

  EngineeringCapabilityDescriptorCode::value EngineeringCapabilityDescriptorCode::
  _xsd_EngineeringCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EngineeringCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_EngineeringCapabilityDescriptorCode_indexes_,
                      _xsd_EngineeringCapabilityDescriptorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_EngineeringCapabilityDescriptorCode_indexes_ + 2 || _xsd_EngineeringCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const EngineeringCapabilityDescriptorCode::
  _xsd_EngineeringCapabilityDescriptorCode_literals_[2] =
  {
    "RATE",
    "TIME"
  };

  const EngineeringCapabilityDescriptorCode::value EngineeringCapabilityDescriptorCode::
  _xsd_EngineeringCapabilityDescriptorCode_indexes_[2] =
  {
    ::oo_2_0::EngineeringCapabilityDescriptorCode::RATE,
    ::oo_2_0::EngineeringCapabilityDescriptorCode::TIME
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, EngineeringCapabilityDescriptorCode >
  _xsd_EngineeringCapabilityDescriptorCode_type_factory_init (
    "EngineeringCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // EngineeringEquipmentTypeCategoryCode
  //

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_EngineeringEquipmentTypeCategoryCode_convert ();
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_EngineeringEquipmentTypeCategoryCode_convert ();
  }

  EngineeringEquipmentTypeCategoryCode::
  EngineeringEquipmentTypeCategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_EngineeringEquipmentTypeCategoryCode_convert ();
  }

  EngineeringEquipmentTypeCategoryCode* EngineeringEquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EngineeringEquipmentTypeCategoryCode (*this, f, c);
  }

  EngineeringEquipmentTypeCategoryCode::value EngineeringEquipmentTypeCategoryCode::
  _xsd_EngineeringEquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EngineeringEquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_EngineeringEquipmentTypeCategoryCode_indexes_,
                      _xsd_EngineeringEquipmentTypeCategoryCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_EngineeringEquipmentTypeCategoryCode_indexes_ + 25 || _xsd_EngineeringEquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const EngineeringEquipmentTypeCategoryCode::
  _xsd_EngineeringEquipmentTypeCategoryCode_literals_[25] =
  {
    "BRDLVA",
    "BRDVEH",
    "BRIDGG",
    "CNSTVE",
    "CONST",
    "CRANE",
    "DITCHR",
    "DOZER",
    "ERTHMV",
    "GRADER",
    "MCBRLY",
    "MINCLR",
    "MINECL",
    "MINEDT",
    "MINEMR",
    "MINLAY",
    "MINLYR",
    "MNLYAR",
    "MNLYTR",
    "NKN",
    "NOS",
    "PILDRV",
    "POWSHV",
    "RCKCRH",
    "TFBRID"
  };

  const EngineeringEquipmentTypeCategoryCode::value EngineeringEquipmentTypeCategoryCode::
  _xsd_EngineeringEquipmentTypeCategoryCode_indexes_[25] =
  {
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::BRDLVA,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::BRDVEH,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::BRIDGG,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::CNSTVE,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::CONST,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::CRANE,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::DITCHR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::DOZER,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::ERTHMV,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::GRADER,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MCBRLY,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINCLR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINECL,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINEDT,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINEMR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINLAY,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MINLYR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MNLYAR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::MNLYTR,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::NKN,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::NOS,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::PILDRV,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::POWSHV,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::RCKCRH,
    ::oo_2_0::EngineeringEquipmentTypeCategoryCode::TFBRID
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, EngineeringEquipmentTypeCategoryCode >
  _xsd_EngineeringEquipmentTypeCategoryCode_type_factory_init (
    "EngineeringEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // EquipmentTypeCategoryCode
  //

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_EquipmentTypeCategoryCode_convert ();
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_EquipmentTypeCategoryCode_convert ();
  }

  EquipmentTypeCategoryCode::
  EquipmentTypeCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_EquipmentTypeCategoryCode_convert ();
  }

  EquipmentTypeCategoryCode* EquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EquipmentTypeCategoryCode (*this, f, c);
  }

  EquipmentTypeCategoryCode::value EquipmentTypeCategoryCode::
  _xsd_EquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_EquipmentTypeCategoryCode_indexes_,
                      _xsd_EquipmentTypeCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_EquipmentTypeCategoryCode_indexes_ + 10 || _xsd_EquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const EquipmentTypeCategoryCode::
  _xsd_EquipmentTypeCategoryCode_literals_[10] =
  {
    "AIRCFT",
    "CBRNEQ",
    "ELCTRN",
    "ENGEQ",
    "MISCEQ",
    "MRTMEQ",
    "RAIL",
    "VEHCLE",
    "VESSEL",
    "WEPTYP"
  };

  const EquipmentTypeCategoryCode::value EquipmentTypeCategoryCode::
  _xsd_EquipmentTypeCategoryCode_indexes_[10] =
  {
    ::oo_2_0::EquipmentTypeCategoryCode::AIRCFT,
    ::oo_2_0::EquipmentTypeCategoryCode::CBRNEQ,
    ::oo_2_0::EquipmentTypeCategoryCode::ELCTRN,
    ::oo_2_0::EquipmentTypeCategoryCode::ENGEQ,
    ::oo_2_0::EquipmentTypeCategoryCode::MISCEQ,
    ::oo_2_0::EquipmentTypeCategoryCode::MRTMEQ,
    ::oo_2_0::EquipmentTypeCategoryCode::RAIL,
    ::oo_2_0::EquipmentTypeCategoryCode::VEHCLE,
    ::oo_2_0::EquipmentTypeCategoryCode::VESSEL,
    ::oo_2_0::EquipmentTypeCategoryCode::WEPTYP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, EquipmentTypeCategoryCode >
  _xsd_EquipmentTypeCategoryCode_type_factory_init (
    "EquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // EvacuationDestinationCode
  //

  EvacuationDestinationCode::
  EvacuationDestinationCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_EvacuationDestinationCode_convert ();
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_EvacuationDestinationCode_convert ();
  }

  EvacuationDestinationCode::
  EvacuationDestinationCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_EvacuationDestinationCode_convert ();
  }

  EvacuationDestinationCode* EvacuationDestinationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EvacuationDestinationCode (*this, f, c);
  }

  EvacuationDestinationCode::value EvacuationDestinationCode::
  _xsd_EvacuationDestinationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EvacuationDestinationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_EvacuationDestinationCode_indexes_,
                      _xsd_EvacuationDestinationCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_EvacuationDestinationCode_indexes_ + 3 || _xsd_EvacuationDestinationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const EvacuationDestinationCode::
  _xsd_EvacuationDestinationCode_literals_[3] =
  {
    "HOMHOL",
    "MEDTHT",
    "RETDTY"
  };

  const EvacuationDestinationCode::value EvacuationDestinationCode::
  _xsd_EvacuationDestinationCode_indexes_[3] =
  {
    ::oo_2_0::EvacuationDestinationCode::HOMHOL,
    ::oo_2_0::EvacuationDestinationCode::MEDTHT,
    ::oo_2_0::EvacuationDestinationCode::RETDTY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, EvacuationDestinationCode >
  _xsd_EvacuationDestinationCode_type_factory_init (
    "EvacuationDestinationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ExecutiveMilitaryOrganisationTypeCategoryCode
  //

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_convert ();
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_convert ();
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::
  ExecutiveMilitaryOrganisationTypeCategoryCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_convert ();
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode* ExecutiveMilitaryOrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ExecutiveMilitaryOrganisationTypeCategoryCode (*this, f, c);
  }

  ExecutiveMilitaryOrganisationTypeCategoryCode::value ExecutiveMilitaryOrganisationTypeCategoryCode::
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_indexes_,
                      _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_indexes_ + 7 || _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ExecutiveMilitaryOrganisationTypeCategoryCode::
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_[7] =
  {
    "HQ",
    "LOG",
    "MILSVC",
    "NOS",
    "PRSNL",
    "SUPPLY",
    "TRNPTN"
  };

  const ExecutiveMilitaryOrganisationTypeCategoryCode::value ExecutiveMilitaryOrganisationTypeCategoryCode::
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_indexes_[7] =
  {
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::HQ,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::LOG,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::MILSVC,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::NOS,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::PRSNL,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::SUPPLY,
    ::oo_2_0::ExecutiveMilitaryOrganisationTypeCategoryCode::TRNPTN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ExecutiveMilitaryOrganisationTypeCategoryCode >
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_type_factory_init (
    "ExecutiveMilitaryOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityCategoryCode
  //

  FacilityCategoryCode::
  FacilityCategoryCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityCategoryCode_convert ();
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityCategoryCode_convert ();
  }

  FacilityCategoryCode::
  FacilityCategoryCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityCategoryCode_convert ();
  }

  FacilityCategoryCode* FacilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityCategoryCode (*this, f, c);
  }

  FacilityCategoryCode::value FacilityCategoryCode::
  _xsd_FacilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityCategoryCode_indexes_,
                      _xsd_FacilityCategoryCode_indexes_ + 17,
                      *this,
                      c));

    if (i == _xsd_FacilityCategoryCode_indexes_ + 17 || _xsd_FacilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityCategoryCode::
  _xsd_FacilityCategoryCode_literals_[17] =
  {
    "AIRFLD",
    "ANCHOR",
    "APRON",
    "BASIN",
    "BERTH",
    "BRIDGE",
    "DRYDCK",
    "HARBOR",
    "JETTY",
    "MILOBS",
    "NETWRK",
    "NOS",
    "QUAY",
    "RALWAY",
    "ROAD",
    "RUNWAY",
    "SLPWAY"
  };

  const FacilityCategoryCode::value FacilityCategoryCode::
  _xsd_FacilityCategoryCode_indexes_[17] =
  {
    ::oo_2_0::FacilityCategoryCode::AIRFLD,
    ::oo_2_0::FacilityCategoryCode::ANCHOR,
    ::oo_2_0::FacilityCategoryCode::APRON,
    ::oo_2_0::FacilityCategoryCode::BASIN,
    ::oo_2_0::FacilityCategoryCode::BERTH,
    ::oo_2_0::FacilityCategoryCode::BRIDGE,
    ::oo_2_0::FacilityCategoryCode::DRYDCK,
    ::oo_2_0::FacilityCategoryCode::HARBOR,
    ::oo_2_0::FacilityCategoryCode::JETTY,
    ::oo_2_0::FacilityCategoryCode::MILOBS,
    ::oo_2_0::FacilityCategoryCode::NETWRK,
    ::oo_2_0::FacilityCategoryCode::NOS,
    ::oo_2_0::FacilityCategoryCode::QUAY,
    ::oo_2_0::FacilityCategoryCode::RALWAY,
    ::oo_2_0::FacilityCategoryCode::ROAD,
    ::oo_2_0::FacilityCategoryCode::RUNWAY,
    ::oo_2_0::FacilityCategoryCode::SLPWAY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityCategoryCode >
  _xsd_FacilityCategoryCode_type_factory_init (
    "FacilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityPrimaryConstructionMaterialCode
  //

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityPrimaryConstructionMaterialCode_convert ();
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityPrimaryConstructionMaterialCode_convert ();
  }

  FacilityPrimaryConstructionMaterialCode::
  FacilityPrimaryConstructionMaterialCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityPrimaryConstructionMaterialCode_convert ();
  }

  FacilityPrimaryConstructionMaterialCode* FacilityPrimaryConstructionMaterialCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityPrimaryConstructionMaterialCode (*this, f, c);
  }

  FacilityPrimaryConstructionMaterialCode::value FacilityPrimaryConstructionMaterialCode::
  _xsd_FacilityPrimaryConstructionMaterialCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityPrimaryConstructionMaterialCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityPrimaryConstructionMaterialCode_indexes_,
                      _xsd_FacilityPrimaryConstructionMaterialCode_indexes_ + 33,
                      *this,
                      c));

    if (i == _xsd_FacilityPrimaryConstructionMaterialCode_indexes_ + 33 || _xsd_FacilityPrimaryConstructionMaterialCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityPrimaryConstructionMaterialCode::
  _xsd_FacilityPrimaryConstructionMaterialCode_literals_[33] =
  {
    "ASPHLT",
    "BIT",
    "BRKMSN",
    "CBLSTN",
    "CLA",
    "CNCRBL",
    "CNCRTE",
    "COM",
    "COP",
    "COR",
    "EARTH",
    "GRAVEL",
    "ICE",
    "LAT",
    "MACDAM",
    "MEM",
    "METAL",
    "MIX",
    "NKN",
    "NOS",
    "PEBBLE",
    "PEM",
    "PER",
    "PRSTCN",
    "PSTEEL",
    "REINCN",
    "RLDERT",
    "ROCK",
    "SAND",
    "SILT",
    "SNOW",
    "STELMT",
    "WOOD"
  };

  const FacilityPrimaryConstructionMaterialCode::value FacilityPrimaryConstructionMaterialCode::
  _xsd_FacilityPrimaryConstructionMaterialCode_indexes_[33] =
  {
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::ASPHLT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::BIT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::BRKMSN,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::CBLSTN,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::CLA,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::CNCRBL,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::CNCRTE,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::COM,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::COP,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::COR,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::EARTH,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::GRAVEL,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::ICE,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::LAT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::MACDAM,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::MEM,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::METAL,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::MIX,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::NKN,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::NOS,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::PEBBLE,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::PEM,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::PER,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::PRSTCN,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::PSTEEL,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::REINCN,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::RLDERT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::ROCK,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::SAND,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::SILT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::SNOW,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::STELMT,
    ::oo_2_0::FacilityPrimaryConstructionMaterialCode::WOOD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityPrimaryConstructionMaterialCode >
  _xsd_FacilityPrimaryConstructionMaterialCode_type_factory_init (
    "FacilityPrimaryConstructionMaterialCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusCategoryCode
  //

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusCategoryCode_convert ();
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusCategoryCode_convert ();
  }

  FacilityStatusCategoryCode::
  FacilityStatusCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusCategoryCode_convert ();
  }

  FacilityStatusCategoryCode* FacilityStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusCategoryCode (*this, f, c);
  }

  FacilityStatusCategoryCode::value FacilityStatusCategoryCode::
  _xsd_FacilityStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusCategoryCode_indexes_,
                      _xsd_FacilityStatusCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusCategoryCode_indexes_ + 4 || _xsd_FacilityStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusCategoryCode::
  _xsd_FacilityStatusCategoryCode_literals_[4] =
  {
    "AIRFST",
    "MEDFST",
    "MNMAST",
    "NOS"
  };

  const FacilityStatusCategoryCode::value FacilityStatusCategoryCode::
  _xsd_FacilityStatusCategoryCode_indexes_[4] =
  {
    ::oo_2_0::FacilityStatusCategoryCode::AIRFST,
    ::oo_2_0::FacilityStatusCategoryCode::MEDFST,
    ::oo_2_0::FacilityStatusCategoryCode::MNMAST,
    ::oo_2_0::FacilityStatusCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusCategoryCode >
  _xsd_FacilityStatusCategoryCode_type_factory_init (
    "FacilityStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusEnemyActivityConditionCode
  //

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusEnemyActivityConditionCode_convert ();
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusEnemyActivityConditionCode_convert ();
  }

  FacilityStatusEnemyActivityConditionCode::
  FacilityStatusEnemyActivityConditionCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusEnemyActivityConditionCode_convert ();
  }

  FacilityStatusEnemyActivityConditionCode* FacilityStatusEnemyActivityConditionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusEnemyActivityConditionCode (*this, f, c);
  }

  FacilityStatusEnemyActivityConditionCode::value FacilityStatusEnemyActivityConditionCode::
  _xsd_FacilityStatusEnemyActivityConditionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusEnemyActivityConditionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusEnemyActivityConditionCode_indexes_,
                      _xsd_FacilityStatusEnemyActivityConditionCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusEnemyActivityConditionCode_indexes_ + 2 || _xsd_FacilityStatusEnemyActivityConditionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusEnemyActivityConditionCode::
  _xsd_FacilityStatusEnemyActivityConditionCode_literals_[2] =
  {
    "COLD",
    "HOT"
  };

  const FacilityStatusEnemyActivityConditionCode::value FacilityStatusEnemyActivityConditionCode::
  _xsd_FacilityStatusEnemyActivityConditionCode_indexes_[2] =
  {
    ::oo_2_0::FacilityStatusEnemyActivityConditionCode::COLD,
    ::oo_2_0::FacilityStatusEnemyActivityConditionCode::HOT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusEnemyActivityConditionCode >
  _xsd_FacilityStatusEnemyActivityConditionCode_type_factory_init (
    "FacilityStatusEnemyActivityConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusOccupationProgramIndicatorCode
  //

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusOccupationProgramIndicatorCode_convert ();
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusOccupationProgramIndicatorCode_convert ();
  }

  FacilityStatusOccupationProgramIndicatorCode::
  FacilityStatusOccupationProgramIndicatorCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusOccupationProgramIndicatorCode_convert ();
  }

  FacilityStatusOccupationProgramIndicatorCode* FacilityStatusOccupationProgramIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusOccupationProgramIndicatorCode (*this, f, c);
  }

  FacilityStatusOccupationProgramIndicatorCode::value FacilityStatusOccupationProgramIndicatorCode::
  _xsd_FacilityStatusOccupationProgramIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusOccupationProgramIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusOccupationProgramIndicatorCode_indexes_,
                      _xsd_FacilityStatusOccupationProgramIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusOccupationProgramIndicatorCode_indexes_ + 2 || _xsd_FacilityStatusOccupationProgramIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusOccupationProgramIndicatorCode::
  _xsd_FacilityStatusOccupationProgramIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const FacilityStatusOccupationProgramIndicatorCode::value FacilityStatusOccupationProgramIndicatorCode::
  _xsd_FacilityStatusOccupationProgramIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::FacilityStatusOccupationProgramIndicatorCode::NO,
    ::oo_2_0::FacilityStatusOccupationProgramIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusOccupationProgramIndicatorCode >
  _xsd_FacilityStatusOccupationProgramIndicatorCode_type_factory_init (
    "FacilityStatusOccupationProgramIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusOperationalStatusCode
  //

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusOperationalStatusCode_convert ();
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusOperationalStatusCode_convert ();
  }

  FacilityStatusOperationalStatusCode::
  FacilityStatusOperationalStatusCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusOperationalStatusCode_convert ();
  }

  FacilityStatusOperationalStatusCode* FacilityStatusOperationalStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusOperationalStatusCode (*this, f, c);
  }

  FacilityStatusOperationalStatusCode::value FacilityStatusOperationalStatusCode::
  _xsd_FacilityStatusOperationalStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusOperationalStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusOperationalStatusCode_indexes_,
                      _xsd_FacilityStatusOperationalStatusCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusOperationalStatusCode_indexes_ + 6 || _xsd_FacilityStatusOperationalStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusOperationalStatusCode::
  _xsd_FacilityStatusOperationalStatusCode_literals_[6] =
  {
    "MOPS",
    "NKN",
    "NOP",
    "OPR",
    "SOPS",
    "TNOPS"
  };

  const FacilityStatusOperationalStatusCode::value FacilityStatusOperationalStatusCode::
  _xsd_FacilityStatusOperationalStatusCode_indexes_[6] =
  {
    ::oo_2_0::FacilityStatusOperationalStatusCode::MOPS,
    ::oo_2_0::FacilityStatusOperationalStatusCode::NKN,
    ::oo_2_0::FacilityStatusOperationalStatusCode::NOP,
    ::oo_2_0::FacilityStatusOperationalStatusCode::OPR,
    ::oo_2_0::FacilityStatusOperationalStatusCode::SOPS,
    ::oo_2_0::FacilityStatusOperationalStatusCode::TNOPS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusOperationalStatusCode >
  _xsd_FacilityStatusOperationalStatusCode_type_factory_init (
    "FacilityStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusOperationalStatusQualifierCode
  //

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusOperationalStatusQualifierCode_convert ();
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusOperationalStatusQualifierCode_convert ();
  }

  FacilityStatusOperationalStatusQualifierCode::
  FacilityStatusOperationalStatusQualifierCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusOperationalStatusQualifierCode_convert ();
  }

  FacilityStatusOperationalStatusQualifierCode* FacilityStatusOperationalStatusQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusOperationalStatusQualifierCode (*this, f, c);
  }

  FacilityStatusOperationalStatusQualifierCode::value FacilityStatusOperationalStatusQualifierCode::
  _xsd_FacilityStatusOperationalStatusQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusOperationalStatusQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusOperationalStatusQualifierCode_indexes_,
                      _xsd_FacilityStatusOperationalStatusQualifierCode_indexes_ + 19,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusOperationalStatusQualifierCode_indexes_ + 19 || _xsd_FacilityStatusOperationalStatusQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusOperationalStatusQualifierCode::
  _xsd_FacilityStatusOperationalStatusQualifierCode_literals_[19] =
  {
    "BRCHED",
    "BRNOUT",
    "CVRFIR",
    "DENIED",
    "DISASM",
    "DSTRYD",
    "HVYDAM",
    "INMNT",
    "LGTDAM",
    "LST",
    "LVR",
    "MARKED",
    "MODDAM",
    "NKN",
    "PASABL",
    "PRPEXE",
    "PRTDSM",
    "STERLZ",
    "UNCNST"
  };

  const FacilityStatusOperationalStatusQualifierCode::value FacilityStatusOperationalStatusQualifierCode::
  _xsd_FacilityStatusOperationalStatusQualifierCode_indexes_[19] =
  {
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::BRCHED,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::BRNOUT,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::CVRFIR,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::DENIED,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::DISASM,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::DSTRYD,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::HVYDAM,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::INMNT,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::LGTDAM,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::LST,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::LVR,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::MARKED,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::MODDAM,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::NKN,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::PASABL,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::PRPEXE,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::PRTDSM,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::STERLZ,
    ::oo_2_0::FacilityStatusOperationalStatusQualifierCode::UNCNST
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusOperationalStatusQualifierCode >
  _xsd_FacilityStatusOperationalStatusQualifierCode_type_factory_init (
    "FacilityStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusReserveIndicatorCode
  //

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusReserveIndicatorCode_convert ();
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusReserveIndicatorCode_convert ();
  }

  FacilityStatusReserveIndicatorCode::
  FacilityStatusReserveIndicatorCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusReserveIndicatorCode_convert ();
  }

  FacilityStatusReserveIndicatorCode* FacilityStatusReserveIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusReserveIndicatorCode (*this, f, c);
  }

  FacilityStatusReserveIndicatorCode::value FacilityStatusReserveIndicatorCode::
  _xsd_FacilityStatusReserveIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusReserveIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusReserveIndicatorCode_indexes_,
                      _xsd_FacilityStatusReserveIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusReserveIndicatorCode_indexes_ + 2 || _xsd_FacilityStatusReserveIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusReserveIndicatorCode::
  _xsd_FacilityStatusReserveIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const FacilityStatusReserveIndicatorCode::value FacilityStatusReserveIndicatorCode::
  _xsd_FacilityStatusReserveIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::FacilityStatusReserveIndicatorCode::NO,
    ::oo_2_0::FacilityStatusReserveIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusReserveIndicatorCode >
  _xsd_FacilityStatusReserveIndicatorCode_type_factory_init (
    "FacilityStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityStatusSecurityStatusCode
  //

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityStatusSecurityStatusCode_convert ();
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityStatusSecurityStatusCode_convert ();
  }

  FacilityStatusSecurityStatusCode::
  FacilityStatusSecurityStatusCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityStatusSecurityStatusCode_convert ();
  }

  FacilityStatusSecurityStatusCode* FacilityStatusSecurityStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityStatusSecurityStatusCode (*this, f, c);
  }

  FacilityStatusSecurityStatusCode::value FacilityStatusSecurityStatusCode::
  _xsd_FacilityStatusSecurityStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityStatusSecurityStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityStatusSecurityStatusCode_indexes_,
                      _xsd_FacilityStatusSecurityStatusCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_FacilityStatusSecurityStatusCode_indexes_ + 4 || _xsd_FacilityStatusSecurityStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityStatusSecurityStatusCode::
  _xsd_FacilityStatusSecurityStatusCode_literals_[4] =
  {
    "GUARDD",
    "NKN",
    "NONE",
    "SECURD"
  };

  const FacilityStatusSecurityStatusCode::value FacilityStatusSecurityStatusCode::
  _xsd_FacilityStatusSecurityStatusCode_indexes_[4] =
  {
    ::oo_2_0::FacilityStatusSecurityStatusCode::GUARDD,
    ::oo_2_0::FacilityStatusSecurityStatusCode::NKN,
    ::oo_2_0::FacilityStatusSecurityStatusCode::NONE,
    ::oo_2_0::FacilityStatusSecurityStatusCode::SECURD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityStatusSecurityStatusCode >
  _xsd_FacilityStatusSecurityStatusCode_type_factory_init (
    "FacilityStatusSecurityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FacilityTypeCategoryCode
  //

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FacilityTypeCategoryCode_convert ();
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FacilityTypeCategoryCode_convert ();
  }

  FacilityTypeCategoryCode::
  FacilityTypeCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FacilityTypeCategoryCode_convert ();
  }

  FacilityTypeCategoryCode* FacilityTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FacilityTypeCategoryCode (*this, f, c);
  }

  FacilityTypeCategoryCode::value FacilityTypeCategoryCode::
  _xsd_FacilityTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FacilityTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FacilityTypeCategoryCode_indexes_,
                      _xsd_FacilityTypeCategoryCode_indexes_ + 256,
                      *this,
                      c));

    if (i == _xsd_FacilityTypeCategoryCode_indexes_ + 256 || _xsd_FacilityTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FacilityTypeCategoryCode::
  _xsd_FacilityTypeCategoryCode_literals_[256] =
  {
    "ACCOM",
    "AEWGRD",
    "AIRFLD",
    "ALTDCN",
    "AMMCCH",
    "ANCHOR",
    "APRON",
    "APRTBD",
    "ASP",
    "ATP",
    "BANK",
    "BARRCK",
    "BASIN",
    "BATH",
    "BERM",
    "BERTH",
    "BFIFLD",
    "BIVOUC",
    "BLD",
    "BRGTYP",
    "BUA",
    "BUNKER",
    "CAMP",
    "CAN",
    "CBRNPS",
    "CBTPST",
    "CEM",
    "CHM",
    "CHPLCK",
    "CIMICC",
    "CITY",
    "CKPPOL",
    "CLSFAC",
    "COB",
    "COT",
    "CP",
    "CRP",
    "CSCLPT",
    "CTT",
    "CUT",
    "CVCLPT",
    "CWY",
    "DAM",
    "DCH",
    "DECONP",
    "DEPBIO",
    "DEPCHM",
    "DEPENG",
    "DEPMED",
    "DEPMIS",
    "DEPMUN",
    "DEPNUC",
    "DEPOT",
    "DEPPOL",
    "DMDBRS",
    "DPCBRN",
    "DRNSEW",
    "DRSTAT",
    "DRYDCK",
    "DTCLPT",
    "DTHARE",
    "ELCINS",
    "ELCSPL",
    "ELIRDD",
    "ELISSJ",
    "ELIWAR",
    "EMPLAC",
    "EQIMFT",
    "FACAIR",
    "FACAMM",
    "FACAR",
    "FACARM",
    "FACARP",
    "FACATR",
    "FACBRG",
    "FACCHB",
    "FACENG",
    "FACGOV",
    "FACMIL",
    "FACMSL",
    "FACNAV",
    "FACPOW",
    "FACPRO",
    "FACSHP",
    "FACSRU",
    "FACTEC",
    "FACTEL",
    "FACTRN",
    "FACVEH",
    "FACWAT",
    "FARM",
    "FARP",
    "FCRLBD",
    "FCRSLB",
    "FENCE",
    "FERINS",
    "FFBRKS",
    "FHPT",
    "FOBSPS",
    "FORT",
    "FOXHOL",
    "FRGTER",
    "FRTFCN",
    "FSAAMM",
    "FSMAMM",
    "FSSAMM",
    "FSSTAM",
    "GASPFA",
    "GAT",
    "GVTBLD",
    "HAMLET",
    "HANGAR",
    "HARBOR",
    "HGHTCH",
    "HOUSE",
    "HPD",
    "HPT",
    "HQ",
    "HSP",
    "HSPFLD",
    "HSPNOS",
    "HUT",
    "IMPBED",
    "INDINS",
    "INSTAL",
    "INTCTR",
    "JCT",
    "JETTY",
    "LGRLPT",
    "LGTHSE",
    "LOADPL",
    "LOADPM",
    "MAINTF",
    "MBFSUB",
    "MEDSPT",
    "METFAC",
    "MF",
    "MFUMS",
    "MILOBS",
    "MINE",
    "MNCPLX",
    "MNINOS",
    "MNINUG",
    "MNINUW",
    "MNTCPT",
    "MONUM",
    "MSS",
    "MSSGRV",
    "MTFAAR",
    "MTFAIR",
    "MTFMVH",
    "MWY",
    "NAVAST",
    "NCLFAC",
    "NETWRK",
    "NKN",
    "NOS",
    "OBSP",
    "OBSTWR",
    "OFFICE",
    "OMNIST",
    "ORD",
    "PASTRM",
    "PCHREF",
    "PERSBR",
    "PIER",
    "PIPLIN",
    "PMPSTN",
    "POLPT",
    "POLSTA",
    "PORT",
    "POWARE",
    "POWCMP",
    "POWCPT",
    "PRCXAC",
    "PRCXCH",
    "PRCXGM",
    "PRCXMV",
    "PRCXPT",
    "PTL",
    "PWPLFF",
    "PWPLHL",
    "PWPLNC",
    "PWPLTH",
    "QUAY",
    "RAIL",
    "RAILHD",
    "RAILWY",
    "RDJNCT",
    "RDRHD",
    "RDRPST",
    "REFARE",
    "RELAY",
    "RELFAC",
    "RES",
    "REVETM",
    "RFAREP",
    "ROAD",
    "ROMPT",
    "ROWHSE",
    "RRRSPT",
    "RUI",
    "RWCRSS",
    "RWJNCT",
    "SCHOOL",
    "SENPST",
    "SHD",
    "SHLSUR",
    "SHLUND",
    "SHOP",
    "SHORAN",
    "SHYARD",
    "SITADR",
    "SITART",
    "SITEEW",
    "SITGSR",
    "SITLOG",
    "SITMLB",
    "SITRAD",
    "SITRFT",
    "SLPWAY",
    "SNSRFP",
    "SNVRDR",
    "SPTARE",
    "STN",
    "STP",
    "STSSML",
    "SUPDAM",
    "SUPDMP",
    "SUPPT",
    "SWGFAC",
    "TACAN",
    "TCH",
    "TOW",
    "TOWN",
    "TRAIL",
    "TRANSF",
    "TRFPST",
    "TUN",
    "TWFLAK",
    "TWNHAL",
    "TWTLTM",
    "URBANA",
    "VLLAGE",
    "VST",
    "WALL",
    "WAREHS",
    "WATSPL",
    "WML",
    "WRSHPL",
    "WSHFAC",
    "WSTPLE",
    "WTRFAC",
    "WTW",
    "XLC",
    "XRR"
  };

  const FacilityTypeCategoryCode::value FacilityTypeCategoryCode::
  _xsd_FacilityTypeCategoryCode_indexes_[256] =
  {
    ::oo_2_0::FacilityTypeCategoryCode::ACCOM,
    ::oo_2_0::FacilityTypeCategoryCode::AEWGRD,
    ::oo_2_0::FacilityTypeCategoryCode::AIRFLD,
    ::oo_2_0::FacilityTypeCategoryCode::ALTDCN,
    ::oo_2_0::FacilityTypeCategoryCode::AMMCCH,
    ::oo_2_0::FacilityTypeCategoryCode::ANCHOR,
    ::oo_2_0::FacilityTypeCategoryCode::APRON,
    ::oo_2_0::FacilityTypeCategoryCode::APRTBD,
    ::oo_2_0::FacilityTypeCategoryCode::ASP,
    ::oo_2_0::FacilityTypeCategoryCode::ATP,
    ::oo_2_0::FacilityTypeCategoryCode::BANK,
    ::oo_2_0::FacilityTypeCategoryCode::BARRCK,
    ::oo_2_0::FacilityTypeCategoryCode::BASIN,
    ::oo_2_0::FacilityTypeCategoryCode::BATH,
    ::oo_2_0::FacilityTypeCategoryCode::BERM,
    ::oo_2_0::FacilityTypeCategoryCode::BERTH,
    ::oo_2_0::FacilityTypeCategoryCode::BFIFLD,
    ::oo_2_0::FacilityTypeCategoryCode::BIVOUC,
    ::oo_2_0::FacilityTypeCategoryCode::BLD,
    ::oo_2_0::FacilityTypeCategoryCode::BRGTYP,
    ::oo_2_0::FacilityTypeCategoryCode::BUA,
    ::oo_2_0::FacilityTypeCategoryCode::BUNKER,
    ::oo_2_0::FacilityTypeCategoryCode::CAMP,
    ::oo_2_0::FacilityTypeCategoryCode::CAN,
    ::oo_2_0::FacilityTypeCategoryCode::CBRNPS,
    ::oo_2_0::FacilityTypeCategoryCode::CBTPST,
    ::oo_2_0::FacilityTypeCategoryCode::CEM,
    ::oo_2_0::FacilityTypeCategoryCode::CHM,
    ::oo_2_0::FacilityTypeCategoryCode::CHPLCK,
    ::oo_2_0::FacilityTypeCategoryCode::CIMICC,
    ::oo_2_0::FacilityTypeCategoryCode::CITY,
    ::oo_2_0::FacilityTypeCategoryCode::CKPPOL,
    ::oo_2_0::FacilityTypeCategoryCode::CLSFAC,
    ::oo_2_0::FacilityTypeCategoryCode::COB,
    ::oo_2_0::FacilityTypeCategoryCode::COT,
    ::oo_2_0::FacilityTypeCategoryCode::CP,
    ::oo_2_0::FacilityTypeCategoryCode::CRP,
    ::oo_2_0::FacilityTypeCategoryCode::CSCLPT,
    ::oo_2_0::FacilityTypeCategoryCode::CTT,
    ::oo_2_0::FacilityTypeCategoryCode::CUT,
    ::oo_2_0::FacilityTypeCategoryCode::CVCLPT,
    ::oo_2_0::FacilityTypeCategoryCode::CWY,
    ::oo_2_0::FacilityTypeCategoryCode::DAM,
    ::oo_2_0::FacilityTypeCategoryCode::DCH,
    ::oo_2_0::FacilityTypeCategoryCode::DECONP,
    ::oo_2_0::FacilityTypeCategoryCode::DEPBIO,
    ::oo_2_0::FacilityTypeCategoryCode::DEPCHM,
    ::oo_2_0::FacilityTypeCategoryCode::DEPENG,
    ::oo_2_0::FacilityTypeCategoryCode::DEPMED,
    ::oo_2_0::FacilityTypeCategoryCode::DEPMIS,
    ::oo_2_0::FacilityTypeCategoryCode::DEPMUN,
    ::oo_2_0::FacilityTypeCategoryCode::DEPNUC,
    ::oo_2_0::FacilityTypeCategoryCode::DEPOT,
    ::oo_2_0::FacilityTypeCategoryCode::DEPPOL,
    ::oo_2_0::FacilityTypeCategoryCode::DMDBRS,
    ::oo_2_0::FacilityTypeCategoryCode::DPCBRN,
    ::oo_2_0::FacilityTypeCategoryCode::DRNSEW,
    ::oo_2_0::FacilityTypeCategoryCode::DRSTAT,
    ::oo_2_0::FacilityTypeCategoryCode::DRYDCK,
    ::oo_2_0::FacilityTypeCategoryCode::DTCLPT,
    ::oo_2_0::FacilityTypeCategoryCode::DTHARE,
    ::oo_2_0::FacilityTypeCategoryCode::ELCINS,
    ::oo_2_0::FacilityTypeCategoryCode::ELCSPL,
    ::oo_2_0::FacilityTypeCategoryCode::ELIRDD,
    ::oo_2_0::FacilityTypeCategoryCode::ELISSJ,
    ::oo_2_0::FacilityTypeCategoryCode::ELIWAR,
    ::oo_2_0::FacilityTypeCategoryCode::EMPLAC,
    ::oo_2_0::FacilityTypeCategoryCode::EQIMFT,
    ::oo_2_0::FacilityTypeCategoryCode::FACAIR,
    ::oo_2_0::FacilityTypeCategoryCode::FACAMM,
    ::oo_2_0::FacilityTypeCategoryCode::FACAR,
    ::oo_2_0::FacilityTypeCategoryCode::FACARM,
    ::oo_2_0::FacilityTypeCategoryCode::FACARP,
    ::oo_2_0::FacilityTypeCategoryCode::FACATR,
    ::oo_2_0::FacilityTypeCategoryCode::FACBRG,
    ::oo_2_0::FacilityTypeCategoryCode::FACCHB,
    ::oo_2_0::FacilityTypeCategoryCode::FACENG,
    ::oo_2_0::FacilityTypeCategoryCode::FACGOV,
    ::oo_2_0::FacilityTypeCategoryCode::FACMIL,
    ::oo_2_0::FacilityTypeCategoryCode::FACMSL,
    ::oo_2_0::FacilityTypeCategoryCode::FACNAV,
    ::oo_2_0::FacilityTypeCategoryCode::FACPOW,
    ::oo_2_0::FacilityTypeCategoryCode::FACPRO,
    ::oo_2_0::FacilityTypeCategoryCode::FACSHP,
    ::oo_2_0::FacilityTypeCategoryCode::FACSRU,
    ::oo_2_0::FacilityTypeCategoryCode::FACTEC,
    ::oo_2_0::FacilityTypeCategoryCode::FACTEL,
    ::oo_2_0::FacilityTypeCategoryCode::FACTRN,
    ::oo_2_0::FacilityTypeCategoryCode::FACVEH,
    ::oo_2_0::FacilityTypeCategoryCode::FACWAT,
    ::oo_2_0::FacilityTypeCategoryCode::FARM,
    ::oo_2_0::FacilityTypeCategoryCode::FARP,
    ::oo_2_0::FacilityTypeCategoryCode::FCRLBD,
    ::oo_2_0::FacilityTypeCategoryCode::FCRSLB,
    ::oo_2_0::FacilityTypeCategoryCode::FENCE,
    ::oo_2_0::FacilityTypeCategoryCode::FERINS,
    ::oo_2_0::FacilityTypeCategoryCode::FFBRKS,
    ::oo_2_0::FacilityTypeCategoryCode::FHPT,
    ::oo_2_0::FacilityTypeCategoryCode::FOBSPS,
    ::oo_2_0::FacilityTypeCategoryCode::FORT,
    ::oo_2_0::FacilityTypeCategoryCode::FOXHOL,
    ::oo_2_0::FacilityTypeCategoryCode::FRGTER,
    ::oo_2_0::FacilityTypeCategoryCode::FRTFCN,
    ::oo_2_0::FacilityTypeCategoryCode::FSAAMM,
    ::oo_2_0::FacilityTypeCategoryCode::FSMAMM,
    ::oo_2_0::FacilityTypeCategoryCode::FSSAMM,
    ::oo_2_0::FacilityTypeCategoryCode::FSSTAM,
    ::oo_2_0::FacilityTypeCategoryCode::GASPFA,
    ::oo_2_0::FacilityTypeCategoryCode::GAT,
    ::oo_2_0::FacilityTypeCategoryCode::GVTBLD,
    ::oo_2_0::FacilityTypeCategoryCode::HAMLET,
    ::oo_2_0::FacilityTypeCategoryCode::HANGAR,
    ::oo_2_0::FacilityTypeCategoryCode::HARBOR,
    ::oo_2_0::FacilityTypeCategoryCode::HGHTCH,
    ::oo_2_0::FacilityTypeCategoryCode::HOUSE,
    ::oo_2_0::FacilityTypeCategoryCode::HPD,
    ::oo_2_0::FacilityTypeCategoryCode::HPT,
    ::oo_2_0::FacilityTypeCategoryCode::HQ,
    ::oo_2_0::FacilityTypeCategoryCode::HSP,
    ::oo_2_0::FacilityTypeCategoryCode::HSPFLD,
    ::oo_2_0::FacilityTypeCategoryCode::HSPNOS,
    ::oo_2_0::FacilityTypeCategoryCode::HUT,
    ::oo_2_0::FacilityTypeCategoryCode::IMPBED,
    ::oo_2_0::FacilityTypeCategoryCode::INDINS,
    ::oo_2_0::FacilityTypeCategoryCode::INSTAL,
    ::oo_2_0::FacilityTypeCategoryCode::INTCTR,
    ::oo_2_0::FacilityTypeCategoryCode::JCT,
    ::oo_2_0::FacilityTypeCategoryCode::JETTY,
    ::oo_2_0::FacilityTypeCategoryCode::LGRLPT,
    ::oo_2_0::FacilityTypeCategoryCode::LGTHSE,
    ::oo_2_0::FacilityTypeCategoryCode::LOADPL,
    ::oo_2_0::FacilityTypeCategoryCode::LOADPM,
    ::oo_2_0::FacilityTypeCategoryCode::MAINTF,
    ::oo_2_0::FacilityTypeCategoryCode::MBFSUB,
    ::oo_2_0::FacilityTypeCategoryCode::MEDSPT,
    ::oo_2_0::FacilityTypeCategoryCode::METFAC,
    ::oo_2_0::FacilityTypeCategoryCode::MF,
    ::oo_2_0::FacilityTypeCategoryCode::MFUMS,
    ::oo_2_0::FacilityTypeCategoryCode::MILOBS,
    ::oo_2_0::FacilityTypeCategoryCode::MINE,
    ::oo_2_0::FacilityTypeCategoryCode::MNCPLX,
    ::oo_2_0::FacilityTypeCategoryCode::MNINOS,
    ::oo_2_0::FacilityTypeCategoryCode::MNINUG,
    ::oo_2_0::FacilityTypeCategoryCode::MNINUW,
    ::oo_2_0::FacilityTypeCategoryCode::MNTCPT,
    ::oo_2_0::FacilityTypeCategoryCode::MONUM,
    ::oo_2_0::FacilityTypeCategoryCode::MSS,
    ::oo_2_0::FacilityTypeCategoryCode::MSSGRV,
    ::oo_2_0::FacilityTypeCategoryCode::MTFAAR,
    ::oo_2_0::FacilityTypeCategoryCode::MTFAIR,
    ::oo_2_0::FacilityTypeCategoryCode::MTFMVH,
    ::oo_2_0::FacilityTypeCategoryCode::MWY,
    ::oo_2_0::FacilityTypeCategoryCode::NAVAST,
    ::oo_2_0::FacilityTypeCategoryCode::NCLFAC,
    ::oo_2_0::FacilityTypeCategoryCode::NETWRK,
    ::oo_2_0::FacilityTypeCategoryCode::NKN,
    ::oo_2_0::FacilityTypeCategoryCode::NOS,
    ::oo_2_0::FacilityTypeCategoryCode::OBSP,
    ::oo_2_0::FacilityTypeCategoryCode::OBSTWR,
    ::oo_2_0::FacilityTypeCategoryCode::OFFICE,
    ::oo_2_0::FacilityTypeCategoryCode::OMNIST,
    ::oo_2_0::FacilityTypeCategoryCode::ORD,
    ::oo_2_0::FacilityTypeCategoryCode::PASTRM,
    ::oo_2_0::FacilityTypeCategoryCode::PCHREF,
    ::oo_2_0::FacilityTypeCategoryCode::PERSBR,
    ::oo_2_0::FacilityTypeCategoryCode::PIER,
    ::oo_2_0::FacilityTypeCategoryCode::PIPLIN,
    ::oo_2_0::FacilityTypeCategoryCode::PMPSTN,
    ::oo_2_0::FacilityTypeCategoryCode::POLPT,
    ::oo_2_0::FacilityTypeCategoryCode::POLSTA,
    ::oo_2_0::FacilityTypeCategoryCode::PORT,
    ::oo_2_0::FacilityTypeCategoryCode::POWARE,
    ::oo_2_0::FacilityTypeCategoryCode::POWCMP,
    ::oo_2_0::FacilityTypeCategoryCode::POWCPT,
    ::oo_2_0::FacilityTypeCategoryCode::PRCXAC,
    ::oo_2_0::FacilityTypeCategoryCode::PRCXCH,
    ::oo_2_0::FacilityTypeCategoryCode::PRCXGM,
    ::oo_2_0::FacilityTypeCategoryCode::PRCXMV,
    ::oo_2_0::FacilityTypeCategoryCode::PRCXPT,
    ::oo_2_0::FacilityTypeCategoryCode::PTL,
    ::oo_2_0::FacilityTypeCategoryCode::PWPLFF,
    ::oo_2_0::FacilityTypeCategoryCode::PWPLHL,
    ::oo_2_0::FacilityTypeCategoryCode::PWPLNC,
    ::oo_2_0::FacilityTypeCategoryCode::PWPLTH,
    ::oo_2_0::FacilityTypeCategoryCode::QUAY,
    ::oo_2_0::FacilityTypeCategoryCode::RAIL,
    ::oo_2_0::FacilityTypeCategoryCode::RAILHD,
    ::oo_2_0::FacilityTypeCategoryCode::RAILWY,
    ::oo_2_0::FacilityTypeCategoryCode::RDJNCT,
    ::oo_2_0::FacilityTypeCategoryCode::RDRHD,
    ::oo_2_0::FacilityTypeCategoryCode::RDRPST,
    ::oo_2_0::FacilityTypeCategoryCode::REFARE,
    ::oo_2_0::FacilityTypeCategoryCode::RELAY,
    ::oo_2_0::FacilityTypeCategoryCode::RELFAC,
    ::oo_2_0::FacilityTypeCategoryCode::RES,
    ::oo_2_0::FacilityTypeCategoryCode::REVETM,
    ::oo_2_0::FacilityTypeCategoryCode::RFAREP,
    ::oo_2_0::FacilityTypeCategoryCode::ROAD,
    ::oo_2_0::FacilityTypeCategoryCode::ROMPT,
    ::oo_2_0::FacilityTypeCategoryCode::ROWHSE,
    ::oo_2_0::FacilityTypeCategoryCode::RRRSPT,
    ::oo_2_0::FacilityTypeCategoryCode::RUI,
    ::oo_2_0::FacilityTypeCategoryCode::RWCRSS,
    ::oo_2_0::FacilityTypeCategoryCode::RWJNCT,
    ::oo_2_0::FacilityTypeCategoryCode::SCHOOL,
    ::oo_2_0::FacilityTypeCategoryCode::SENPST,
    ::oo_2_0::FacilityTypeCategoryCode::SHD,
    ::oo_2_0::FacilityTypeCategoryCode::SHLSUR,
    ::oo_2_0::FacilityTypeCategoryCode::SHLUND,
    ::oo_2_0::FacilityTypeCategoryCode::SHOP,
    ::oo_2_0::FacilityTypeCategoryCode::SHORAN,
    ::oo_2_0::FacilityTypeCategoryCode::SHYARD,
    ::oo_2_0::FacilityTypeCategoryCode::SITADR,
    ::oo_2_0::FacilityTypeCategoryCode::SITART,
    ::oo_2_0::FacilityTypeCategoryCode::SITEEW,
    ::oo_2_0::FacilityTypeCategoryCode::SITGSR,
    ::oo_2_0::FacilityTypeCategoryCode::SITLOG,
    ::oo_2_0::FacilityTypeCategoryCode::SITMLB,
    ::oo_2_0::FacilityTypeCategoryCode::SITRAD,
    ::oo_2_0::FacilityTypeCategoryCode::SITRFT,
    ::oo_2_0::FacilityTypeCategoryCode::SLPWAY,
    ::oo_2_0::FacilityTypeCategoryCode::SNSRFP,
    ::oo_2_0::FacilityTypeCategoryCode::SNVRDR,
    ::oo_2_0::FacilityTypeCategoryCode::SPTARE,
    ::oo_2_0::FacilityTypeCategoryCode::STN,
    ::oo_2_0::FacilityTypeCategoryCode::STP,
    ::oo_2_0::FacilityTypeCategoryCode::STSSML,
    ::oo_2_0::FacilityTypeCategoryCode::SUPDAM,
    ::oo_2_0::FacilityTypeCategoryCode::SUPDMP,
    ::oo_2_0::FacilityTypeCategoryCode::SUPPT,
    ::oo_2_0::FacilityTypeCategoryCode::SWGFAC,
    ::oo_2_0::FacilityTypeCategoryCode::TACAN,
    ::oo_2_0::FacilityTypeCategoryCode::TCH,
    ::oo_2_0::FacilityTypeCategoryCode::TOW,
    ::oo_2_0::FacilityTypeCategoryCode::TOWN,
    ::oo_2_0::FacilityTypeCategoryCode::TRAIL,
    ::oo_2_0::FacilityTypeCategoryCode::TRANSF,
    ::oo_2_0::FacilityTypeCategoryCode::TRFPST,
    ::oo_2_0::FacilityTypeCategoryCode::TUN,
    ::oo_2_0::FacilityTypeCategoryCode::TWFLAK,
    ::oo_2_0::FacilityTypeCategoryCode::TWNHAL,
    ::oo_2_0::FacilityTypeCategoryCode::TWTLTM,
    ::oo_2_0::FacilityTypeCategoryCode::URBANA,
    ::oo_2_0::FacilityTypeCategoryCode::VLLAGE,
    ::oo_2_0::FacilityTypeCategoryCode::VST,
    ::oo_2_0::FacilityTypeCategoryCode::WALL,
    ::oo_2_0::FacilityTypeCategoryCode::WAREHS,
    ::oo_2_0::FacilityTypeCategoryCode::WATSPL,
    ::oo_2_0::FacilityTypeCategoryCode::WML,
    ::oo_2_0::FacilityTypeCategoryCode::WRSHPL,
    ::oo_2_0::FacilityTypeCategoryCode::WSHFAC,
    ::oo_2_0::FacilityTypeCategoryCode::WSTPLE,
    ::oo_2_0::FacilityTypeCategoryCode::WTRFAC,
    ::oo_2_0::FacilityTypeCategoryCode::WTW,
    ::oo_2_0::FacilityTypeCategoryCode::XLC,
    ::oo_2_0::FacilityTypeCategoryCode::XRR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FacilityTypeCategoryCode >
  _xsd_FacilityTypeCategoryCode_type_factory_init (
    "FacilityTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FeatureCategoryCode
  //

  FeatureCategoryCode::
  FeatureCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FeatureCategoryCode_convert ();
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FeatureCategoryCode_convert ();
  }

  FeatureCategoryCode::
  FeatureCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FeatureCategoryCode_convert ();
  }

  FeatureCategoryCode* FeatureCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FeatureCategoryCode (*this, f, c);
  }

  FeatureCategoryCode::value FeatureCategoryCode::
  _xsd_FeatureCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FeatureCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FeatureCategoryCode_indexes_,
                      _xsd_FeatureCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_FeatureCategoryCode_indexes_ + 4 || _xsd_FeatureCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FeatureCategoryCode::
  _xsd_FeatureCategoryCode_literals_[4] =
  {
    "CF",
    "GF",
    "MF",
    "NOS"
  };

  const FeatureCategoryCode::value FeatureCategoryCode::
  _xsd_FeatureCategoryCode_indexes_[4] =
  {
    ::oo_2_0::FeatureCategoryCode::CF,
    ::oo_2_0::FeatureCategoryCode::GF,
    ::oo_2_0::FeatureCategoryCode::MF,
    ::oo_2_0::FeatureCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureCategoryCode >
  _xsd_FeatureCategoryCode_type_factory_init (
    "FeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FeatureTypeCategoryCode
  //

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FeatureTypeCategoryCode_convert ();
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FeatureTypeCategoryCode_convert ();
  }

  FeatureTypeCategoryCode::
  FeatureTypeCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FeatureTypeCategoryCode_convert ();
  }

  FeatureTypeCategoryCode* FeatureTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FeatureTypeCategoryCode (*this, f, c);
  }

  FeatureTypeCategoryCode::value FeatureTypeCategoryCode::
  _xsd_FeatureTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FeatureTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FeatureTypeCategoryCode_indexes_,
                      _xsd_FeatureTypeCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_FeatureTypeCategoryCode_indexes_ + 4 || _xsd_FeatureTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FeatureTypeCategoryCode::
  _xsd_FeatureTypeCategoryCode_literals_[4] =
  {
    "CF",
    "GF",
    "MF",
    "NOS"
  };

  const FeatureTypeCategoryCode::value FeatureTypeCategoryCode::
  _xsd_FeatureTypeCategoryCode_indexes_[4] =
  {
    ::oo_2_0::FeatureTypeCategoryCode::CF,
    ::oo_2_0::FeatureTypeCategoryCode::GF,
    ::oo_2_0::FeatureTypeCategoryCode::MF,
    ::oo_2_0::FeatureTypeCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureTypeCategoryCode >
  _xsd_FeatureTypeCategoryCode_type_factory_init (
    "FeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FeintIndicatorCode
  //

  FeintIndicatorCode::
  FeintIndicatorCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FeintIndicatorCode_convert ();
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FeintIndicatorCode_convert ();
  }

  FeintIndicatorCode::
  FeintIndicatorCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FeintIndicatorCode_convert ();
  }

  FeintIndicatorCode* FeintIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FeintIndicatorCode (*this, f, c);
  }

  FeintIndicatorCode::value FeintIndicatorCode::
  _xsd_FeintIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FeintIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FeintIndicatorCode_indexes_,
                      _xsd_FeintIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_FeintIndicatorCode_indexes_ + 2 || _xsd_FeintIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FeintIndicatorCode::
  _xsd_FeintIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const FeintIndicatorCode::value FeintIndicatorCode::
  _xsd_FeintIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::FeintIndicatorCode::NO,
    ::oo_2_0::FeintIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeintIndicatorCode >
  _xsd_FeintIndicatorCode_type_factory_init (
    "FeintIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FireCapabilityCategoryCode
  //

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FireCapabilityCategoryCode_convert ();
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FireCapabilityCategoryCode_convert ();
  }

  FireCapabilityCategoryCode::
  FireCapabilityCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FireCapabilityCategoryCode_convert ();
  }

  FireCapabilityCategoryCode* FireCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FireCapabilityCategoryCode (*this, f, c);
  }

  FireCapabilityCategoryCode::value FireCapabilityCategoryCode::
  _xsd_FireCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FireCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FireCapabilityCategoryCode_indexes_,
                      _xsd_FireCapabilityCategoryCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_FireCapabilityCategoryCode_indexes_ + 9 || _xsd_FireCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FireCapabilityCategoryCode::
  _xsd_FireCapabilityCategoryCode_literals_[9] =
  {
    "AIRAIR",
    "AIRGRD",
    "AIRSEA",
    "GRDAIR",
    "GRDGRD",
    "GRDSEA",
    "SEAAIR",
    "SEAGRD",
    "SEASEA"
  };

  const FireCapabilityCategoryCode::value FireCapabilityCategoryCode::
  _xsd_FireCapabilityCategoryCode_indexes_[9] =
  {
    ::oo_2_0::FireCapabilityCategoryCode::AIRAIR,
    ::oo_2_0::FireCapabilityCategoryCode::AIRGRD,
    ::oo_2_0::FireCapabilityCategoryCode::AIRSEA,
    ::oo_2_0::FireCapabilityCategoryCode::GRDAIR,
    ::oo_2_0::FireCapabilityCategoryCode::GRDGRD,
    ::oo_2_0::FireCapabilityCategoryCode::GRDSEA,
    ::oo_2_0::FireCapabilityCategoryCode::SEAAIR,
    ::oo_2_0::FireCapabilityCategoryCode::SEAGRD,
    ::oo_2_0::FireCapabilityCategoryCode::SEASEA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FireCapabilityCategoryCode >
  _xsd_FireCapabilityCategoryCode_type_factory_init (
    "FireCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FireCapabilityDescriptorCode
  //

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FireCapabilityDescriptorCode_convert ();
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FireCapabilityDescriptorCode_convert ();
  }

  FireCapabilityDescriptorCode::
  FireCapabilityDescriptorCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FireCapabilityDescriptorCode_convert ();
  }

  FireCapabilityDescriptorCode* FireCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FireCapabilityDescriptorCode (*this, f, c);
  }

  FireCapabilityDescriptorCode::value FireCapabilityDescriptorCode::
  _xsd_FireCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FireCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FireCapabilityDescriptorCode_indexes_,
                      _xsd_FireCapabilityDescriptorCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_FireCapabilityDescriptorCode_indexes_ + 6 || _xsd_FireCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FireCapabilityDescriptorCode::
  _xsd_FireCapabilityDescriptorCode_literals_[6] =
  {
    "BRTFIR",
    "MRANGE",
    "MRATFR",
    "NRANGE",
    "SFTDST",
    "SSTRTF"
  };

  const FireCapabilityDescriptorCode::value FireCapabilityDescriptorCode::
  _xsd_FireCapabilityDescriptorCode_indexes_[6] =
  {
    ::oo_2_0::FireCapabilityDescriptorCode::BRTFIR,
    ::oo_2_0::FireCapabilityDescriptorCode::MRANGE,
    ::oo_2_0::FireCapabilityDescriptorCode::MRATFR,
    ::oo_2_0::FireCapabilityDescriptorCode::NRANGE,
    ::oo_2_0::FireCapabilityDescriptorCode::SFTDST,
    ::oo_2_0::FireCapabilityDescriptorCode::SSTRTF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FireCapabilityDescriptorCode >
  _xsd_FireCapabilityDescriptorCode_type_factory_init (
    "FireCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // FireCapabilityWeaponTypeCode
  //

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_FireCapabilityWeaponTypeCode_convert ();
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_FireCapabilityWeaponTypeCode_convert ();
  }

  FireCapabilityWeaponTypeCode::
  FireCapabilityWeaponTypeCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_FireCapabilityWeaponTypeCode_convert ();
  }

  FireCapabilityWeaponTypeCode* FireCapabilityWeaponTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FireCapabilityWeaponTypeCode (*this, f, c);
  }

  FireCapabilityWeaponTypeCode::value FireCapabilityWeaponTypeCode::
  _xsd_FireCapabilityWeaponTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FireCapabilityWeaponTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FireCapabilityWeaponTypeCode_indexes_,
                      _xsd_FireCapabilityWeaponTypeCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_FireCapabilityWeaponTypeCode_indexes_ + 6 || _xsd_FireCapabilityWeaponTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FireCapabilityWeaponTypeCode::
  _xsd_FireCapabilityWeaponTypeCode_literals_[6] =
  {
    "CONV",
    "DUAL",
    "NCC",
    "NKN",
    "NOS",
    "NUC"
  };

  const FireCapabilityWeaponTypeCode::value FireCapabilityWeaponTypeCode::
  _xsd_FireCapabilityWeaponTypeCode_indexes_[6] =
  {
    ::oo_2_0::FireCapabilityWeaponTypeCode::CONV,
    ::oo_2_0::FireCapabilityWeaponTypeCode::DUAL,
    ::oo_2_0::FireCapabilityWeaponTypeCode::NCC,
    ::oo_2_0::FireCapabilityWeaponTypeCode::NKN,
    ::oo_2_0::FireCapabilityWeaponTypeCode::NOS,
    ::oo_2_0::FireCapabilityWeaponTypeCode::NUC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FireCapabilityWeaponTypeCode >
  _xsd_FireCapabilityWeaponTypeCode_type_factory_init (
    "FireCapabilityWeaponTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GenderCode
  //

  GenderCode::
  GenderCode (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GenderCode_convert ();
  }

  GenderCode::
  GenderCode (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GenderCode_convert ();
  }

  GenderCode::
  GenderCode (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GenderCode_convert ();
  }

  GenderCode* GenderCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GenderCode (*this, f, c);
  }

  GenderCode::value GenderCode::
  _xsd_GenderCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GenderCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GenderCode_indexes_,
                      _xsd_GenderCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_GenderCode_indexes_ + 3 || _xsd_GenderCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GenderCode::
  _xsd_GenderCode_literals_[3] =
  {
    "FEMALE",
    "MALE",
    "NKN"
  };

  const GenderCode::value GenderCode::
  _xsd_GenderCode_indexes_[3] =
  {
    ::oo_2_0::GenderCode::FEMALE,
    ::oo_2_0::GenderCode::MALE,
    ::oo_2_0::GenderCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GenderCode >
  _xsd_GenderCode_type_factory_init (
    "GenderCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureBottomHardnessCode
  //

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureBottomHardnessCode_convert ();
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureBottomHardnessCode_convert ();
  }

  GeographicFeatureBottomHardnessCode::
  GeographicFeatureBottomHardnessCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureBottomHardnessCode_convert ();
  }

  GeographicFeatureBottomHardnessCode* GeographicFeatureBottomHardnessCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureBottomHardnessCode (*this, f, c);
  }

  GeographicFeatureBottomHardnessCode::value GeographicFeatureBottomHardnessCode::
  _xsd_GeographicFeatureBottomHardnessCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureBottomHardnessCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureBottomHardnessCode_indexes_,
                      _xsd_GeographicFeatureBottomHardnessCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureBottomHardnessCode_indexes_ + 6 || _xsd_GeographicFeatureBottomHardnessCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureBottomHardnessCode::
  _xsd_GeographicFeatureBottomHardnessCode_literals_[6] =
  {
    "ARMELB",
    "ARMKNU",
    "ARMPLM",
    "ARMSHO",
    "ARMWRS",
    "NOPENT"
  };

  const GeographicFeatureBottomHardnessCode::value GeographicFeatureBottomHardnessCode::
  _xsd_GeographicFeatureBottomHardnessCode_indexes_[6] =
  {
    ::oo_2_0::GeographicFeatureBottomHardnessCode::ARMELB,
    ::oo_2_0::GeographicFeatureBottomHardnessCode::ARMKNU,
    ::oo_2_0::GeographicFeatureBottomHardnessCode::ARMPLM,
    ::oo_2_0::GeographicFeatureBottomHardnessCode::ARMSHO,
    ::oo_2_0::GeographicFeatureBottomHardnessCode::ARMWRS,
    ::oo_2_0::GeographicFeatureBottomHardnessCode::NOPENT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureBottomHardnessCode >
  _xsd_GeographicFeatureBottomHardnessCode_type_factory_init (
    "GeographicFeatureBottomHardnessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureSolidSurfaceCompositionCode
  //

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureSolidSurfaceCompositionCode_convert ();
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureSolidSurfaceCompositionCode_convert ();
  }

  GeographicFeatureSolidSurfaceCompositionCode::
  GeographicFeatureSolidSurfaceCompositionCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureSolidSurfaceCompositionCode_convert ();
  }

  GeographicFeatureSolidSurfaceCompositionCode* GeographicFeatureSolidSurfaceCompositionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureSolidSurfaceCompositionCode (*this, f, c);
  }

  GeographicFeatureSolidSurfaceCompositionCode::value GeographicFeatureSolidSurfaceCompositionCode::
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureSolidSurfaceCompositionCode_indexes_,
                      _xsd_GeographicFeatureSolidSurfaceCompositionCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureSolidSurfaceCompositionCode_indexes_ + 7 || _xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureSolidSurfaceCompositionCode::
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_[7] =
  {
    "BDROCK",
    "CORAL",
    "EARTH",
    "ICE",
    "NOS",
    "SAND",
    "SNOW"
  };

  const GeographicFeatureSolidSurfaceCompositionCode::value GeographicFeatureSolidSurfaceCompositionCode::
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_indexes_[7] =
  {
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::BDROCK,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::CORAL,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::EARTH,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::ICE,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::NOS,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::SAND,
    ::oo_2_0::GeographicFeatureSolidSurfaceCompositionCode::SNOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureSolidSurfaceCompositionCode >
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_type_factory_init (
    "GeographicFeatureSolidSurfaceCompositionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureStatusCategoryCode
  //

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureStatusCategoryCode_convert ();
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureStatusCategoryCode_convert ();
  }

  GeographicFeatureStatusCategoryCode::
  GeographicFeatureStatusCategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureStatusCategoryCode_convert ();
  }

  GeographicFeatureStatusCategoryCode* GeographicFeatureStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureStatusCategoryCode (*this, f, c);
  }

  GeographicFeatureStatusCategoryCode::value GeographicFeatureStatusCategoryCode::
  _xsd_GeographicFeatureStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureStatusCategoryCode_indexes_,
                      _xsd_GeographicFeatureStatusCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureStatusCategoryCode_indexes_ + 3 || _xsd_GeographicFeatureStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureStatusCategoryCode::
  _xsd_GeographicFeatureStatusCategoryCode_literals_[3] =
  {
    "LQDBDY",
    "LQDSRF",
    "SLDSRF"
  };

  const GeographicFeatureStatusCategoryCode::value GeographicFeatureStatusCategoryCode::
  _xsd_GeographicFeatureStatusCategoryCode_indexes_[3] =
  {
    ::oo_2_0::GeographicFeatureStatusCategoryCode::LQDBDY,
    ::oo_2_0::GeographicFeatureStatusCategoryCode::LQDSRF,
    ::oo_2_0::GeographicFeatureStatusCategoryCode::SLDSRF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureStatusCategoryCode >
  _xsd_GeographicFeatureStatusCategoryCode_type_factory_init (
    "GeographicFeatureStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureStatusSurfaceRecirculationIndicatorCode
  //

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_convert ();
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const ::xercesc::DOMAttr& a,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_convert ();
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  GeographicFeatureStatusSurfaceRecirculationIndicatorCode (const ::std::string& s,
                                                            const ::xercesc::DOMElement* e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_convert ();
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode* GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureStatusSurfaceRecirculationIndicatorCode (*this, f, c);
  }

  GeographicFeatureStatusSurfaceRecirculationIndicatorCode::value GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_indexes_,
                      _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_indexes_ + 2 || _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const GeographicFeatureStatusSurfaceRecirculationIndicatorCode::value GeographicFeatureStatusSurfaceRecirculationIndicatorCode::
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::GeographicFeatureStatusSurfaceRecirculationIndicatorCode::NO,
    ::oo_2_0::GeographicFeatureStatusSurfaceRecirculationIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureStatusSurfaceRecirculationIndicatorCode >
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_type_factory_init (
    "GeographicFeatureStatusSurfaceRecirculationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureSurfaceCategoryCode
  //

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureSurfaceCategoryCode_convert ();
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureSurfaceCategoryCode_convert ();
  }

  GeographicFeatureSurfaceCategoryCode::
  GeographicFeatureSurfaceCategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureSurfaceCategoryCode_convert ();
  }

  GeographicFeatureSurfaceCategoryCode* GeographicFeatureSurfaceCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureSurfaceCategoryCode (*this, f, c);
  }

  GeographicFeatureSurfaceCategoryCode::value GeographicFeatureSurfaceCategoryCode::
  _xsd_GeographicFeatureSurfaceCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureSurfaceCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureSurfaceCategoryCode_indexes_,
                      _xsd_GeographicFeatureSurfaceCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureSurfaceCategoryCode_indexes_ + 3 || _xsd_GeographicFeatureSurfaceCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureSurfaceCategoryCode::
  _xsd_GeographicFeatureSurfaceCategoryCode_literals_[3] =
  {
    "LQDSRF",
    "NOS",
    "SLDSRF"
  };

  const GeographicFeatureSurfaceCategoryCode::value GeographicFeatureSurfaceCategoryCode::
  _xsd_GeographicFeatureSurfaceCategoryCode_indexes_[3] =
  {
    ::oo_2_0::GeographicFeatureSurfaceCategoryCode::LQDSRF,
    ::oo_2_0::GeographicFeatureSurfaceCategoryCode::NOS,
    ::oo_2_0::GeographicFeatureSurfaceCategoryCode::SLDSRF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureSurfaceCategoryCode >
  _xsd_GeographicFeatureSurfaceCategoryCode_type_factory_init (
    "GeographicFeatureSurfaceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureTerrainCode
  //

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureTerrainCode_convert ();
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureTerrainCode_convert ();
  }

  GeographicFeatureTerrainCode::
  GeographicFeatureTerrainCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureTerrainCode_convert ();
  }

  GeographicFeatureTerrainCode* GeographicFeatureTerrainCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureTerrainCode (*this, f, c);
  }

  GeographicFeatureTerrainCode::value GeographicFeatureTerrainCode::
  _xsd_GeographicFeatureTerrainCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureTerrainCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureTerrainCode_indexes_,
                      _xsd_GeographicFeatureTerrainCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureTerrainCode_indexes_ + 7 || _xsd_GeographicFeatureTerrainCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureTerrainCode::
  _xsd_GeographicFeatureTerrainCode_literals_[7] =
  {
    "FLAT",
    "HILLY",
    "MOUNTS",
    "NKN",
    "NOS",
    "UNDULT",
    "URBAN"
  };

  const GeographicFeatureTerrainCode::value GeographicFeatureTerrainCode::
  _xsd_GeographicFeatureTerrainCode_indexes_[7] =
  {
    ::oo_2_0::GeographicFeatureTerrainCode::FLAT,
    ::oo_2_0::GeographicFeatureTerrainCode::HILLY,
    ::oo_2_0::GeographicFeatureTerrainCode::MOUNTS,
    ::oo_2_0::GeographicFeatureTerrainCode::NKN,
    ::oo_2_0::GeographicFeatureTerrainCode::NOS,
    ::oo_2_0::GeographicFeatureTerrainCode::UNDULT,
    ::oo_2_0::GeographicFeatureTerrainCode::URBAN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureTerrainCode >
  _xsd_GeographicFeatureTerrainCode_type_factory_init (
    "GeographicFeatureTerrainCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureTypeCategoryCode
  //

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureTypeCategoryCode_convert ();
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureTypeCategoryCode_convert ();
  }

  GeographicFeatureTypeCategoryCode::
  GeographicFeatureTypeCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureTypeCategoryCode_convert ();
  }

  GeographicFeatureTypeCategoryCode* GeographicFeatureTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureTypeCategoryCode (*this, f, c);
  }

  GeographicFeatureTypeCategoryCode::value GeographicFeatureTypeCategoryCode::
  _xsd_GeographicFeatureTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureTypeCategoryCode_indexes_,
                      _xsd_GeographicFeatureTypeCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureTypeCategoryCode_indexes_ + 8 || _xsd_GeographicFeatureTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureTypeCategoryCode::
  _xsd_GeographicFeatureTypeCategoryCode_literals_[8] =
  {
    "CONTNT",
    "CSTLHY",
    "INLNDW",
    "LNDFRM",
    "NKN",
    "NOS",
    "SNOWIC",
    "WETLND"
  };

  const GeographicFeatureTypeCategoryCode::value GeographicFeatureTypeCategoryCode::
  _xsd_GeographicFeatureTypeCategoryCode_indexes_[8] =
  {
    ::oo_2_0::GeographicFeatureTypeCategoryCode::CONTNT,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::CSTLHY,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::INLNDW,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::LNDFRM,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::NKN,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::NOS,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::SNOWIC,
    ::oo_2_0::GeographicFeatureTypeCategoryCode::WETLND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureTypeCategoryCode >
  _xsd_GeographicFeatureTypeCategoryCode_type_factory_init (
    "GeographicFeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeographicFeatureTypeSubcategoryCode
  //

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeographicFeatureTypeSubcategoryCode_convert ();
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeographicFeatureTypeSubcategoryCode_convert ();
  }

  GeographicFeatureTypeSubcategoryCode::
  GeographicFeatureTypeSubcategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeographicFeatureTypeSubcategoryCode_convert ();
  }

  GeographicFeatureTypeSubcategoryCode* GeographicFeatureTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeographicFeatureTypeSubcategoryCode (*this, f, c);
  }

  GeographicFeatureTypeSubcategoryCode::value GeographicFeatureTypeSubcategoryCode::
  _xsd_GeographicFeatureTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeographicFeatureTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeographicFeatureTypeSubcategoryCode_indexes_,
                      _xsd_GeographicFeatureTypeSubcategoryCode_indexes_ + 69,
                      *this,
                      c));

    if (i == _xsd_GeographicFeatureTypeSubcategoryCode_indexes_ + 69 || _xsd_GeographicFeatureTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeographicFeatureTypeSubcategoryCode::
  _xsd_GeographicFeatureTypeSubcategoryCode_literals_[69] =
  {
    "BCKSHR",
    "BEACH",
    "BLUFF",
    "BOG",
    "CAVE",
    "CAY",
    "CHANEL",
    "CRVCEC",
    "CSTLNE",
    "CUT",
    "DPRSSN",
    "DRYGAP",
    "EMBANK",
    "ESKER",
    "FAN",
    "FAULT",
    "FLDDAR",
    "FLUME",
    "FORD",
    "FRESHR",
    "GEOTHR",
    "GLACER",
    "GULLY",
    "HILL",
    "HRBRNT",
    "HUMOCK",
    "ICECLF",
    "ICEPKN",
    "ICESHL",
    "INLNDS",
    "ISLAND",
    "LAGOON",
    "LEDGE",
    "LKEPND",
    "LNDSBJ",
    "LNDSLD",
    "LRGRCK",
    "MARSH",
    "MNTPSS",
    "MORANE",
    "MOUNTN",
    "NRSHRE",
    "PCKICE",
    "PINGO",
    "PLRICE",
    "RAPIDS",
    "RCKSTR",
    "REEF",
    "ROCK",
    "RVRBNK",
    "RVRSTR",
    "RVRSTV",
    "SEBKHA",
    "SHRLNE",
    "SLTPAN",
    "SNDDUN",
    "SNGSSS",
    "SNWICE",
    "SPRING",
    "SWAMP",
    "TUNDRA",
    "UNDRGW",
    "UNDRML",
    "UNDRSR",
    "VALLEY",
    "VLCNOD",
    "VOLCNO",
    "WATER",
    "WATRFL"
  };

  const GeographicFeatureTypeSubcategoryCode::value GeographicFeatureTypeSubcategoryCode::
  _xsd_GeographicFeatureTypeSubcategoryCode_indexes_[69] =
  {
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::BCKSHR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::BEACH,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::BLUFF,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::BOG,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CAVE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CAY,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CHANEL,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CRVCEC,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CSTLNE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::CUT,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::DPRSSN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::DRYGAP,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::EMBANK,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ESKER,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FAN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FAULT,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FLDDAR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FLUME,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FORD,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::FRESHR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::GEOTHR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::GLACER,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::GULLY,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::HILL,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::HRBRNT,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::HUMOCK,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ICECLF,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ICEPKN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ICESHL,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::INLNDS,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ISLAND,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LAGOON,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LEDGE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LKEPND,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LNDSBJ,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LNDSLD,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::LRGRCK,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::MARSH,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::MNTPSS,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::MORANE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::MOUNTN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::NRSHRE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::PCKICE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::PINGO,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::PLRICE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::RAPIDS,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::RCKSTR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::REEF,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::ROCK,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::RVRBNK,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::RVRSTR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::RVRSTV,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SEBKHA,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SHRLNE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SLTPAN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SNDDUN,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SNGSSS,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SNWICE,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SPRING,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::SWAMP,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::TUNDRA,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::UNDRGW,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::UNDRML,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::UNDRSR,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::VALLEY,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::VLCNOD,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::VOLCNO,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::WATER,
    ::oo_2_0::GeographicFeatureTypeSubcategoryCode::WATRFL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeographicFeatureTypeSubcategoryCode >
  _xsd_GeographicFeatureTypeSubcategoryCode_type_factory_init (
    "GeographicFeatureTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GeometricVolumeCategoryCode
  //

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GeometricVolumeCategoryCode_convert ();
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GeometricVolumeCategoryCode_convert ();
  }

  GeometricVolumeCategoryCode::
  GeometricVolumeCategoryCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GeometricVolumeCategoryCode_convert ();
  }

  GeometricVolumeCategoryCode* GeometricVolumeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GeometricVolumeCategoryCode (*this, f, c);
  }

  GeometricVolumeCategoryCode::value GeometricVolumeCategoryCode::
  _xsd_GeometricVolumeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GeometricVolumeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GeometricVolumeCategoryCode_indexes_,
                      _xsd_GeometricVolumeCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_GeometricVolumeCategoryCode_indexes_ + 3 || _xsd_GeometricVolumeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GeometricVolumeCategoryCode::
  _xsd_GeometricVolumeCategoryCode_literals_[3] =
  {
    "CN",
    "SPHVOL",
    "SURVOL"
  };

  const GeometricVolumeCategoryCode::value GeometricVolumeCategoryCode::
  _xsd_GeometricVolumeCategoryCode_indexes_[3] =
  {
    ::oo_2_0::GeometricVolumeCategoryCode::CN,
    ::oo_2_0::GeometricVolumeCategoryCode::SPHVOL,
    ::oo_2_0::GeometricVolumeCategoryCode::SURVOL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GeometricVolumeCategoryCode >
  _xsd_GeometricVolumeCategoryCode_type_factory_init (
    "GeometricVolumeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GovernmentOrganisationTypeCategoryCode
  //

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GovernmentOrganisationTypeCategoryCode_convert ();
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GovernmentOrganisationTypeCategoryCode_convert ();
  }

  GovernmentOrganisationTypeCategoryCode::
  GovernmentOrganisationTypeCategoryCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GovernmentOrganisationTypeCategoryCode_convert ();
  }

  GovernmentOrganisationTypeCategoryCode* GovernmentOrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GovernmentOrganisationTypeCategoryCode (*this, f, c);
  }

  GovernmentOrganisationTypeCategoryCode::value GovernmentOrganisationTypeCategoryCode::
  _xsd_GovernmentOrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GovernmentOrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GovernmentOrganisationTypeCategoryCode_indexes_,
                      _xsd_GovernmentOrganisationTypeCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_GovernmentOrganisationTypeCategoryCode_indexes_ + 5 || _xsd_GovernmentOrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GovernmentOrganisationTypeCategoryCode::
  _xsd_GovernmentOrganisationTypeCategoryCode_literals_[5] =
  {
    "INTCIV",
    "INTCMI",
    "MILORG",
    "NATCIV",
    "NOS"
  };

  const GovernmentOrganisationTypeCategoryCode::value GovernmentOrganisationTypeCategoryCode::
  _xsd_GovernmentOrganisationTypeCategoryCode_indexes_[5] =
  {
    ::oo_2_0::GovernmentOrganisationTypeCategoryCode::INTCIV,
    ::oo_2_0::GovernmentOrganisationTypeCategoryCode::INTCMI,
    ::oo_2_0::GovernmentOrganisationTypeCategoryCode::MILORG,
    ::oo_2_0::GovernmentOrganisationTypeCategoryCode::NATCIV,
    ::oo_2_0::GovernmentOrganisationTypeCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GovernmentOrganisationTypeCategoryCode >
  _xsd_GovernmentOrganisationTypeCategoryCode_type_factory_init (
    "GovernmentOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GroupCharacteristicAgeGroupCode
  //

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GroupCharacteristicAgeGroupCode_convert ();
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GroupCharacteristicAgeGroupCode_convert ();
  }

  GroupCharacteristicAgeGroupCode::
  GroupCharacteristicAgeGroupCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GroupCharacteristicAgeGroupCode_convert ();
  }

  GroupCharacteristicAgeGroupCode* GroupCharacteristicAgeGroupCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GroupCharacteristicAgeGroupCode (*this, f, c);
  }

  GroupCharacteristicAgeGroupCode::value GroupCharacteristicAgeGroupCode::
  _xsd_GroupCharacteristicAgeGroupCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GroupCharacteristicAgeGroupCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GroupCharacteristicAgeGroupCode_indexes_,
                      _xsd_GroupCharacteristicAgeGroupCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_GroupCharacteristicAgeGroupCode_indexes_ + 5 || _xsd_GroupCharacteristicAgeGroupCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GroupCharacteristicAgeGroupCode::
  _xsd_GroupCharacteristicAgeGroupCode_literals_[5] =
  {
    "ADULT",
    "CHILD",
    "ELDRLY",
    "MIXED",
    "NKN"
  };

  const GroupCharacteristicAgeGroupCode::value GroupCharacteristicAgeGroupCode::
  _xsd_GroupCharacteristicAgeGroupCode_indexes_[5] =
  {
    ::oo_2_0::GroupCharacteristicAgeGroupCode::ADULT,
    ::oo_2_0::GroupCharacteristicAgeGroupCode::CHILD,
    ::oo_2_0::GroupCharacteristicAgeGroupCode::ELDRLY,
    ::oo_2_0::GroupCharacteristicAgeGroupCode::MIXED,
    ::oo_2_0::GroupCharacteristicAgeGroupCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupCharacteristicAgeGroupCode >
  _xsd_GroupCharacteristicAgeGroupCode_type_factory_init (
    "GroupCharacteristicAgeGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GroupCharacteristicMaladyCode
  //

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GroupCharacteristicMaladyCode_convert ();
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GroupCharacteristicMaladyCode_convert ();
  }

  GroupCharacteristicMaladyCode::
  GroupCharacteristicMaladyCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GroupCharacteristicMaladyCode_convert ();
  }

  GroupCharacteristicMaladyCode* GroupCharacteristicMaladyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GroupCharacteristicMaladyCode (*this, f, c);
  }

  GroupCharacteristicMaladyCode::value GroupCharacteristicMaladyCode::
  _xsd_GroupCharacteristicMaladyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GroupCharacteristicMaladyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GroupCharacteristicMaladyCode_indexes_,
                      _xsd_GroupCharacteristicMaladyCode_indexes_ + 107,
                      *this,
                      c));

    if (i == _xsd_GroupCharacteristicMaladyCode_indexes_ + 107 || _xsd_GroupCharacteristicMaladyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GroupCharacteristicMaladyCode::
  _xsd_GroupCharacteristicMaladyCode_literals_[107] =
  {
    "AFRTRP",
    "AIDS",
    "AMBDYS",
    "ANTHRX",
    "ANTMRS",
    "ARBVRS",
    "BOTULM",
    "BRUCLS",
    "BURULI",
    "CAMPLB",
    "CHAGAS",
    "CHANCR",
    "CHCKPX",
    "CHLMDA",
    "CHOLRA",
    "COCCID",
    "CROUP",
    "CRYPTS",
    "CYCLSP",
    "DENGUE",
    "DIPTHR",
    "DONOVA",
    "DRACUN",
    "ECOLI",
    "EHRLCH",
    "ENCPHL",
    "ERYSPL",
    "FILARS",
    "GASTRE",
    "GIARDS",
    "GONORH",
    "HINFLZ",
    "HANTAV",
    "HEMRHG",
    "HEPATA",
    "HEPATB",
    "HEPATC",
    "HIV",
    "HMNMPX",
    "HYDATD",
    "INFENT",
    "INFLUN",
    "LEGION",
    "LSHMNA",
    "LSHMNC",
    "LSHMNM",
    "LSHMNV",
    "LEPRSY",
    "LEPTOS",
    "LISTRS",
    "LYME",
    "LYMPHG",
    "MALARA",
    "MEASLS",
    "MENING",
    "MENNGE",
    "MENNGO",
    "MENNGP",
    "MNNGOC",
    "MUMPS",
    "ORNTHS",
    "PRTPHY",
    "PRTUSS",
    "PLAGUE",
    "PNEUMO",
    "POLIO",
    "PUERPL",
    "QFEVER",
    "RABIES",
    "RLPSNG",
    "RHEUMA",
    "RIFTVF",
    "RCKYMT",
    "ROSSRV",
    "RUBELA",
    "RUBELC",
    "SALMNL",
    "SEPTCM",
    "SCRLET",
    "SCHSTO",
    "SARS",
    "SXLTRN",
    "SHGLLS",
    "SMLLPX",
    "STREPT",
    "SYPHLA",
    "SYPHLC",
    "SYPHLE",
    "SYPHLL",
    "SYPHLP",
    "TETANS",
    "TOXSHK",
    "TOXPLS",
    "TRNSSP",
    "TRCHNS",
    "TRYPNS",
    "TUBERC",
    "TULARM",
    "TYPHOD",
    "TYPHUS",
    "URTHRT",
    "VARCLL",
    "VRHAEM",
    "WTRBRN",
    "YELLWF",
    "YERSNS",
    "NOS"
  };

  const GroupCharacteristicMaladyCode::value GroupCharacteristicMaladyCode::
  _xsd_GroupCharacteristicMaladyCode_indexes_[107] =
  {
    ::oo_2_0::GroupCharacteristicMaladyCode::AFRTRP,
    ::oo_2_0::GroupCharacteristicMaladyCode::AIDS,
    ::oo_2_0::GroupCharacteristicMaladyCode::AMBDYS,
    ::oo_2_0::GroupCharacteristicMaladyCode::ANTHRX,
    ::oo_2_0::GroupCharacteristicMaladyCode::ANTMRS,
    ::oo_2_0::GroupCharacteristicMaladyCode::ARBVRS,
    ::oo_2_0::GroupCharacteristicMaladyCode::BOTULM,
    ::oo_2_0::GroupCharacteristicMaladyCode::BRUCLS,
    ::oo_2_0::GroupCharacteristicMaladyCode::BURULI,
    ::oo_2_0::GroupCharacteristicMaladyCode::CAMPLB,
    ::oo_2_0::GroupCharacteristicMaladyCode::CHAGAS,
    ::oo_2_0::GroupCharacteristicMaladyCode::CHANCR,
    ::oo_2_0::GroupCharacteristicMaladyCode::CHCKPX,
    ::oo_2_0::GroupCharacteristicMaladyCode::CHLMDA,
    ::oo_2_0::GroupCharacteristicMaladyCode::CHOLRA,
    ::oo_2_0::GroupCharacteristicMaladyCode::COCCID,
    ::oo_2_0::GroupCharacteristicMaladyCode::CROUP,
    ::oo_2_0::GroupCharacteristicMaladyCode::CRYPTS,
    ::oo_2_0::GroupCharacteristicMaladyCode::CYCLSP,
    ::oo_2_0::GroupCharacteristicMaladyCode::DENGUE,
    ::oo_2_0::GroupCharacteristicMaladyCode::DIPTHR,
    ::oo_2_0::GroupCharacteristicMaladyCode::DONOVA,
    ::oo_2_0::GroupCharacteristicMaladyCode::DRACUN,
    ::oo_2_0::GroupCharacteristicMaladyCode::ECOLI,
    ::oo_2_0::GroupCharacteristicMaladyCode::EHRLCH,
    ::oo_2_0::GroupCharacteristicMaladyCode::ENCPHL,
    ::oo_2_0::GroupCharacteristicMaladyCode::ERYSPL,
    ::oo_2_0::GroupCharacteristicMaladyCode::FILARS,
    ::oo_2_0::GroupCharacteristicMaladyCode::GASTRE,
    ::oo_2_0::GroupCharacteristicMaladyCode::GIARDS,
    ::oo_2_0::GroupCharacteristicMaladyCode::GONORH,
    ::oo_2_0::GroupCharacteristicMaladyCode::HANTAV,
    ::oo_2_0::GroupCharacteristicMaladyCode::HEMRHG,
    ::oo_2_0::GroupCharacteristicMaladyCode::HEPATA,
    ::oo_2_0::GroupCharacteristicMaladyCode::HEPATB,
    ::oo_2_0::GroupCharacteristicMaladyCode::HEPATC,
    ::oo_2_0::GroupCharacteristicMaladyCode::HINFLZ,
    ::oo_2_0::GroupCharacteristicMaladyCode::HIV,
    ::oo_2_0::GroupCharacteristicMaladyCode::HMNMPX,
    ::oo_2_0::GroupCharacteristicMaladyCode::HYDATD,
    ::oo_2_0::GroupCharacteristicMaladyCode::INFENT,
    ::oo_2_0::GroupCharacteristicMaladyCode::INFLUN,
    ::oo_2_0::GroupCharacteristicMaladyCode::LEGION,
    ::oo_2_0::GroupCharacteristicMaladyCode::LEPRSY,
    ::oo_2_0::GroupCharacteristicMaladyCode::LEPTOS,
    ::oo_2_0::GroupCharacteristicMaladyCode::LISTRS,
    ::oo_2_0::GroupCharacteristicMaladyCode::LSHMNA,
    ::oo_2_0::GroupCharacteristicMaladyCode::LSHMNC,
    ::oo_2_0::GroupCharacteristicMaladyCode::LSHMNM,
    ::oo_2_0::GroupCharacteristicMaladyCode::LSHMNV,
    ::oo_2_0::GroupCharacteristicMaladyCode::LYME,
    ::oo_2_0::GroupCharacteristicMaladyCode::LYMPHG,
    ::oo_2_0::GroupCharacteristicMaladyCode::MALARA,
    ::oo_2_0::GroupCharacteristicMaladyCode::MEASLS,
    ::oo_2_0::GroupCharacteristicMaladyCode::MENING,
    ::oo_2_0::GroupCharacteristicMaladyCode::MENNGE,
    ::oo_2_0::GroupCharacteristicMaladyCode::MENNGO,
    ::oo_2_0::GroupCharacteristicMaladyCode::MENNGP,
    ::oo_2_0::GroupCharacteristicMaladyCode::MNNGOC,
    ::oo_2_0::GroupCharacteristicMaladyCode::MUMPS,
    ::oo_2_0::GroupCharacteristicMaladyCode::NOS,
    ::oo_2_0::GroupCharacteristicMaladyCode::ORNTHS,
    ::oo_2_0::GroupCharacteristicMaladyCode::PLAGUE,
    ::oo_2_0::GroupCharacteristicMaladyCode::PNEUMO,
    ::oo_2_0::GroupCharacteristicMaladyCode::POLIO,
    ::oo_2_0::GroupCharacteristicMaladyCode::PRTPHY,
    ::oo_2_0::GroupCharacteristicMaladyCode::PRTUSS,
    ::oo_2_0::GroupCharacteristicMaladyCode::PUERPL,
    ::oo_2_0::GroupCharacteristicMaladyCode::QFEVER,
    ::oo_2_0::GroupCharacteristicMaladyCode::RABIES,
    ::oo_2_0::GroupCharacteristicMaladyCode::RCKYMT,
    ::oo_2_0::GroupCharacteristicMaladyCode::RHEUMA,
    ::oo_2_0::GroupCharacteristicMaladyCode::RIFTVF,
    ::oo_2_0::GroupCharacteristicMaladyCode::RLPSNG,
    ::oo_2_0::GroupCharacteristicMaladyCode::ROSSRV,
    ::oo_2_0::GroupCharacteristicMaladyCode::RUBELA,
    ::oo_2_0::GroupCharacteristicMaladyCode::RUBELC,
    ::oo_2_0::GroupCharacteristicMaladyCode::SALMNL,
    ::oo_2_0::GroupCharacteristicMaladyCode::SARS,
    ::oo_2_0::GroupCharacteristicMaladyCode::SCHSTO,
    ::oo_2_0::GroupCharacteristicMaladyCode::SCRLET,
    ::oo_2_0::GroupCharacteristicMaladyCode::SEPTCM,
    ::oo_2_0::GroupCharacteristicMaladyCode::SHGLLS,
    ::oo_2_0::GroupCharacteristicMaladyCode::SMLLPX,
    ::oo_2_0::GroupCharacteristicMaladyCode::STREPT,
    ::oo_2_0::GroupCharacteristicMaladyCode::SXLTRN,
    ::oo_2_0::GroupCharacteristicMaladyCode::SYPHLA,
    ::oo_2_0::GroupCharacteristicMaladyCode::SYPHLC,
    ::oo_2_0::GroupCharacteristicMaladyCode::SYPHLE,
    ::oo_2_0::GroupCharacteristicMaladyCode::SYPHLL,
    ::oo_2_0::GroupCharacteristicMaladyCode::SYPHLP,
    ::oo_2_0::GroupCharacteristicMaladyCode::TETANS,
    ::oo_2_0::GroupCharacteristicMaladyCode::TOXPLS,
    ::oo_2_0::GroupCharacteristicMaladyCode::TOXSHK,
    ::oo_2_0::GroupCharacteristicMaladyCode::TRCHNS,
    ::oo_2_0::GroupCharacteristicMaladyCode::TRNSSP,
    ::oo_2_0::GroupCharacteristicMaladyCode::TRYPNS,
    ::oo_2_0::GroupCharacteristicMaladyCode::TUBERC,
    ::oo_2_0::GroupCharacteristicMaladyCode::TULARM,
    ::oo_2_0::GroupCharacteristicMaladyCode::TYPHOD,
    ::oo_2_0::GroupCharacteristicMaladyCode::TYPHUS,
    ::oo_2_0::GroupCharacteristicMaladyCode::URTHRT,
    ::oo_2_0::GroupCharacteristicMaladyCode::VARCLL,
    ::oo_2_0::GroupCharacteristicMaladyCode::VRHAEM,
    ::oo_2_0::GroupCharacteristicMaladyCode::WTRBRN,
    ::oo_2_0::GroupCharacteristicMaladyCode::YELLWF,
    ::oo_2_0::GroupCharacteristicMaladyCode::YERSNS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupCharacteristicMaladyCode >
  _xsd_GroupCharacteristicMaladyCode_type_factory_init (
    "GroupCharacteristicMaladyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GroupCharacteristicMaladyTransmissibilityIndicatorCode
  //

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_convert ();
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_convert ();
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  GroupCharacteristicMaladyTransmissibilityIndicatorCode (const ::std::string& s,
                                                          const ::xercesc::DOMElement* e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_convert ();
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode* GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GroupCharacteristicMaladyTransmissibilityIndicatorCode (*this, f, c);
  }

  GroupCharacteristicMaladyTransmissibilityIndicatorCode::value GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_indexes_,
                      _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_indexes_ + 2 || _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const GroupCharacteristicMaladyTransmissibilityIndicatorCode::value GroupCharacteristicMaladyTransmissibilityIndicatorCode::
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::GroupCharacteristicMaladyTransmissibilityIndicatorCode::NO,
    ::oo_2_0::GroupCharacteristicMaladyTransmissibilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupCharacteristicMaladyTransmissibilityIndicatorCode >
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_type_factory_init (
    "GroupCharacteristicMaladyTransmissibilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GroupCharacteristicTriageCode
  //

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GroupCharacteristicTriageCode_convert ();
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GroupCharacteristicTriageCode_convert ();
  }

  GroupCharacteristicTriageCode::
  GroupCharacteristicTriageCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GroupCharacteristicTriageCode_convert ();
  }

  GroupCharacteristicTriageCode* GroupCharacteristicTriageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GroupCharacteristicTriageCode (*this, f, c);
  }

  GroupCharacteristicTriageCode::value GroupCharacteristicTriageCode::
  _xsd_GroupCharacteristicTriageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GroupCharacteristicTriageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GroupCharacteristicTriageCode_indexes_,
                      _xsd_GroupCharacteristicTriageCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_GroupCharacteristicTriageCode_indexes_ + 4 || _xsd_GroupCharacteristicTriageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GroupCharacteristicTriageCode::
  _xsd_GroupCharacteristicTriageCode_literals_[4] =
  {
    "T1",
    "T2",
    "T3",
    "T4"
  };

  const GroupCharacteristicTriageCode::value GroupCharacteristicTriageCode::
  _xsd_GroupCharacteristicTriageCode_indexes_[4] =
  {
    ::oo_2_0::GroupCharacteristicTriageCode::T1,
    ::oo_2_0::GroupCharacteristicTriageCode::T2,
    ::oo_2_0::GroupCharacteristicTriageCode::T3,
    ::oo_2_0::GroupCharacteristicTriageCode::T4
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupCharacteristicTriageCode >
  _xsd_GroupCharacteristicTriageCode_type_factory_init (
    "GroupCharacteristicTriageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // GroupOrganisationTypeCategoryCode
  //

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_GroupOrganisationTypeCategoryCode_convert ();
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_GroupOrganisationTypeCategoryCode_convert ();
  }

  GroupOrganisationTypeCategoryCode::
  GroupOrganisationTypeCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_GroupOrganisationTypeCategoryCode_convert ();
  }

  GroupOrganisationTypeCategoryCode* GroupOrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class GroupOrganisationTypeCategoryCode (*this, f, c);
  }

  GroupOrganisationTypeCategoryCode::value GroupOrganisationTypeCategoryCode::
  _xsd_GroupOrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GroupOrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_GroupOrganisationTypeCategoryCode_indexes_,
                      _xsd_GroupOrganisationTypeCategoryCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_GroupOrganisationTypeCategoryCode_indexes_ + 21 || _xsd_GroupOrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const GroupOrganisationTypeCategoryCode::
  _xsd_GroupOrganisationTypeCategoryCode_literals_[21] =
  {
    "CIVCON",
    "CRIMIN",
    "DSPLPR",
    "GANG",
    "INTLCT",
    "JRNLST",
    "LNDOWN",
    "LOCINH",
    "MEDINT",
    "MEDLCL",
    "MEDNAT",
    "MEDNOS",
    "MRCHNT",
    "NOS",
    "POLCHF",
    "POW",
    "PRSNR",
    "REFUGE",
    "TERRST",
    "VILELD",
    "WRITER"
  };

  const GroupOrganisationTypeCategoryCode::value GroupOrganisationTypeCategoryCode::
  _xsd_GroupOrganisationTypeCategoryCode_indexes_[21] =
  {
    ::oo_2_0::GroupOrganisationTypeCategoryCode::CIVCON,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::CRIMIN,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::DSPLPR,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::GANG,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::INTLCT,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::JRNLST,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::LNDOWN,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::LOCINH,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::MEDINT,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::MEDLCL,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::MEDNAT,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::MEDNOS,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::MRCHNT,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::NOS,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::POLCHF,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::POW,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::PRSNR,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::REFUGE,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::TERRST,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::VILELD,
    ::oo_2_0::GroupOrganisationTypeCategoryCode::WRITER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupOrganisationTypeCategoryCode >
  _xsd_GroupOrganisationTypeCategoryCode_type_factory_init (
    "GroupOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HandlingCapabilityActionCode
  //

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HandlingCapabilityActionCode_convert ();
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HandlingCapabilityActionCode_convert ();
  }

  HandlingCapabilityActionCode::
  HandlingCapabilityActionCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HandlingCapabilityActionCode_convert ();
  }

  HandlingCapabilityActionCode* HandlingCapabilityActionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HandlingCapabilityActionCode (*this, f, c);
  }

  HandlingCapabilityActionCode::value HandlingCapabilityActionCode::
  _xsd_HandlingCapabilityActionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HandlingCapabilityActionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HandlingCapabilityActionCode_indexes_,
                      _xsd_HandlingCapabilityActionCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_HandlingCapabilityActionCode_indexes_ + 4 || _xsd_HandlingCapabilityActionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HandlingCapabilityActionCode::
  _xsd_HandlingCapabilityActionCode_literals_[4] =
  {
    "HOIST",
    "LOAD",
    "LOADUN",
    "UNLOAD"
  };

  const HandlingCapabilityActionCode::value HandlingCapabilityActionCode::
  _xsd_HandlingCapabilityActionCode_indexes_[4] =
  {
    ::oo_2_0::HandlingCapabilityActionCode::HOIST,
    ::oo_2_0::HandlingCapabilityActionCode::LOAD,
    ::oo_2_0::HandlingCapabilityActionCode::LOADUN,
    ::oo_2_0::HandlingCapabilityActionCode::UNLOAD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HandlingCapabilityActionCode >
  _xsd_HandlingCapabilityActionCode_type_factory_init (
    "HandlingCapabilityActionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HandlingCapabilityDescriptorCode
  //

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HandlingCapabilityDescriptorCode_convert ();
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HandlingCapabilityDescriptorCode_convert ();
  }

  HandlingCapabilityDescriptorCode::
  HandlingCapabilityDescriptorCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HandlingCapabilityDescriptorCode_convert ();
  }

  HandlingCapabilityDescriptorCode* HandlingCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HandlingCapabilityDescriptorCode (*this, f, c);
  }

  HandlingCapabilityDescriptorCode::value HandlingCapabilityDescriptorCode::
  _xsd_HandlingCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HandlingCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HandlingCapabilityDescriptorCode_indexes_,
                      _xsd_HandlingCapabilityDescriptorCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_HandlingCapabilityDescriptorCode_indexes_ + 8 || _xsd_HandlingCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HandlingCapabilityDescriptorCode::
  _xsd_HandlingCapabilityDescriptorCode_literals_[8] =
  {
    "BLKLIQ",
    "BLKVOL",
    "MAXCNT",
    "MCRHEI",
    "MCRLEN",
    "MCRWGT",
    "MCRWID",
    "NEQLMT"
  };

  const HandlingCapabilityDescriptorCode::value HandlingCapabilityDescriptorCode::
  _xsd_HandlingCapabilityDescriptorCode_indexes_[8] =
  {
    ::oo_2_0::HandlingCapabilityDescriptorCode::BLKLIQ,
    ::oo_2_0::HandlingCapabilityDescriptorCode::BLKVOL,
    ::oo_2_0::HandlingCapabilityDescriptorCode::MAXCNT,
    ::oo_2_0::HandlingCapabilityDescriptorCode::MCRHEI,
    ::oo_2_0::HandlingCapabilityDescriptorCode::MCRLEN,
    ::oo_2_0::HandlingCapabilityDescriptorCode::MCRWGT,
    ::oo_2_0::HandlingCapabilityDescriptorCode::MCRWID,
    ::oo_2_0::HandlingCapabilityDescriptorCode::NEQLMT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HandlingCapabilityDescriptorCode >
  _xsd_HandlingCapabilityDescriptorCode_type_factory_init (
    "HandlingCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourAirportNearIndicatorCode
  //

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourAirportNearIndicatorCode_convert ();
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourAirportNearIndicatorCode_convert ();
  }

  HarbourAirportNearIndicatorCode::
  HarbourAirportNearIndicatorCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourAirportNearIndicatorCode_convert ();
  }

  HarbourAirportNearIndicatorCode* HarbourAirportNearIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourAirportNearIndicatorCode (*this, f, c);
  }

  HarbourAirportNearIndicatorCode::value HarbourAirportNearIndicatorCode::
  _xsd_HarbourAirportNearIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourAirportNearIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourAirportNearIndicatorCode_indexes_,
                      _xsd_HarbourAirportNearIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourAirportNearIndicatorCode_indexes_ + 2 || _xsd_HarbourAirportNearIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourAirportNearIndicatorCode::
  _xsd_HarbourAirportNearIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourAirportNearIndicatorCode::value HarbourAirportNearIndicatorCode::
  _xsd_HarbourAirportNearIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourAirportNearIndicatorCode::NO,
    ::oo_2_0::HarbourAirportNearIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourAirportNearIndicatorCode >
  _xsd_HarbourAirportNearIndicatorCode_type_factory_init (
    "HarbourAirportNearIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourBiologicallySecureAvailabilityIndicatorCode
  //

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_convert ();
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_convert ();
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::
  HarbourBiologicallySecureAvailabilityIndicatorCode (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_convert ();
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode* HarbourBiologicallySecureAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourBiologicallySecureAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourBiologicallySecureAvailabilityIndicatorCode::value HarbourBiologicallySecureAvailabilityIndicatorCode::
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourBiologicallySecureAvailabilityIndicatorCode::
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourBiologicallySecureAvailabilityIndicatorCode::value HarbourBiologicallySecureAvailabilityIndicatorCode::
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourBiologicallySecureAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourBiologicallySecureAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourBiologicallySecureAvailabilityIndicatorCode >
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_type_factory_init (
    "HarbourBiologicallySecureAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourConvoyMarshallingIndicatorCode
  //

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourConvoyMarshallingIndicatorCode_convert ();
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourConvoyMarshallingIndicatorCode_convert ();
  }

  HarbourConvoyMarshallingIndicatorCode::
  HarbourConvoyMarshallingIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourConvoyMarshallingIndicatorCode_convert ();
  }

  HarbourConvoyMarshallingIndicatorCode* HarbourConvoyMarshallingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourConvoyMarshallingIndicatorCode (*this, f, c);
  }

  HarbourConvoyMarshallingIndicatorCode::value HarbourConvoyMarshallingIndicatorCode::
  _xsd_HarbourConvoyMarshallingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourConvoyMarshallingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourConvoyMarshallingIndicatorCode_indexes_,
                      _xsd_HarbourConvoyMarshallingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourConvoyMarshallingIndicatorCode_indexes_ + 2 || _xsd_HarbourConvoyMarshallingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourConvoyMarshallingIndicatorCode::
  _xsd_HarbourConvoyMarshallingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourConvoyMarshallingIndicatorCode::value HarbourConvoyMarshallingIndicatorCode::
  _xsd_HarbourConvoyMarshallingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourConvoyMarshallingIndicatorCode::NO,
    ::oo_2_0::HarbourConvoyMarshallingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourConvoyMarshallingIndicatorCode >
  _xsd_HarbourConvoyMarshallingIndicatorCode_type_factory_init (
    "HarbourConvoyMarshallingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourDegaussingIndicatorCode
  //

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourDegaussingIndicatorCode_convert ();
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourDegaussingIndicatorCode_convert ();
  }

  HarbourDegaussingIndicatorCode::
  HarbourDegaussingIndicatorCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourDegaussingIndicatorCode_convert ();
  }

  HarbourDegaussingIndicatorCode* HarbourDegaussingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourDegaussingIndicatorCode (*this, f, c);
  }

  HarbourDegaussingIndicatorCode::value HarbourDegaussingIndicatorCode::
  _xsd_HarbourDegaussingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourDegaussingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourDegaussingIndicatorCode_indexes_,
                      _xsd_HarbourDegaussingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourDegaussingIndicatorCode_indexes_ + 2 || _xsd_HarbourDegaussingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourDegaussingIndicatorCode::
  _xsd_HarbourDegaussingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourDegaussingIndicatorCode::value HarbourDegaussingIndicatorCode::
  _xsd_HarbourDegaussingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourDegaussingIndicatorCode::NO,
    ::oo_2_0::HarbourDegaussingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourDegaussingIndicatorCode >
  _xsd_HarbourDegaussingIndicatorCode_type_factory_init (
    "HarbourDegaussingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourDirtyBallastIndicatorCode
  //

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourDirtyBallastIndicatorCode_convert ();
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourDirtyBallastIndicatorCode_convert ();
  }

  HarbourDirtyBallastIndicatorCode::
  HarbourDirtyBallastIndicatorCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourDirtyBallastIndicatorCode_convert ();
  }

  HarbourDirtyBallastIndicatorCode* HarbourDirtyBallastIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourDirtyBallastIndicatorCode (*this, f, c);
  }

  HarbourDirtyBallastIndicatorCode::value HarbourDirtyBallastIndicatorCode::
  _xsd_HarbourDirtyBallastIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourDirtyBallastIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourDirtyBallastIndicatorCode_indexes_,
                      _xsd_HarbourDirtyBallastIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourDirtyBallastIndicatorCode_indexes_ + 2 || _xsd_HarbourDirtyBallastIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourDirtyBallastIndicatorCode::
  _xsd_HarbourDirtyBallastIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourDirtyBallastIndicatorCode::value HarbourDirtyBallastIndicatorCode::
  _xsd_HarbourDirtyBallastIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourDirtyBallastIndicatorCode::NO,
    ::oo_2_0::HarbourDirtyBallastIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourDirtyBallastIndicatorCode >
  _xsd_HarbourDirtyBallastIndicatorCode_type_factory_init (
    "HarbourDirtyBallastIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourEntranceRestrictionsIceIndicatorCode
  //

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourEntranceRestrictionsIceIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourEntranceRestrictionsIceIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsIceIndicatorCode::
  HarbourEntranceRestrictionsIceIndicatorCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourEntranceRestrictionsIceIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsIceIndicatorCode* HarbourEntranceRestrictionsIceIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourEntranceRestrictionsIceIndicatorCode (*this, f, c);
  }

  HarbourEntranceRestrictionsIceIndicatorCode::value HarbourEntranceRestrictionsIceIndicatorCode::
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourEntranceRestrictionsIceIndicatorCode_indexes_,
                      _xsd_HarbourEntranceRestrictionsIceIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourEntranceRestrictionsIceIndicatorCode_indexes_ + 2 || _xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourEntranceRestrictionsIceIndicatorCode::
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourEntranceRestrictionsIceIndicatorCode::value HarbourEntranceRestrictionsIceIndicatorCode::
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourEntranceRestrictionsIceIndicatorCode::NO,
    ::oo_2_0::HarbourEntranceRestrictionsIceIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourEntranceRestrictionsIceIndicatorCode >
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_type_factory_init (
    "HarbourEntranceRestrictionsIceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourEntranceRestrictionsSwellIndicatorCode
  //

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::
  HarbourEntranceRestrictionsSwellIndicatorCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_convert ();
  }

  HarbourEntranceRestrictionsSwellIndicatorCode* HarbourEntranceRestrictionsSwellIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourEntranceRestrictionsSwellIndicatorCode (*this, f, c);
  }

  HarbourEntranceRestrictionsSwellIndicatorCode::value HarbourEntranceRestrictionsSwellIndicatorCode::
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_indexes_,
                      _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_indexes_ + 2 || _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourEntranceRestrictionsSwellIndicatorCode::
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourEntranceRestrictionsSwellIndicatorCode::value HarbourEntranceRestrictionsSwellIndicatorCode::
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourEntranceRestrictionsSwellIndicatorCode::NO,
    ::oo_2_0::HarbourEntranceRestrictionsSwellIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourEntranceRestrictionsSwellIndicatorCode >
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_type_factory_init (
    "HarbourEntranceRestrictionsSwellIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourEstimatedTimeOfArrivalIndicatorCode
  //

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_convert ();
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_convert ();
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::
  HarbourEstimatedTimeOfArrivalIndicatorCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_convert ();
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode* HarbourEstimatedTimeOfArrivalIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourEstimatedTimeOfArrivalIndicatorCode (*this, f, c);
  }

  HarbourEstimatedTimeOfArrivalIndicatorCode::value HarbourEstimatedTimeOfArrivalIndicatorCode::
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_indexes_,
                      _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_indexes_ + 2 || _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourEstimatedTimeOfArrivalIndicatorCode::
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourEstimatedTimeOfArrivalIndicatorCode::value HarbourEstimatedTimeOfArrivalIndicatorCode::
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourEstimatedTimeOfArrivalIndicatorCode::NO,
    ::oo_2_0::HarbourEstimatedTimeOfArrivalIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourEstimatedTimeOfArrivalIndicatorCode >
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_type_factory_init (
    "HarbourEstimatedTimeOfArrivalIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourFireFightingCapabilityCode
  //

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourFireFightingCapabilityCode_convert ();
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourFireFightingCapabilityCode_convert ();
  }

  HarbourFireFightingCapabilityCode::
  HarbourFireFightingCapabilityCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourFireFightingCapabilityCode_convert ();
  }

  HarbourFireFightingCapabilityCode* HarbourFireFightingCapabilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourFireFightingCapabilityCode (*this, f, c);
  }

  HarbourFireFightingCapabilityCode::value HarbourFireFightingCapabilityCode::
  _xsd_HarbourFireFightingCapabilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourFireFightingCapabilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourFireFightingCapabilityCode_indexes_,
                      _xsd_HarbourFireFightingCapabilityCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_HarbourFireFightingCapabilityCode_indexes_ + 3 || _xsd_HarbourFireFightingCapabilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourFireFightingCapabilityCode::
  _xsd_HarbourFireFightingCapabilityCode_literals_[3] =
  {
    "AFLOAT",
    "ASHORE",
    "NOS"
  };

  const HarbourFireFightingCapabilityCode::value HarbourFireFightingCapabilityCode::
  _xsd_HarbourFireFightingCapabilityCode_indexes_[3] =
  {
    ::oo_2_0::HarbourFireFightingCapabilityCode::AFLOAT,
    ::oo_2_0::HarbourFireFightingCapabilityCode::ASHORE,
    ::oo_2_0::HarbourFireFightingCapabilityCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourFireFightingCapabilityCode >
  _xsd_HarbourFireFightingCapabilityCode_type_factory_init (
    "HarbourFireFightingCapabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourFireFightingIndicatorCode
  //

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourFireFightingIndicatorCode_convert ();
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourFireFightingIndicatorCode_convert ();
  }

  HarbourFireFightingIndicatorCode::
  HarbourFireFightingIndicatorCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourFireFightingIndicatorCode_convert ();
  }

  HarbourFireFightingIndicatorCode* HarbourFireFightingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourFireFightingIndicatorCode (*this, f, c);
  }

  HarbourFireFightingIndicatorCode::value HarbourFireFightingIndicatorCode::
  _xsd_HarbourFireFightingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourFireFightingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourFireFightingIndicatorCode_indexes_,
                      _xsd_HarbourFireFightingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourFireFightingIndicatorCode_indexes_ + 2 || _xsd_HarbourFireFightingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourFireFightingIndicatorCode::
  _xsd_HarbourFireFightingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourFireFightingIndicatorCode::value HarbourFireFightingIndicatorCode::
  _xsd_HarbourFireFightingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourFireFightingIndicatorCode::NO,
    ::oo_2_0::HarbourFireFightingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourFireFightingIndicatorCode >
  _xsd_HarbourFireFightingIndicatorCode_type_factory_init (
    "HarbourFireFightingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourFirstPortOfEntryIndicatorCode
  //

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourFirstPortOfEntryIndicatorCode_convert ();
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourFirstPortOfEntryIndicatorCode_convert ();
  }

  HarbourFirstPortOfEntryIndicatorCode::
  HarbourFirstPortOfEntryIndicatorCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourFirstPortOfEntryIndicatorCode_convert ();
  }

  HarbourFirstPortOfEntryIndicatorCode* HarbourFirstPortOfEntryIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourFirstPortOfEntryIndicatorCode (*this, f, c);
  }

  HarbourFirstPortOfEntryIndicatorCode::value HarbourFirstPortOfEntryIndicatorCode::
  _xsd_HarbourFirstPortOfEntryIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourFirstPortOfEntryIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourFirstPortOfEntryIndicatorCode_indexes_,
                      _xsd_HarbourFirstPortOfEntryIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourFirstPortOfEntryIndicatorCode_indexes_ + 2 || _xsd_HarbourFirstPortOfEntryIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourFirstPortOfEntryIndicatorCode::
  _xsd_HarbourFirstPortOfEntryIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourFirstPortOfEntryIndicatorCode::value HarbourFirstPortOfEntryIndicatorCode::
  _xsd_HarbourFirstPortOfEntryIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourFirstPortOfEntryIndicatorCode::NO,
    ::oo_2_0::HarbourFirstPortOfEntryIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourFirstPortOfEntryIndicatorCode >
  _xsd_HarbourFirstPortOfEntryIndicatorCode_type_factory_init (
    "HarbourFirstPortOfEntryIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourFreshWaterAvailabilityIndicatorCode
  //

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourFreshWaterAvailabilityIndicatorCode_convert ();
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourFreshWaterAvailabilityIndicatorCode_convert ();
  }

  HarbourFreshWaterAvailabilityIndicatorCode::
  HarbourFreshWaterAvailabilityIndicatorCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourFreshWaterAvailabilityIndicatorCode_convert ();
  }

  HarbourFreshWaterAvailabilityIndicatorCode* HarbourFreshWaterAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourFreshWaterAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourFreshWaterAvailabilityIndicatorCode::value HarbourFreshWaterAvailabilityIndicatorCode::
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourFreshWaterAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourFreshWaterAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourFreshWaterAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourFreshWaterAvailabilityIndicatorCode::
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourFreshWaterAvailabilityIndicatorCode::value HarbourFreshWaterAvailabilityIndicatorCode::
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourFreshWaterAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourFreshWaterAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourFreshWaterAvailabilityIndicatorCode >
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_type_factory_init (
    "HarbourFreshWaterAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourLashIndicatorCode
  //

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourLashIndicatorCode_convert ();
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourLashIndicatorCode_convert ();
  }

  HarbourLashIndicatorCode::
  HarbourLashIndicatorCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourLashIndicatorCode_convert ();
  }

  HarbourLashIndicatorCode* HarbourLashIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourLashIndicatorCode (*this, f, c);
  }

  HarbourLashIndicatorCode::value HarbourLashIndicatorCode::
  _xsd_HarbourLashIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourLashIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourLashIndicatorCode_indexes_,
                      _xsd_HarbourLashIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourLashIndicatorCode_indexes_ + 2 || _xsd_HarbourLashIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourLashIndicatorCode::
  _xsd_HarbourLashIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourLashIndicatorCode::value HarbourLashIndicatorCode::
  _xsd_HarbourLashIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourLashIndicatorCode::NO,
    ::oo_2_0::HarbourLashIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourLashIndicatorCode >
  _xsd_HarbourLashIndicatorCode_type_factory_init (
    "HarbourLashIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourLighterageAvailabilityIndicatorCode
  //

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourLighterageAvailabilityIndicatorCode_convert ();
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourLighterageAvailabilityIndicatorCode_convert ();
  }

  HarbourLighterageAvailabilityIndicatorCode::
  HarbourLighterageAvailabilityIndicatorCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourLighterageAvailabilityIndicatorCode_convert ();
  }

  HarbourLighterageAvailabilityIndicatorCode* HarbourLighterageAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourLighterageAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourLighterageAvailabilityIndicatorCode::value HarbourLighterageAvailabilityIndicatorCode::
  _xsd_HarbourLighterageAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourLighterageAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourLighterageAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourLighterageAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourLighterageAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourLighterageAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourLighterageAvailabilityIndicatorCode::
  _xsd_HarbourLighterageAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourLighterageAvailabilityIndicatorCode::value HarbourLighterageAvailabilityIndicatorCode::
  _xsd_HarbourLighterageAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourLighterageAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourLighterageAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourLighterageAvailabilityIndicatorCode >
  _xsd_HarbourLighterageAvailabilityIndicatorCode_type_factory_init (
    "HarbourLighterageAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourOverheadLimitsIndicatorCode
  //

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourOverheadLimitsIndicatorCode_convert ();
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourOverheadLimitsIndicatorCode_convert ();
  }

  HarbourOverheadLimitsIndicatorCode::
  HarbourOverheadLimitsIndicatorCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourOverheadLimitsIndicatorCode_convert ();
  }

  HarbourOverheadLimitsIndicatorCode* HarbourOverheadLimitsIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourOverheadLimitsIndicatorCode (*this, f, c);
  }

  HarbourOverheadLimitsIndicatorCode::value HarbourOverheadLimitsIndicatorCode::
  _xsd_HarbourOverheadLimitsIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourOverheadLimitsIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourOverheadLimitsIndicatorCode_indexes_,
                      _xsd_HarbourOverheadLimitsIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourOverheadLimitsIndicatorCode_indexes_ + 2 || _xsd_HarbourOverheadLimitsIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourOverheadLimitsIndicatorCode::
  _xsd_HarbourOverheadLimitsIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourOverheadLimitsIndicatorCode::value HarbourOverheadLimitsIndicatorCode::
  _xsd_HarbourOverheadLimitsIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourOverheadLimitsIndicatorCode::NO,
    ::oo_2_0::HarbourOverheadLimitsIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourOverheadLimitsIndicatorCode >
  _xsd_HarbourOverheadLimitsIndicatorCode_type_factory_init (
    "HarbourOverheadLimitsIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourPassengerHandlingIndicatorCode
  //

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourPassengerHandlingIndicatorCode_convert ();
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourPassengerHandlingIndicatorCode_convert ();
  }

  HarbourPassengerHandlingIndicatorCode::
  HarbourPassengerHandlingIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourPassengerHandlingIndicatorCode_convert ();
  }

  HarbourPassengerHandlingIndicatorCode* HarbourPassengerHandlingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourPassengerHandlingIndicatorCode (*this, f, c);
  }

  HarbourPassengerHandlingIndicatorCode::value HarbourPassengerHandlingIndicatorCode::
  _xsd_HarbourPassengerHandlingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourPassengerHandlingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourPassengerHandlingIndicatorCode_indexes_,
                      _xsd_HarbourPassengerHandlingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourPassengerHandlingIndicatorCode_indexes_ + 2 || _xsd_HarbourPassengerHandlingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourPassengerHandlingIndicatorCode::
  _xsd_HarbourPassengerHandlingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourPassengerHandlingIndicatorCode::value HarbourPassengerHandlingIndicatorCode::
  _xsd_HarbourPassengerHandlingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourPassengerHandlingIndicatorCode::NO,
    ::oo_2_0::HarbourPassengerHandlingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourPassengerHandlingIndicatorCode >
  _xsd_HarbourPassengerHandlingIndicatorCode_type_factory_init (
    "HarbourPassengerHandlingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourPersistenceCode
  //

  HarbourPersistenceCode::
  HarbourPersistenceCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourPersistenceCode_convert ();
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourPersistenceCode_convert ();
  }

  HarbourPersistenceCode::
  HarbourPersistenceCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourPersistenceCode_convert ();
  }

  HarbourPersistenceCode* HarbourPersistenceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourPersistenceCode (*this, f, c);
  }

  HarbourPersistenceCode::value HarbourPersistenceCode::
  _xsd_HarbourPersistenceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourPersistenceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourPersistenceCode_indexes_,
                      _xsd_HarbourPersistenceCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_HarbourPersistenceCode_indexes_ + 3 || _xsd_HarbourPersistenceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourPersistenceCode::
  _xsd_HarbourPersistenceCode_literals_[3] =
  {
    "NKN",
    "PERMAN",
    "TEMPRY"
  };

  const HarbourPersistenceCode::value HarbourPersistenceCode::
  _xsd_HarbourPersistenceCode_indexes_[3] =
  {
    ::oo_2_0::HarbourPersistenceCode::NKN,
    ::oo_2_0::HarbourPersistenceCode::PERMAN,
    ::oo_2_0::HarbourPersistenceCode::TEMPRY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourPersistenceCode >
  _xsd_HarbourPersistenceCode_type_factory_init (
    "HarbourPersistenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourPilotageAvailabilityIndicatorCode
  //

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourPilotageAvailabilityIndicatorCode_convert ();
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourPilotageAvailabilityIndicatorCode_convert ();
  }

  HarbourPilotageAvailabilityIndicatorCode::
  HarbourPilotageAvailabilityIndicatorCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourPilotageAvailabilityIndicatorCode_convert ();
  }

  HarbourPilotageAvailabilityIndicatorCode* HarbourPilotageAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourPilotageAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourPilotageAvailabilityIndicatorCode::value HarbourPilotageAvailabilityIndicatorCode::
  _xsd_HarbourPilotageAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourPilotageAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourPilotageAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourPilotageAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourPilotageAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourPilotageAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourPilotageAvailabilityIndicatorCode::
  _xsd_HarbourPilotageAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourPilotageAvailabilityIndicatorCode::value HarbourPilotageAvailabilityIndicatorCode::
  _xsd_HarbourPilotageAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourPilotageAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourPilotageAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourPilotageAvailabilityIndicatorCode >
  _xsd_HarbourPilotageAvailabilityIndicatorCode_type_factory_init (
    "HarbourPilotageAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourPilotageRequirementIndicatorCode
  //

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourPilotageRequirementIndicatorCode_convert ();
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourPilotageRequirementIndicatorCode_convert ();
  }

  HarbourPilotageRequirementIndicatorCode::
  HarbourPilotageRequirementIndicatorCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourPilotageRequirementIndicatorCode_convert ();
  }

  HarbourPilotageRequirementIndicatorCode* HarbourPilotageRequirementIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourPilotageRequirementIndicatorCode (*this, f, c);
  }

  HarbourPilotageRequirementIndicatorCode::value HarbourPilotageRequirementIndicatorCode::
  _xsd_HarbourPilotageRequirementIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourPilotageRequirementIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourPilotageRequirementIndicatorCode_indexes_,
                      _xsd_HarbourPilotageRequirementIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourPilotageRequirementIndicatorCode_indexes_ + 2 || _xsd_HarbourPilotageRequirementIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourPilotageRequirementIndicatorCode::
  _xsd_HarbourPilotageRequirementIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourPilotageRequirementIndicatorCode::value HarbourPilotageRequirementIndicatorCode::
  _xsd_HarbourPilotageRequirementIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourPilotageRequirementIndicatorCode::NO,
    ::oo_2_0::HarbourPilotageRequirementIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourPilotageRequirementIndicatorCode >
  _xsd_HarbourPilotageRequirementIndicatorCode_type_factory_init (
    "HarbourPilotageRequirementIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourRefuellingAvailabilityIndicatorCode
  //

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourRefuellingAvailabilityIndicatorCode_convert ();
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourRefuellingAvailabilityIndicatorCode_convert ();
  }

  HarbourRefuellingAvailabilityIndicatorCode::
  HarbourRefuellingAvailabilityIndicatorCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourRefuellingAvailabilityIndicatorCode_convert ();
  }

  HarbourRefuellingAvailabilityIndicatorCode* HarbourRefuellingAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourRefuellingAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourRefuellingAvailabilityIndicatorCode::value HarbourRefuellingAvailabilityIndicatorCode::
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourRefuellingAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourRefuellingAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourRefuellingAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourRefuellingAvailabilityIndicatorCode::
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourRefuellingAvailabilityIndicatorCode::value HarbourRefuellingAvailabilityIndicatorCode::
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourRefuellingAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourRefuellingAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourRefuellingAvailabilityIndicatorCode >
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_type_factory_init (
    "HarbourRefuellingAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourRefuellingTypeCode
  //

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourRefuellingTypeCode_convert ();
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourRefuellingTypeCode_convert ();
  }

  HarbourRefuellingTypeCode::
  HarbourRefuellingTypeCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourRefuellingTypeCode_convert ();
  }

  HarbourRefuellingTypeCode* HarbourRefuellingTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourRefuellingTypeCode (*this, f, c);
  }

  HarbourRefuellingTypeCode::value HarbourRefuellingTypeCode::
  _xsd_HarbourRefuellingTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourRefuellingTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourRefuellingTypeCode_indexes_,
                      _xsd_HarbourRefuellingTypeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_HarbourRefuellingTypeCode_indexes_ + 4 || _xsd_HarbourRefuellingTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourRefuellingTypeCode::
  _xsd_HarbourRefuellingTypeCode_literals_[4] =
  {
    "BKRBRG",
    "FXDINS",
    "NOS",
    "TNKRRD"
  };

  const HarbourRefuellingTypeCode::value HarbourRefuellingTypeCode::
  _xsd_HarbourRefuellingTypeCode_indexes_[4] =
  {
    ::oo_2_0::HarbourRefuellingTypeCode::BKRBRG,
    ::oo_2_0::HarbourRefuellingTypeCode::FXDINS,
    ::oo_2_0::HarbourRefuellingTypeCode::NOS,
    ::oo_2_0::HarbourRefuellingTypeCode::TNKRRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourRefuellingTypeCode >
  _xsd_HarbourRefuellingTypeCode_type_factory_init (
    "HarbourRefuellingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourShelterQualityCode
  //

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourShelterQualityCode_convert ();
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourShelterQualityCode_convert ();
  }

  HarbourShelterQualityCode::
  HarbourShelterQualityCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourShelterQualityCode_convert ();
  }

  HarbourShelterQualityCode* HarbourShelterQualityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourShelterQualityCode (*this, f, c);
  }

  HarbourShelterQualityCode::value HarbourShelterQualityCode::
  _xsd_HarbourShelterQualityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourShelterQualityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourShelterQualityCode_indexes_,
                      _xsd_HarbourShelterQualityCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_HarbourShelterQualityCode_indexes_ + 4 || _xsd_HarbourShelterQualityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourShelterQualityCode::
  _xsd_HarbourShelterQualityCode_literals_[4] =
  {
    "E",
    "F",
    "G",
    "P"
  };

  const HarbourShelterQualityCode::value HarbourShelterQualityCode::
  _xsd_HarbourShelterQualityCode_indexes_[4] =
  {
    ::oo_2_0::HarbourShelterQualityCode::E,
    ::oo_2_0::HarbourShelterQualityCode::F,
    ::oo_2_0::HarbourShelterQualityCode::G,
    ::oo_2_0::HarbourShelterQualityCode::P
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourShelterQualityCode >
  _xsd_HarbourShelterQualityCode_type_factory_init (
    "HarbourShelterQualityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourTankerFacilitiesIndicatorCode
  //

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourTankerFacilitiesIndicatorCode_convert ();
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourTankerFacilitiesIndicatorCode_convert ();
  }

  HarbourTankerFacilitiesIndicatorCode::
  HarbourTankerFacilitiesIndicatorCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourTankerFacilitiesIndicatorCode_convert ();
  }

  HarbourTankerFacilitiesIndicatorCode* HarbourTankerFacilitiesIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourTankerFacilitiesIndicatorCode (*this, f, c);
  }

  HarbourTankerFacilitiesIndicatorCode::value HarbourTankerFacilitiesIndicatorCode::
  _xsd_HarbourTankerFacilitiesIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourTankerFacilitiesIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourTankerFacilitiesIndicatorCode_indexes_,
                      _xsd_HarbourTankerFacilitiesIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourTankerFacilitiesIndicatorCode_indexes_ + 2 || _xsd_HarbourTankerFacilitiesIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourTankerFacilitiesIndicatorCode::
  _xsd_HarbourTankerFacilitiesIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourTankerFacilitiesIndicatorCode::value HarbourTankerFacilitiesIndicatorCode::
  _xsd_HarbourTankerFacilitiesIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourTankerFacilitiesIndicatorCode::NO,
    ::oo_2_0::HarbourTankerFacilitiesIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourTankerFacilitiesIndicatorCode >
  _xsd_HarbourTankerFacilitiesIndicatorCode_type_factory_init (
    "HarbourTankerFacilitiesIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourTransitAccommodationIndicatorCode
  //

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourTransitAccommodationIndicatorCode_convert ();
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourTransitAccommodationIndicatorCode_convert ();
  }

  HarbourTransitAccommodationIndicatorCode::
  HarbourTransitAccommodationIndicatorCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourTransitAccommodationIndicatorCode_convert ();
  }

  HarbourTransitAccommodationIndicatorCode* HarbourTransitAccommodationIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourTransitAccommodationIndicatorCode (*this, f, c);
  }

  HarbourTransitAccommodationIndicatorCode::value HarbourTransitAccommodationIndicatorCode::
  _xsd_HarbourTransitAccommodationIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourTransitAccommodationIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourTransitAccommodationIndicatorCode_indexes_,
                      _xsd_HarbourTransitAccommodationIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourTransitAccommodationIndicatorCode_indexes_ + 2 || _xsd_HarbourTransitAccommodationIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourTransitAccommodationIndicatorCode::
  _xsd_HarbourTransitAccommodationIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourTransitAccommodationIndicatorCode::value HarbourTransitAccommodationIndicatorCode::
  _xsd_HarbourTransitAccommodationIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourTransitAccommodationIndicatorCode::NO,
    ::oo_2_0::HarbourTransitAccommodationIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourTransitAccommodationIndicatorCode >
  _xsd_HarbourTransitAccommodationIndicatorCode_type_factory_init (
    "HarbourTransitAccommodationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourTugAvailabilityIndicatorCode
  //

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourTugAvailabilityIndicatorCode_convert ();
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourTugAvailabilityIndicatorCode_convert ();
  }

  HarbourTugAvailabilityIndicatorCode::
  HarbourTugAvailabilityIndicatorCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourTugAvailabilityIndicatorCode_convert ();
  }

  HarbourTugAvailabilityIndicatorCode* HarbourTugAvailabilityIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourTugAvailabilityIndicatorCode (*this, f, c);
  }

  HarbourTugAvailabilityIndicatorCode::value HarbourTugAvailabilityIndicatorCode::
  _xsd_HarbourTugAvailabilityIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourTugAvailabilityIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourTugAvailabilityIndicatorCode_indexes_,
                      _xsd_HarbourTugAvailabilityIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourTugAvailabilityIndicatorCode_indexes_ + 2 || _xsd_HarbourTugAvailabilityIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourTugAvailabilityIndicatorCode::
  _xsd_HarbourTugAvailabilityIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourTugAvailabilityIndicatorCode::value HarbourTugAvailabilityIndicatorCode::
  _xsd_HarbourTugAvailabilityIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourTugAvailabilityIndicatorCode::NO,
    ::oo_2_0::HarbourTugAvailabilityIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourTugAvailabilityIndicatorCode >
  _xsd_HarbourTugAvailabilityIndicatorCode_type_factory_init (
    "HarbourTugAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourTurningAreaIndicatorCode
  //

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourTurningAreaIndicatorCode_convert ();
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourTurningAreaIndicatorCode_convert ();
  }

  HarbourTurningAreaIndicatorCode::
  HarbourTurningAreaIndicatorCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourTurningAreaIndicatorCode_convert ();
  }

  HarbourTurningAreaIndicatorCode* HarbourTurningAreaIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourTurningAreaIndicatorCode (*this, f, c);
  }

  HarbourTurningAreaIndicatorCode::value HarbourTurningAreaIndicatorCode::
  _xsd_HarbourTurningAreaIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourTurningAreaIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourTurningAreaIndicatorCode_indexes_,
                      _xsd_HarbourTurningAreaIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HarbourTurningAreaIndicatorCode_indexes_ + 2 || _xsd_HarbourTurningAreaIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourTurningAreaIndicatorCode::
  _xsd_HarbourTurningAreaIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const HarbourTurningAreaIndicatorCode::value HarbourTurningAreaIndicatorCode::
  _xsd_HarbourTurningAreaIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::HarbourTurningAreaIndicatorCode::NO,
    ::oo_2_0::HarbourTurningAreaIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourTurningAreaIndicatorCode >
  _xsd_HarbourTurningAreaIndicatorCode_type_factory_init (
    "HarbourTurningAreaIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourTypeCategoryCode
  //

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourTypeCategoryCode_convert ();
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourTypeCategoryCode_convert ();
  }

  HarbourTypeCategoryCode::
  HarbourTypeCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourTypeCategoryCode_convert ();
  }

  HarbourTypeCategoryCode* HarbourTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourTypeCategoryCode (*this, f, c);
  }

  HarbourTypeCategoryCode::value HarbourTypeCategoryCode::
  _xsd_HarbourTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourTypeCategoryCode_indexes_,
                      _xsd_HarbourTypeCategoryCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_HarbourTypeCategoryCode_indexes_ + 9 || _xsd_HarbourTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourTypeCategoryCode::
  _xsd_HarbourTypeCategoryCode_literals_[9] =
  {
    "CANAL",
    "COASTB",
    "COASTN",
    "COASTT",
    "INLAND",
    "OPENRD",
    "RIVERB",
    "RIVERN",
    "RIVERT"
  };

  const HarbourTypeCategoryCode::value HarbourTypeCategoryCode::
  _xsd_HarbourTypeCategoryCode_indexes_[9] =
  {
    ::oo_2_0::HarbourTypeCategoryCode::CANAL,
    ::oo_2_0::HarbourTypeCategoryCode::COASTB,
    ::oo_2_0::HarbourTypeCategoryCode::COASTN,
    ::oo_2_0::HarbourTypeCategoryCode::COASTT,
    ::oo_2_0::HarbourTypeCategoryCode::INLAND,
    ::oo_2_0::HarbourTypeCategoryCode::OPENRD,
    ::oo_2_0::HarbourTypeCategoryCode::RIVERB,
    ::oo_2_0::HarbourTypeCategoryCode::RIVERN,
    ::oo_2_0::HarbourTypeCategoryCode::RIVERT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourTypeCategoryCode >
  _xsd_HarbourTypeCategoryCode_type_factory_init (
    "HarbourTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HarbourVehicleHandlingTypeCode
  //

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HarbourVehicleHandlingTypeCode_convert ();
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HarbourVehicleHandlingTypeCode_convert ();
  }

  HarbourVehicleHandlingTypeCode::
  HarbourVehicleHandlingTypeCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HarbourVehicleHandlingTypeCode_convert ();
  }

  HarbourVehicleHandlingTypeCode* HarbourVehicleHandlingTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HarbourVehicleHandlingTypeCode (*this, f, c);
  }

  HarbourVehicleHandlingTypeCode::value HarbourVehicleHandlingTypeCode::
  _xsd_HarbourVehicleHandlingTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HarbourVehicleHandlingTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HarbourVehicleHandlingTypeCode_indexes_,
                      _xsd_HarbourVehicleHandlingTypeCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_HarbourVehicleHandlingTypeCode_indexes_ + 5 || _xsd_HarbourVehicleHandlingTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HarbourVehicleHandlingTypeCode::
  _xsd_HarbourVehicleHandlingTypeCode_literals_[5] =
  {
    "NKN",
    "NOS",
    "ROROFL",
    "ROROFR",
    "ROROML"
  };

  const HarbourVehicleHandlingTypeCode::value HarbourVehicleHandlingTypeCode::
  _xsd_HarbourVehicleHandlingTypeCode_indexes_[5] =
  {
    ::oo_2_0::HarbourVehicleHandlingTypeCode::NKN,
    ::oo_2_0::HarbourVehicleHandlingTypeCode::NOS,
    ::oo_2_0::HarbourVehicleHandlingTypeCode::ROROFL,
    ::oo_2_0::HarbourVehicleHandlingTypeCode::ROROFR,
    ::oo_2_0::HarbourVehicleHandlingTypeCode::ROROML
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HarbourVehicleHandlingTypeCode >
  _xsd_HarbourVehicleHandlingTypeCode_type_factory_init (
    "HarbourVehicleHandlingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HoldingRequiredCalculationMethodCode
  //

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HoldingRequiredCalculationMethodCode_convert ();
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HoldingRequiredCalculationMethodCode_convert ();
  }

  HoldingRequiredCalculationMethodCode::
  HoldingRequiredCalculationMethodCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HoldingRequiredCalculationMethodCode_convert ();
  }

  HoldingRequiredCalculationMethodCode* HoldingRequiredCalculationMethodCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HoldingRequiredCalculationMethodCode (*this, f, c);
  }

  HoldingRequiredCalculationMethodCode::value HoldingRequiredCalculationMethodCode::
  _xsd_HoldingRequiredCalculationMethodCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HoldingRequiredCalculationMethodCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HoldingRequiredCalculationMethodCode_indexes_,
                      _xsd_HoldingRequiredCalculationMethodCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_HoldingRequiredCalculationMethodCode_indexes_ + 2 || _xsd_HoldingRequiredCalculationMethodCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HoldingRequiredCalculationMethodCode::
  _xsd_HoldingRequiredCalculationMethodCode_literals_[2] =
  {
    "LVLOEF",
    "TARGET"
  };

  const HoldingRequiredCalculationMethodCode::value HoldingRequiredCalculationMethodCode::
  _xsd_HoldingRequiredCalculationMethodCode_indexes_[2] =
  {
    ::oo_2_0::HoldingRequiredCalculationMethodCode::LVLOEF,
    ::oo_2_0::HoldingRequiredCalculationMethodCode::TARGET
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HoldingRequiredCalculationMethodCode >
  _xsd_HoldingRequiredCalculationMethodCode_type_factory_init (
    "HoldingRequiredCalculationMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // HoldingTransferReasonCode
  //

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_HoldingTransferReasonCode_convert ();
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_HoldingTransferReasonCode_convert ();
  }

  HoldingTransferReasonCode::
  HoldingTransferReasonCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_HoldingTransferReasonCode_convert ();
  }

  HoldingTransferReasonCode* HoldingTransferReasonCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HoldingTransferReasonCode (*this, f, c);
  }

  HoldingTransferReasonCode::value HoldingTransferReasonCode::
  _xsd_HoldingTransferReasonCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HoldingTransferReasonCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_HoldingTransferReasonCode_indexes_,
                      _xsd_HoldingTransferReasonCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_HoldingTransferReasonCode_indexes_ + 13 || _xsd_HoldingTransferReasonCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const HoldingTransferReasonCode::
  _xsd_HoldingTransferReasonCode_literals_[13] =
  {
    "DSTRYD",
    "FXDTRM",
    "INDFLN",
    "ISSUE",
    "NOS",
    "PRMTRF",
    "RTNCST",
    "SCHSPL",
    "SCRPPD",
    "TOTDIN",
    "TOTDOT",
    "TRFMNT",
    "TRFTRN"
  };

  const HoldingTransferReasonCode::value HoldingTransferReasonCode::
  _xsd_HoldingTransferReasonCode_indexes_[13] =
  {
    ::oo_2_0::HoldingTransferReasonCode::DSTRYD,
    ::oo_2_0::HoldingTransferReasonCode::FXDTRM,
    ::oo_2_0::HoldingTransferReasonCode::INDFLN,
    ::oo_2_0::HoldingTransferReasonCode::ISSUE,
    ::oo_2_0::HoldingTransferReasonCode::NOS,
    ::oo_2_0::HoldingTransferReasonCode::PRMTRF,
    ::oo_2_0::HoldingTransferReasonCode::RTNCST,
    ::oo_2_0::HoldingTransferReasonCode::SCHSPL,
    ::oo_2_0::HoldingTransferReasonCode::SCRPPD,
    ::oo_2_0::HoldingTransferReasonCode::TOTDIN,
    ::oo_2_0::HoldingTransferReasonCode::TOTDOT,
    ::oo_2_0::HoldingTransferReasonCode::TRFMNT,
    ::oo_2_0::HoldingTransferReasonCode::TRFTRN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HoldingTransferReasonCode >
  _xsd_HoldingTransferReasonCode_type_factory_init (
    "HoldingTransferReasonCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // IcingCategoryCode
  //

  IcingCategoryCode::
  IcingCategoryCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_IcingCategoryCode_convert ();
  }

  IcingCategoryCode::
  IcingCategoryCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_IcingCategoryCode_convert ();
  }

  IcingCategoryCode::
  IcingCategoryCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_IcingCategoryCode_convert ();
  }

  IcingCategoryCode* IcingCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class IcingCategoryCode (*this, f, c);
  }

  IcingCategoryCode::value IcingCategoryCode::
  _xsd_IcingCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_IcingCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_IcingCategoryCode_indexes_,
                      _xsd_IcingCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_IcingCategoryCode_indexes_ + 3 || _xsd_IcingCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const IcingCategoryCode::
  _xsd_IcingCategoryCode_literals_[3] =
  {
    "CLRICE",
    "MIXICE",
    "RIMICE"
  };

  const IcingCategoryCode::value IcingCategoryCode::
  _xsd_IcingCategoryCode_indexes_[3] =
  {
    ::oo_2_0::IcingCategoryCode::CLRICE,
    ::oo_2_0::IcingCategoryCode::MIXICE,
    ::oo_2_0::IcingCategoryCode::RIMICE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, IcingCategoryCode >
  _xsd_IcingCategoryCode_type_factory_init (
    "IcingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // IcingSeverityQualifierCode
  //

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_IcingSeverityQualifierCode_convert ();
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_IcingSeverityQualifierCode_convert ();
  }

  IcingSeverityQualifierCode::
  IcingSeverityQualifierCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_IcingSeverityQualifierCode_convert ();
  }

  IcingSeverityQualifierCode* IcingSeverityQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class IcingSeverityQualifierCode (*this, f, c);
  }

  IcingSeverityQualifierCode::value IcingSeverityQualifierCode::
  _xsd_IcingSeverityQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_IcingSeverityQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_IcingSeverityQualifierCode_indexes_,
                      _xsd_IcingSeverityQualifierCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_IcingSeverityQualifierCode_indexes_ + 3 || _xsd_IcingSeverityQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const IcingSeverityQualifierCode::
  _xsd_IcingSeverityQualifierCode_literals_[3] =
  {
    "LIGHT",
    "MODER",
    "SEVERE"
  };

  const IcingSeverityQualifierCode::value IcingSeverityQualifierCode::
  _xsd_IcingSeverityQualifierCode_indexes_[3] =
  {
    ::oo_2_0::IcingSeverityQualifierCode::LIGHT,
    ::oo_2_0::IcingSeverityQualifierCode::MODER,
    ::oo_2_0::IcingSeverityQualifierCode::SEVERE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, IcingSeverityQualifierCode >
  _xsd_IcingSeverityQualifierCode_type_factory_init (
    "IcingSeverityQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // JettyRailServedIndicatorCode
  //

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_JettyRailServedIndicatorCode_convert ();
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_JettyRailServedIndicatorCode_convert ();
  }

  JettyRailServedIndicatorCode::
  JettyRailServedIndicatorCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_JettyRailServedIndicatorCode_convert ();
  }

  JettyRailServedIndicatorCode* JettyRailServedIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class JettyRailServedIndicatorCode (*this, f, c);
  }

  JettyRailServedIndicatorCode::value JettyRailServedIndicatorCode::
  _xsd_JettyRailServedIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_JettyRailServedIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_JettyRailServedIndicatorCode_indexes_,
                      _xsd_JettyRailServedIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_JettyRailServedIndicatorCode_indexes_ + 2 || _xsd_JettyRailServedIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const JettyRailServedIndicatorCode::
  _xsd_JettyRailServedIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const JettyRailServedIndicatorCode::value JettyRailServedIndicatorCode::
  _xsd_JettyRailServedIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::JettyRailServedIndicatorCode::NO,
    ::oo_2_0::JettyRailServedIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, JettyRailServedIndicatorCode >
  _xsd_JettyRailServedIndicatorCode_type_factory_init (
    "JettyRailServedIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LanguageCategoryCode
  //

  LanguageCategoryCode::
  LanguageCategoryCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LanguageCategoryCode_convert ();
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LanguageCategoryCode_convert ();
  }

  LanguageCategoryCode::
  LanguageCategoryCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LanguageCategoryCode_convert ();
  }

  LanguageCategoryCode* LanguageCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LanguageCategoryCode (*this, f, c);
  }

  LanguageCategoryCode::value LanguageCategoryCode::
  _xsd_LanguageCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LanguageCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LanguageCategoryCode_indexes_,
                      _xsd_LanguageCategoryCode_indexes_ + 260,
                      *this,
                      c));

    if (i == _xsd_LanguageCategoryCode_indexes_ + 260 || _xsd_LanguageCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LanguageCategoryCode::
  _xsd_LanguageCategoryCode_literals_[260] =
  {
    "AFGHAN",
    "AFRAKN",
    "AFREWE",
    "AFRGA",
    "AFRKKN",
    "AFRKNS",
    "AFRLNG",
    "AFRMSH",
    "ALBNAN",
    "ALMNIC",
    "AMHRIC",
    "AMRNDN",
    "ANGAUR",
    "ARABIC",
    "ARMNAN",
    "ASSMES",
    "ASSYRN",
    "AYMARA",
    "AZERI",
    "AZRBJN",
    "BAHSIN",
    "BALOCH",
    "BAMBRA",
    "BANDJB",
    "BANGLA",
    "BANTU",
    "BAPNES",
    "BATEKE",
    "BENGLI",
    "BERBER",
    "BHTSTB",
    "BICHLM",
    "BISLMA",
    "BOJPOR",
    "BUBI",
    "BULGRN",
    "BURMSE",
    "BYLRSN",
    "CAKCHQ",
    "CAROLN",
    "CHAMOR",
    "CHICHW",
    "CHNCNT",
    "CHNESE",
    "CHNHKK",
    "CHNMND",
    "CHNPTN",
    "CIRCAS",
    "COMORN",
    "CREOLE",
    "CREPAT",
    "CRIOLO",
    "CUSHTC",
    "CZECH",
    "DAGOMB",
    "DANISH",
    "DIALCT",
    "DIOLA",
    "DIVEHI",
    "DJERMA",
    "DUTCH",
    "DZONGK",
    "ENGLSH",
    "ENGLSM",
    "ESKIMO",
    "ESTONN",
    "FANG",
    "FAROES",
    "FARSI",
    "FIJIAN",
    "FILPNO",
    "FINNSH",
    "FLEMSH",
    "FON",
    "FRENCH",
    "FRNHAL",
    "FRNHBA",
    "FRNHBR",
    "FRNHCA",
    "FRNHCO",
    "FRNHNO",
    "FRNHPA",
    "FRNHPR",
    "FULA",
    "FULANI",
    "GAN",
    "GEORGN",
    "GERMAN",
    "GILBER",
    "GREEK",
    "GRFNCA",
    "GRNLND",
    "GUARAG",
    "GUARAN",
    "GUJART",
    "HASNAR",
    "HAUSSA",
    "HEBREW",
    "HINDI",
    "HINDUS",
    "HUNGRN",
    "HUNSA",
    "IBO",
    "ICELND",
    "INDIAN",
    "INDQUE",
    "IRISHG",
    "ITALAN",
    "JAPNES",
    "JAVNES",
    "KABYE",
    "KANADA",
    "KASHMR",
    "KAZKHQ",
    "KEKCHI",
    "KHLKHM",
    "KHMER",
    "KIKNGO",
    "KINGWN",
    "KINYRW",
    "KIRGZK",
    "KIRUND",
    "KISWHL",
    "KOREAN",
    "KRIO",
    "KUNAMA",
    "KURDSH",
    "LAO",
    "LAPP",
    "LATIN",
    "LATVAN",
    "LINGAL",
    "LITHUN",
    "LUGAND",
    "LURI",
    "LUXEMB",
    "MACDNN",
    "MAHRAN",
    "MALAY",
    "MALAYL",
    "MALAYO",
    "MALGSY",
    "MALTSE",
    "MANDNG",
    "MANDNK",
    "MANDRN",
    "MANXGL",
    "MAORI",
    "MARATH",
    "MARSHL",
    "MAYA",
    "MELANP",
    "MENDE",
    "MINA",
    "MINBEI",
    "MINNAN",
    "MOLDVN",
    "MONGSG",
    "MONKHM",
    "MOROCN",
    "MOTU",
    "MYENE",
    "NAHUA",
    "NAPALS",
    "NAURAN",
    "NEPALI",
    "NIGRCN",
    "NILOCI",
    "NILOHM",
    "NILOTC",
    "NORABN",
    "NORTHS",
    "NORWGN",
    "NOS",
    "NUBIAN",
    "ORIYA",
    "ORMNGA",
    "PALAUN",
    "PAPMNT",
    "PASHAI",
    "PASHTU",
    "PERSN",
    "PERSND",
    "PIDGNE",
    "POHNPN",
    "POLISH",
    "POLYNS",
    "PORTGS",
    "PULAR",
    "PUNJAB",
    "QIECHA",
    "QUICHE",
    "ROMNAN",
    "ROMNSC",
    "RUSSAN",
    "SAMOAN",
    "SANGHO",
    "SANSKT",
    "SARA",
    "SCOTGA",
    "SERBOC",
    "SESTHS",
    "SETSWN",
    "SHONA",
    "SINDBL",
    "SINDHI",
    "SINHAL",
    "SIWATI",
    "SLOVAK",
    "SLOVNE",
    "SLOVNN",
    "SOMALI",
    "SONNKE",
    "SONSRL",
    "SPANSH",
    "SPNBSQ",
    "SPNCST",
    "SPNCTL",
    "SPNGLC",
    "SRNNTN",
    "SUDANC",
    "SURNMS",
    "SWAHIL",
    "SWEDSH",
    "TABEDW",
    "TAHTAN",
    "TAIWNS",
    "TAJIK",
    "TAKITK",
    "TAMIL",
    "TELUGU",
    "TEMNE",
    "THAI",
    "TIGRE",
    "TIGRNY",
    "TOBI",
    "TOKELN",
    "TONGAN",
    "TOSK",
    "TRUKES",
    "TSHLUB",
    "TSWANA",
    "TURKIC",
    "TURKMN",
    "TURKSH",
    "TUVALN",
    "UKRANN",
    "URDU",
    "UZBEK",
    "VIETNM",
    "WALLSN",
    "WELSH",
    "WOLOF",
    "WUSHNG",
    "XHOSA",
    "XIANG",
    "YAPESE",
    "YORUBA",
    "YUECNT",
    "ZULU"
  };

  const LanguageCategoryCode::value LanguageCategoryCode::
  _xsd_LanguageCategoryCode_indexes_[260] =
  {
    ::oo_2_0::LanguageCategoryCode::AFGHAN,
    ::oo_2_0::LanguageCategoryCode::AFRAKN,
    ::oo_2_0::LanguageCategoryCode::AFREWE,
    ::oo_2_0::LanguageCategoryCode::AFRGA,
    ::oo_2_0::LanguageCategoryCode::AFRKKN,
    ::oo_2_0::LanguageCategoryCode::AFRKNS,
    ::oo_2_0::LanguageCategoryCode::AFRLNG,
    ::oo_2_0::LanguageCategoryCode::AFRMSH,
    ::oo_2_0::LanguageCategoryCode::ALBNAN,
    ::oo_2_0::LanguageCategoryCode::ALMNIC,
    ::oo_2_0::LanguageCategoryCode::AMHRIC,
    ::oo_2_0::LanguageCategoryCode::AMRNDN,
    ::oo_2_0::LanguageCategoryCode::ANGAUR,
    ::oo_2_0::LanguageCategoryCode::ARABIC,
    ::oo_2_0::LanguageCategoryCode::ARMNAN,
    ::oo_2_0::LanguageCategoryCode::ASSMES,
    ::oo_2_0::LanguageCategoryCode::ASSYRN,
    ::oo_2_0::LanguageCategoryCode::AYMARA,
    ::oo_2_0::LanguageCategoryCode::AZERI,
    ::oo_2_0::LanguageCategoryCode::AZRBJN,
    ::oo_2_0::LanguageCategoryCode::BAHSIN,
    ::oo_2_0::LanguageCategoryCode::BALOCH,
    ::oo_2_0::LanguageCategoryCode::BAMBRA,
    ::oo_2_0::LanguageCategoryCode::BANDJB,
    ::oo_2_0::LanguageCategoryCode::BANGLA,
    ::oo_2_0::LanguageCategoryCode::BANTU,
    ::oo_2_0::LanguageCategoryCode::BAPNES,
    ::oo_2_0::LanguageCategoryCode::BATEKE,
    ::oo_2_0::LanguageCategoryCode::BENGLI,
    ::oo_2_0::LanguageCategoryCode::BERBER,
    ::oo_2_0::LanguageCategoryCode::BHTSTB,
    ::oo_2_0::LanguageCategoryCode::BICHLM,
    ::oo_2_0::LanguageCategoryCode::BISLMA,
    ::oo_2_0::LanguageCategoryCode::BOJPOR,
    ::oo_2_0::LanguageCategoryCode::BUBI,
    ::oo_2_0::LanguageCategoryCode::BULGRN,
    ::oo_2_0::LanguageCategoryCode::BURMSE,
    ::oo_2_0::LanguageCategoryCode::BYLRSN,
    ::oo_2_0::LanguageCategoryCode::CAKCHQ,
    ::oo_2_0::LanguageCategoryCode::CAROLN,
    ::oo_2_0::LanguageCategoryCode::CHAMOR,
    ::oo_2_0::LanguageCategoryCode::CHICHW,
    ::oo_2_0::LanguageCategoryCode::CHNCNT,
    ::oo_2_0::LanguageCategoryCode::CHNESE,
    ::oo_2_0::LanguageCategoryCode::CHNHKK,
    ::oo_2_0::LanguageCategoryCode::CHNMND,
    ::oo_2_0::LanguageCategoryCode::CHNPTN,
    ::oo_2_0::LanguageCategoryCode::CIRCAS,
    ::oo_2_0::LanguageCategoryCode::COMORN,
    ::oo_2_0::LanguageCategoryCode::CREOLE,
    ::oo_2_0::LanguageCategoryCode::CREPAT,
    ::oo_2_0::LanguageCategoryCode::CRIOLO,
    ::oo_2_0::LanguageCategoryCode::CUSHTC,
    ::oo_2_0::LanguageCategoryCode::CZECH,
    ::oo_2_0::LanguageCategoryCode::DAGOMB,
    ::oo_2_0::LanguageCategoryCode::DANISH,
    ::oo_2_0::LanguageCategoryCode::DIALCT,
    ::oo_2_0::LanguageCategoryCode::DIOLA,
    ::oo_2_0::LanguageCategoryCode::DIVEHI,
    ::oo_2_0::LanguageCategoryCode::DJERMA,
    ::oo_2_0::LanguageCategoryCode::DUTCH,
    ::oo_2_0::LanguageCategoryCode::DZONGK,
    ::oo_2_0::LanguageCategoryCode::ENGLSH,
    ::oo_2_0::LanguageCategoryCode::ENGLSM,
    ::oo_2_0::LanguageCategoryCode::ESKIMO,
    ::oo_2_0::LanguageCategoryCode::ESTONN,
    ::oo_2_0::LanguageCategoryCode::FANG,
    ::oo_2_0::LanguageCategoryCode::FAROES,
    ::oo_2_0::LanguageCategoryCode::FARSI,
    ::oo_2_0::LanguageCategoryCode::FIJIAN,
    ::oo_2_0::LanguageCategoryCode::FILPNO,
    ::oo_2_0::LanguageCategoryCode::FINNSH,
    ::oo_2_0::LanguageCategoryCode::FLEMSH,
    ::oo_2_0::LanguageCategoryCode::FON,
    ::oo_2_0::LanguageCategoryCode::FRENCH,
    ::oo_2_0::LanguageCategoryCode::FRNHAL,
    ::oo_2_0::LanguageCategoryCode::FRNHBA,
    ::oo_2_0::LanguageCategoryCode::FRNHBR,
    ::oo_2_0::LanguageCategoryCode::FRNHCA,
    ::oo_2_0::LanguageCategoryCode::FRNHCO,
    ::oo_2_0::LanguageCategoryCode::FRNHNO,
    ::oo_2_0::LanguageCategoryCode::FRNHPA,
    ::oo_2_0::LanguageCategoryCode::FRNHPR,
    ::oo_2_0::LanguageCategoryCode::FULA,
    ::oo_2_0::LanguageCategoryCode::FULANI,
    ::oo_2_0::LanguageCategoryCode::GAN,
    ::oo_2_0::LanguageCategoryCode::GEORGN,
    ::oo_2_0::LanguageCategoryCode::GERMAN,
    ::oo_2_0::LanguageCategoryCode::GILBER,
    ::oo_2_0::LanguageCategoryCode::GREEK,
    ::oo_2_0::LanguageCategoryCode::GRFNCA,
    ::oo_2_0::LanguageCategoryCode::GRNLND,
    ::oo_2_0::LanguageCategoryCode::GUARAG,
    ::oo_2_0::LanguageCategoryCode::GUARAN,
    ::oo_2_0::LanguageCategoryCode::GUJART,
    ::oo_2_0::LanguageCategoryCode::HASNAR,
    ::oo_2_0::LanguageCategoryCode::HAUSSA,
    ::oo_2_0::LanguageCategoryCode::HEBREW,
    ::oo_2_0::LanguageCategoryCode::HINDI,
    ::oo_2_0::LanguageCategoryCode::HINDUS,
    ::oo_2_0::LanguageCategoryCode::HUNGRN,
    ::oo_2_0::LanguageCategoryCode::HUNSA,
    ::oo_2_0::LanguageCategoryCode::IBO,
    ::oo_2_0::LanguageCategoryCode::ICELND,
    ::oo_2_0::LanguageCategoryCode::INDIAN,
    ::oo_2_0::LanguageCategoryCode::INDQUE,
    ::oo_2_0::LanguageCategoryCode::IRISHG,
    ::oo_2_0::LanguageCategoryCode::ITALAN,
    ::oo_2_0::LanguageCategoryCode::JAPNES,
    ::oo_2_0::LanguageCategoryCode::JAVNES,
    ::oo_2_0::LanguageCategoryCode::KABYE,
    ::oo_2_0::LanguageCategoryCode::KANADA,
    ::oo_2_0::LanguageCategoryCode::KASHMR,
    ::oo_2_0::LanguageCategoryCode::KAZKHQ,
    ::oo_2_0::LanguageCategoryCode::KEKCHI,
    ::oo_2_0::LanguageCategoryCode::KHLKHM,
    ::oo_2_0::LanguageCategoryCode::KHMER,
    ::oo_2_0::LanguageCategoryCode::KIKNGO,
    ::oo_2_0::LanguageCategoryCode::KINGWN,
    ::oo_2_0::LanguageCategoryCode::KINYRW,
    ::oo_2_0::LanguageCategoryCode::KIRGZK,
    ::oo_2_0::LanguageCategoryCode::KIRUND,
    ::oo_2_0::LanguageCategoryCode::KISWHL,
    ::oo_2_0::LanguageCategoryCode::KOREAN,
    ::oo_2_0::LanguageCategoryCode::KRIO,
    ::oo_2_0::LanguageCategoryCode::KUNAMA,
    ::oo_2_0::LanguageCategoryCode::KURDSH,
    ::oo_2_0::LanguageCategoryCode::LAO,
    ::oo_2_0::LanguageCategoryCode::LAPP,
    ::oo_2_0::LanguageCategoryCode::LATIN,
    ::oo_2_0::LanguageCategoryCode::LATVAN,
    ::oo_2_0::LanguageCategoryCode::LINGAL,
    ::oo_2_0::LanguageCategoryCode::LITHUN,
    ::oo_2_0::LanguageCategoryCode::LUGAND,
    ::oo_2_0::LanguageCategoryCode::LURI,
    ::oo_2_0::LanguageCategoryCode::LUXEMB,
    ::oo_2_0::LanguageCategoryCode::MACDNN,
    ::oo_2_0::LanguageCategoryCode::MAHRAN,
    ::oo_2_0::LanguageCategoryCode::MALAY,
    ::oo_2_0::LanguageCategoryCode::MALAYL,
    ::oo_2_0::LanguageCategoryCode::MALAYO,
    ::oo_2_0::LanguageCategoryCode::MALGSY,
    ::oo_2_0::LanguageCategoryCode::MALTSE,
    ::oo_2_0::LanguageCategoryCode::MANDNG,
    ::oo_2_0::LanguageCategoryCode::MANDNK,
    ::oo_2_0::LanguageCategoryCode::MANDRN,
    ::oo_2_0::LanguageCategoryCode::MANXGL,
    ::oo_2_0::LanguageCategoryCode::MAORI,
    ::oo_2_0::LanguageCategoryCode::MARATH,
    ::oo_2_0::LanguageCategoryCode::MARSHL,
    ::oo_2_0::LanguageCategoryCode::MAYA,
    ::oo_2_0::LanguageCategoryCode::MELANP,
    ::oo_2_0::LanguageCategoryCode::MENDE,
    ::oo_2_0::LanguageCategoryCode::MINA,
    ::oo_2_0::LanguageCategoryCode::MINBEI,
    ::oo_2_0::LanguageCategoryCode::MINNAN,
    ::oo_2_0::LanguageCategoryCode::MOLDVN,
    ::oo_2_0::LanguageCategoryCode::MONGSG,
    ::oo_2_0::LanguageCategoryCode::MONKHM,
    ::oo_2_0::LanguageCategoryCode::MOROCN,
    ::oo_2_0::LanguageCategoryCode::MOTU,
    ::oo_2_0::LanguageCategoryCode::MYENE,
    ::oo_2_0::LanguageCategoryCode::NAHUA,
    ::oo_2_0::LanguageCategoryCode::NAPALS,
    ::oo_2_0::LanguageCategoryCode::NAURAN,
    ::oo_2_0::LanguageCategoryCode::NEPALI,
    ::oo_2_0::LanguageCategoryCode::NIGRCN,
    ::oo_2_0::LanguageCategoryCode::NILOCI,
    ::oo_2_0::LanguageCategoryCode::NILOHM,
    ::oo_2_0::LanguageCategoryCode::NILOTC,
    ::oo_2_0::LanguageCategoryCode::NORABN,
    ::oo_2_0::LanguageCategoryCode::NORTHS,
    ::oo_2_0::LanguageCategoryCode::NORWGN,
    ::oo_2_0::LanguageCategoryCode::NOS,
    ::oo_2_0::LanguageCategoryCode::NUBIAN,
    ::oo_2_0::LanguageCategoryCode::ORIYA,
    ::oo_2_0::LanguageCategoryCode::ORMNGA,
    ::oo_2_0::LanguageCategoryCode::PALAUN,
    ::oo_2_0::LanguageCategoryCode::PAPMNT,
    ::oo_2_0::LanguageCategoryCode::PASHAI,
    ::oo_2_0::LanguageCategoryCode::PASHTU,
    ::oo_2_0::LanguageCategoryCode::PERSN,
    ::oo_2_0::LanguageCategoryCode::PERSND,
    ::oo_2_0::LanguageCategoryCode::PIDGNE,
    ::oo_2_0::LanguageCategoryCode::POHNPN,
    ::oo_2_0::LanguageCategoryCode::POLISH,
    ::oo_2_0::LanguageCategoryCode::POLYNS,
    ::oo_2_0::LanguageCategoryCode::PORTGS,
    ::oo_2_0::LanguageCategoryCode::PULAR,
    ::oo_2_0::LanguageCategoryCode::PUNJAB,
    ::oo_2_0::LanguageCategoryCode::QIECHA,
    ::oo_2_0::LanguageCategoryCode::QUICHE,
    ::oo_2_0::LanguageCategoryCode::ROMNAN,
    ::oo_2_0::LanguageCategoryCode::ROMNSC,
    ::oo_2_0::LanguageCategoryCode::RUSSAN,
    ::oo_2_0::LanguageCategoryCode::SAMOAN,
    ::oo_2_0::LanguageCategoryCode::SANGHO,
    ::oo_2_0::LanguageCategoryCode::SANSKT,
    ::oo_2_0::LanguageCategoryCode::SARA,
    ::oo_2_0::LanguageCategoryCode::SCOTGA,
    ::oo_2_0::LanguageCategoryCode::SERBOC,
    ::oo_2_0::LanguageCategoryCode::SESTHS,
    ::oo_2_0::LanguageCategoryCode::SETSWN,
    ::oo_2_0::LanguageCategoryCode::SHONA,
    ::oo_2_0::LanguageCategoryCode::SINDBL,
    ::oo_2_0::LanguageCategoryCode::SINDHI,
    ::oo_2_0::LanguageCategoryCode::SINHAL,
    ::oo_2_0::LanguageCategoryCode::SIWATI,
    ::oo_2_0::LanguageCategoryCode::SLOVAK,
    ::oo_2_0::LanguageCategoryCode::SLOVNE,
    ::oo_2_0::LanguageCategoryCode::SLOVNN,
    ::oo_2_0::LanguageCategoryCode::SOMALI,
    ::oo_2_0::LanguageCategoryCode::SONNKE,
    ::oo_2_0::LanguageCategoryCode::SONSRL,
    ::oo_2_0::LanguageCategoryCode::SPANSH,
    ::oo_2_0::LanguageCategoryCode::SPNBSQ,
    ::oo_2_0::LanguageCategoryCode::SPNCST,
    ::oo_2_0::LanguageCategoryCode::SPNCTL,
    ::oo_2_0::LanguageCategoryCode::SPNGLC,
    ::oo_2_0::LanguageCategoryCode::SRNNTN,
    ::oo_2_0::LanguageCategoryCode::SUDANC,
    ::oo_2_0::LanguageCategoryCode::SURNMS,
    ::oo_2_0::LanguageCategoryCode::SWAHIL,
    ::oo_2_0::LanguageCategoryCode::SWEDSH,
    ::oo_2_0::LanguageCategoryCode::TABEDW,
    ::oo_2_0::LanguageCategoryCode::TAHTAN,
    ::oo_2_0::LanguageCategoryCode::TAIWNS,
    ::oo_2_0::LanguageCategoryCode::TAJIK,
    ::oo_2_0::LanguageCategoryCode::TAKITK,
    ::oo_2_0::LanguageCategoryCode::TAMIL,
    ::oo_2_0::LanguageCategoryCode::TELUGU,
    ::oo_2_0::LanguageCategoryCode::TEMNE,
    ::oo_2_0::LanguageCategoryCode::THAI,
    ::oo_2_0::LanguageCategoryCode::TIGRE,
    ::oo_2_0::LanguageCategoryCode::TIGRNY,
    ::oo_2_0::LanguageCategoryCode::TOBI,
    ::oo_2_0::LanguageCategoryCode::TOKELN,
    ::oo_2_0::LanguageCategoryCode::TONGAN,
    ::oo_2_0::LanguageCategoryCode::TOSK,
    ::oo_2_0::LanguageCategoryCode::TRUKES,
    ::oo_2_0::LanguageCategoryCode::TSHLUB,
    ::oo_2_0::LanguageCategoryCode::TSWANA,
    ::oo_2_0::LanguageCategoryCode::TURKIC,
    ::oo_2_0::LanguageCategoryCode::TURKMN,
    ::oo_2_0::LanguageCategoryCode::TURKSH,
    ::oo_2_0::LanguageCategoryCode::TUVALN,
    ::oo_2_0::LanguageCategoryCode::UKRANN,
    ::oo_2_0::LanguageCategoryCode::URDU,
    ::oo_2_0::LanguageCategoryCode::UZBEK,
    ::oo_2_0::LanguageCategoryCode::VIETNM,
    ::oo_2_0::LanguageCategoryCode::WALLSN,
    ::oo_2_0::LanguageCategoryCode::WELSH,
    ::oo_2_0::LanguageCategoryCode::WOLOF,
    ::oo_2_0::LanguageCategoryCode::WUSHNG,
    ::oo_2_0::LanguageCategoryCode::XHOSA,
    ::oo_2_0::LanguageCategoryCode::XIANG,
    ::oo_2_0::LanguageCategoryCode::YAPESE,
    ::oo_2_0::LanguageCategoryCode::YORUBA,
    ::oo_2_0::LanguageCategoryCode::YUECNT,
    ::oo_2_0::LanguageCategoryCode::ZULU
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LanguageCategoryCode >
  _xsd_LanguageCategoryCode_type_factory_init (
    "LanguageCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LanguageSkillProficiencyCode
  //

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LanguageSkillProficiencyCode_convert ();
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LanguageSkillProficiencyCode_convert ();
  }

  LanguageSkillProficiencyCode::
  LanguageSkillProficiencyCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LanguageSkillProficiencyCode_convert ();
  }

  LanguageSkillProficiencyCode* LanguageSkillProficiencyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LanguageSkillProficiencyCode (*this, f, c);
  }

  LanguageSkillProficiencyCode::value LanguageSkillProficiencyCode::
  _xsd_LanguageSkillProficiencyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LanguageSkillProficiencyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LanguageSkillProficiencyCode_indexes_,
                      _xsd_LanguageSkillProficiencyCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_LanguageSkillProficiencyCode_indexes_ + 6 || _xsd_LanguageSkillProficiencyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LanguageSkillProficiencyCode::
  _xsd_LanguageSkillProficiencyCode_literals_[6] =
  {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5"
  };

  const LanguageSkillProficiencyCode::value LanguageSkillProficiencyCode::
  _xsd_LanguageSkillProficiencyCode_indexes_[6] =
  {
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_0,
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_1,
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_2,
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_3,
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_4,
    ::oo_2_0::LanguageSkillProficiencyCode::cxx_5
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LanguageSkillProficiencyCode >
  _xsd_LanguageSkillProficiencyCode_type_factory_init (
    "LanguageSkillProficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LightCategoryCode
  //

  LightCategoryCode::
  LightCategoryCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LightCategoryCode_convert ();
  }

  LightCategoryCode::
  LightCategoryCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LightCategoryCode_convert ();
  }

  LightCategoryCode::
  LightCategoryCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LightCategoryCode_convert ();
  }

  LightCategoryCode* LightCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LightCategoryCode (*this, f, c);
  }

  LightCategoryCode::value LightCategoryCode::
  _xsd_LightCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LightCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LightCategoryCode_indexes_,
                      _xsd_LightCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_LightCategoryCode_indexes_ + 5 || _xsd_LightCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LightCategoryCode::
  _xsd_LightCategoryCode_literals_[5] =
  {
    "CIVIL",
    "DARK",
    "DAY",
    "MOON",
    "NAUTIC"
  };

  const LightCategoryCode::value LightCategoryCode::
  _xsd_LightCategoryCode_indexes_[5] =
  {
    ::oo_2_0::LightCategoryCode::CIVIL,
    ::oo_2_0::LightCategoryCode::DARK,
    ::oo_2_0::LightCategoryCode::DAY,
    ::oo_2_0::LightCategoryCode::MOON,
    ::oo_2_0::LightCategoryCode::NAUTIC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LightCategoryCode >
  _xsd_LightCategoryCode_type_factory_init (
    "LightCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LightMoonPhaseCode
  //

  LightMoonPhaseCode::
  LightMoonPhaseCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LightMoonPhaseCode_convert ();
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LightMoonPhaseCode_convert ();
  }

  LightMoonPhaseCode::
  LightMoonPhaseCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LightMoonPhaseCode_convert ();
  }

  LightMoonPhaseCode* LightMoonPhaseCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LightMoonPhaseCode (*this, f, c);
  }

  LightMoonPhaseCode::value LightMoonPhaseCode::
  _xsd_LightMoonPhaseCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LightMoonPhaseCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LightMoonPhaseCode_indexes_,
                      _xsd_LightMoonPhaseCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_LightMoonPhaseCode_indexes_ + 4 || _xsd_LightMoonPhaseCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LightMoonPhaseCode::
  _xsd_LightMoonPhaseCode_literals_[4] =
  {
    "FUL",
    "NEW",
    "WAN",
    "WAX"
  };

  const LightMoonPhaseCode::value LightMoonPhaseCode::
  _xsd_LightMoonPhaseCode_indexes_[4] =
  {
    ::oo_2_0::LightMoonPhaseCode::FUL,
    ::oo_2_0::LightMoonPhaseCode::NEW,
    ::oo_2_0::LightMoonPhaseCode::WAN,
    ::oo_2_0::LightMoonPhaseCode::WAX
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LightMoonPhaseCode >
  _xsd_LightMoonPhaseCode_type_factory_init (
    "LightMoonPhaseCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LiquidSurfaceStatusSeaStateCode
  //

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LiquidSurfaceStatusSeaStateCode_convert ();
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LiquidSurfaceStatusSeaStateCode_convert ();
  }

  LiquidSurfaceStatusSeaStateCode::
  LiquidSurfaceStatusSeaStateCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LiquidSurfaceStatusSeaStateCode_convert ();
  }

  LiquidSurfaceStatusSeaStateCode* LiquidSurfaceStatusSeaStateCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LiquidSurfaceStatusSeaStateCode (*this, f, c);
  }

  LiquidSurfaceStatusSeaStateCode::value LiquidSurfaceStatusSeaStateCode::
  _xsd_LiquidSurfaceStatusSeaStateCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LiquidSurfaceStatusSeaStateCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LiquidSurfaceStatusSeaStateCode_indexes_,
                      _xsd_LiquidSurfaceStatusSeaStateCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_LiquidSurfaceStatusSeaStateCode_indexes_ + 10 || _xsd_LiquidSurfaceStatusSeaStateCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LiquidSurfaceStatusSeaStateCode::
  _xsd_LiquidSurfaceStatusSeaStateCode_literals_[10] =
  {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
  };

  const LiquidSurfaceStatusSeaStateCode::value LiquidSurfaceStatusSeaStateCode::
  _xsd_LiquidSurfaceStatusSeaStateCode_indexes_[10] =
  {
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_0,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_1,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_2,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_3,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_4,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_5,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_6,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_7,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_8,
    ::oo_2_0::LiquidSurfaceStatusSeaStateCode::cxx_9
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidSurfaceStatusSeaStateCode >
  _xsd_LiquidSurfaceStatusSeaStateCode_type_factory_init (
    "LiquidSurfaceStatusSeaStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LiquidSurfaceStatusSurfaceConditionCode
  //

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LiquidSurfaceStatusSurfaceConditionCode_convert ();
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LiquidSurfaceStatusSurfaceConditionCode_convert ();
  }

  LiquidSurfaceStatusSurfaceConditionCode::
  LiquidSurfaceStatusSurfaceConditionCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LiquidSurfaceStatusSurfaceConditionCode_convert ();
  }

  LiquidSurfaceStatusSurfaceConditionCode* LiquidSurfaceStatusSurfaceConditionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LiquidSurfaceStatusSurfaceConditionCode (*this, f, c);
  }

  LiquidSurfaceStatusSurfaceConditionCode::value LiquidSurfaceStatusSurfaceConditionCode::
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LiquidSurfaceStatusSurfaceConditionCode_indexes_,
                      _xsd_LiquidSurfaceStatusSurfaceConditionCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_LiquidSurfaceStatusSurfaceConditionCode_indexes_ + 5 || _xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LiquidSurfaceStatusSurfaceConditionCode::
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_[5] =
  {
    "DRAIND",
    "ICE",
    "LIQUID",
    "MIXED",
    "NKN"
  };

  const LiquidSurfaceStatusSurfaceConditionCode::value LiquidSurfaceStatusSurfaceConditionCode::
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_indexes_[5] =
  {
    ::oo_2_0::LiquidSurfaceStatusSurfaceConditionCode::DRAIND,
    ::oo_2_0::LiquidSurfaceStatusSurfaceConditionCode::ICE,
    ::oo_2_0::LiquidSurfaceStatusSurfaceConditionCode::LIQUID,
    ::oo_2_0::LiquidSurfaceStatusSurfaceConditionCode::MIXED,
    ::oo_2_0::LiquidSurfaceStatusSurfaceConditionCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidSurfaceStatusSurfaceConditionCode >
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_type_factory_init (
    "LiquidSurfaceStatusSurfaceConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // LocationCategoryCode
  //

  LocationCategoryCode::
  LocationCategoryCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_LocationCategoryCode_convert ();
  }

  LocationCategoryCode::
  LocationCategoryCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_LocationCategoryCode_convert ();
  }

  LocationCategoryCode::
  LocationCategoryCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_LocationCategoryCode_convert ();
  }

  LocationCategoryCode* LocationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LocationCategoryCode (*this, f, c);
  }

  LocationCategoryCode::value LocationCategoryCode::
  _xsd_LocationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LocationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_LocationCategoryCode_indexes_,
                      _xsd_LocationCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_LocationCategoryCode_indexes_ + 5 || _xsd_LocationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LocationCategoryCode::
  _xsd_LocationCategoryCode_literals_[5] =
  {
    "LN",
    "PT",
    "SURFAC",
    "UND",
    "VL"
  };

  const LocationCategoryCode::value LocationCategoryCode::
  _xsd_LocationCategoryCode_indexes_[5] =
  {
    ::oo_2_0::LocationCategoryCode::LN,
    ::oo_2_0::LocationCategoryCode::PT,
    ::oo_2_0::LocationCategoryCode::SURFAC,
    ::oo_2_0::LocationCategoryCode::UND,
    ::oo_2_0::LocationCategoryCode::VL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, LocationCategoryCode >
  _xsd_LocationCategoryCode_type_factory_init (
    "LocationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MainActivityCode
  //

  MainActivityCode::
  MainActivityCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MainActivityCode_convert ();
  }

  MainActivityCode::
  MainActivityCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MainActivityCode_convert ();
  }

  MainActivityCode::
  MainActivityCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MainActivityCode_convert ();
  }

  MainActivityCode* MainActivityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MainActivityCode (*this, f, c);
  }

  MainActivityCode::value MainActivityCode::
  _xsd_MainActivityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MainActivityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MainActivityCode_indexes_,
                      _xsd_MainActivityCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_MainActivityCode_indexes_ + 7 || _xsd_MainActivityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MainActivityCode::
  _xsd_MainActivityCode_literals_[7] =
  {
    "AGRCPR",
    "EDUCPR",
    "FOODPR",
    "HLTHPR",
    "INFSPR",
    "NOS",
    "SOCLPR"
  };

  const MainActivityCode::value MainActivityCode::
  _xsd_MainActivityCode_indexes_[7] =
  {
    ::oo_2_0::MainActivityCode::AGRCPR,
    ::oo_2_0::MainActivityCode::EDUCPR,
    ::oo_2_0::MainActivityCode::FOODPR,
    ::oo_2_0::MainActivityCode::HLTHPR,
    ::oo_2_0::MainActivityCode::INFSPR,
    ::oo_2_0::MainActivityCode::NOS,
    ::oo_2_0::MainActivityCode::SOCLPR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MainActivityCode >
  _xsd_MainActivityCode_type_factory_init (
    "MainActivityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaintenanceCapabilityCategoryCode
  //

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaintenanceCapabilityCategoryCode_convert ();
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaintenanceCapabilityCategoryCode_convert ();
  }

  MaintenanceCapabilityCategoryCode::
  MaintenanceCapabilityCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaintenanceCapabilityCategoryCode_convert ();
  }

  MaintenanceCapabilityCategoryCode* MaintenanceCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaintenanceCapabilityCategoryCode (*this, f, c);
  }

  MaintenanceCapabilityCategoryCode::value MaintenanceCapabilityCategoryCode::
  _xsd_MaintenanceCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaintenanceCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaintenanceCapabilityCategoryCode_indexes_,
                      _xsd_MaintenanceCapabilityCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_MaintenanceCapabilityCategoryCode_indexes_ + 10 || _xsd_MaintenanceCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaintenanceCapabilityCategoryCode::
  _xsd_MaintenanceCapabilityCategoryCode_literals_[10] =
  {
    "CABLE",
    "ELEC",
    "NAVGTE",
    "PLUMBN",
    "PNTSHP",
    "SHPWRG",
    "SHTBLS",
    "STEAM",
    "STLFBR",
    "TNKCLN"
  };

  const MaintenanceCapabilityCategoryCode::value MaintenanceCapabilityCategoryCode::
  _xsd_MaintenanceCapabilityCategoryCode_indexes_[10] =
  {
    ::oo_2_0::MaintenanceCapabilityCategoryCode::CABLE,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::ELEC,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::NAVGTE,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::PLUMBN,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::PNTSHP,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::SHPWRG,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::SHTBLS,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::STEAM,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::STLFBR,
    ::oo_2_0::MaintenanceCapabilityCategoryCode::TNKCLN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaintenanceCapabilityCategoryCode >
  _xsd_MaintenanceCapabilityCategoryCode_type_factory_init (
    "MaintenanceCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaintenanceCapabilityLevelCode
  //

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaintenanceCapabilityLevelCode_convert ();
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaintenanceCapabilityLevelCode_convert ();
  }

  MaintenanceCapabilityLevelCode::
  MaintenanceCapabilityLevelCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaintenanceCapabilityLevelCode_convert ();
  }

  MaintenanceCapabilityLevelCode* MaintenanceCapabilityLevelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaintenanceCapabilityLevelCode (*this, f, c);
  }

  MaintenanceCapabilityLevelCode::value MaintenanceCapabilityLevelCode::
  _xsd_MaintenanceCapabilityLevelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaintenanceCapabilityLevelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaintenanceCapabilityLevelCode_indexes_,
                      _xsd_MaintenanceCapabilityLevelCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MaintenanceCapabilityLevelCode_indexes_ + 4 || _xsd_MaintenanceCapabilityLevelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaintenanceCapabilityLevelCode::
  _xsd_MaintenanceCapabilityLevelCode_literals_[4] =
  {
    "A",
    "B",
    "C",
    "D"
  };

  const MaintenanceCapabilityLevelCode::value MaintenanceCapabilityLevelCode::
  _xsd_MaintenanceCapabilityLevelCode_indexes_[4] =
  {
    ::oo_2_0::MaintenanceCapabilityLevelCode::A,
    ::oo_2_0::MaintenanceCapabilityLevelCode::B,
    ::oo_2_0::MaintenanceCapabilityLevelCode::C,
    ::oo_2_0::MaintenanceCapabilityLevelCode::D
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaintenanceCapabilityLevelCode >
  _xsd_MaintenanceCapabilityLevelCode_type_factory_init (
    "MaintenanceCapabilityLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaritimeEquipmentTypeCategoryCode
  //

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaritimeEquipmentTypeCategoryCode_convert ();
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaritimeEquipmentTypeCategoryCode_convert ();
  }

  MaritimeEquipmentTypeCategoryCode::
  MaritimeEquipmentTypeCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaritimeEquipmentTypeCategoryCode_convert ();
  }

  MaritimeEquipmentTypeCategoryCode* MaritimeEquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaritimeEquipmentTypeCategoryCode (*this, f, c);
  }

  MaritimeEquipmentTypeCategoryCode::value MaritimeEquipmentTypeCategoryCode::
  _xsd_MaritimeEquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaritimeEquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaritimeEquipmentTypeCategoryCode_indexes_,
                      _xsd_MaritimeEquipmentTypeCategoryCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_MaritimeEquipmentTypeCategoryCode_indexes_ + 25 || _xsd_MaritimeEquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaritimeEquipmentTypeCategoryCode::
  _xsd_MaritimeEquipmentTypeCategoryCode_literals_[25] =
  {
    "ANCHOR",
    "BUOY",
    "CUTTER",
    "DCLAUN",
    "DIAPHR",
    "DVERTR",
    "ELCTRD",
    "FLOAT",
    "KITEDP",
    "MECHNF",
    "MRTMDV",
    "NKN",
    "NOS",
    "OBSTRM",
    "OTTER",
    "PARVNE",
    "PELLET",
    "RADARR",
    "RBBRMR",
    "SONARM",
    "SWEEP",
    "SWELLR",
    "TASVST",
    "TTASVS",
    "WEIGHT"
  };

  const MaritimeEquipmentTypeCategoryCode::value MaritimeEquipmentTypeCategoryCode::
  _xsd_MaritimeEquipmentTypeCategoryCode_indexes_[25] =
  {
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::ANCHOR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::BUOY,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::CUTTER,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::DCLAUN,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::DIAPHR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::DVERTR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::ELCTRD,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::FLOAT,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::KITEDP,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::MECHNF,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::MRTMDV,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::NKN,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::NOS,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::OBSTRM,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::OTTER,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::PARVNE,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::PELLET,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::RADARR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::RBBRMR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::SONARM,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::SWEEP,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::SWELLR,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::TASVST,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::TTASVS,
    ::oo_2_0::MaritimeEquipmentTypeCategoryCode::WEIGHT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaritimeEquipmentTypeCategoryCode >
  _xsd_MaritimeEquipmentTypeCategoryCode_type_factory_init (
    "MaritimeEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaritimeEquipmentTypeSubcategoryCode
  //

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaritimeEquipmentTypeSubcategoryCode_convert ();
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaritimeEquipmentTypeSubcategoryCode_convert ();
  }

  MaritimeEquipmentTypeSubcategoryCode::
  MaritimeEquipmentTypeSubcategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaritimeEquipmentTypeSubcategoryCode_convert ();
  }

  MaritimeEquipmentTypeSubcategoryCode* MaritimeEquipmentTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaritimeEquipmentTypeSubcategoryCode (*this, f, c);
  }

  MaritimeEquipmentTypeSubcategoryCode::value MaritimeEquipmentTypeSubcategoryCode::
  _xsd_MaritimeEquipmentTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaritimeEquipmentTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaritimeEquipmentTypeSubcategoryCode_indexes_,
                      _xsd_MaritimeEquipmentTypeSubcategoryCode_indexes_ + 62,
                      *this,
                      c));

    if (i == _xsd_MaritimeEquipmentTypeSubcategoryCode_indexes_ + 62 || _xsd_MaritimeEquipmentTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaritimeEquipmentTypeSubcategoryCode::
  _xsd_MaritimeEquipmentTypeSubcategoryCode_literals_[62] =
  {
    "BUOYBC",
    "BUOYDN",
    "BUOYDP",
    "BUOYDT",
    "BUOYMR",
    "BUOYMS",
    "BUOYNV",
    "BUOYPM",
    "BUOYPS",
    "BUOYSD",
    "BUOYSS",
    "CUTTEN",
    "CUTTEX",
    "CUTTST",
    "MCDFRR",
    "MCJZBR",
    "NOS",
    "SHF",
    "SONARB",
    "SONOAC",
    "SONOCA",
    "SONODC",
    "SONOPA",
    "SONRAC",
    "SONRCR",
    "SONRDA",
    "SONRDP",
    "SONRDT",
    "SONRHH",
    "SONRPS",
    "SONRRD",
    "SONRSH",
    "SONRVA",
    "SONRVP",
    "STAFF",
    "SUBTAS",
    "SUBTSS",
    "SUBTWA",
    "SWPAAF",
    "SWPACC",
    "SWPACE",
    "SWPACL",
    "SWPACO",
    "SWPHAC",
    "SWPHMA",
    "SWPHME",
    "SWPHVA",
    "SWPHVE",
    "SWPHVM",
    "SWPMCC",
    "SWPMCN",
    "SWPMCS",
    "SWPMCT",
    "SWPMEC",
    "SWPMGA",
    "SWPMGC",
    "SWPMGE",
    "SWPMGO",
    "SWPMGS",
    "SWPORO",
    "SWPPRS",
    "SWPPRT"
  };

  const MaritimeEquipmentTypeSubcategoryCode::value MaritimeEquipmentTypeSubcategoryCode::
  _xsd_MaritimeEquipmentTypeSubcategoryCode_indexes_[62] =
  {
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYBC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYDN,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYDP,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYDT,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYMR,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYMS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYNV,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYPM,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYPS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYSD,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::BUOYSS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::CUTTEN,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::CUTTEX,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::CUTTST,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::MCDFRR,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::MCJZBR,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::NOS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SHF,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONARB,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONOAC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONOCA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONODC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONOPA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRAC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRCR,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRDA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRDP,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRDT,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRHH,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRPS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRRD,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRSH,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRVA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SONRVP,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::STAFF,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SUBTAS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SUBTSS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SUBTWA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPAAF,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPACC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPACE,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPACL,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPACO,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHAC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHMA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHME,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHVA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHVE,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPHVM,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMCC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMCN,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMCS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMCT,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMEC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMGA,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMGC,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMGE,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMGO,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPMGS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPORO,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPPRS,
    ::oo_2_0::MaritimeEquipmentTypeSubcategoryCode::SWPPRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaritimeEquipmentTypeSubcategoryCode >
  _xsd_MaritimeEquipmentTypeSubcategoryCode_type_factory_init (
    "MaritimeEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielCategoryCode
  //

  MaterielCategoryCode::
  MaterielCategoryCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielCategoryCode_convert ();
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielCategoryCode_convert ();
  }

  MaterielCategoryCode::
  MaterielCategoryCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielCategoryCode_convert ();
  }

  MaterielCategoryCode* MaterielCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielCategoryCode (*this, f, c);
  }

  MaterielCategoryCode::value MaterielCategoryCode::
  _xsd_MaterielCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielCategoryCode_indexes_,
                      _xsd_MaterielCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MaterielCategoryCode_indexes_ + 2 || _xsd_MaterielCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielCategoryCode::
  _xsd_MaterielCategoryCode_literals_[2] =
  {
    "ILS",
    "NOS"
  };

  const MaterielCategoryCode::value MaterielCategoryCode::
  _xsd_MaterielCategoryCode_indexes_[2] =
  {
    ::oo_2_0::MaterielCategoryCode::ILS,
    ::oo_2_0::MaterielCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielCategoryCode >
  _xsd_MaterielCategoryCode_type_factory_init (
    "MaterielCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusBodyColourCode
  //

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusBodyColourCode_convert ();
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusBodyColourCode_convert ();
  }

  MaterielStatusBodyColourCode::
  MaterielStatusBodyColourCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusBodyColourCode_convert ();
  }

  MaterielStatusBodyColourCode* MaterielStatusBodyColourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusBodyColourCode (*this, f, c);
  }

  MaterielStatusBodyColourCode::value MaterielStatusBodyColourCode::
  _xsd_MaterielStatusBodyColourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusBodyColourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusBodyColourCode_indexes_,
                      _xsd_MaterielStatusBodyColourCode_indexes_ + 33,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusBodyColourCode_indexes_ + 33 || _xsd_MaterielStatusBodyColourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusBodyColourCode::
  _xsd_MaterielStatusBodyColourCode_literals_[33] =
  {
    "AUBURN",
    "BEIGE",
    "BLACK",
    "BLUE",
    "BLUELG",
    "BRONZE",
    "BROWN",
    "CAMDSG",
    "CAMDSR",
    "CAMWNT",
    "CAMWOD",
    "CHROME",
    "COPPER",
    "CREAM",
    "GOLD",
    "GREEN",
    "GREEND",
    "GREENL",
    "GREY",
    "LAVNDR",
    "MAROON",
    "MULTI",
    "NKN",
    "NOS",
    "ORANGE",
    "PURPLE",
    "RED",
    "RUST",
    "SILVER",
    "TAN",
    "TURQSE",
    "WHITE",
    "YELLOW"
  };

  const MaterielStatusBodyColourCode::value MaterielStatusBodyColourCode::
  _xsd_MaterielStatusBodyColourCode_indexes_[33] =
  {
    ::oo_2_0::MaterielStatusBodyColourCode::AUBURN,
    ::oo_2_0::MaterielStatusBodyColourCode::BEIGE,
    ::oo_2_0::MaterielStatusBodyColourCode::BLACK,
    ::oo_2_0::MaterielStatusBodyColourCode::BLUE,
    ::oo_2_0::MaterielStatusBodyColourCode::BLUELG,
    ::oo_2_0::MaterielStatusBodyColourCode::BRONZE,
    ::oo_2_0::MaterielStatusBodyColourCode::BROWN,
    ::oo_2_0::MaterielStatusBodyColourCode::CAMDSG,
    ::oo_2_0::MaterielStatusBodyColourCode::CAMDSR,
    ::oo_2_0::MaterielStatusBodyColourCode::CAMWNT,
    ::oo_2_0::MaterielStatusBodyColourCode::CAMWOD,
    ::oo_2_0::MaterielStatusBodyColourCode::CHROME,
    ::oo_2_0::MaterielStatusBodyColourCode::COPPER,
    ::oo_2_0::MaterielStatusBodyColourCode::CREAM,
    ::oo_2_0::MaterielStatusBodyColourCode::GOLD,
    ::oo_2_0::MaterielStatusBodyColourCode::GREEN,
    ::oo_2_0::MaterielStatusBodyColourCode::GREEND,
    ::oo_2_0::MaterielStatusBodyColourCode::GREENL,
    ::oo_2_0::MaterielStatusBodyColourCode::GREY,
    ::oo_2_0::MaterielStatusBodyColourCode::LAVNDR,
    ::oo_2_0::MaterielStatusBodyColourCode::MAROON,
    ::oo_2_0::MaterielStatusBodyColourCode::MULTI,
    ::oo_2_0::MaterielStatusBodyColourCode::NKN,
    ::oo_2_0::MaterielStatusBodyColourCode::NOS,
    ::oo_2_0::MaterielStatusBodyColourCode::ORANGE,
    ::oo_2_0::MaterielStatusBodyColourCode::PURPLE,
    ::oo_2_0::MaterielStatusBodyColourCode::RED,
    ::oo_2_0::MaterielStatusBodyColourCode::RUST,
    ::oo_2_0::MaterielStatusBodyColourCode::SILVER,
    ::oo_2_0::MaterielStatusBodyColourCode::TAN,
    ::oo_2_0::MaterielStatusBodyColourCode::TURQSE,
    ::oo_2_0::MaterielStatusBodyColourCode::WHITE,
    ::oo_2_0::MaterielStatusBodyColourCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusBodyColourCode >
  _xsd_MaterielStatusBodyColourCode_type_factory_init (
    "MaterielStatusBodyColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusBuoyMalfunctionCode
  //

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusBuoyMalfunctionCode_convert ();
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusBuoyMalfunctionCode_convert ();
  }

  MaterielStatusBuoyMalfunctionCode::
  MaterielStatusBuoyMalfunctionCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusBuoyMalfunctionCode_convert ();
  }

  MaterielStatusBuoyMalfunctionCode* MaterielStatusBuoyMalfunctionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusBuoyMalfunctionCode (*this, f, c);
  }

  MaterielStatusBuoyMalfunctionCode::value MaterielStatusBuoyMalfunctionCode::
  _xsd_MaterielStatusBuoyMalfunctionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusBuoyMalfunctionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusBuoyMalfunctionCode_indexes_,
                      _xsd_MaterielStatusBuoyMalfunctionCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusBuoyMalfunctionCode_indexes_ + 5 || _xsd_MaterielStatusBuoyMalfunctionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusBuoyMalfunctionCode::
  _xsd_MaterielStatusBuoyMalfunctionCode_literals_[5] =
  {
    "BUOYNT",
    "NOFLAG",
    "NOLGHT",
    "NORADR",
    "SERVCE"
  };

  const MaterielStatusBuoyMalfunctionCode::value MaterielStatusBuoyMalfunctionCode::
  _xsd_MaterielStatusBuoyMalfunctionCode_indexes_[5] =
  {
    ::oo_2_0::MaterielStatusBuoyMalfunctionCode::BUOYNT,
    ::oo_2_0::MaterielStatusBuoyMalfunctionCode::NOFLAG,
    ::oo_2_0::MaterielStatusBuoyMalfunctionCode::NOLGHT,
    ::oo_2_0::MaterielStatusBuoyMalfunctionCode::NORADR,
    ::oo_2_0::MaterielStatusBuoyMalfunctionCode::SERVCE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusBuoyMalfunctionCode >
  _xsd_MaterielStatusBuoyMalfunctionCode_type_factory_init (
    "MaterielStatusBuoyMalfunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusCategoryCode
  //

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusCategoryCode_convert ();
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusCategoryCode_convert ();
  }

  MaterielStatusCategoryCode::
  MaterielStatusCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusCategoryCode_convert ();
  }

  MaterielStatusCategoryCode* MaterielStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusCategoryCode (*this, f, c);
  }

  MaterielStatusCategoryCode::value MaterielStatusCategoryCode::
  _xsd_MaterielStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusCategoryCode_indexes_,
                      _xsd_MaterielStatusCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusCategoryCode_indexes_ + 3 || _xsd_MaterielStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusCategoryCode::
  _xsd_MaterielStatusCategoryCode_literals_[3] =
  {
    "MNESTA",
    "NOS",
    "UXOSTA"
  };

  const MaterielStatusCategoryCode::value MaterielStatusCategoryCode::
  _xsd_MaterielStatusCategoryCode_indexes_[3] =
  {
    ::oo_2_0::MaterielStatusCategoryCode::MNESTA,
    ::oo_2_0::MaterielStatusCategoryCode::NOS,
    ::oo_2_0::MaterielStatusCategoryCode::UXOSTA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusCategoryCode >
  _xsd_MaterielStatusCategoryCode_type_factory_init (
    "MaterielStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusImoCompliantIndicatorCode
  //

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusImoCompliantIndicatorCode_convert ();
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusImoCompliantIndicatorCode_convert ();
  }

  MaterielStatusImoCompliantIndicatorCode::
  MaterielStatusImoCompliantIndicatorCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusImoCompliantIndicatorCode_convert ();
  }

  MaterielStatusImoCompliantIndicatorCode* MaterielStatusImoCompliantIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusImoCompliantIndicatorCode (*this, f, c);
  }

  MaterielStatusImoCompliantIndicatorCode::value MaterielStatusImoCompliantIndicatorCode::
  _xsd_MaterielStatusImoCompliantIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusImoCompliantIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusImoCompliantIndicatorCode_indexes_,
                      _xsd_MaterielStatusImoCompliantIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusImoCompliantIndicatorCode_indexes_ + 2 || _xsd_MaterielStatusImoCompliantIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusImoCompliantIndicatorCode::
  _xsd_MaterielStatusImoCompliantIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const MaterielStatusImoCompliantIndicatorCode::value MaterielStatusImoCompliantIndicatorCode::
  _xsd_MaterielStatusImoCompliantIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::MaterielStatusImoCompliantIndicatorCode::NO,
    ::oo_2_0::MaterielStatusImoCompliantIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusImoCompliantIndicatorCode >
  _xsd_MaterielStatusImoCompliantIndicatorCode_type_factory_init (
    "MaterielStatusImoCompliantIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusMarkingCode
  //

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusMarkingCode_convert ();
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusMarkingCode_convert ();
  }

  MaterielStatusMarkingCode::
  MaterielStatusMarkingCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusMarkingCode_convert ();
  }

  MaterielStatusMarkingCode* MaterielStatusMarkingCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusMarkingCode (*this, f, c);
  }

  MaterielStatusMarkingCode::value MaterielStatusMarkingCode::
  _xsd_MaterielStatusMarkingCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusMarkingCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusMarkingCode_indexes_,
                      _xsd_MaterielStatusMarkingCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusMarkingCode_indexes_ + 7 || _xsd_MaterielStatusMarkingCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusMarkingCode::
  _xsd_MaterielStatusMarkingCode_literals_[7] =
  {
    "NKN",
    "NOS",
    "NUMBER",
    "STRIPE",
    "STRIPS",
    "SYMBOL",
    "WRITNG"
  };

  const MaterielStatusMarkingCode::value MaterielStatusMarkingCode::
  _xsd_MaterielStatusMarkingCode_indexes_[7] =
  {
    ::oo_2_0::MaterielStatusMarkingCode::NKN,
    ::oo_2_0::MaterielStatusMarkingCode::NOS,
    ::oo_2_0::MaterielStatusMarkingCode::NUMBER,
    ::oo_2_0::MaterielStatusMarkingCode::STRIPE,
    ::oo_2_0::MaterielStatusMarkingCode::STRIPS,
    ::oo_2_0::MaterielStatusMarkingCode::SYMBOL,
    ::oo_2_0::MaterielStatusMarkingCode::WRITNG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusMarkingCode >
  _xsd_MaterielStatusMarkingCode_type_factory_init (
    "MaterielStatusMarkingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusMarkingColourCode
  //

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusMarkingColourCode_convert ();
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusMarkingColourCode_convert ();
  }

  MaterielStatusMarkingColourCode::
  MaterielStatusMarkingColourCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusMarkingColourCode_convert ();
  }

  MaterielStatusMarkingColourCode* MaterielStatusMarkingColourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusMarkingColourCode (*this, f, c);
  }

  MaterielStatusMarkingColourCode::value MaterielStatusMarkingColourCode::
  _xsd_MaterielStatusMarkingColourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusMarkingColourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusMarkingColourCode_indexes_,
                      _xsd_MaterielStatusMarkingColourCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusMarkingColourCode_indexes_ + 14 || _xsd_MaterielStatusMarkingColourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusMarkingColourCode::
  _xsd_MaterielStatusMarkingColourCode_literals_[14] =
  {
    "BLACK",
    "BLUE",
    "BROWN",
    "GREEN",
    "GREY",
    "NKN",
    "NOS",
    "ORANGE",
    "PURPLE",
    "RED",
    "SILVER",
    "TAN",
    "WHITE",
    "YELLOW"
  };

  const MaterielStatusMarkingColourCode::value MaterielStatusMarkingColourCode::
  _xsd_MaterielStatusMarkingColourCode_indexes_[14] =
  {
    ::oo_2_0::MaterielStatusMarkingColourCode::BLACK,
    ::oo_2_0::MaterielStatusMarkingColourCode::BLUE,
    ::oo_2_0::MaterielStatusMarkingColourCode::BROWN,
    ::oo_2_0::MaterielStatusMarkingColourCode::GREEN,
    ::oo_2_0::MaterielStatusMarkingColourCode::GREY,
    ::oo_2_0::MaterielStatusMarkingColourCode::NKN,
    ::oo_2_0::MaterielStatusMarkingColourCode::NOS,
    ::oo_2_0::MaterielStatusMarkingColourCode::ORANGE,
    ::oo_2_0::MaterielStatusMarkingColourCode::PURPLE,
    ::oo_2_0::MaterielStatusMarkingColourCode::RED,
    ::oo_2_0::MaterielStatusMarkingColourCode::SILVER,
    ::oo_2_0::MaterielStatusMarkingColourCode::TAN,
    ::oo_2_0::MaterielStatusMarkingColourCode::WHITE,
    ::oo_2_0::MaterielStatusMarkingColourCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusMarkingColourCode >
  _xsd_MaterielStatusMarkingColourCode_type_factory_init (
    "MaterielStatusMarkingColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusOperationalStatusCode
  //

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusCode_convert ();
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusOperationalStatusCode_convert ();
  }

  MaterielStatusOperationalStatusCode::
  MaterielStatusOperationalStatusCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusCode_convert ();
  }

  MaterielStatusOperationalStatusCode* MaterielStatusOperationalStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusOperationalStatusCode (*this, f, c);
  }

  MaterielStatusOperationalStatusCode::value MaterielStatusOperationalStatusCode::
  _xsd_MaterielStatusOperationalStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusOperationalStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusOperationalStatusCode_indexes_,
                      _xsd_MaterielStatusOperationalStatusCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusOperationalStatusCode_indexes_ + 6 || _xsd_MaterielStatusOperationalStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusOperationalStatusCode::
  _xsd_MaterielStatusOperationalStatusCode_literals_[6] =
  {
    "MOPS",
    "NKN",
    "NOP",
    "OPR",
    "SOPS",
    "TNOPS"
  };

  const MaterielStatusOperationalStatusCode::value MaterielStatusOperationalStatusCode::
  _xsd_MaterielStatusOperationalStatusCode_indexes_[6] =
  {
    ::oo_2_0::MaterielStatusOperationalStatusCode::MOPS,
    ::oo_2_0::MaterielStatusOperationalStatusCode::NKN,
    ::oo_2_0::MaterielStatusOperationalStatusCode::NOP,
    ::oo_2_0::MaterielStatusOperationalStatusCode::OPR,
    ::oo_2_0::MaterielStatusOperationalStatusCode::SOPS,
    ::oo_2_0::MaterielStatusOperationalStatusCode::TNOPS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusOperationalStatusCode >
  _xsd_MaterielStatusOperationalStatusCode_type_factory_init (
    "MaterielStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusOperationalStatusModeCode
  //

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusModeCode_convert ();
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusOperationalStatusModeCode_convert ();
  }

  MaterielStatusOperationalStatusModeCode::
  MaterielStatusOperationalStatusModeCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusModeCode_convert ();
  }

  MaterielStatusOperationalStatusModeCode* MaterielStatusOperationalStatusModeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusOperationalStatusModeCode (*this, f, c);
  }

  MaterielStatusOperationalStatusModeCode::value MaterielStatusOperationalStatusModeCode::
  _xsd_MaterielStatusOperationalStatusModeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusOperationalStatusModeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusOperationalStatusModeCode_indexes_,
                      _xsd_MaterielStatusOperationalStatusModeCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusOperationalStatusModeCode_indexes_ + 8 || _xsd_MaterielStatusOperationalStatusModeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusOperationalStatusModeCode::
  _xsd_MaterielStatusOperationalStatusModeCode_literals_[8] =
  {
    "CO",
    "FC",
    "FMC",
    "FO",
    "MC",
    "MF",
    "MO",
    "NKN"
  };

  const MaterielStatusOperationalStatusModeCode::value MaterielStatusOperationalStatusModeCode::
  _xsd_MaterielStatusOperationalStatusModeCode_indexes_[8] =
  {
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::CO,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::FC,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::FMC,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::FO,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::MC,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::MF,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::MO,
    ::oo_2_0::MaterielStatusOperationalStatusModeCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusOperationalStatusModeCode >
  _xsd_MaterielStatusOperationalStatusModeCode_type_factory_init (
    "MaterielStatusOperationalStatusModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusOperationalStatusQualifierCode
  //

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusQualifierCode_convert ();
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusOperationalStatusQualifierCode_convert ();
  }

  MaterielStatusOperationalStatusQualifierCode::
  MaterielStatusOperationalStatusQualifierCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusOperationalStatusQualifierCode_convert ();
  }

  MaterielStatusOperationalStatusQualifierCode* MaterielStatusOperationalStatusQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusOperationalStatusQualifierCode (*this, f, c);
  }

  MaterielStatusOperationalStatusQualifierCode::value MaterielStatusOperationalStatusQualifierCode::
  _xsd_MaterielStatusOperationalStatusQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusOperationalStatusQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusOperationalStatusQualifierCode_indexes_,
                      _xsd_MaterielStatusOperationalStatusQualifierCode_indexes_ + 16,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusOperationalStatusQualifierCode_indexes_ + 16 || _xsd_MaterielStatusOperationalStatusQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusOperationalStatusQualifierCode::
  _xsd_MaterielStatusOperationalStatusQualifierCode_literals_[16] =
  {
    "CLEARD",
    "DENIED",
    "DISASM",
    "DSTRYD",
    "HVYDAM",
    "IMMBLS",
    "INMNT",
    "INTREC",
    "LGTDAM",
    "LST",
    "LVR",
    "MODDAM",
    "MTHBLD",
    "NKN",
    "SCRPPD",
    "STERLZ"
  };

  const MaterielStatusOperationalStatusQualifierCode::value MaterielStatusOperationalStatusQualifierCode::
  _xsd_MaterielStatusOperationalStatusQualifierCode_indexes_[16] =
  {
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::CLEARD,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::DENIED,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::DISASM,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::DSTRYD,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::HVYDAM,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::IMMBLS,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::INMNT,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::INTREC,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::LGTDAM,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::LST,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::LVR,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::MODDAM,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::MTHBLD,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::NKN,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::SCRPPD,
    ::oo_2_0::MaterielStatusOperationalStatusQualifierCode::STERLZ
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusOperationalStatusQualifierCode >
  _xsd_MaterielStatusOperationalStatusQualifierCode_type_factory_init (
    "MaterielStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusReserveIndicatorCode
  //

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusReserveIndicatorCode_convert ();
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusReserveIndicatorCode_convert ();
  }

  MaterielStatusReserveIndicatorCode::
  MaterielStatusReserveIndicatorCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusReserveIndicatorCode_convert ();
  }

  MaterielStatusReserveIndicatorCode* MaterielStatusReserveIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusReserveIndicatorCode (*this, f, c);
  }

  MaterielStatusReserveIndicatorCode::value MaterielStatusReserveIndicatorCode::
  _xsd_MaterielStatusReserveIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusReserveIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusReserveIndicatorCode_indexes_,
                      _xsd_MaterielStatusReserveIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusReserveIndicatorCode_indexes_ + 2 || _xsd_MaterielStatusReserveIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusReserveIndicatorCode::
  _xsd_MaterielStatusReserveIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const MaterielStatusReserveIndicatorCode::value MaterielStatusReserveIndicatorCode::
  _xsd_MaterielStatusReserveIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::MaterielStatusReserveIndicatorCode::NO,
    ::oo_2_0::MaterielStatusReserveIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusReserveIndicatorCode >
  _xsd_MaterielStatusReserveIndicatorCode_type_factory_init (
    "MaterielStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielStatusSafetyStatusCode
  //

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielStatusSafetyStatusCode_convert ();
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielStatusSafetyStatusCode_convert ();
  }

  MaterielStatusSafetyStatusCode::
  MaterielStatusSafetyStatusCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielStatusSafetyStatusCode_convert ();
  }

  MaterielStatusSafetyStatusCode* MaterielStatusSafetyStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielStatusSafetyStatusCode (*this, f, c);
  }

  MaterielStatusSafetyStatusCode::value MaterielStatusSafetyStatusCode::
  _xsd_MaterielStatusSafetyStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielStatusSafetyStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielStatusSafetyStatusCode_indexes_,
                      _xsd_MaterielStatusSafetyStatusCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_MaterielStatusSafetyStatusCode_indexes_ + 5 || _xsd_MaterielStatusSafetyStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielStatusSafetyStatusCode::
  _xsd_MaterielStatusSafetyStatusCode_literals_[5] =
  {
    "ARMED",
    "NUTRLD",
    "NKN",
    "SAFE",
    "UNASMB"
  };

  const MaterielStatusSafetyStatusCode::value MaterielStatusSafetyStatusCode::
  _xsd_MaterielStatusSafetyStatusCode_indexes_[5] =
  {
    ::oo_2_0::MaterielStatusSafetyStatusCode::ARMED,
    ::oo_2_0::MaterielStatusSafetyStatusCode::NKN,
    ::oo_2_0::MaterielStatusSafetyStatusCode::NUTRLD,
    ::oo_2_0::MaterielStatusSafetyStatusCode::SAFE,
    ::oo_2_0::MaterielStatusSafetyStatusCode::UNASMB
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielStatusSafetyStatusCode >
  _xsd_MaterielStatusSafetyStatusCode_type_factory_init (
    "MaterielStatusSafetyStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielTypeCategoryCode
  //

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielTypeCategoryCode_convert ();
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielTypeCategoryCode_convert ();
  }

  MaterielTypeCategoryCode::
  MaterielTypeCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielTypeCategoryCode_convert ();
  }

  MaterielTypeCategoryCode* MaterielTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielTypeCategoryCode (*this, f, c);
  }

  MaterielTypeCategoryCode::value MaterielTypeCategoryCode::
  _xsd_MaterielTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielTypeCategoryCode_indexes_,
                      _xsd_MaterielTypeCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MaterielTypeCategoryCode_indexes_ + 3 || _xsd_MaterielTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielTypeCategoryCode::
  _xsd_MaterielTypeCategoryCode_literals_[3] =
  {
    "CM",
    "EQ",
    "NOS"
  };

  const MaterielTypeCategoryCode::value MaterielTypeCategoryCode::
  _xsd_MaterielTypeCategoryCode_indexes_[3] =
  {
    ::oo_2_0::MaterielTypeCategoryCode::CM,
    ::oo_2_0::MaterielTypeCategoryCode::EQ,
    ::oo_2_0::MaterielTypeCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielTypeCategoryCode >
  _xsd_MaterielTypeCategoryCode_type_factory_init (
    "MaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MaterielTypeSupplyClassCode
  //

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MaterielTypeSupplyClassCode_convert ();
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MaterielTypeSupplyClassCode_convert ();
  }

  MaterielTypeSupplyClassCode::
  MaterielTypeSupplyClassCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MaterielTypeSupplyClassCode_convert ();
  }

  MaterielTypeSupplyClassCode* MaterielTypeSupplyClassCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MaterielTypeSupplyClassCode (*this, f, c);
  }

  MaterielTypeSupplyClassCode::value MaterielTypeSupplyClassCode::
  _xsd_MaterielTypeSupplyClassCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MaterielTypeSupplyClassCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MaterielTypeSupplyClassCode_indexes_,
                      _xsd_MaterielTypeSupplyClassCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_MaterielTypeSupplyClassCode_indexes_ + 6 || _xsd_MaterielTypeSupplyClassCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MaterielTypeSupplyClassCode::
  _xsd_MaterielTypeSupplyClassCode_literals_[6] =
  {
    "CLS1",
    "CLS2",
    "CLS3",
    "CLS3A",
    "CLS4",
    "CLS5"
  };

  const MaterielTypeSupplyClassCode::value MaterielTypeSupplyClassCode::
  _xsd_MaterielTypeSupplyClassCode_indexes_[6] =
  {
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS1,
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS2,
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS3,
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS3A,
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS4,
    ::oo_2_0::MaterielTypeSupplyClassCode::CLS5
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaterielTypeSupplyClassCode >
  _xsd_MaterielTypeSupplyClassCode_type_factory_init (
    "MaterielTypeSupplyClassCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MedicalFacilityStatusIntervalCasualtyTypeCode
  //

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_convert ();
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_convert ();
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::
  MedicalFacilityStatusIntervalCasualtyTypeCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_convert ();
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode* MedicalFacilityStatusIntervalCasualtyTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MedicalFacilityStatusIntervalCasualtyTypeCode (*this, f, c);
  }

  MedicalFacilityStatusIntervalCasualtyTypeCode::value MedicalFacilityStatusIntervalCasualtyTypeCode::
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_indexes_,
                      _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_indexes_ + 4 || _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MedicalFacilityStatusIntervalCasualtyTypeCode::
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_[4] =
  {
    "BTLSTR",
    "DISEAS",
    "NONBAT",
    "WOUND"
  };

  const MedicalFacilityStatusIntervalCasualtyTypeCode::value MedicalFacilityStatusIntervalCasualtyTypeCode::
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_indexes_[4] =
  {
    ::oo_2_0::MedicalFacilityStatusIntervalCasualtyTypeCode::BTLSTR,
    ::oo_2_0::MedicalFacilityStatusIntervalCasualtyTypeCode::DISEAS,
    ::oo_2_0::MedicalFacilityStatusIntervalCasualtyTypeCode::NONBAT,
    ::oo_2_0::MedicalFacilityStatusIntervalCasualtyTypeCode::WOUND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MedicalFacilityStatusIntervalCasualtyTypeCode >
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_type_factory_init (
    "MedicalFacilityStatusIntervalCasualtyTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MedicalFacilityStatusPendingSurgeryTriageCode
  //

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_convert ();
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_convert ();
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::
  MedicalFacilityStatusPendingSurgeryTriageCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_convert ();
  }

  MedicalFacilityStatusPendingSurgeryTriageCode* MedicalFacilityStatusPendingSurgeryTriageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MedicalFacilityStatusPendingSurgeryTriageCode (*this, f, c);
  }

  MedicalFacilityStatusPendingSurgeryTriageCode::value MedicalFacilityStatusPendingSurgeryTriageCode::
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_indexes_,
                      _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_indexes_ + 3 || _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MedicalFacilityStatusPendingSurgeryTriageCode::
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_[3] =
  {
    "T1",
    "T2",
    "T3"
  };

  const MedicalFacilityStatusPendingSurgeryTriageCode::value MedicalFacilityStatusPendingSurgeryTriageCode::
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_indexes_[3] =
  {
    ::oo_2_0::MedicalFacilityStatusPendingSurgeryTriageCode::T1,
    ::oo_2_0::MedicalFacilityStatusPendingSurgeryTriageCode::T2,
    ::oo_2_0::MedicalFacilityStatusPendingSurgeryTriageCode::T3
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MedicalFacilityStatusPendingSurgeryTriageCode >
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_type_factory_init (
    "MedicalFacilityStatusPendingSurgeryTriageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MeteorologicFeatureCategoryCode
  //

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MeteorologicFeatureCategoryCode_convert ();
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MeteorologicFeatureCategoryCode_convert ();
  }

  MeteorologicFeatureCategoryCode::
  MeteorologicFeatureCategoryCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MeteorologicFeatureCategoryCode_convert ();
  }

  MeteorologicFeatureCategoryCode* MeteorologicFeatureCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MeteorologicFeatureCategoryCode (*this, f, c);
  }

  MeteorologicFeatureCategoryCode::value MeteorologicFeatureCategoryCode::
  _xsd_MeteorologicFeatureCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MeteorologicFeatureCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MeteorologicFeatureCategoryCode_indexes_,
                      _xsd_MeteorologicFeatureCategoryCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_MeteorologicFeatureCategoryCode_indexes_ + 21 || _xsd_MeteorologicFeatureCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MeteorologicFeatureCategoryCode::
  _xsd_MeteorologicFeatureCategoryCode_literals_[21] =
  {
    "ATMOS",
    "COVER",
    "CYCL",
    "FNLCLD",
    "HURR",
    "ICING",
    "JTSTRM",
    "LGTNNG",
    "LIGHT",
    "NOS",
    "PRECIP",
    "STORM",
    "THST",
    "THSTRN",
    "TORN",
    "TRST",
    "TYPH",
    "VISIB",
    "WHIR",
    "WIND",
    "WTRSPT"
  };

  const MeteorologicFeatureCategoryCode::value MeteorologicFeatureCategoryCode::
  _xsd_MeteorologicFeatureCategoryCode_indexes_[21] =
  {
    ::oo_2_0::MeteorologicFeatureCategoryCode::ATMOS,
    ::oo_2_0::MeteorologicFeatureCategoryCode::COVER,
    ::oo_2_0::MeteorologicFeatureCategoryCode::CYCL,
    ::oo_2_0::MeteorologicFeatureCategoryCode::FNLCLD,
    ::oo_2_0::MeteorologicFeatureCategoryCode::HURR,
    ::oo_2_0::MeteorologicFeatureCategoryCode::ICING,
    ::oo_2_0::MeteorologicFeatureCategoryCode::JTSTRM,
    ::oo_2_0::MeteorologicFeatureCategoryCode::LGTNNG,
    ::oo_2_0::MeteorologicFeatureCategoryCode::LIGHT,
    ::oo_2_0::MeteorologicFeatureCategoryCode::NOS,
    ::oo_2_0::MeteorologicFeatureCategoryCode::PRECIP,
    ::oo_2_0::MeteorologicFeatureCategoryCode::STORM,
    ::oo_2_0::MeteorologicFeatureCategoryCode::THST,
    ::oo_2_0::MeteorologicFeatureCategoryCode::THSTRN,
    ::oo_2_0::MeteorologicFeatureCategoryCode::TORN,
    ::oo_2_0::MeteorologicFeatureCategoryCode::TRST,
    ::oo_2_0::MeteorologicFeatureCategoryCode::TYPH,
    ::oo_2_0::MeteorologicFeatureCategoryCode::VISIB,
    ::oo_2_0::MeteorologicFeatureCategoryCode::WHIR,
    ::oo_2_0::MeteorologicFeatureCategoryCode::WIND,
    ::oo_2_0::MeteorologicFeatureCategoryCode::WTRSPT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MeteorologicFeatureCategoryCode >
  _xsd_MeteorologicFeatureCategoryCode_type_factory_init (
    "MeteorologicFeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MeteorologicFeatureInterpretationCode
  //

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MeteorologicFeatureInterpretationCode_convert ();
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MeteorologicFeatureInterpretationCode_convert ();
  }

  MeteorologicFeatureInterpretationCode::
  MeteorologicFeatureInterpretationCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MeteorologicFeatureInterpretationCode_convert ();
  }

  MeteorologicFeatureInterpretationCode* MeteorologicFeatureInterpretationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MeteorologicFeatureInterpretationCode (*this, f, c);
  }

  MeteorologicFeatureInterpretationCode::value MeteorologicFeatureInterpretationCode::
  _xsd_MeteorologicFeatureInterpretationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MeteorologicFeatureInterpretationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MeteorologicFeatureInterpretationCode_indexes_,
                      _xsd_MeteorologicFeatureInterpretationCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_MeteorologicFeatureInterpretationCode_indexes_ + 5 || _xsd_MeteorologicFeatureInterpretationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MeteorologicFeatureInterpretationCode::
  _xsd_MeteorologicFeatureInterpretationCode_literals_[5] =
  {
    "ABMAX",
    "ABMIN",
    "AVMAX",
    "AVMIN",
    "NOMIN"
  };

  const MeteorologicFeatureInterpretationCode::value MeteorologicFeatureInterpretationCode::
  _xsd_MeteorologicFeatureInterpretationCode_indexes_[5] =
  {
    ::oo_2_0::MeteorologicFeatureInterpretationCode::ABMAX,
    ::oo_2_0::MeteorologicFeatureInterpretationCode::ABMIN,
    ::oo_2_0::MeteorologicFeatureInterpretationCode::AVMAX,
    ::oo_2_0::MeteorologicFeatureInterpretationCode::AVMIN,
    ::oo_2_0::MeteorologicFeatureInterpretationCode::NOMIN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MeteorologicFeatureInterpretationCode >
  _xsd_MeteorologicFeatureInterpretationCode_type_factory_init (
    "MeteorologicFeatureInterpretationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MeteorologicFeatureSourceCode
  //

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MeteorologicFeatureSourceCode_convert ();
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MeteorologicFeatureSourceCode_convert ();
  }

  MeteorologicFeatureSourceCode::
  MeteorologicFeatureSourceCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MeteorologicFeatureSourceCode_convert ();
  }

  MeteorologicFeatureSourceCode* MeteorologicFeatureSourceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MeteorologicFeatureSourceCode (*this, f, c);
  }

  MeteorologicFeatureSourceCode::value MeteorologicFeatureSourceCode::
  _xsd_MeteorologicFeatureSourceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MeteorologicFeatureSourceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MeteorologicFeatureSourceCode_indexes_,
                      _xsd_MeteorologicFeatureSourceCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MeteorologicFeatureSourceCode_indexes_ + 2 || _xsd_MeteorologicFeatureSourceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MeteorologicFeatureSourceCode::
  _xsd_MeteorologicFeatureSourceCode_literals_[2] =
  {
    "FOR",
    "OBSRVD"
  };

  const MeteorologicFeatureSourceCode::value MeteorologicFeatureSourceCode::
  _xsd_MeteorologicFeatureSourceCode_indexes_[2] =
  {
    ::oo_2_0::MeteorologicFeatureSourceCode::FOR,
    ::oo_2_0::MeteorologicFeatureSourceCode::OBSRVD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MeteorologicFeatureSourceCode >
  _xsd_MeteorologicFeatureSourceCode_type_factory_init (
    "MeteorologicFeatureSourceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryObstacleCategoryCode
  //

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryObstacleCategoryCode_convert ();
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryObstacleCategoryCode_convert ();
  }

  MilitaryObstacleCategoryCode::
  MilitaryObstacleCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryObstacleCategoryCode_convert ();
  }

  MilitaryObstacleCategoryCode* MilitaryObstacleCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryObstacleCategoryCode (*this, f, c);
  }

  MilitaryObstacleCategoryCode::value MilitaryObstacleCategoryCode::
  _xsd_MilitaryObstacleCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryObstacleCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryObstacleCategoryCode_indexes_,
                      _xsd_MilitaryObstacleCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MilitaryObstacleCategoryCode_indexes_ + 2 || _xsd_MilitaryObstacleCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryObstacleCategoryCode::
  _xsd_MilitaryObstacleCategoryCode_literals_[2] =
  {
    "MNFLD",
    "NOS"
  };

  const MilitaryObstacleCategoryCode::value MilitaryObstacleCategoryCode::
  _xsd_MilitaryObstacleCategoryCode_indexes_[2] =
  {
    ::oo_2_0::MilitaryObstacleCategoryCode::MNFLD,
    ::oo_2_0::MilitaryObstacleCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryObstacleCategoryCode >
  _xsd_MilitaryObstacleCategoryCode_type_factory_init (
    "MilitaryObstacleCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryObstacleTypeCategoryCode
  //

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryObstacleTypeCategoryCode_convert ();
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryObstacleTypeCategoryCode_convert ();
  }

  MilitaryObstacleTypeCategoryCode::
  MilitaryObstacleTypeCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryObstacleTypeCategoryCode_convert ();
  }

  MilitaryObstacleTypeCategoryCode* MilitaryObstacleTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryObstacleTypeCategoryCode (*this, f, c);
  }

  MilitaryObstacleTypeCategoryCode::value MilitaryObstacleTypeCategoryCode::
  _xsd_MilitaryObstacleTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryObstacleTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryObstacleTypeCategoryCode_indexes_,
                      _xsd_MilitaryObstacleTypeCategoryCode_indexes_ + 32,
                      *this,
                      c));

    if (i == _xsd_MilitaryObstacleTypeCategoryCode_indexes_ + 32 || _xsd_MilitaryObstacleTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryObstacleTypeCategoryCode::
  _xsd_MilitaryObstacleTypeCategoryCode_literals_[32] =
  {
    "ABATIS",
    "ANTOBS",
    "ANTWAL",
    "ATDTCH",
    "BARBEN",
    "BARVEH",
    "BPSOBS",
    "CRATER",
    "DCHNOS",
    "DGT",
    "DMDBRS",
    "FBKOBS",
    "MINEAP",
    "MINEAT",
    "MINEFD",
    "MINEMX",
    "MNFLLA",
    "MNFLMA",
    "NOS",
    "ROADBL",
    "TRPWIR",
    "TTRHDN",
    "WALL",
    "WIRAFN",
    "WIRDCN",
    "WIRDFN",
    "WIRHFN",
    "WIRLFN",
    "WIRNOS",
    "WIRSCN",
    "WIRSFN",
    "WIRTCN"
  };

  const MilitaryObstacleTypeCategoryCode::value MilitaryObstacleTypeCategoryCode::
  _xsd_MilitaryObstacleTypeCategoryCode_indexes_[32] =
  {
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::ABATIS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::ANTOBS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::ANTWAL,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::ATDTCH,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::BARBEN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::BARVEH,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::BPSOBS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::CRATER,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::DCHNOS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::DGT,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::DMDBRS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::FBKOBS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MINEAP,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MINEAT,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MINEFD,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MINEMX,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MNFLLA,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::MNFLMA,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::NOS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::ROADBL,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::TRPWIR,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::TTRHDN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WALL,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRAFN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRDCN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRDFN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRHFN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRLFN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRNOS,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRSCN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRSFN,
    ::oo_2_0::MilitaryObstacleTypeCategoryCode::WIRTCN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryObstacleTypeCategoryCode >
  _xsd_MilitaryObstacleTypeCategoryCode_type_factory_init (
    "MilitaryObstacleTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryObstacleTypeSubcategoryCode
  //

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryObstacleTypeSubcategoryCode_convert ();
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryObstacleTypeSubcategoryCode_convert ();
  }

  MilitaryObstacleTypeSubcategoryCode::
  MilitaryObstacleTypeSubcategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryObstacleTypeSubcategoryCode_convert ();
  }

  MilitaryObstacleTypeSubcategoryCode* MilitaryObstacleTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryObstacleTypeSubcategoryCode (*this, f, c);
  }

  MilitaryObstacleTypeSubcategoryCode::value MilitaryObstacleTypeSubcategoryCode::
  _xsd_MilitaryObstacleTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryObstacleTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryObstacleTypeSubcategoryCode_indexes_,
                      _xsd_MilitaryObstacleTypeSubcategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MilitaryObstacleTypeSubcategoryCode_indexes_ + 3 || _xsd_MilitaryObstacleTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryObstacleTypeSubcategoryCode::
  _xsd_MilitaryObstacleTypeSubcategoryCode_literals_[3] =
  {
    "FXAMOV",
    "MOVABL",
    "MOVAPR"
  };

  const MilitaryObstacleTypeSubcategoryCode::value MilitaryObstacleTypeSubcategoryCode::
  _xsd_MilitaryObstacleTypeSubcategoryCode_indexes_[3] =
  {
    ::oo_2_0::MilitaryObstacleTypeSubcategoryCode::FXAMOV,
    ::oo_2_0::MilitaryObstacleTypeSubcategoryCode::MOVABL,
    ::oo_2_0::MilitaryObstacleTypeSubcategoryCode::MOVAPR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryObstacleTypeSubcategoryCode >
  _xsd_MilitaryObstacleTypeSubcategoryCode_type_factory_init (
    "MilitaryObstacleTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryOrganisationTypeCategoryCode
  //

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryOrganisationTypeCategoryCode_convert ();
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryOrganisationTypeCategoryCode_convert ();
  }

  MilitaryOrganisationTypeCategoryCode::
  MilitaryOrganisationTypeCategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryOrganisationTypeCategoryCode_convert ();
  }

  MilitaryOrganisationTypeCategoryCode* MilitaryOrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryOrganisationTypeCategoryCode (*this, f, c);
  }

  MilitaryOrganisationTypeCategoryCode::value MilitaryOrganisationTypeCategoryCode::
  _xsd_MilitaryOrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryOrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryOrganisationTypeCategoryCode_indexes_,
                      _xsd_MilitaryOrganisationTypeCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_MilitaryOrganisationTypeCategoryCode_indexes_ + 5 || _xsd_MilitaryOrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryOrganisationTypeCategoryCode::
  _xsd_MilitaryOrganisationTypeCategoryCode_literals_[5] =
  {
    "EXCMIL",
    "MILPST",
    "NOS",
    "TASK",
    "UNIT"
  };

  const MilitaryOrganisationTypeCategoryCode::value MilitaryOrganisationTypeCategoryCode::
  _xsd_MilitaryOrganisationTypeCategoryCode_indexes_[5] =
  {
    ::oo_2_0::MilitaryOrganisationTypeCategoryCode::EXCMIL,
    ::oo_2_0::MilitaryOrganisationTypeCategoryCode::MILPST,
    ::oo_2_0::MilitaryOrganisationTypeCategoryCode::NOS,
    ::oo_2_0::MilitaryOrganisationTypeCategoryCode::TASK,
    ::oo_2_0::MilitaryOrganisationTypeCategoryCode::UNIT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryOrganisationTypeCategoryCode >
  _xsd_MilitaryOrganisationTypeCategoryCode_type_factory_init (
    "MilitaryOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryOrganisationTypeServiceCode
  //

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryOrganisationTypeServiceCode_convert ();
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryOrganisationTypeServiceCode_convert ();
  }

  MilitaryOrganisationTypeServiceCode::
  MilitaryOrganisationTypeServiceCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryOrganisationTypeServiceCode_convert ();
  }

  MilitaryOrganisationTypeServiceCode* MilitaryOrganisationTypeServiceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryOrganisationTypeServiceCode (*this, f, c);
  }

  MilitaryOrganisationTypeServiceCode::value MilitaryOrganisationTypeServiceCode::
  _xsd_MilitaryOrganisationTypeServiceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryOrganisationTypeServiceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryOrganisationTypeServiceCode_indexes_,
                      _xsd_MilitaryOrganisationTypeServiceCode_indexes_ + 17,
                      *this,
                      c));

    if (i == _xsd_MilitaryOrganisationTypeServiceCode_indexes_ + 17 || _xsd_MilitaryOrganisationTypeServiceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryOrganisationTypeServiceCode::
  _xsd_MilitaryOrganisationTypeServiceCode_literals_[17] =
  {
    "AIRFRC",
    "ARMY",
    "BRDRGD",
    "COASTG",
    "COMBND",
    "CVLSVC",
    "GUERLL",
    "JOINT",
    "LCLDFF",
    "LCLMLT",
    "MARINE",
    "NAVY",
    "NKN",
    "NOS",
    "PAR",
    "SPFRC",
    "TERFRC"
  };

  const MilitaryOrganisationTypeServiceCode::value MilitaryOrganisationTypeServiceCode::
  _xsd_MilitaryOrganisationTypeServiceCode_indexes_[17] =
  {
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::AIRFRC,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::ARMY,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::BRDRGD,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::COASTG,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::COMBND,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::CVLSVC,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::GUERLL,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::JOINT,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::LCLDFF,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::LCLMLT,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::MARINE,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::NAVY,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::NKN,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::NOS,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::PAR,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::SPFRC,
    ::oo_2_0::MilitaryOrganisationTypeServiceCode::TERFRC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryOrganisationTypeServiceCode >
  _xsd_MilitaryOrganisationTypeServiceCode_type_factory_init (
    "MilitaryOrganisationTypeServiceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryPostTypeCategoryCode
  //

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryPostTypeCategoryCode_convert ();
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryPostTypeCategoryCode_convert ();
  }

  MilitaryPostTypeCategoryCode::
  MilitaryPostTypeCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryPostTypeCategoryCode_convert ();
  }

  MilitaryPostTypeCategoryCode* MilitaryPostTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryPostTypeCategoryCode (*this, f, c);
  }

  MilitaryPostTypeCategoryCode::value MilitaryPostTypeCategoryCode::
  _xsd_MilitaryPostTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryPostTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryPostTypeCategoryCode_indexes_,
                      _xsd_MilitaryPostTypeCategoryCode_indexes_ + 38,
                      *this,
                      c));

    if (i == _xsd_MilitaryPostTypeCategoryCode_indexes_ + 38 || _xsd_MilitaryPostTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryPostTypeCategoryCode::
  _xsd_MilitaryPostTypeCategoryCode_literals_[38] =
  {
    "AHLCDR",
    "AIRLSN",
    "AJAATC",
    "ANSPHY",
    "APAUTH",
    "ARBNMC",
    "ASCAIR",
    "AUTCDR",
    "DNTPHY",
    "FAC",
    "FACAIR",
    "FOOAOP",
    "GMCDR",
    "GUNNER",
    "GYNPHY",
    "HDNPHY",
    "INMPHY",
    "INTOFF",
    "JAATC",
    "LIAISN",
    "MANTCH",
    "MCKNET",
    "NOS",
    "OPSOFF",
    "ORTPHY",
    "OTHPHY",
    "POC",
    "PRCPHY",
    "PSYPHY",
    "PTHPHY",
    "RADPHY",
    "RFLEMN",
    "SAPPER",
    "SCOUT",
    "SNIPER",
    "SURPHY",
    "TAC",
    "TACAIR"
  };

  const MilitaryPostTypeCategoryCode::value MilitaryPostTypeCategoryCode::
  _xsd_MilitaryPostTypeCategoryCode_indexes_[38] =
  {
    ::oo_2_0::MilitaryPostTypeCategoryCode::AHLCDR,
    ::oo_2_0::MilitaryPostTypeCategoryCode::AIRLSN,
    ::oo_2_0::MilitaryPostTypeCategoryCode::AJAATC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::ANSPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::APAUTH,
    ::oo_2_0::MilitaryPostTypeCategoryCode::ARBNMC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::ASCAIR,
    ::oo_2_0::MilitaryPostTypeCategoryCode::AUTCDR,
    ::oo_2_0::MilitaryPostTypeCategoryCode::DNTPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::FAC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::FACAIR,
    ::oo_2_0::MilitaryPostTypeCategoryCode::FOOAOP,
    ::oo_2_0::MilitaryPostTypeCategoryCode::GMCDR,
    ::oo_2_0::MilitaryPostTypeCategoryCode::GUNNER,
    ::oo_2_0::MilitaryPostTypeCategoryCode::GYNPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::HDNPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::INMPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::INTOFF,
    ::oo_2_0::MilitaryPostTypeCategoryCode::JAATC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::LIAISN,
    ::oo_2_0::MilitaryPostTypeCategoryCode::MANTCH,
    ::oo_2_0::MilitaryPostTypeCategoryCode::MCKNET,
    ::oo_2_0::MilitaryPostTypeCategoryCode::NOS,
    ::oo_2_0::MilitaryPostTypeCategoryCode::OPSOFF,
    ::oo_2_0::MilitaryPostTypeCategoryCode::ORTPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::OTHPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::POC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::PRCPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::PSYPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::PTHPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::RADPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::RFLEMN,
    ::oo_2_0::MilitaryPostTypeCategoryCode::SAPPER,
    ::oo_2_0::MilitaryPostTypeCategoryCode::SCOUT,
    ::oo_2_0::MilitaryPostTypeCategoryCode::SNIPER,
    ::oo_2_0::MilitaryPostTypeCategoryCode::SURPHY,
    ::oo_2_0::MilitaryPostTypeCategoryCode::TAC,
    ::oo_2_0::MilitaryPostTypeCategoryCode::TACAIR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryPostTypeCategoryCode >
  _xsd_MilitaryPostTypeCategoryCode_type_factory_init (
    "MilitaryPostTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MilitaryPostTypeRankCode
  //

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MilitaryPostTypeRankCode_convert ();
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MilitaryPostTypeRankCode_convert ();
  }

  MilitaryPostTypeRankCode::
  MilitaryPostTypeRankCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MilitaryPostTypeRankCode_convert ();
  }

  MilitaryPostTypeRankCode* MilitaryPostTypeRankCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MilitaryPostTypeRankCode (*this, f, c);
  }

  MilitaryPostTypeRankCode::value MilitaryPostTypeRankCode::
  _xsd_MilitaryPostTypeRankCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MilitaryPostTypeRankCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MilitaryPostTypeRankCode_indexes_,
                      _xsd_MilitaryPostTypeRankCode_indexes_ + 24,
                      *this,
                      c));

    if (i == _xsd_MilitaryPostTypeRankCode_indexes_ + 24 || _xsd_MilitaryPostTypeRankCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MilitaryPostTypeRankCode::
  _xsd_MilitaryPostTypeRankCode_literals_[24] =
  {
    "EPTE",
    "NCO",
    "NKN",
    "OF1",
    "OF10",
    "OF2",
    "OF3",
    "OF4",
    "OF5",
    "OF6",
    "OF7",
    "OF8",
    "OF9",
    "OFFR",
    "OR1",
    "OR2",
    "OR3",
    "OR4",
    "OR5",
    "OR6",
    "OR7",
    "OR8",
    "OR9",
    "OTHR"
  };

  const MilitaryPostTypeRankCode::value MilitaryPostTypeRankCode::
  _xsd_MilitaryPostTypeRankCode_indexes_[24] =
  {
    ::oo_2_0::MilitaryPostTypeRankCode::EPTE,
    ::oo_2_0::MilitaryPostTypeRankCode::NCO,
    ::oo_2_0::MilitaryPostTypeRankCode::NKN,
    ::oo_2_0::MilitaryPostTypeRankCode::OF1,
    ::oo_2_0::MilitaryPostTypeRankCode::OF10,
    ::oo_2_0::MilitaryPostTypeRankCode::OF2,
    ::oo_2_0::MilitaryPostTypeRankCode::OF3,
    ::oo_2_0::MilitaryPostTypeRankCode::OF4,
    ::oo_2_0::MilitaryPostTypeRankCode::OF5,
    ::oo_2_0::MilitaryPostTypeRankCode::OF6,
    ::oo_2_0::MilitaryPostTypeRankCode::OF7,
    ::oo_2_0::MilitaryPostTypeRankCode::OF8,
    ::oo_2_0::MilitaryPostTypeRankCode::OF9,
    ::oo_2_0::MilitaryPostTypeRankCode::OFFR,
    ::oo_2_0::MilitaryPostTypeRankCode::OR1,
    ::oo_2_0::MilitaryPostTypeRankCode::OR2,
    ::oo_2_0::MilitaryPostTypeRankCode::OR3,
    ::oo_2_0::MilitaryPostTypeRankCode::OR4,
    ::oo_2_0::MilitaryPostTypeRankCode::OR5,
    ::oo_2_0::MilitaryPostTypeRankCode::OR6,
    ::oo_2_0::MilitaryPostTypeRankCode::OR7,
    ::oo_2_0::MilitaryPostTypeRankCode::OR8,
    ::oo_2_0::MilitaryPostTypeRankCode::OR9,
    ::oo_2_0::MilitaryPostTypeRankCode::OTHR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MilitaryPostTypeRankCode >
  _xsd_MilitaryPostTypeRankCode_type_factory_init (
    "MilitaryPostTypeRankCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinePresenceCode
  //

  MinePresenceCode::
  MinePresenceCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinePresenceCode_convert ();
  }

  MinePresenceCode::
  MinePresenceCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinePresenceCode_convert ();
  }

  MinePresenceCode::
  MinePresenceCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinePresenceCode_convert ();
  }

  MinePresenceCode* MinePresenceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinePresenceCode (*this, f, c);
  }

  MinePresenceCode::value MinePresenceCode::
  _xsd_MinePresenceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinePresenceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinePresenceCode_indexes_,
                      _xsd_MinePresenceCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MinePresenceCode_indexes_ + 3 || _xsd_MinePresenceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinePresenceCode::
  _xsd_MinePresenceCode_literals_[3] =
  {
    "NKN",
    "NO",
    "YES"
  };

  const MinePresenceCode::value MinePresenceCode::
  _xsd_MinePresenceCode_indexes_[3] =
  {
    ::oo_2_0::MinePresenceCode::NKN,
    ::oo_2_0::MinePresenceCode::NO,
    ::oo_2_0::MinePresenceCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinePresenceCode >
  _xsd_MinePresenceCode_type_factory_init (
    "MinePresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MineStatusAirDropEffectCode
  //

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MineStatusAirDropEffectCode_convert ();
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MineStatusAirDropEffectCode_convert ();
  }

  MineStatusAirDropEffectCode::
  MineStatusAirDropEffectCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MineStatusAirDropEffectCode_convert ();
  }

  MineStatusAirDropEffectCode* MineStatusAirDropEffectCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MineStatusAirDropEffectCode (*this, f, c);
  }

  MineStatusAirDropEffectCode::value MineStatusAirDropEffectCode::
  _xsd_MineStatusAirDropEffectCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MineStatusAirDropEffectCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MineStatusAirDropEffectCode_indexes_,
                      _xsd_MineStatusAirDropEffectCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_MineStatusAirDropEffectCode_indexes_ + 14 || _xsd_MineStatusAirDropEffectCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MineStatusAirDropEffectCode::
  _xsd_MineStatusAirDropEffectCode_literals_[14] =
  {
    "ARMMAL",
    "ARMMBU",
    "ARMMS",
    "ARMMSB",
    "NORMAL",
    "PARAM",
    "PARAMB",
    "PARAMS",
    "PARMAL",
    "PARMBU",
    "PARMS",
    "SKIP",
    "SKIPBU",
    "UNK"
  };

  const MineStatusAirDropEffectCode::value MineStatusAirDropEffectCode::
  _xsd_MineStatusAirDropEffectCode_indexes_[14] =
  {
    ::oo_2_0::MineStatusAirDropEffectCode::ARMMAL,
    ::oo_2_0::MineStatusAirDropEffectCode::ARMMBU,
    ::oo_2_0::MineStatusAirDropEffectCode::ARMMS,
    ::oo_2_0::MineStatusAirDropEffectCode::ARMMSB,
    ::oo_2_0::MineStatusAirDropEffectCode::NORMAL,
    ::oo_2_0::MineStatusAirDropEffectCode::PARAM,
    ::oo_2_0::MineStatusAirDropEffectCode::PARAMB,
    ::oo_2_0::MineStatusAirDropEffectCode::PARAMS,
    ::oo_2_0::MineStatusAirDropEffectCode::PARMAL,
    ::oo_2_0::MineStatusAirDropEffectCode::PARMBU,
    ::oo_2_0::MineStatusAirDropEffectCode::PARMS,
    ::oo_2_0::MineStatusAirDropEffectCode::SKIP,
    ::oo_2_0::MineStatusAirDropEffectCode::SKIPBU,
    ::oo_2_0::MineStatusAirDropEffectCode::UNK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MineStatusAirDropEffectCode >
  _xsd_MineStatusAirDropEffectCode_type_factory_init (
    "MineStatusAirDropEffectCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MineStatusCode
  //

  MineStatusCode::
  MineStatusCode (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MineStatusCode_convert ();
  }

  MineStatusCode::
  MineStatusCode (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MineStatusCode_convert ();
  }

  MineStatusCode::
  MineStatusCode (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MineStatusCode_convert ();
  }

  MineStatusCode* MineStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MineStatusCode (*this, f, c);
  }

  MineStatusCode::value MineStatusCode::
  _xsd_MineStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MineStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MineStatusCode_indexes_,
                      _xsd_MineStatusCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_MineStatusCode_indexes_ + 11 || _xsd_MineStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MineStatusCode::
  _xsd_MineStatusCode_literals_[11] =
  {
    "ACTVED",
    "CLSSFD",
    "CNTRMN",
    "IDNTMN",
    "MNLFPL",
    "MRKDMN",
    "NEUTRL",
    "RECVRD",
    "REMOVD",
    "RNDERD",
    "SUNKMN"
  };

  const MineStatusCode::value MineStatusCode::
  _xsd_MineStatusCode_indexes_[11] =
  {
    ::oo_2_0::MineStatusCode::ACTVED,
    ::oo_2_0::MineStatusCode::CLSSFD,
    ::oo_2_0::MineStatusCode::CNTRMN,
    ::oo_2_0::MineStatusCode::IDNTMN,
    ::oo_2_0::MineStatusCode::MNLFPL,
    ::oo_2_0::MineStatusCode::MRKDMN,
    ::oo_2_0::MineStatusCode::NEUTRL,
    ::oo_2_0::MineStatusCode::RECVRD,
    ::oo_2_0::MineStatusCode::REMOVD,
    ::oo_2_0::MineStatusCode::RNDERD,
    ::oo_2_0::MineStatusCode::SUNKMN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MineStatusCode >
  _xsd_MineStatusCode_type_factory_init (
    "MineStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MineStatusMaritimeMineQualifierCode
  //

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MineStatusMaritimeMineQualifierCode_convert ();
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MineStatusMaritimeMineQualifierCode_convert ();
  }

  MineStatusMaritimeMineQualifierCode::
  MineStatusMaritimeMineQualifierCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MineStatusMaritimeMineQualifierCode_convert ();
  }

  MineStatusMaritimeMineQualifierCode* MineStatusMaritimeMineQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MineStatusMaritimeMineQualifierCode (*this, f, c);
  }

  MineStatusMaritimeMineQualifierCode::value MineStatusMaritimeMineQualifierCode::
  _xsd_MineStatusMaritimeMineQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MineStatusMaritimeMineQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MineStatusMaritimeMineQualifierCode_indexes_,
                      _xsd_MineStatusMaritimeMineQualifierCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_MineStatusMaritimeMineQualifierCode_indexes_ + 12 || _xsd_MineStatusMaritimeMineQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MineStatusMaritimeMineQualifierCode::
  _xsd_MineStatusMaritimeMineQualifierCode_literals_[12] =
  {
    "CNTMND",
    "DISPSD",
    "EXPLLS",
    "EXPLRS",
    "FLOATN",
    "FOULED",
    "NEUTRL",
    "NOTDLT",
    "RECVRD",
    "REMOVD",
    "RNDRSF",
    "SUNKEN"
  };

  const MineStatusMaritimeMineQualifierCode::value MineStatusMaritimeMineQualifierCode::
  _xsd_MineStatusMaritimeMineQualifierCode_indexes_[12] =
  {
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::CNTMND,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::DISPSD,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::EXPLLS,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::EXPLRS,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::FLOATN,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::FOULED,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::NEUTRL,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::NOTDLT,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::RECVRD,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::REMOVD,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::RNDRSF,
    ::oo_2_0::MineStatusMaritimeMineQualifierCode::SUNKEN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MineStatusMaritimeMineQualifierCode >
  _xsd_MineStatusMaritimeMineQualifierCode_type_factory_init (
    "MineStatusMaritimeMineQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldCategoryCode
  //

  MinefieldCategoryCode::
  MinefieldCategoryCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldCategoryCode_convert ();
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldCategoryCode_convert ();
  }

  MinefieldCategoryCode::
  MinefieldCategoryCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldCategoryCode_convert ();
  }

  MinefieldCategoryCode* MinefieldCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldCategoryCode (*this, f, c);
  }

  MinefieldCategoryCode::value MinefieldCategoryCode::
  _xsd_MinefieldCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldCategoryCode_indexes_,
                      _xsd_MinefieldCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MinefieldCategoryCode_indexes_ + 2 || _xsd_MinefieldCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldCategoryCode::
  _xsd_MinefieldCategoryCode_literals_[2] =
  {
    "MNFLND",
    "MNFMRT"
  };

  const MinefieldCategoryCode::value MinefieldCategoryCode::
  _xsd_MinefieldCategoryCode_indexes_[2] =
  {
    ::oo_2_0::MinefieldCategoryCode::MNFLND,
    ::oo_2_0::MinefieldCategoryCode::MNFMRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldCategoryCode >
  _xsd_MinefieldCategoryCode_type_factory_init (
    "MinefieldCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldLandDepthPlacementCode
  //

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldLandDepthPlacementCode_convert ();
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldLandDepthPlacementCode_convert ();
  }

  MinefieldLandDepthPlacementCode::
  MinefieldLandDepthPlacementCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldLandDepthPlacementCode_convert ();
  }

  MinefieldLandDepthPlacementCode* MinefieldLandDepthPlacementCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldLandDepthPlacementCode (*this, f, c);
  }

  MinefieldLandDepthPlacementCode::value MinefieldLandDepthPlacementCode::
  _xsd_MinefieldLandDepthPlacementCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldLandDepthPlacementCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldLandDepthPlacementCode_indexes_,
                      _xsd_MinefieldLandDepthPlacementCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MinefieldLandDepthPlacementCode_indexes_ + 4 || _xsd_MinefieldLandDepthPlacementCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldLandDepthPlacementCode::
  _xsd_MinefieldLandDepthPlacementCode_literals_[4] =
  {
    "MIXED",
    "NKN",
    "SUBSRF",
    "SURFCE"
  };

  const MinefieldLandDepthPlacementCode::value MinefieldLandDepthPlacementCode::
  _xsd_MinefieldLandDepthPlacementCode_indexes_[4] =
  {
    ::oo_2_0::MinefieldLandDepthPlacementCode::MIXED,
    ::oo_2_0::MinefieldLandDepthPlacementCode::NKN,
    ::oo_2_0::MinefieldLandDepthPlacementCode::SUBSRF,
    ::oo_2_0::MinefieldLandDepthPlacementCode::SURFCE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldLandDepthPlacementCode >
  _xsd_MinefieldLandDepthPlacementCode_type_factory_init (
    "MinefieldLandDepthPlacementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldLandFunctionCode
  //

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldLandFunctionCode_convert ();
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldLandFunctionCode_convert ();
  }

  MinefieldLandFunctionCode::
  MinefieldLandFunctionCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldLandFunctionCode_convert ();
  }

  MinefieldLandFunctionCode* MinefieldLandFunctionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldLandFunctionCode (*this, f, c);
  }

  MinefieldLandFunctionCode::value MinefieldLandFunctionCode::
  _xsd_MinefieldLandFunctionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldLandFunctionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldLandFunctionCode_indexes_,
                      _xsd_MinefieldLandFunctionCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_MinefieldLandFunctionCode_indexes_ + 6 || _xsd_MinefieldLandFunctionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldLandFunctionCode::
  _xsd_MinefieldLandFunctionCode_literals_[6] =
  {
    "HTACT",
    "LTACT",
    "MTACT",
    "NUISNC",
    "PHONEY",
    "PROTCT"
  };

  const MinefieldLandFunctionCode::value MinefieldLandFunctionCode::
  _xsd_MinefieldLandFunctionCode_indexes_[6] =
  {
    ::oo_2_0::MinefieldLandFunctionCode::HTACT,
    ::oo_2_0::MinefieldLandFunctionCode::LTACT,
    ::oo_2_0::MinefieldLandFunctionCode::MTACT,
    ::oo_2_0::MinefieldLandFunctionCode::NUISNC,
    ::oo_2_0::MinefieldLandFunctionCode::PHONEY,
    ::oo_2_0::MinefieldLandFunctionCode::PROTCT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldLandFunctionCode >
  _xsd_MinefieldLandFunctionCode_type_factory_init (
    "MinefieldLandFunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldLandPatternCode
  //

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldLandPatternCode_convert ();
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldLandPatternCode_convert ();
  }

  MinefieldLandPatternCode::
  MinefieldLandPatternCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldLandPatternCode_convert ();
  }

  MinefieldLandPatternCode* MinefieldLandPatternCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldLandPatternCode (*this, f, c);
  }

  MinefieldLandPatternCode::value MinefieldLandPatternCode::
  _xsd_MinefieldLandPatternCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldLandPatternCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldLandPatternCode_indexes_,
                      _xsd_MinefieldLandPatternCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MinefieldLandPatternCode_indexes_ + 4 || _xsd_MinefieldLandPatternCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldLandPatternCode::
  _xsd_MinefieldLandPatternCode_literals_[4] =
  {
    "NKN",
    "REGMNF",
    "REGTHK",
    "SCATTR"
  };

  const MinefieldLandPatternCode::value MinefieldLandPatternCode::
  _xsd_MinefieldLandPatternCode_indexes_[4] =
  {
    ::oo_2_0::MinefieldLandPatternCode::NKN,
    ::oo_2_0::MinefieldLandPatternCode::REGMNF,
    ::oo_2_0::MinefieldLandPatternCode::REGTHK,
    ::oo_2_0::MinefieldLandPatternCode::SCATTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldLandPatternCode >
  _xsd_MinefieldLandPatternCode_type_factory_init (
    "MinefieldLandPatternCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldLandPersistenceCode
  //

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldLandPersistenceCode_convert ();
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldLandPersistenceCode_convert ();
  }

  MinefieldLandPersistenceCode::
  MinefieldLandPersistenceCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldLandPersistenceCode_convert ();
  }

  MinefieldLandPersistenceCode* MinefieldLandPersistenceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldLandPersistenceCode (*this, f, c);
  }

  MinefieldLandPersistenceCode::value MinefieldLandPersistenceCode::
  _xsd_MinefieldLandPersistenceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldLandPersistenceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldLandPersistenceCode_indexes_,
                      _xsd_MinefieldLandPersistenceCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MinefieldLandPersistenceCode_indexes_ + 4 || _xsd_MinefieldLandPersistenceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldLandPersistenceCode::
  _xsd_MinefieldLandPersistenceCode_literals_[4] =
  {
    "NKN",
    "PERMAN",
    "REMOTE",
    "SLFDST"
  };

  const MinefieldLandPersistenceCode::value MinefieldLandPersistenceCode::
  _xsd_MinefieldLandPersistenceCode_indexes_[4] =
  {
    ::oo_2_0::MinefieldLandPersistenceCode::NKN,
    ::oo_2_0::MinefieldLandPersistenceCode::PERMAN,
    ::oo_2_0::MinefieldLandPersistenceCode::REMOTE,
    ::oo_2_0::MinefieldLandPersistenceCode::SLFDST
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldLandPersistenceCode >
  _xsd_MinefieldLandPersistenceCode_type_factory_init (
    "MinefieldLandPersistenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldLandStoppingPowerCode
  //

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldLandStoppingPowerCode_convert ();
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldLandStoppingPowerCode_convert ();
  }

  MinefieldLandStoppingPowerCode::
  MinefieldLandStoppingPowerCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldLandStoppingPowerCode_convert ();
  }

  MinefieldLandStoppingPowerCode* MinefieldLandStoppingPowerCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldLandStoppingPowerCode (*this, f, c);
  }

  MinefieldLandStoppingPowerCode::value MinefieldLandStoppingPowerCode::
  _xsd_MinefieldLandStoppingPowerCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldLandStoppingPowerCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldLandStoppingPowerCode_indexes_,
                      _xsd_MinefieldLandStoppingPowerCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MinefieldLandStoppingPowerCode_indexes_ + 3 || _xsd_MinefieldLandStoppingPowerCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldLandStoppingPowerCode::
  _xsd_MinefieldLandStoppingPowerCode_literals_[3] =
  {
    "HIGH",
    "LOW",
    "MEDIUM"
  };

  const MinefieldLandStoppingPowerCode::value MinefieldLandStoppingPowerCode::
  _xsd_MinefieldLandStoppingPowerCode_indexes_[3] =
  {
    ::oo_2_0::MinefieldLandStoppingPowerCode::HIGH,
    ::oo_2_0::MinefieldLandStoppingPowerCode::LOW,
    ::oo_2_0::MinefieldLandStoppingPowerCode::MEDIUM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldLandStoppingPowerCode >
  _xsd_MinefieldLandStoppingPowerCode_type_factory_init (
    "MinefieldLandStoppingPowerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeBottomNaturalCamouflageCode
  //

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_convert ();
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_convert ();
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::
  MinefieldMaritimeBottomNaturalCamouflageCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_convert ();
  }

  MinefieldMaritimeBottomNaturalCamouflageCode* MinefieldMaritimeBottomNaturalCamouflageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeBottomNaturalCamouflageCode (*this, f, c);
  }

  MinefieldMaritimeBottomNaturalCamouflageCode::value MinefieldMaritimeBottomNaturalCamouflageCode::
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_indexes_,
                      _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_indexes_ + 8 || _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeBottomNaturalCamouflageCode::
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_[8] =
  {
    "BTMCVR",
    "BTMDEP",
    "IRREGL",
    "NOS",
    "RGHBTM",
    "RTHRST",
    "SFTBTM",
    "STBSMT"
  };

  const MinefieldMaritimeBottomNaturalCamouflageCode::value MinefieldMaritimeBottomNaturalCamouflageCode::
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_indexes_[8] =
  {
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::BTMCVR,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::BTMDEP,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::IRREGL,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::NOS,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::RGHBTM,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::RTHRST,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::SFTBTM,
    ::oo_2_0::MinefieldMaritimeBottomNaturalCamouflageCode::STBSMT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeBottomNaturalCamouflageCode >
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_type_factory_init (
    "MinefieldMaritimeBottomNaturalCamouflageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeDepthPlacementCode
  //

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeDepthPlacementCode_convert ();
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeDepthPlacementCode_convert ();
  }

  MinefieldMaritimeDepthPlacementCode::
  MinefieldMaritimeDepthPlacementCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeDepthPlacementCode_convert ();
  }

  MinefieldMaritimeDepthPlacementCode* MinefieldMaritimeDepthPlacementCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeDepthPlacementCode (*this, f, c);
  }

  MinefieldMaritimeDepthPlacementCode::value MinefieldMaritimeDepthPlacementCode::
  _xsd_MinefieldMaritimeDepthPlacementCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeDepthPlacementCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeDepthPlacementCode_indexes_,
                      _xsd_MinefieldMaritimeDepthPlacementCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeDepthPlacementCode_indexes_ + 5 || _xsd_MinefieldMaritimeDepthPlacementCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeDepthPlacementCode::
  _xsd_MinefieldMaritimeDepthPlacementCode_literals_[5] =
  {
    "BOTTOM",
    "NKN",
    "SEASUR",
    "SURFZN",
    "VOLUME"
  };

  const MinefieldMaritimeDepthPlacementCode::value MinefieldMaritimeDepthPlacementCode::
  _xsd_MinefieldMaritimeDepthPlacementCode_indexes_[5] =
  {
    ::oo_2_0::MinefieldMaritimeDepthPlacementCode::BOTTOM,
    ::oo_2_0::MinefieldMaritimeDepthPlacementCode::NKN,
    ::oo_2_0::MinefieldMaritimeDepthPlacementCode::SEASUR,
    ::oo_2_0::MinefieldMaritimeDepthPlacementCode::SURFZN,
    ::oo_2_0::MinefieldMaritimeDepthPlacementCode::VOLUME
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeDepthPlacementCode >
  _xsd_MinefieldMaritimeDepthPlacementCode_type_factory_init (
    "MinefieldMaritimeDepthPlacementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeFunctionCode
  //

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeFunctionCode_convert ();
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeFunctionCode_convert ();
  }

  MinefieldMaritimeFunctionCode::
  MinefieldMaritimeFunctionCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeFunctionCode_convert ();
  }

  MinefieldMaritimeFunctionCode* MinefieldMaritimeFunctionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeFunctionCode (*this, f, c);
  }

  MinefieldMaritimeFunctionCode::value MinefieldMaritimeFunctionCode::
  _xsd_MinefieldMaritimeFunctionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeFunctionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeFunctionCode_indexes_,
                      _xsd_MinefieldMaritimeFunctionCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeFunctionCode_indexes_ + 3 || _xsd_MinefieldMaritimeFunctionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeFunctionCode::
  _xsd_MinefieldMaritimeFunctionCode_literals_[3] =
  {
    "DEFSV",
    "OFFSV",
    "PROTCT"
  };

  const MinefieldMaritimeFunctionCode::value MinefieldMaritimeFunctionCode::
  _xsd_MinefieldMaritimeFunctionCode_indexes_[3] =
  {
    ::oo_2_0::MinefieldMaritimeFunctionCode::DEFSV,
    ::oo_2_0::MinefieldMaritimeFunctionCode::OFFSV,
    ::oo_2_0::MinefieldMaritimeFunctionCode::PROTCT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeFunctionCode >
  _xsd_MinefieldMaritimeFunctionCode_type_factory_init (
    "MinefieldMaritimeFunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusCode
  //

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusCode_convert ();
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusCode_convert ();
  }

  MinefieldMaritimeStatusCode::
  MinefieldMaritimeStatusCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusCode_convert ();
  }

  MinefieldMaritimeStatusCode* MinefieldMaritimeStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusCode (*this, f, c);
  }

  MinefieldMaritimeStatusCode::value MinefieldMaritimeStatusCode::
  _xsd_MinefieldMaritimeStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusCode_indexes_,
                      _xsd_MinefieldMaritimeStatusCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusCode_indexes_ + 2 || _xsd_MinefieldMaritimeStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusCode::
  _xsd_MinefieldMaritimeStatusCode_literals_[2] =
  {
    "CLOSED",
    "OPEN"
  };

  const MinefieldMaritimeStatusCode::value MinefieldMaritimeStatusCode::
  _xsd_MinefieldMaritimeStatusCode_indexes_[2] =
  {
    ::oo_2_0::MinefieldMaritimeStatusCode::CLOSED,
    ::oo_2_0::MinefieldMaritimeStatusCode::OPEN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusCode >
  _xsd_MinefieldMaritimeStatusCode_type_factory_init (
    "MinefieldMaritimeStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusColourCode
  //

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusColourCode_convert ();
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusColourCode_convert ();
  }

  MinefieldMaritimeStatusColourCode::
  MinefieldMaritimeStatusColourCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusColourCode_convert ();
  }

  MinefieldMaritimeStatusColourCode* MinefieldMaritimeStatusColourCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusColourCode (*this, f, c);
  }

  MinefieldMaritimeStatusColourCode::value MinefieldMaritimeStatusColourCode::
  _xsd_MinefieldMaritimeStatusColourCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusColourCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusColourCode_indexes_,
                      _xsd_MinefieldMaritimeStatusColourCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusColourCode_indexes_ + 3 || _xsd_MinefieldMaritimeStatusColourCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusColourCode::
  _xsd_MinefieldMaritimeStatusColourCode_literals_[3] =
  {
    "GREEN",
    "RED",
    "YELLOW"
  };

  const MinefieldMaritimeStatusColourCode::value MinefieldMaritimeStatusColourCode::
  _xsd_MinefieldMaritimeStatusColourCode_indexes_[3] =
  {
    ::oo_2_0::MinefieldMaritimeStatusColourCode::GREEN,
    ::oo_2_0::MinefieldMaritimeStatusColourCode::RED,
    ::oo_2_0::MinefieldMaritimeStatusColourCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusColourCode >
  _xsd_MinefieldMaritimeStatusColourCode_type_factory_init (
    "MinefieldMaritimeStatusColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusExpectedLevelMcmCode
  //

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_convert ();
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_convert ();
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::
  MinefieldMaritimeStatusExpectedLevelMcmCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_convert ();
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode* MinefieldMaritimeStatusExpectedLevelMcmCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusExpectedLevelMcmCode (*this, f, c);
  }

  MinefieldMaritimeStatusExpectedLevelMcmCode::value MinefieldMaritimeStatusExpectedLevelMcmCode::
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_indexes_,
                      _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_indexes_ + 4 || _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusExpectedLevelMcmCode::
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_[4] =
  {
    "HVYMCM",
    "LGTMCM",
    "MODMCM",
    "NOMCM"
  };

  const MinefieldMaritimeStatusExpectedLevelMcmCode::value MinefieldMaritimeStatusExpectedLevelMcmCode::
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_indexes_[4] =
  {
    ::oo_2_0::MinefieldMaritimeStatusExpectedLevelMcmCode::HVYMCM,
    ::oo_2_0::MinefieldMaritimeStatusExpectedLevelMcmCode::LGTMCM,
    ::oo_2_0::MinefieldMaritimeStatusExpectedLevelMcmCode::MODMCM,
    ::oo_2_0::MinefieldMaritimeStatusExpectedLevelMcmCode::NOMCM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusExpectedLevelMcmCode >
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_type_factory_init (
    "MinefieldMaritimeStatusExpectedLevelMcmCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusMineDetectionCode
  //

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineDetectionCode_convert ();
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineDetectionCode_convert ();
  }

  MinefieldMaritimeStatusMineDetectionCode::
  MinefieldMaritimeStatusMineDetectionCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineDetectionCode_convert ();
  }

  MinefieldMaritimeStatusMineDetectionCode* MinefieldMaritimeStatusMineDetectionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusMineDetectionCode (*this, f, c);
  }

  MinefieldMaritimeStatusMineDetectionCode::value MinefieldMaritimeStatusMineDetectionCode::
  _xsd_MinefieldMaritimeStatusMineDetectionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusMineDetectionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusMineDetectionCode_indexes_,
                      _xsd_MinefieldMaritimeStatusMineDetectionCode_indexes_ + 28,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusMineDetectionCode_indexes_ + 28 || _xsd_MinefieldMaritimeStatusMineDetectionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusMineDetectionCode::
  _xsd_MinefieldMaritimeStatusMineDetectionCode_literals_[28] =
  {
    "SGHTD",
    "SWACAF",
    "SWACCO",
    "SWACEX",
    "SWACIN",
    "SWACLF",
    "SWBTTS",
    "SWCRSS",
    "SWDVNG",
    "SWENWS",
    "SWJASS",
    "SWMACL",
    "SWMAIN",
    "SWMEAN",
    "SWMECH",
    "SWMECN",
    "SWMEEL",
    "SWMENE",
    "SWMEOL",
    "SWMEOR",
    "SWMESN",
    "SWMESO",
    "SWMETE",
    "SWPRGS",
    "SWRNJS",
    "SWSNSE",
    "SWTWFD",
    "SWUNDS"
  };

  const MinefieldMaritimeStatusMineDetectionCode::value MinefieldMaritimeStatusMineDetectionCode::
  _xsd_MinefieldMaritimeStatusMineDetectionCode_indexes_[28] =
  {
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SGHTD,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWACAF,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWACCO,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWACEX,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWACIN,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWACLF,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWBTTS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWCRSS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWDVNG,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWENWS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWJASS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMACL,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMAIN,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMEAN,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMECH,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMECN,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMEEL,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMENE,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMEOL,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMEOR,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMESN,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMESO,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWMETE,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWPRGS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWRNJS,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWSNSE,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWTWFD,
    ::oo_2_0::MinefieldMaritimeStatusMineDetectionCode::SWUNDS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusMineDetectionCode >
  _xsd_MinefieldMaritimeStatusMineDetectionCode_type_factory_init (
    "MinefieldMaritimeStatusMineDetectionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusMineZoneRiskCode
  //

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineZoneRiskCode_convert ();
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineZoneRiskCode_convert ();
  }

  MinefieldMaritimeStatusMineZoneRiskCode::
  MinefieldMaritimeStatusMineZoneRiskCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusMineZoneRiskCode_convert ();
  }

  MinefieldMaritimeStatusMineZoneRiskCode* MinefieldMaritimeStatusMineZoneRiskCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusMineZoneRiskCode (*this, f, c);
  }

  MinefieldMaritimeStatusMineZoneRiskCode::value MinefieldMaritimeStatusMineZoneRiskCode::
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusMineZoneRiskCode_indexes_,
                      _xsd_MinefieldMaritimeStatusMineZoneRiskCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusMineZoneRiskCode_indexes_ + 3 || _xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusMineZoneRiskCode::
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_[3] =
  {
    "LITTLE",
    "SERIOS",
    "VRYGRT"
  };

  const MinefieldMaritimeStatusMineZoneRiskCode::value MinefieldMaritimeStatusMineZoneRiskCode::
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_indexes_[3] =
  {
    ::oo_2_0::MinefieldMaritimeStatusMineZoneRiskCode::LITTLE,
    ::oo_2_0::MinefieldMaritimeStatusMineZoneRiskCode::SERIOS,
    ::oo_2_0::MinefieldMaritimeStatusMineZoneRiskCode::VRYGRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusMineZoneRiskCode >
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_type_factory_init (
    "MinefieldMaritimeStatusMineZoneRiskCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeStatusSeedingCode
  //

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeStatusSeedingCode_convert ();
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeStatusSeedingCode_convert ();
  }

  MinefieldMaritimeStatusSeedingCode::
  MinefieldMaritimeStatusSeedingCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeStatusSeedingCode_convert ();
  }

  MinefieldMaritimeStatusSeedingCode* MinefieldMaritimeStatusSeedingCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeStatusSeedingCode (*this, f, c);
  }

  MinefieldMaritimeStatusSeedingCode::value MinefieldMaritimeStatusSeedingCode::
  _xsd_MinefieldMaritimeStatusSeedingCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeStatusSeedingCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeStatusSeedingCode_indexes_,
                      _xsd_MinefieldMaritimeStatusSeedingCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeStatusSeedingCode_indexes_ + 10 || _xsd_MinefieldMaritimeStatusSeedingCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeStatusSeedingCode::
  _xsd_MinefieldMaritimeStatusSeedingCode_literals_[10] =
  {
    "EIGHTH",
    "FIFTH",
    "FIRST",
    "FOURTH",
    "INITAL",
    "NINTH",
    "SECOND",
    "SEVNTH",
    "SIXTH",
    "THIRD"
  };

  const MinefieldMaritimeStatusSeedingCode::value MinefieldMaritimeStatusSeedingCode::
  _xsd_MinefieldMaritimeStatusSeedingCode_indexes_[10] =
  {
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::EIGHTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::FIFTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::FIRST,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::FOURTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::INITAL,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::NINTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::SECOND,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::SEVNTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::SIXTH,
    ::oo_2_0::MinefieldMaritimeStatusSeedingCode::THIRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeStatusSeedingCode >
  _xsd_MinefieldMaritimeStatusSeedingCode_type_factory_init (
    "MinefieldMaritimeStatusSeedingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MinefieldMaritimeSubfunctionCode
  //

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MinefieldMaritimeSubfunctionCode_convert ();
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MinefieldMaritimeSubfunctionCode_convert ();
  }

  MinefieldMaritimeSubfunctionCode::
  MinefieldMaritimeSubfunctionCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MinefieldMaritimeSubfunctionCode_convert ();
  }

  MinefieldMaritimeSubfunctionCode* MinefieldMaritimeSubfunctionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MinefieldMaritimeSubfunctionCode (*this, f, c);
  }

  MinefieldMaritimeSubfunctionCode::value MinefieldMaritimeSubfunctionCode::
  _xsd_MinefieldMaritimeSubfunctionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MinefieldMaritimeSubfunctionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MinefieldMaritimeSubfunctionCode_indexes_,
                      _xsd_MinefieldMaritimeSubfunctionCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_MinefieldMaritimeSubfunctionCode_indexes_ + 10 || _xsd_MinefieldMaritimeSubfunctionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MinefieldMaritimeSubfunctionCode::
  _xsd_MinefieldMaritimeSubfunctionCode_literals_[10] =
  {
    "ANTINV",
    "ANTPSG",
    "ANTSHP",
    "ATTRIT",
    "BLCKDE",
    "DELAY",
    "HARASS",
    "NOS",
    "PRTCLS",
    "STRCLS"
  };

  const MinefieldMaritimeSubfunctionCode::value MinefieldMaritimeSubfunctionCode::
  _xsd_MinefieldMaritimeSubfunctionCode_indexes_[10] =
  {
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::ANTINV,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::ANTPSG,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::ANTSHP,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::ATTRIT,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::BLCKDE,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::DELAY,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::HARASS,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::NOS,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::PRTCLS,
    ::oo_2_0::MinefieldMaritimeSubfunctionCode::STRCLS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MinefieldMaritimeSubfunctionCode >
  _xsd_MinefieldMaritimeSubfunctionCode_type_factory_init (
    "MinefieldMaritimeSubfunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MiscellaneousEquipmentTypeCategoryCode
  //

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeCategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeCategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeCategoryCode::
  MiscellaneousEquipmentTypeCategoryCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeCategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeCategoryCode* MiscellaneousEquipmentTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MiscellaneousEquipmentTypeCategoryCode (*this, f, c);
  }

  MiscellaneousEquipmentTypeCategoryCode::value MiscellaneousEquipmentTypeCategoryCode::
  _xsd_MiscellaneousEquipmentTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MiscellaneousEquipmentTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MiscellaneousEquipmentTypeCategoryCode_indexes_,
                      _xsd_MiscellaneousEquipmentTypeCategoryCode_indexes_ + 35,
                      *this,
                      c));

    if (i == _xsd_MiscellaneousEquipmentTypeCategoryCode_indexes_ + 35 || _xsd_MiscellaneousEquipmentTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MiscellaneousEquipmentTypeCategoryCode::
  _xsd_MiscellaneousEquipmentTypeCategoryCode_literals_[35] =
  {
    "AIRCMP",
    "AIRREF",
    "AROBSL",
    "BCNLGT",
    "BOTTLE",
    "CABLE",
    "CABLER",
    "CNTDLS",
    "CONTNR",
    "DECOY",
    "DEMOEQ",
    "DSPNSR",
    "ELCMED",
    "FILM",
    "FLAG",
    "GENER",
    "GUIDNC",
    "HAZLGT",
    "LAMP",
    "LAPSE",
    "LINE",
    "MAGTPE",
    "MARKER",
    "MCHNRY",
    "MEGPHN",
    "NKN",
    "NOS",
    "PAPER",
    "PHOTOG",
    "PRTMAC",
    "ROPE",
    "SIGLGT",
    "SMKGEN",
    "SRCHLT",
    "TANK"
  };

  const MiscellaneousEquipmentTypeCategoryCode::value MiscellaneousEquipmentTypeCategoryCode::
  _xsd_MiscellaneousEquipmentTypeCategoryCode_indexes_[35] =
  {
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::AIRCMP,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::AIRREF,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::AROBSL,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::BCNLGT,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::BOTTLE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::CABLE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::CABLER,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::CNTDLS,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::CONTNR,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::DECOY,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::DEMOEQ,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::DSPNSR,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::ELCMED,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::FILM,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::FLAG,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::GENER,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::GUIDNC,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::HAZLGT,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::LAMP,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::LAPSE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::LINE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::MAGTPE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::MARKER,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::MCHNRY,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::MEGPHN,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::NKN,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::NOS,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::PAPER,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::PHOTOG,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::PRTMAC,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::ROPE,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::SIGLGT,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::SMKGEN,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::SRCHLT,
    ::oo_2_0::MiscellaneousEquipmentTypeCategoryCode::TANK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MiscellaneousEquipmentTypeCategoryCode >
  _xsd_MiscellaneousEquipmentTypeCategoryCode_type_factory_init (
    "MiscellaneousEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MiscellaneousEquipmentTypeSubcategoryCode
  //

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeSubcategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeSubcategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeSubcategoryCode::
  MiscellaneousEquipmentTypeSubcategoryCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MiscellaneousEquipmentTypeSubcategoryCode_convert ();
  }

  MiscellaneousEquipmentTypeSubcategoryCode* MiscellaneousEquipmentTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MiscellaneousEquipmentTypeSubcategoryCode (*this, f, c);
  }

  MiscellaneousEquipmentTypeSubcategoryCode::value MiscellaneousEquipmentTypeSubcategoryCode::
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MiscellaneousEquipmentTypeSubcategoryCode_indexes_,
                      _xsd_MiscellaneousEquipmentTypeSubcategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_MiscellaneousEquipmentTypeSubcategoryCode_indexes_ + 7 || _xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MiscellaneousEquipmentTypeSubcategoryCode::
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_[7] =
  {
    "BCD",
    "BCDW",
    "BOOM",
    "BWD",
    "CD",
    "CDWD",
    "WD"
  };

  const MiscellaneousEquipmentTypeSubcategoryCode::value MiscellaneousEquipmentTypeSubcategoryCode::
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_indexes_[7] =
  {
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::BCD,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::BCDW,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::BOOM,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::BWD,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::CD,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::CDWD,
    ::oo_2_0::MiscellaneousEquipmentTypeSubcategoryCode::WD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MiscellaneousEquipmentTypeSubcategoryCode >
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_type_factory_init (
    "MiscellaneousEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MissionPrimacyCode
  //

  MissionPrimacyCode::
  MissionPrimacyCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MissionPrimacyCode_convert ();
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MissionPrimacyCode_convert ();
  }

  MissionPrimacyCode::
  MissionPrimacyCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MissionPrimacyCode_convert ();
  }

  MissionPrimacyCode* MissionPrimacyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MissionPrimacyCode (*this, f, c);
  }

  MissionPrimacyCode::value MissionPrimacyCode::
  _xsd_MissionPrimacyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MissionPrimacyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MissionPrimacyCode_indexes_,
                      _xsd_MissionPrimacyCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_MissionPrimacyCode_indexes_ + 3 || _xsd_MissionPrimacyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MissionPrimacyCode::
  _xsd_MissionPrimacyCode_literals_[3] =
  {
    "PRIME",
    "SCNDRY",
    "THIRD"
  };

  const MissionPrimacyCode::value MissionPrimacyCode::
  _xsd_MissionPrimacyCode_indexes_[3] =
  {
    ::oo_2_0::MissionPrimacyCode::PRIME,
    ::oo_2_0::MissionPrimacyCode::SCNDRY,
    ::oo_2_0::MissionPrimacyCode::THIRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MissionPrimacyCode >
  _xsd_MissionPrimacyCode_type_factory_init (
    "MissionPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MobilityCapabilityCategoryCode
  //

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MobilityCapabilityCategoryCode_convert ();
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MobilityCapabilityCategoryCode_convert ();
  }

  MobilityCapabilityCategoryCode::
  MobilityCapabilityCategoryCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MobilityCapabilityCategoryCode_convert ();
  }

  MobilityCapabilityCategoryCode* MobilityCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MobilityCapabilityCategoryCode (*this, f, c);
  }

  MobilityCapabilityCategoryCode::value MobilityCapabilityCategoryCode::
  _xsd_MobilityCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MobilityCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MobilityCapabilityCategoryCode_indexes_,
                      _xsd_MobilityCapabilityCategoryCode_indexes_ + 29,
                      *this,
                      c));

    if (i == _xsd_MobilityCapabilityCategoryCode_indexes_ + 29 || _xsd_MobilityCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MobilityCapabilityCategoryCode::
  _xsd_MobilityCapabilityCategoryCode_literals_[29] =
  {
    "AIRBRN",
    "AIRCMP",
    "AIRFW",
    "AIRLGT",
    "AIRRW",
    "AMPH",
    "ANIMNT",
    "ARCTIC",
    "DSMNTD",
    "LNDRAI",
    "LNDSPP",
    "LNDTRC",
    "LNDTWD",
    "LNDWHL",
    "MLC",
    "ROADMR",
    "SELFDP",
    "WATBAY",
    "WATCNL",
    "WATCRK",
    "WATFJR",
    "WATLAK",
    "WATNTD",
    "WATRVR",
    "WATSEA",
    "WATSUB",
    "WATSUR",
    "WATSWM",
    "WATTDL"
  };

  const MobilityCapabilityCategoryCode::value MobilityCapabilityCategoryCode::
  _xsd_MobilityCapabilityCategoryCode_indexes_[29] =
  {
    ::oo_2_0::MobilityCapabilityCategoryCode::AIRBRN,
    ::oo_2_0::MobilityCapabilityCategoryCode::AIRCMP,
    ::oo_2_0::MobilityCapabilityCategoryCode::AIRFW,
    ::oo_2_0::MobilityCapabilityCategoryCode::AIRLGT,
    ::oo_2_0::MobilityCapabilityCategoryCode::AIRRW,
    ::oo_2_0::MobilityCapabilityCategoryCode::AMPH,
    ::oo_2_0::MobilityCapabilityCategoryCode::ANIMNT,
    ::oo_2_0::MobilityCapabilityCategoryCode::ARCTIC,
    ::oo_2_0::MobilityCapabilityCategoryCode::DSMNTD,
    ::oo_2_0::MobilityCapabilityCategoryCode::LNDRAI,
    ::oo_2_0::MobilityCapabilityCategoryCode::LNDSPP,
    ::oo_2_0::MobilityCapabilityCategoryCode::LNDTRC,
    ::oo_2_0::MobilityCapabilityCategoryCode::LNDTWD,
    ::oo_2_0::MobilityCapabilityCategoryCode::LNDWHL,
    ::oo_2_0::MobilityCapabilityCategoryCode::MLC,
    ::oo_2_0::MobilityCapabilityCategoryCode::ROADMR,
    ::oo_2_0::MobilityCapabilityCategoryCode::SELFDP,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATBAY,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATCNL,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATCRK,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATFJR,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATLAK,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATNTD,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATRVR,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATSEA,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATSUB,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATSUR,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATSWM,
    ::oo_2_0::MobilityCapabilityCategoryCode::WATTDL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MobilityCapabilityCategoryCode >
  _xsd_MobilityCapabilityCategoryCode_type_factory_init (
    "MobilityCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MobilityCapabilityDescriptorCode
  //

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MobilityCapabilityDescriptorCode_convert ();
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MobilityCapabilityDescriptorCode_convert ();
  }

  MobilityCapabilityDescriptorCode::
  MobilityCapabilityDescriptorCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MobilityCapabilityDescriptorCode_convert ();
  }

  MobilityCapabilityDescriptorCode* MobilityCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MobilityCapabilityDescriptorCode (*this, f, c);
  }

  MobilityCapabilityDescriptorCode::value MobilityCapabilityDescriptorCode::
  _xsd_MobilityCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MobilityCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MobilityCapabilityDescriptorCode_indexes_,
                      _xsd_MobilityCapabilityDescriptorCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_MobilityCapabilityDescriptorCode_indexes_ + 21 || _xsd_MobilityCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MobilityCapabilityDescriptorCode::
  _xsd_MobilityCapabilityDescriptorCode_literals_[21] =
  {
    "MALTID",
    "MAXFOR",
    "MDEPTH",
    "MLCOWT",
    "MLCOWW",
    "MLCTRK",
    "MLCTWT",
    "MLCTWW",
    "MLCWHL",
    "MNLAND",
    "MNMSPD",
    "MNTOFF",
    "MOBGRA",
    "MRANGE",
    "MSPEED",
    "MSSLOP",
    "MTRENC",
    "NDEPTH",
    "NRANGE",
    "PRANGE",
    "PSPEED"
  };

  const MobilityCapabilityDescriptorCode::value MobilityCapabilityDescriptorCode::
  _xsd_MobilityCapabilityDescriptorCode_indexes_[21] =
  {
    ::oo_2_0::MobilityCapabilityDescriptorCode::MALTID,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MAXFOR,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MDEPTH,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCOWT,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCOWW,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCTRK,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCTWT,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCTWW,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MLCWHL,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MNLAND,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MNMSPD,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MNTOFF,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MOBGRA,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MRANGE,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MSPEED,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MSSLOP,
    ::oo_2_0::MobilityCapabilityDescriptorCode::MTRENC,
    ::oo_2_0::MobilityCapabilityDescriptorCode::NDEPTH,
    ::oo_2_0::MobilityCapabilityDescriptorCode::NRANGE,
    ::oo_2_0::MobilityCapabilityDescriptorCode::PRANGE,
    ::oo_2_0::MobilityCapabilityDescriptorCode::PSPEED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MobilityCapabilityDescriptorCode >
  _xsd_MobilityCapabilityDescriptorCode_type_factory_init (
    "MobilityCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MobilityCapabilityTerrainTypeCode
  //

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MobilityCapabilityTerrainTypeCode_convert ();
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MobilityCapabilityTerrainTypeCode_convert ();
  }

  MobilityCapabilityTerrainTypeCode::
  MobilityCapabilityTerrainTypeCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MobilityCapabilityTerrainTypeCode_convert ();
  }

  MobilityCapabilityTerrainTypeCode* MobilityCapabilityTerrainTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MobilityCapabilityTerrainTypeCode (*this, f, c);
  }

  MobilityCapabilityTerrainTypeCode::value MobilityCapabilityTerrainTypeCode::
  _xsd_MobilityCapabilityTerrainTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MobilityCapabilityTerrainTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MobilityCapabilityTerrainTypeCode_indexes_,
                      _xsd_MobilityCapabilityTerrainTypeCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_MobilityCapabilityTerrainTypeCode_indexes_ + 6 || _xsd_MobilityCapabilityTerrainTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MobilityCapabilityTerrainTypeCode::
  _xsd_MobilityCapabilityTerrainTypeCode_literals_[6] =
  {
    "CRSCTY",
    "NKN",
    "NOS",
    "ROAD",
    "SNOW",
    "TERIND"
  };

  const MobilityCapabilityTerrainTypeCode::value MobilityCapabilityTerrainTypeCode::
  _xsd_MobilityCapabilityTerrainTypeCode_indexes_[6] =
  {
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::CRSCTY,
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::NKN,
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::NOS,
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::ROAD,
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::SNOW,
    ::oo_2_0::MobilityCapabilityTerrainTypeCode::TERIND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MobilityCapabilityTerrainTypeCode >
  _xsd_MobilityCapabilityTerrainTypeCode_type_factory_init (
    "MobilityCapabilityTerrainTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // MobilityCode
  //

  MobilityCode::
  MobilityCode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_MobilityCode_convert ();
  }

  MobilityCode::
  MobilityCode (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_MobilityCode_convert ();
  }

  MobilityCode::
  MobilityCode (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_MobilityCode_convert ();
  }

  MobilityCode* MobilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MobilityCode (*this, f, c);
  }

  MobilityCode::value MobilityCode::
  _xsd_MobilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MobilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_MobilityCode_indexes_,
                      _xsd_MobilityCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_MobilityCode_indexes_ + 6 || _xsd_MobilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MobilityCode::
  _xsd_MobilityCode_literals_[6] =
  {
    "FOOT",
    "NKN",
    "TRACK",
    "WHEEL",
    "WHLAWD",
    "WHTR"
  };

  const MobilityCode::value MobilityCode::
  _xsd_MobilityCode_indexes_[6] =
  {
    ::oo_2_0::MobilityCode::FOOT,
    ::oo_2_0::MobilityCode::NKN,
    ::oo_2_0::MobilityCode::TRACK,
    ::oo_2_0::MobilityCode::WHEEL,
    ::oo_2_0::MobilityCode::WHLAWD,
    ::oo_2_0::MobilityCode::WHTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MobilityCode >
  _xsd_MobilityCode_type_factory_init (
    "MobilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ModeOfTransportationCode
  //

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ModeOfTransportationCode_convert ();
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ModeOfTransportationCode_convert ();
  }

  ModeOfTransportationCode::
  ModeOfTransportationCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ModeOfTransportationCode_convert ();
  }

  ModeOfTransportationCode* ModeOfTransportationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ModeOfTransportationCode (*this, f, c);
  }

  ModeOfTransportationCode::value ModeOfTransportationCode::
  _xsd_ModeOfTransportationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ModeOfTransportationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ModeOfTransportationCode_indexes_,
                      _xsd_ModeOfTransportationCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ModeOfTransportationCode_indexes_ + 8 || _xsd_ModeOfTransportationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ModeOfTransportationCode::
  _xsd_ModeOfTransportationCode_literals_[8] =
  {
    "AIR",
    "IWT",
    "MULTI",
    "PIPE",
    "RAIL",
    "ROAD",
    "SEA",
    "TERR"
  };

  const ModeOfTransportationCode::value ModeOfTransportationCode::
  _xsd_ModeOfTransportationCode_indexes_[8] =
  {
    ::oo_2_0::ModeOfTransportationCode::AIR,
    ::oo_2_0::ModeOfTransportationCode::IWT,
    ::oo_2_0::ModeOfTransportationCode::MULTI,
    ::oo_2_0::ModeOfTransportationCode::PIPE,
    ::oo_2_0::ModeOfTransportationCode::RAIL,
    ::oo_2_0::ModeOfTransportationCode::ROAD,
    ::oo_2_0::ModeOfTransportationCode::SEA,
    ::oo_2_0::ModeOfTransportationCode::TERR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ModeOfTransportationCode >
  _xsd_ModeOfTransportationCode_type_factory_init (
    "ModeOfTransportationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkArchitectureCode
  //

  NetworkArchitectureCode::
  NetworkArchitectureCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkArchitectureCode_convert ();
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkArchitectureCode_convert ();
  }

  NetworkArchitectureCode::
  NetworkArchitectureCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkArchitectureCode_convert ();
  }

  NetworkArchitectureCode* NetworkArchitectureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkArchitectureCode (*this, f, c);
  }

  NetworkArchitectureCode::value NetworkArchitectureCode::
  _xsd_NetworkArchitectureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkArchitectureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkArchitectureCode_indexes_,
                      _xsd_NetworkArchitectureCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_NetworkArchitectureCode_indexes_ + 6 || _xsd_NetworkArchitectureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkArchitectureCode::
  _xsd_NetworkArchitectureCode_literals_[6] =
  {
    "ARCNET",
    "ETHRNT",
    "MIXED",
    "NOS",
    "TKNRNG",
    "WRLESS"
  };

  const NetworkArchitectureCode::value NetworkArchitectureCode::
  _xsd_NetworkArchitectureCode_indexes_[6] =
  {
    ::oo_2_0::NetworkArchitectureCode::ARCNET,
    ::oo_2_0::NetworkArchitectureCode::ETHRNT,
    ::oo_2_0::NetworkArchitectureCode::MIXED,
    ::oo_2_0::NetworkArchitectureCode::NOS,
    ::oo_2_0::NetworkArchitectureCode::TKNRNG,
    ::oo_2_0::NetworkArchitectureCode::WRLESS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkArchitectureCode >
  _xsd_NetworkArchitectureCode_type_factory_init (
    "NetworkArchitectureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkCapacityBandwidthCode
  //

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkCapacityBandwidthCode_convert ();
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkCapacityBandwidthCode_convert ();
  }

  NetworkCapacityBandwidthCode::
  NetworkCapacityBandwidthCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkCapacityBandwidthCode_convert ();
  }

  NetworkCapacityBandwidthCode* NetworkCapacityBandwidthCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkCapacityBandwidthCode (*this, f, c);
  }

  NetworkCapacityBandwidthCode::value NetworkCapacityBandwidthCode::
  _xsd_NetworkCapacityBandwidthCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkCapacityBandwidthCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkCapacityBandwidthCode_indexes_,
                      _xsd_NetworkCapacityBandwidthCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_NetworkCapacityBandwidthCode_indexes_ + 18 || _xsd_NetworkCapacityBandwidthCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkCapacityBandwidthCode::
  _xsd_NetworkCapacityBandwidthCode_literals_[18] =
  {
    "100MBP",
    "10GBPS",
    "10MBPS",
    "1GBPS",
    "56KBPS",
    "64KBPS",
    "E1",
    "E2",
    "E3",
    "EUROCM",
    "FDDI",
    "FRMRLY",
    "ISDN",
    "NOS",
    "SONET",
    "SWTD56",
    "T1",
    "T3"
  };

  const NetworkCapacityBandwidthCode::value NetworkCapacityBandwidthCode::
  _xsd_NetworkCapacityBandwidthCode_indexes_[18] =
  {
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_100MBP,
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_10GBPS,
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_10MBPS,
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_1GBPS,
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_56KBPS,
    ::oo_2_0::NetworkCapacityBandwidthCode::cxx_64KBPS,
    ::oo_2_0::NetworkCapacityBandwidthCode::E1,
    ::oo_2_0::NetworkCapacityBandwidthCode::E2,
    ::oo_2_0::NetworkCapacityBandwidthCode::E3,
    ::oo_2_0::NetworkCapacityBandwidthCode::EUROCM,
    ::oo_2_0::NetworkCapacityBandwidthCode::FDDI,
    ::oo_2_0::NetworkCapacityBandwidthCode::FRMRLY,
    ::oo_2_0::NetworkCapacityBandwidthCode::ISDN,
    ::oo_2_0::NetworkCapacityBandwidthCode::NOS,
    ::oo_2_0::NetworkCapacityBandwidthCode::SONET,
    ::oo_2_0::NetworkCapacityBandwidthCode::SWTD56,
    ::oo_2_0::NetworkCapacityBandwidthCode::T1,
    ::oo_2_0::NetworkCapacityBandwidthCode::T3
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkCapacityBandwidthCode >
  _xsd_NetworkCapacityBandwidthCode_type_factory_init (
    "NetworkCapacityBandwidthCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkCapacityProtocolCode
  //

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkCapacityProtocolCode_convert ();
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkCapacityProtocolCode_convert ();
  }

  NetworkCapacityProtocolCode::
  NetworkCapacityProtocolCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkCapacityProtocolCode_convert ();
  }

  NetworkCapacityProtocolCode* NetworkCapacityProtocolCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkCapacityProtocolCode (*this, f, c);
  }

  NetworkCapacityProtocolCode::value NetworkCapacityProtocolCode::
  _xsd_NetworkCapacityProtocolCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkCapacityProtocolCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkCapacityProtocolCode_indexes_,
                      _xsd_NetworkCapacityProtocolCode_indexes_ + 16,
                      *this,
                      c));

    if (i == _xsd_NetworkCapacityProtocolCode_indexes_ + 16 || _xsd_NetworkCapacityProtocolCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkCapacityProtocolCode::
  _xsd_NetworkCapacityProtocolCode_literals_[16] =
  {
    "APLTLK",
    "ATM",
    "DECNET",
    "HVQCK",
    "HVQCK2",
    "IPV6",
    "IPXSPX",
    "MIDS",
    "NETBEU",
    "NOS",
    "OSI",
    "SNA",
    "TCPIP",
    "UDP",
    "X25",
    "X400"
  };

  const NetworkCapacityProtocolCode::value NetworkCapacityProtocolCode::
  _xsd_NetworkCapacityProtocolCode_indexes_[16] =
  {
    ::oo_2_0::NetworkCapacityProtocolCode::APLTLK,
    ::oo_2_0::NetworkCapacityProtocolCode::ATM,
    ::oo_2_0::NetworkCapacityProtocolCode::DECNET,
    ::oo_2_0::NetworkCapacityProtocolCode::HVQCK,
    ::oo_2_0::NetworkCapacityProtocolCode::HVQCK2,
    ::oo_2_0::NetworkCapacityProtocolCode::IPV6,
    ::oo_2_0::NetworkCapacityProtocolCode::IPXSPX,
    ::oo_2_0::NetworkCapacityProtocolCode::MIDS,
    ::oo_2_0::NetworkCapacityProtocolCode::NETBEU,
    ::oo_2_0::NetworkCapacityProtocolCode::NOS,
    ::oo_2_0::NetworkCapacityProtocolCode::OSI,
    ::oo_2_0::NetworkCapacityProtocolCode::SNA,
    ::oo_2_0::NetworkCapacityProtocolCode::TCPIP,
    ::oo_2_0::NetworkCapacityProtocolCode::UDP,
    ::oo_2_0::NetworkCapacityProtocolCode::X25,
    ::oo_2_0::NetworkCapacityProtocolCode::X400
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkCapacityProtocolCode >
  _xsd_NetworkCapacityProtocolCode_type_factory_init (
    "NetworkCapacityProtocolCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkCategoryCode
  //

  NetworkCategoryCode::
  NetworkCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkCategoryCode_convert ();
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkCategoryCode_convert ();
  }

  NetworkCategoryCode::
  NetworkCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkCategoryCode_convert ();
  }

  NetworkCategoryCode* NetworkCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkCategoryCode (*this, f, c);
  }

  NetworkCategoryCode::value NetworkCategoryCode::
  _xsd_NetworkCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkCategoryCode_indexes_,
                      _xsd_NetworkCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_NetworkCategoryCode_indexes_ + 5 || _xsd_NetworkCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkCategoryCode::
  _xsd_NetworkCategoryCode_literals_[5] =
  {
    "BRDCST",
    "MLTCST",
    "NKN",
    "NOS",
    "PTTOPT"
  };

  const NetworkCategoryCode::value NetworkCategoryCode::
  _xsd_NetworkCategoryCode_indexes_[5] =
  {
    ::oo_2_0::NetworkCategoryCode::BRDCST,
    ::oo_2_0::NetworkCategoryCode::MLTCST,
    ::oo_2_0::NetworkCategoryCode::NKN,
    ::oo_2_0::NetworkCategoryCode::NOS,
    ::oo_2_0::NetworkCategoryCode::PTTOPT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkCategoryCode >
  _xsd_NetworkCategoryCode_type_factory_init (
    "NetworkCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkFrequencyBandCode
  //

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkFrequencyBandCode_convert ();
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkFrequencyBandCode_convert ();
  }

  NetworkFrequencyBandCode::
  NetworkFrequencyBandCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkFrequencyBandCode_convert ();
  }

  NetworkFrequencyBandCode* NetworkFrequencyBandCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkFrequencyBandCode (*this, f, c);
  }

  NetworkFrequencyBandCode::value NetworkFrequencyBandCode::
  _xsd_NetworkFrequencyBandCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkFrequencyBandCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkFrequencyBandCode_indexes_,
                      _xsd_NetworkFrequencyBandCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_NetworkFrequencyBandCode_indexes_ + 8 || _xsd_NetworkFrequencyBandCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkFrequencyBandCode::
  _xsd_NetworkFrequencyBandCode_literals_[8] =
  {
    "EHF",
    "HF",
    "LF",
    "MF",
    "SHF",
    "UHF",
    "VHF",
    "VLF"
  };

  const NetworkFrequencyBandCode::value NetworkFrequencyBandCode::
  _xsd_NetworkFrequencyBandCode_indexes_[8] =
  {
    ::oo_2_0::NetworkFrequencyBandCode::EHF,
    ::oo_2_0::NetworkFrequencyBandCode::HF,
    ::oo_2_0::NetworkFrequencyBandCode::LF,
    ::oo_2_0::NetworkFrequencyBandCode::MF,
    ::oo_2_0::NetworkFrequencyBandCode::SHF,
    ::oo_2_0::NetworkFrequencyBandCode::UHF,
    ::oo_2_0::NetworkFrequencyBandCode::VHF,
    ::oo_2_0::NetworkFrequencyBandCode::VLF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkFrequencyBandCode >
  _xsd_NetworkFrequencyBandCode_type_factory_init (
    "NetworkFrequencyBandCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkFrequencyModulationCode
  //

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkFrequencyModulationCode_convert ();
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkFrequencyModulationCode_convert ();
  }

  NetworkFrequencyModulationCode::
  NetworkFrequencyModulationCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkFrequencyModulationCode_convert ();
  }

  NetworkFrequencyModulationCode* NetworkFrequencyModulationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkFrequencyModulationCode (*this, f, c);
  }

  NetworkFrequencyModulationCode::value NetworkFrequencyModulationCode::
  _xsd_NetworkFrequencyModulationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkFrequencyModulationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkFrequencyModulationCode_indexes_,
                      _xsd_NetworkFrequencyModulationCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_NetworkFrequencyModulationCode_indexes_ + 6 || _xsd_NetworkFrequencyModulationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkFrequencyModulationCode::
  _xsd_NetworkFrequencyModulationCode_literals_[6] =
  {
    "DBSBND",
    "FRQMOD",
    "FRQSHF",
    "LWSBND",
    "PHSHKY",
    "UPSBND"
  };

  const NetworkFrequencyModulationCode::value NetworkFrequencyModulationCode::
  _xsd_NetworkFrequencyModulationCode_indexes_[6] =
  {
    ::oo_2_0::NetworkFrequencyModulationCode::DBSBND,
    ::oo_2_0::NetworkFrequencyModulationCode::FRQMOD,
    ::oo_2_0::NetworkFrequencyModulationCode::FRQSHF,
    ::oo_2_0::NetworkFrequencyModulationCode::LWSBND,
    ::oo_2_0::NetworkFrequencyModulationCode::PHSHKY,
    ::oo_2_0::NetworkFrequencyModulationCode::UPSBND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkFrequencyModulationCode >
  _xsd_NetworkFrequencyModulationCode_type_factory_init (
    "NetworkFrequencyModulationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkMeansCode
  //

  NetworkMeansCode::
  NetworkMeansCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkMeansCode_convert ();
  }

  NetworkMeansCode::
  NetworkMeansCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkMeansCode_convert ();
  }

  NetworkMeansCode::
  NetworkMeansCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkMeansCode_convert ();
  }

  NetworkMeansCode* NetworkMeansCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkMeansCode (*this, f, c);
  }

  NetworkMeansCode::value NetworkMeansCode::
  _xsd_NetworkMeansCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkMeansCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkMeansCode_indexes_,
                      _xsd_NetworkMeansCode_indexes_ + 18,
                      *this,
                      c));

    if (i == _xsd_NetworkMeansCode_indexes_ + 18 || _xsd_NetworkMeansCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkMeansCode::
  _xsd_NetworkMeansCode_literals_[18] =
  {
    "CABLE",
    "COAXCB",
    "DDCDLN",
    "DIALUP",
    "FBROPT",
    "INFRED",
    "LASER",
    "MASER",
    "MICROW",
    "MIXED",
    "NKN",
    "NOS",
    "RDLNKG",
    "RDLNKS",
    "RDLTER",
    "RDLTRO",
    "RDRLY",
    "TWTPRC"
  };

  const NetworkMeansCode::value NetworkMeansCode::
  _xsd_NetworkMeansCode_indexes_[18] =
  {
    ::oo_2_0::NetworkMeansCode::CABLE,
    ::oo_2_0::NetworkMeansCode::COAXCB,
    ::oo_2_0::NetworkMeansCode::DDCDLN,
    ::oo_2_0::NetworkMeansCode::DIALUP,
    ::oo_2_0::NetworkMeansCode::FBROPT,
    ::oo_2_0::NetworkMeansCode::INFRED,
    ::oo_2_0::NetworkMeansCode::LASER,
    ::oo_2_0::NetworkMeansCode::MASER,
    ::oo_2_0::NetworkMeansCode::MICROW,
    ::oo_2_0::NetworkMeansCode::MIXED,
    ::oo_2_0::NetworkMeansCode::NKN,
    ::oo_2_0::NetworkMeansCode::NOS,
    ::oo_2_0::NetworkMeansCode::RDLNKG,
    ::oo_2_0::NetworkMeansCode::RDLNKS,
    ::oo_2_0::NetworkMeansCode::RDLTER,
    ::oo_2_0::NetworkMeansCode::RDLTRO,
    ::oo_2_0::NetworkMeansCode::RDRLY,
    ::oo_2_0::NetworkMeansCode::TWTPRC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkMeansCode >
  _xsd_NetworkMeansCode_type_factory_init (
    "NetworkMeansCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkServiceCategoryCode
  //

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkServiceCategoryCode_convert ();
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkServiceCategoryCode_convert ();
  }

  NetworkServiceCategoryCode::
  NetworkServiceCategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkServiceCategoryCode_convert ();
  }

  NetworkServiceCategoryCode* NetworkServiceCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkServiceCategoryCode (*this, f, c);
  }

  NetworkServiceCategoryCode::value NetworkServiceCategoryCode::
  _xsd_NetworkServiceCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkServiceCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkServiceCategoryCode_indexes_,
                      _xsd_NetworkServiceCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_NetworkServiceCategoryCode_indexes_ + 10 || _xsd_NetworkServiceCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkServiceCategoryCode::
  _xsd_NetworkServiceCategoryCode_literals_[10] =
  {
    "DATTRF",
    "FAX",
    "IFF",
    "IMAGE",
    "MCI",
    "MHS",
    "NOS",
    "TDL",
    "VIDSVC",
    "VOCSVC"
  };

  const NetworkServiceCategoryCode::value NetworkServiceCategoryCode::
  _xsd_NetworkServiceCategoryCode_indexes_[10] =
  {
    ::oo_2_0::NetworkServiceCategoryCode::DATTRF,
    ::oo_2_0::NetworkServiceCategoryCode::FAX,
    ::oo_2_0::NetworkServiceCategoryCode::IFF,
    ::oo_2_0::NetworkServiceCategoryCode::IMAGE,
    ::oo_2_0::NetworkServiceCategoryCode::MCI,
    ::oo_2_0::NetworkServiceCategoryCode::MHS,
    ::oo_2_0::NetworkServiceCategoryCode::NOS,
    ::oo_2_0::NetworkServiceCategoryCode::TDL,
    ::oo_2_0::NetworkServiceCategoryCode::VIDSVC,
    ::oo_2_0::NetworkServiceCategoryCode::VOCSVC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkServiceCategoryCode >
  _xsd_NetworkServiceCategoryCode_type_factory_init (
    "NetworkServiceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkServiceCryptographicIndicatorCode
  //

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkServiceCryptographicIndicatorCode_convert ();
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkServiceCryptographicIndicatorCode_convert ();
  }

  NetworkServiceCryptographicIndicatorCode::
  NetworkServiceCryptographicIndicatorCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkServiceCryptographicIndicatorCode_convert ();
  }

  NetworkServiceCryptographicIndicatorCode* NetworkServiceCryptographicIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkServiceCryptographicIndicatorCode (*this, f, c);
  }

  NetworkServiceCryptographicIndicatorCode::value NetworkServiceCryptographicIndicatorCode::
  _xsd_NetworkServiceCryptographicIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkServiceCryptographicIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkServiceCryptographicIndicatorCode_indexes_,
                      _xsd_NetworkServiceCryptographicIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_NetworkServiceCryptographicIndicatorCode_indexes_ + 2 || _xsd_NetworkServiceCryptographicIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkServiceCryptographicIndicatorCode::
  _xsd_NetworkServiceCryptographicIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const NetworkServiceCryptographicIndicatorCode::value NetworkServiceCryptographicIndicatorCode::
  _xsd_NetworkServiceCryptographicIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::NetworkServiceCryptographicIndicatorCode::NO,
    ::oo_2_0::NetworkServiceCryptographicIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkServiceCryptographicIndicatorCode >
  _xsd_NetworkServiceCryptographicIndicatorCode_type_factory_init (
    "NetworkServiceCryptographicIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkServiceStatusIndicatorCode
  //

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkServiceStatusIndicatorCode_convert ();
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkServiceStatusIndicatorCode_convert ();
  }

  NetworkServiceStatusIndicatorCode::
  NetworkServiceStatusIndicatorCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkServiceStatusIndicatorCode_convert ();
  }

  NetworkServiceStatusIndicatorCode* NetworkServiceStatusIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkServiceStatusIndicatorCode (*this, f, c);
  }

  NetworkServiceStatusIndicatorCode::value NetworkServiceStatusIndicatorCode::
  _xsd_NetworkServiceStatusIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkServiceStatusIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkServiceStatusIndicatorCode_indexes_,
                      _xsd_NetworkServiceStatusIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_NetworkServiceStatusIndicatorCode_indexes_ + 2 || _xsd_NetworkServiceStatusIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkServiceStatusIndicatorCode::
  _xsd_NetworkServiceStatusIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const NetworkServiceStatusIndicatorCode::value NetworkServiceStatusIndicatorCode::
  _xsd_NetworkServiceStatusIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::NetworkServiceStatusIndicatorCode::NO,
    ::oo_2_0::NetworkServiceStatusIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkServiceStatusIndicatorCode >
  _xsd_NetworkServiceStatusIndicatorCode_type_factory_init (
    "NetworkServiceStatusIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkServiceSubcategoryCode
  //

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkServiceSubcategoryCode_convert ();
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkServiceSubcategoryCode_convert ();
  }

  NetworkServiceSubcategoryCode::
  NetworkServiceSubcategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkServiceSubcategoryCode_convert ();
  }

  NetworkServiceSubcategoryCode* NetworkServiceSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkServiceSubcategoryCode (*this, f, c);
  }

  NetworkServiceSubcategoryCode::value NetworkServiceSubcategoryCode::
  _xsd_NetworkServiceSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkServiceSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkServiceSubcategoryCode_indexes_,
                      _xsd_NetworkServiceSubcategoryCode_indexes_ + 30,
                      *this,
                      c));

    if (i == _xsd_NetworkServiceSubcategoryCode_indexes_ + 30 || _xsd_NetworkServiceSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkServiceSubcategoryCode::
  _xsd_NetworkServiceSubcategoryCode_literals_[30] =
  {
    "DRCTRY",
    "EMAIL",
    "FTP",
    "HTTP",
    "IFFM1",
    "IFFM2",
    "IFFM3",
    "IFFM3A",
    "IFFM4",
    "IFFM5",
    "IFFMC",
    "IFFMS",
    "LNK1",
    "LNK11",
    "LNK11B",
    "LNK14",
    "LNK16D",
    "LNK16V",
    "LNK22",
    "LNK4",
    "MCIMD1",
    "MCIMD2",
    "MCIMD3",
    "MOBILE",
    "NOS",
    "PAGER",
    "RMTACC",
    "TELEPH",
    "TELEX",
    "TELNET"
  };

  const NetworkServiceSubcategoryCode::value NetworkServiceSubcategoryCode::
  _xsd_NetworkServiceSubcategoryCode_indexes_[30] =
  {
    ::oo_2_0::NetworkServiceSubcategoryCode::DRCTRY,
    ::oo_2_0::NetworkServiceSubcategoryCode::EMAIL,
    ::oo_2_0::NetworkServiceSubcategoryCode::FTP,
    ::oo_2_0::NetworkServiceSubcategoryCode::HTTP,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM1,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM2,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM3,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM3A,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM4,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFM5,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFMC,
    ::oo_2_0::NetworkServiceSubcategoryCode::IFFMS,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK1,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK11,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK11B,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK14,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK16D,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK16V,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK22,
    ::oo_2_0::NetworkServiceSubcategoryCode::LNK4,
    ::oo_2_0::NetworkServiceSubcategoryCode::MCIMD1,
    ::oo_2_0::NetworkServiceSubcategoryCode::MCIMD2,
    ::oo_2_0::NetworkServiceSubcategoryCode::MCIMD3,
    ::oo_2_0::NetworkServiceSubcategoryCode::MOBILE,
    ::oo_2_0::NetworkServiceSubcategoryCode::NOS,
    ::oo_2_0::NetworkServiceSubcategoryCode::PAGER,
    ::oo_2_0::NetworkServiceSubcategoryCode::RMTACC,
    ::oo_2_0::NetworkServiceSubcategoryCode::TELEPH,
    ::oo_2_0::NetworkServiceSubcategoryCode::TELEX,
    ::oo_2_0::NetworkServiceSubcategoryCode::TELNET
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkServiceSubcategoryCode >
  _xsd_NetworkServiceSubcategoryCode_type_factory_init (
    "NetworkServiceSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NetworkSubcategoryCode
  //

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NetworkSubcategoryCode_convert ();
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NetworkSubcategoryCode_convert ();
  }

  NetworkSubcategoryCode::
  NetworkSubcategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NetworkSubcategoryCode_convert ();
  }

  NetworkSubcategoryCode* NetworkSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NetworkSubcategoryCode (*this, f, c);
  }

  NetworkSubcategoryCode::value NetworkSubcategoryCode::
  _xsd_NetworkSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NetworkSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NetworkSubcategoryCode_indexes_,
                      _xsd_NetworkSubcategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_NetworkSubcategoryCode_indexes_ + 5 || _xsd_NetworkSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NetworkSubcategoryCode::
  _xsd_NetworkSubcategoryCode_literals_[5] =
  {
    "CIRCSW",
    "PCKSWT",
    "VRTSWT",
    "NKN",
    "NOS"
  };

  const NetworkSubcategoryCode::value NetworkSubcategoryCode::
  _xsd_NetworkSubcategoryCode_indexes_[5] =
  {
    ::oo_2_0::NetworkSubcategoryCode::CIRCSW,
    ::oo_2_0::NetworkSubcategoryCode::NKN,
    ::oo_2_0::NetworkSubcategoryCode::NOS,
    ::oo_2_0::NetworkSubcategoryCode::PCKSWT,
    ::oo_2_0::NetworkSubcategoryCode::VRTSWT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NetworkSubcategoryCode >
  _xsd_NetworkSubcategoryCode_type_factory_init (
    "NetworkSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NuclearEventCategoryCode
  //

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NuclearEventCategoryCode_convert ();
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NuclearEventCategoryCode_convert ();
  }

  NuclearEventCategoryCode::
  NuclearEventCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NuclearEventCategoryCode_convert ();
  }

  NuclearEventCategoryCode* NuclearEventCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NuclearEventCategoryCode (*this, f, c);
  }

  NuclearEventCategoryCode::value NuclearEventCategoryCode::
  _xsd_NuclearEventCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NuclearEventCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NuclearEventCategoryCode_indexes_,
                      _xsd_NuclearEventCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_NuclearEventCategoryCode_indexes_ + 8 || _xsd_NuclearEventCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NuclearEventCategoryCode::
  _xsd_NuclearEventCategoryCode_literals_[8] =
  {
    "NKN",
    "NROTA",
    "NUCATT",
    "NUCSMP",
    "NUCTST",
    "NUCWAR",
    "NUCWEP",
    "NUCWST"
  };

  const NuclearEventCategoryCode::value NuclearEventCategoryCode::
  _xsd_NuclearEventCategoryCode_indexes_[8] =
  {
    ::oo_2_0::NuclearEventCategoryCode::NKN,
    ::oo_2_0::NuclearEventCategoryCode::NROTA,
    ::oo_2_0::NuclearEventCategoryCode::NUCATT,
    ::oo_2_0::NuclearEventCategoryCode::NUCSMP,
    ::oo_2_0::NuclearEventCategoryCode::NUCTST,
    ::oo_2_0::NuclearEventCategoryCode::NUCWAR,
    ::oo_2_0::NuclearEventCategoryCode::NUCWEP,
    ::oo_2_0::NuclearEventCategoryCode::NUCWST
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NuclearEventCategoryCode >
  _xsd_NuclearEventCategoryCode_type_factory_init (
    "NuclearEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NuclearWeaponEventCraterPresenceCode
  //

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NuclearWeaponEventCraterPresenceCode_convert ();
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NuclearWeaponEventCraterPresenceCode_convert ();
  }

  NuclearWeaponEventCraterPresenceCode::
  NuclearWeaponEventCraterPresenceCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NuclearWeaponEventCraterPresenceCode_convert ();
  }

  NuclearWeaponEventCraterPresenceCode* NuclearWeaponEventCraterPresenceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NuclearWeaponEventCraterPresenceCode (*this, f, c);
  }

  NuclearWeaponEventCraterPresenceCode::value NuclearWeaponEventCraterPresenceCode::
  _xsd_NuclearWeaponEventCraterPresenceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NuclearWeaponEventCraterPresenceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NuclearWeaponEventCraterPresenceCode_indexes_,
                      _xsd_NuclearWeaponEventCraterPresenceCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_NuclearWeaponEventCraterPresenceCode_indexes_ + 3 || _xsd_NuclearWeaponEventCraterPresenceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NuclearWeaponEventCraterPresenceCode::
  _xsd_NuclearWeaponEventCraterPresenceCode_literals_[3] =
  {
    "CRATER",
    "NKN",
    "NONE"
  };

  const NuclearWeaponEventCraterPresenceCode::value NuclearWeaponEventCraterPresenceCode::
  _xsd_NuclearWeaponEventCraterPresenceCode_indexes_[3] =
  {
    ::oo_2_0::NuclearWeaponEventCraterPresenceCode::CRATER,
    ::oo_2_0::NuclearWeaponEventCraterPresenceCode::NKN,
    ::oo_2_0::NuclearWeaponEventCraterPresenceCode::NONE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NuclearWeaponEventCraterPresenceCode >
  _xsd_NuclearWeaponEventCraterPresenceCode_type_factory_init (
    "NuclearWeaponEventCraterPresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // NuclearYieldGroupCode
  //

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_NuclearYieldGroupCode_convert ();
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_NuclearYieldGroupCode_convert ();
  }

  NuclearYieldGroupCode::
  NuclearYieldGroupCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_NuclearYieldGroupCode_convert ();
  }

  NuclearYieldGroupCode* NuclearYieldGroupCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class NuclearYieldGroupCode (*this, f, c);
  }

  NuclearYieldGroupCode::value NuclearYieldGroupCode::
  _xsd_NuclearYieldGroupCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NuclearYieldGroupCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_NuclearYieldGroupCode_indexes_,
                      _xsd_NuclearYieldGroupCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_NuclearYieldGroupCode_indexes_ + 9 || _xsd_NuclearYieldGroupCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const NuclearYieldGroupCode::
  _xsd_NuclearYieldGroupCode_literals_[9] =
  {
    "ALFA",
    "BRAVO",
    "CHARLI",
    "DELTA",
    "ECHO",
    "FOXTRT",
    "GOLF",
    "NKN",
    "NOS"
  };

  const NuclearYieldGroupCode::value NuclearYieldGroupCode::
  _xsd_NuclearYieldGroupCode_indexes_[9] =
  {
    ::oo_2_0::NuclearYieldGroupCode::ALFA,
    ::oo_2_0::NuclearYieldGroupCode::BRAVO,
    ::oo_2_0::NuclearYieldGroupCode::CHARLI,
    ::oo_2_0::NuclearYieldGroupCode::DELTA,
    ::oo_2_0::NuclearYieldGroupCode::ECHO,
    ::oo_2_0::NuclearYieldGroupCode::FOXTRT,
    ::oo_2_0::NuclearYieldGroupCode::GOLF,
    ::oo_2_0::NuclearYieldGroupCode::NKN,
    ::oo_2_0::NuclearYieldGroupCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, NuclearYieldGroupCode >
  _xsd_NuclearYieldGroupCode_type_factory_init (
    "NuclearYieldGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAddressAuthorisationIndicatorCode
  //

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAddressAuthorisationIndicatorCode_convert ();
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAddressAuthorisationIndicatorCode_convert ();
  }

  ObjectItemAddressAuthorisationIndicatorCode::
  ObjectItemAddressAuthorisationIndicatorCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAddressAuthorisationIndicatorCode_convert ();
  }

  ObjectItemAddressAuthorisationIndicatorCode* ObjectItemAddressAuthorisationIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAddressAuthorisationIndicatorCode (*this, f, c);
  }

  ObjectItemAddressAuthorisationIndicatorCode::value ObjectItemAddressAuthorisationIndicatorCode::
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAddressAuthorisationIndicatorCode_indexes_,
                      _xsd_ObjectItemAddressAuthorisationIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAddressAuthorisationIndicatorCode_indexes_ + 2 || _xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAddressAuthorisationIndicatorCode::
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ObjectItemAddressAuthorisationIndicatorCode::value ObjectItemAddressAuthorisationIndicatorCode::
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ObjectItemAddressAuthorisationIndicatorCode::NO,
    ::oo_2_0::ObjectItemAddressAuthorisationIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAddressAuthorisationIndicatorCode >
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_type_factory_init (
    "ObjectItemAddressAuthorisationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAddressPrimacyCode
  //

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAddressPrimacyCode_convert ();
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAddressPrimacyCode_convert ();
  }

  ObjectItemAddressPrimacyCode::
  ObjectItemAddressPrimacyCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAddressPrimacyCode_convert ();
  }

  ObjectItemAddressPrimacyCode* ObjectItemAddressPrimacyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAddressPrimacyCode (*this, f, c);
  }

  ObjectItemAddressPrimacyCode::value ObjectItemAddressPrimacyCode::
  _xsd_ObjectItemAddressPrimacyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAddressPrimacyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAddressPrimacyCode_indexes_,
                      _xsd_ObjectItemAddressPrimacyCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAddressPrimacyCode_indexes_ + 3 || _xsd_ObjectItemAddressPrimacyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAddressPrimacyCode::
  _xsd_ObjectItemAddressPrimacyCode_literals_[3] =
  {
    "PRIME",
    "SCNDRY",
    "THIRD"
  };

  const ObjectItemAddressPrimacyCode::value ObjectItemAddressPrimacyCode::
  _xsd_ObjectItemAddressPrimacyCode_indexes_[3] =
  {
    ::oo_2_0::ObjectItemAddressPrimacyCode::PRIME,
    ::oo_2_0::ObjectItemAddressPrimacyCode::SCNDRY,
    ::oo_2_0::ObjectItemAddressPrimacyCode::THIRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAddressPrimacyCode >
  _xsd_ObjectItemAddressPrimacyCode_type_factory_init (
    "ObjectItemAddressPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAddressTransmitReceiveCode
  //

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAddressTransmitReceiveCode_convert ();
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAddressTransmitReceiveCode_convert ();
  }

  ObjectItemAddressTransmitReceiveCode::
  ObjectItemAddressTransmitReceiveCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAddressTransmitReceiveCode_convert ();
  }

  ObjectItemAddressTransmitReceiveCode* ObjectItemAddressTransmitReceiveCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAddressTransmitReceiveCode (*this, f, c);
  }

  ObjectItemAddressTransmitReceiveCode::value ObjectItemAddressTransmitReceiveCode::
  _xsd_ObjectItemAddressTransmitReceiveCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAddressTransmitReceiveCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAddressTransmitReceiveCode_indexes_,
                      _xsd_ObjectItemAddressTransmitReceiveCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAddressTransmitReceiveCode_indexes_ + 3 || _xsd_ObjectItemAddressTransmitReceiveCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAddressTransmitReceiveCode::
  _xsd_ObjectItemAddressTransmitReceiveCode_literals_[3] =
  {
    "RECEIV",
    "TRNREC",
    "TRNSMT"
  };

  const ObjectItemAddressTransmitReceiveCode::value ObjectItemAddressTransmitReceiveCode::
  _xsd_ObjectItemAddressTransmitReceiveCode_indexes_[3] =
  {
    ::oo_2_0::ObjectItemAddressTransmitReceiveCode::RECEIV,
    ::oo_2_0::ObjectItemAddressTransmitReceiveCode::TRNREC,
    ::oo_2_0::ObjectItemAddressTransmitReceiveCode::TRNSMT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAddressTransmitReceiveCode >
  _xsd_ObjectItemAddressTransmitReceiveCode_type_factory_init (
    "ObjectItemAddressTransmitReceiveCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAliasCategoryCode
  //

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAliasCategoryCode_convert ();
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAliasCategoryCode_convert ();
  }

  ObjectItemAliasCategoryCode::
  ObjectItemAliasCategoryCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAliasCategoryCode_convert ();
  }

  ObjectItemAliasCategoryCode* ObjectItemAliasCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAliasCategoryCode (*this, f, c);
  }

  ObjectItemAliasCategoryCode::value ObjectItemAliasCategoryCode::
  _xsd_ObjectItemAliasCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAliasCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAliasCategoryCode_indexes_,
                      _xsd_ObjectItemAliasCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAliasCategoryCode_indexes_ + 6 || _xsd_ObjectItemAliasCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAliasCategoryCode::
  _xsd_ObjectItemAliasCategoryCode_literals_[6] =
  {
    "ALTNAM",
    "ELINT",
    "EMSSNS",
    "GEOLOC",
    "TRACK",
    "UNITDS"
  };

  const ObjectItemAliasCategoryCode::value ObjectItemAliasCategoryCode::
  _xsd_ObjectItemAliasCategoryCode_indexes_[6] =
  {
    ::oo_2_0::ObjectItemAliasCategoryCode::ALTNAM,
    ::oo_2_0::ObjectItemAliasCategoryCode::ELINT,
    ::oo_2_0::ObjectItemAliasCategoryCode::EMSSNS,
    ::oo_2_0::ObjectItemAliasCategoryCode::GEOLOC,
    ::oo_2_0::ObjectItemAliasCategoryCode::TRACK,
    ::oo_2_0::ObjectItemAliasCategoryCode::UNITDS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAliasCategoryCode >
  _xsd_ObjectItemAliasCategoryCode_type_factory_init (
    "ObjectItemAliasCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAssociationCategoryCode
  //

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAssociationCategoryCode_convert ();
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAssociationCategoryCode_convert ();
  }

  ObjectItemAssociationCategoryCode::
  ObjectItemAssociationCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAssociationCategoryCode_convert ();
  }

  ObjectItemAssociationCategoryCode* ObjectItemAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAssociationCategoryCode (*this, f, c);
  }

  ObjectItemAssociationCategoryCode::value ObjectItemAssociationCategoryCode::
  _xsd_ObjectItemAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAssociationCategoryCode_indexes_,
                      _xsd_ObjectItemAssociationCategoryCode_indexes_ + 99,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAssociationCategoryCode_indexes_ + 99 || _xsd_ObjectItemAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAssociationCategoryCode::
  _xsd_ObjectItemAssociationCategoryCode_literals_[99] =
  {
    "ADMINS",
    "AUGMNT",
    "CMDCTL",
    "CONSUM",
    "CONTNS",
    "CONTRL",
    "COORDN",
    "DETECT",
    "DISE",
    "EMPLOY",
    "ENCLOS",
    "ESTA",
    "EXPLOT",
    "FUCS",
    "HSADMI",
    "HSASGN",
    "HSATCH",
    "HSCNSL",
    "HSFPEM",
    "HSLOFF",
    "HSMAIN",
    "HSMMBR",
    "HSOPER",
    "HSPOC",
    "INSTAL",
    "INTRST",
    "ISACAU",
    "ISAFBY",
    "ISASTO",
    "ISAUNT",
    "ISAUTO",
    "ISBDFR",
    "ISBDLE",
    "ISBDRR",
    "ISBDRT",
    "ISBOND",
    "ISBRTH",
    "ISCNNC",
    "ISCNVY",
    "ISCONS",
    "ISCOUS",
    "ISCPTR",
    "ISCPTS",
    "ISDAUG",
    "ISEND",
    "ISFATH",
    "ISFSTN",
    "ISFTLW",
    "ISGRDD",
    "ISGRDF",
    "ISGRDM",
    "ISGRDS",
    "ISHUSB",
    "ISLGLF",
    "ISLGLM",
    "ISLOAD",
    "ISLOF",
    "ISMOTH",
    "ISMTLW",
    "ISNEPH",
    "ISNIEC",
    "ISOWNR",
    "ISPABD",
    "ISPART",
    "ISPEER",
    "ISPPRA",
    "ISPPRP",
    "ISPREA",
    "ISPREP",
    "ISPRTC",
    "ISROF",
    "ISSCSR",
    "ISSECN",
    "ISSIST",
    "ISSITU",
    "ISSON",
    "ISSPNR",
    "ISSPPL",
    "ISSPRT",
    "ISSTRT",
    "ISSUPR",
    "ISUCOM",
    "ISUNCL",
    "ISWIFE",
    "MAINTN",
    "NKN",
    "NOS",
    "OBSRVS",
    "OPERAT",
    "POSESS",
    "PRTENC",
    "PRVLOG",
    "RATES",
    "REPAIR",
    "REPORT",
    "SERVES",
    "SUPPL",
    "TRNSPT",
    "USES"
  };

  const ObjectItemAssociationCategoryCode::value ObjectItemAssociationCategoryCode::
  _xsd_ObjectItemAssociationCategoryCode_indexes_[99] =
  {
    ::oo_2_0::ObjectItemAssociationCategoryCode::ADMINS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::AUGMNT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::CMDCTL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::CONSUM,
    ::oo_2_0::ObjectItemAssociationCategoryCode::CONTNS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::CONTRL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::COORDN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::DETECT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::DISE,
    ::oo_2_0::ObjectItemAssociationCategoryCode::EMPLOY,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ENCLOS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ESTA,
    ::oo_2_0::ObjectItemAssociationCategoryCode::EXPLOT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::FUCS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSADMI,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSASGN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSATCH,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSCNSL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSFPEM,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSLOFF,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSMAIN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSMMBR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSOPER,
    ::oo_2_0::ObjectItemAssociationCategoryCode::HSPOC,
    ::oo_2_0::ObjectItemAssociationCategoryCode::INSTAL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::INTRST,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISACAU,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISAFBY,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISASTO,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISAUNT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISAUTO,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBDFR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBDLE,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBDRR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBDRT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBOND,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISBRTH,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCNNC,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCNVY,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCONS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCOUS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCPTR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISCPTS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISDAUG,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISEND,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISFATH,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISFSTN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISFTLW,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISGRDD,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISGRDF,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISGRDM,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISGRDS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISHUSB,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISLGLF,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISLGLM,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISLOAD,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISLOF,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISMOTH,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISMTLW,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISNEPH,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISNIEC,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISOWNR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPABD,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPART,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPEER,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPPRA,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPPRP,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPREA,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPREP,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISPRTC,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISROF,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSCSR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSECN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSIST,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSITU,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSON,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSPNR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSPPL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSPRT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSTRT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISSUPR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISUCOM,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISUNCL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::ISWIFE,
    ::oo_2_0::ObjectItemAssociationCategoryCode::MAINTN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::NKN,
    ::oo_2_0::ObjectItemAssociationCategoryCode::NOS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::OBSRVS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::OPERAT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::POSESS,
    ::oo_2_0::ObjectItemAssociationCategoryCode::PRTENC,
    ::oo_2_0::ObjectItemAssociationCategoryCode::PRVLOG,
    ::oo_2_0::ObjectItemAssociationCategoryCode::RATES,
    ::oo_2_0::ObjectItemAssociationCategoryCode::REPAIR,
    ::oo_2_0::ObjectItemAssociationCategoryCode::REPORT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::SERVES,
    ::oo_2_0::ObjectItemAssociationCategoryCode::SUPPL,
    ::oo_2_0::ObjectItemAssociationCategoryCode::TRNSPT,
    ::oo_2_0::ObjectItemAssociationCategoryCode::USES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAssociationCategoryCode >
  _xsd_ObjectItemAssociationCategoryCode_type_factory_init (
    "ObjectItemAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemAssociationSubcategoryCode
  //

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemAssociationSubcategoryCode_convert ();
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemAssociationSubcategoryCode_convert ();
  }

  ObjectItemAssociationSubcategoryCode::
  ObjectItemAssociationSubcategoryCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemAssociationSubcategoryCode_convert ();
  }

  ObjectItemAssociationSubcategoryCode* ObjectItemAssociationSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemAssociationSubcategoryCode (*this, f, c);
  }

  ObjectItemAssociationSubcategoryCode::value ObjectItemAssociationSubcategoryCode::
  _xsd_ObjectItemAssociationSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemAssociationSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemAssociationSubcategoryCode_indexes_,
                      _xsd_ObjectItemAssociationSubcategoryCode_indexes_ + 38,
                      *this,
                      c));

    if (i == _xsd_ObjectItemAssociationSubcategoryCode_indexes_ + 38 || _xsd_ObjectItemAssociationSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemAssociationSubcategoryCode::
  _xsd_ObjectItemAssociationSubcategoryCode_literals_[38] =
  {
    "ALTFOR",
    "ASGND",
    "ATPRCL",
    "ATTACH",
    "CASP1",
    "CASP2",
    "CASP3",
    "CASP4",
    "COMD",
    "DETACH",
    "DIRSUP",
    "FORCE",
    "GENSRI",
    "GENSUP",
    "HSCPTD",
    "HSNSPT",
    "ISCPER",
    "ONCALL",
    "OPCOMD",
    "OPCON",
    "ORGANC",
    "REINFC",
    "RESERV",
    "ROLE",
    "SAME",
    "SPTAMM",
    "SPTENG",
    "SPTMED",
    "SPTMVT",
    "SPTPAR",
    "SPTPOL",
    "SPTPST",
    "SPTRAT",
    "SPTRRE",
    "SPTSPL",
    "SPTTRN",
    "TACCNT",
    "TACCOM"
  };

  const ObjectItemAssociationSubcategoryCode::value ObjectItemAssociationSubcategoryCode::
  _xsd_ObjectItemAssociationSubcategoryCode_indexes_[38] =
  {
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ALTFOR,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ASGND,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ATPRCL,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ATTACH,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::CASP1,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::CASP2,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::CASP3,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::CASP4,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::COMD,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::DETACH,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::DIRSUP,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::FORCE,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::GENSRI,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::GENSUP,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::HSCPTD,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::HSNSPT,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ISCPER,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ONCALL,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::OPCOMD,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::OPCON,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ORGANC,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::REINFC,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::RESERV,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::ROLE,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SAME,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTAMM,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTENG,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTMED,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTMVT,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTPAR,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTPOL,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTPST,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTRAT,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTRRE,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTSPL,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::SPTTRN,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::TACCNT,
    ::oo_2_0::ObjectItemAssociationSubcategoryCode::TACCOM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemAssociationSubcategoryCode >
  _xsd_ObjectItemAssociationSubcategoryCode_type_factory_init (
    "ObjectItemAssociationSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemCategoryCode
  //

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemCategoryCode_convert ();
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemCategoryCode_convert ();
  }

  ObjectItemCategoryCode::
  ObjectItemCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemCategoryCode_convert ();
  }

  ObjectItemCategoryCode* ObjectItemCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemCategoryCode (*this, f, c);
  }

  ObjectItemCategoryCode::value ObjectItemCategoryCode::
  _xsd_ObjectItemCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemCategoryCode_indexes_,
                      _xsd_ObjectItemCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ObjectItemCategoryCode_indexes_ + 6 || _xsd_ObjectItemCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemCategoryCode::
  _xsd_ObjectItemCategoryCode_literals_[6] =
  {
    "FA",
    "FE",
    "MA",
    "NKN",
    "OR",
    "PE"
  };

  const ObjectItemCategoryCode::value ObjectItemCategoryCode::
  _xsd_ObjectItemCategoryCode_indexes_[6] =
  {
    ::oo_2_0::ObjectItemCategoryCode::FA,
    ::oo_2_0::ObjectItemCategoryCode::FE,
    ::oo_2_0::ObjectItemCategoryCode::MA,
    ::oo_2_0::ObjectItemCategoryCode::NKN,
    ::oo_2_0::ObjectItemCategoryCode::OR,
    ::oo_2_0::ObjectItemCategoryCode::PE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemCategoryCode >
  _xsd_ObjectItemCategoryCode_type_factory_init (
    "ObjectItemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemGroupAccountDetailQualifierCode
  //

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemGroupAccountDetailQualifierCode_convert ();
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemGroupAccountDetailQualifierCode_convert ();
  }

  ObjectItemGroupAccountDetailQualifierCode::
  ObjectItemGroupAccountDetailQualifierCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemGroupAccountDetailQualifierCode_convert ();
  }

  ObjectItemGroupAccountDetailQualifierCode* ObjectItemGroupAccountDetailQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemGroupAccountDetailQualifierCode (*this, f, c);
  }

  ObjectItemGroupAccountDetailQualifierCode::value ObjectItemGroupAccountDetailQualifierCode::
  _xsd_ObjectItemGroupAccountDetailQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemGroupAccountDetailQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemGroupAccountDetailQualifierCode_indexes_,
                      _xsd_ObjectItemGroupAccountDetailQualifierCode_indexes_ + 22,
                      *this,
                      c));

    if (i == _xsd_ObjectItemGroupAccountDetailQualifierCode_indexes_ + 22 || _xsd_ObjectItemGroupAccountDetailQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemGroupAccountDetailQualifierCode::
  _xsd_ObjectItemGroupAccountDetailQualifierCode_literals_[22] =
  {
    "AILING",
    "ASSKIA",
    "AWTNPU",
    "CAPTRD",
    "COMSTR",
    "CPTRAI",
    "DESRTD",
    "DETD",
    "DISEAS",
    "EVADNG",
    "HEALTH",
    "INJRDW",
    "KIA",
    "KILL",
    "MIA",
    "MIS",
    "NOCHUT",
    "PARCHT",
    "PRBCPT",
    "RESCUD",
    "SAFCPT",
    "UNK"
  };

  const ObjectItemGroupAccountDetailQualifierCode::value ObjectItemGroupAccountDetailQualifierCode::
  _xsd_ObjectItemGroupAccountDetailQualifierCode_indexes_[22] =
  {
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::AILING,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::ASSKIA,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::AWTNPU,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::CAPTRD,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::COMSTR,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::CPTRAI,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::DESRTD,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::DETD,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::DISEAS,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::EVADNG,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::HEALTH,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::INJRDW,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::KIA,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::KILL,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::MIA,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::MIS,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::NOCHUT,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::PARCHT,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::PRBCPT,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::RESCUD,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::SAFCPT,
    ::oo_2_0::ObjectItemGroupAccountDetailQualifierCode::UNK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemGroupAccountDetailQualifierCode >
  _xsd_ObjectItemGroupAccountDetailQualifierCode_type_factory_init (
    "ObjectItemGroupAccountDetailQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemHostilityStatusCode
  //

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemHostilityStatusCode_convert ();
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemHostilityStatusCode_convert ();
  }

  ObjectItemHostilityStatusCode::
  ObjectItemHostilityStatusCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemHostilityStatusCode_convert ();
  }

  ObjectItemHostilityStatusCode* ObjectItemHostilityStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemHostilityStatusCode (*this, f, c);
  }

  ObjectItemHostilityStatusCode::value ObjectItemHostilityStatusCode::
  _xsd_ObjectItemHostilityStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemHostilityStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemHostilityStatusCode_indexes_,
                      _xsd_ObjectItemHostilityStatusCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_ObjectItemHostilityStatusCode_indexes_ + 13 || _xsd_ObjectItemHostilityStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemHostilityStatusCode::
  _xsd_ObjectItemHostilityStatusCode_literals_[13] =
  {
    "AFR",
    "AHO",
    "AIV",
    "ANT",
    "FAKER",
    "FR",
    "HO",
    "IV",
    "JOKER",
    "NEUTRL",
    "PENDNG",
    "SUSPCT",
    "UNK"
  };

  const ObjectItemHostilityStatusCode::value ObjectItemHostilityStatusCode::
  _xsd_ObjectItemHostilityStatusCode_indexes_[13] =
  {
    ::oo_2_0::ObjectItemHostilityStatusCode::AFR,
    ::oo_2_0::ObjectItemHostilityStatusCode::AHO,
    ::oo_2_0::ObjectItemHostilityStatusCode::AIV,
    ::oo_2_0::ObjectItemHostilityStatusCode::ANT,
    ::oo_2_0::ObjectItemHostilityStatusCode::FAKER,
    ::oo_2_0::ObjectItemHostilityStatusCode::FR,
    ::oo_2_0::ObjectItemHostilityStatusCode::HO,
    ::oo_2_0::ObjectItemHostilityStatusCode::IV,
    ::oo_2_0::ObjectItemHostilityStatusCode::JOKER,
    ::oo_2_0::ObjectItemHostilityStatusCode::NEUTRL,
    ::oo_2_0::ObjectItemHostilityStatusCode::PENDNG,
    ::oo_2_0::ObjectItemHostilityStatusCode::SUSPCT,
    ::oo_2_0::ObjectItemHostilityStatusCode::UNK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemHostilityStatusCode >
  _xsd_ObjectItemHostilityStatusCode_type_factory_init (
    "ObjectItemHostilityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemLocationMeaningCode
  //

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemLocationMeaningCode_convert ();
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemLocationMeaningCode_convert ();
  }

  ObjectItemLocationMeaningCode::
  ObjectItemLocationMeaningCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemLocationMeaningCode_convert ();
  }

  ObjectItemLocationMeaningCode* ObjectItemLocationMeaningCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemLocationMeaningCode (*this, f, c);
  }

  ObjectItemLocationMeaningCode::value ObjectItemLocationMeaningCode::
  _xsd_ObjectItemLocationMeaningCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemLocationMeaningCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemLocationMeaningCode_indexes_,
                      _xsd_ObjectItemLocationMeaningCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_ObjectItemLocationMeaningCode_indexes_ + 14 || _xsd_ObjectItemLocationMeaningCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemLocationMeaningCode::
  _xsd_ObjectItemLocationMeaningCode_literals_[14] =
  {
    "ADRPRP",
    "ASSCP",
    "CEOFMA",
    "CMDDET",
    "COM",
    "CTRMNB",
    "DSPCTR",
    "FRMCTR",
    "LNBRNG",
    "ORGPRL",
    "POSOIM",
    "SHAPE",
    "SOUND",
    "STDPOS"
  };

  const ObjectItemLocationMeaningCode::value ObjectItemLocationMeaningCode::
  _xsd_ObjectItemLocationMeaningCode_indexes_[14] =
  {
    ::oo_2_0::ObjectItemLocationMeaningCode::ADRPRP,
    ::oo_2_0::ObjectItemLocationMeaningCode::ASSCP,
    ::oo_2_0::ObjectItemLocationMeaningCode::CEOFMA,
    ::oo_2_0::ObjectItemLocationMeaningCode::CMDDET,
    ::oo_2_0::ObjectItemLocationMeaningCode::COM,
    ::oo_2_0::ObjectItemLocationMeaningCode::CTRMNB,
    ::oo_2_0::ObjectItemLocationMeaningCode::DSPCTR,
    ::oo_2_0::ObjectItemLocationMeaningCode::FRMCTR,
    ::oo_2_0::ObjectItemLocationMeaningCode::LNBRNG,
    ::oo_2_0::ObjectItemLocationMeaningCode::ORGPRL,
    ::oo_2_0::ObjectItemLocationMeaningCode::POSOIM,
    ::oo_2_0::ObjectItemLocationMeaningCode::SHAPE,
    ::oo_2_0::ObjectItemLocationMeaningCode::SOUND,
    ::oo_2_0::ObjectItemLocationMeaningCode::STDPOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemLocationMeaningCode >
  _xsd_ObjectItemLocationMeaningCode_type_factory_init (
    "ObjectItemLocationMeaningCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemLocationRelativeSpeedCode
  //

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemLocationRelativeSpeedCode_convert ();
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemLocationRelativeSpeedCode_convert ();
  }

  ObjectItemLocationRelativeSpeedCode::
  ObjectItemLocationRelativeSpeedCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemLocationRelativeSpeedCode_convert ();
  }

  ObjectItemLocationRelativeSpeedCode* ObjectItemLocationRelativeSpeedCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemLocationRelativeSpeedCode (*this, f, c);
  }

  ObjectItemLocationRelativeSpeedCode::value ObjectItemLocationRelativeSpeedCode::
  _xsd_ObjectItemLocationRelativeSpeedCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemLocationRelativeSpeedCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemLocationRelativeSpeedCode_indexes_,
                      _xsd_ObjectItemLocationRelativeSpeedCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ObjectItemLocationRelativeSpeedCode_indexes_ + 4 || _xsd_ObjectItemLocationRelativeSpeedCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemLocationRelativeSpeedCode::
  _xsd_ObjectItemLocationRelativeSpeedCode_literals_[4] =
  {
    "FAST",
    "MEDIUM",
    "SLOW",
    "ZERO"
  };

  const ObjectItemLocationRelativeSpeedCode::value ObjectItemLocationRelativeSpeedCode::
  _xsd_ObjectItemLocationRelativeSpeedCode_indexes_[4] =
  {
    ::oo_2_0::ObjectItemLocationRelativeSpeedCode::FAST,
    ::oo_2_0::ObjectItemLocationRelativeSpeedCode::MEDIUM,
    ::oo_2_0::ObjectItemLocationRelativeSpeedCode::SLOW,
    ::oo_2_0::ObjectItemLocationRelativeSpeedCode::ZERO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemLocationRelativeSpeedCode >
  _xsd_ObjectItemLocationRelativeSpeedCode_type_factory_init (
    "ObjectItemLocationRelativeSpeedCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemCitationAssociationCategoryCode
  //

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemCitationAssociationCategoryCode_convert ();
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemCitationAssociationCategoryCode_convert ();
  }

  ObjectItemCitationAssociationCategoryCode::
  ObjectItemCitationAssociationCategoryCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemCitationAssociationCategoryCode_convert ();
  }

  ObjectItemCitationAssociationCategoryCode* ObjectItemCitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemCitationAssociationCategoryCode (*this, f, c);
  }

  ObjectItemCitationAssociationCategoryCode::value ObjectItemCitationAssociationCategoryCode::
  _xsd_ObjectItemCitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemCitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemCitationAssociationCategoryCode_indexes_,
                      _xsd_ObjectItemCitationAssociationCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ObjectItemCitationAssociationCategoryCode_indexes_ + 8 || _xsd_ObjectItemCitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemCitationAssociationCategoryCode::
  _xsd_ObjectItemCitationAssociationCategoryCode_literals_[8] =
  {
    "HASINS",
    "ISACTV",
    "ISAUTH",
    "ISDEAC",
    "ISDSCR",
    "ISGRPH",
    "ISRFNC",
    "ISRPTD"
  };

  const ObjectItemCitationAssociationCategoryCode::value ObjectItemCitationAssociationCategoryCode::
  _xsd_ObjectItemCitationAssociationCategoryCode_indexes_[8] =
  {
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::HASINS,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISACTV,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISAUTH,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISDEAC,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISDSCR,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISGRPH,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISRFNC,
    ::oo_2_0::ObjectItemCitationAssociationCategoryCode::ISRPTD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemCitationAssociationCategoryCode >
  _xsd_ObjectItemCitationAssociationCategoryCode_type_factory_init (
    "ObjectItemCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemStatusBoobyTrapPresenceCode
  //

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemStatusBoobyTrapPresenceCode_convert ();
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemStatusBoobyTrapPresenceCode_convert ();
  }

  ObjectItemStatusBoobyTrapPresenceCode::
  ObjectItemStatusBoobyTrapPresenceCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemStatusBoobyTrapPresenceCode_convert ();
  }

  ObjectItemStatusBoobyTrapPresenceCode* ObjectItemStatusBoobyTrapPresenceCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemStatusBoobyTrapPresenceCode (*this, f, c);
  }

  ObjectItemStatusBoobyTrapPresenceCode::value ObjectItemStatusBoobyTrapPresenceCode::
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemStatusBoobyTrapPresenceCode_indexes_,
                      _xsd_ObjectItemStatusBoobyTrapPresenceCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ObjectItemStatusBoobyTrapPresenceCode_indexes_ + 3 || _xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemStatusBoobyTrapPresenceCode::
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_[3] =
  {
    "NO",
    "UNK",
    "YES"
  };

  const ObjectItemStatusBoobyTrapPresenceCode::value ObjectItemStatusBoobyTrapPresenceCode::
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_indexes_[3] =
  {
    ::oo_2_0::ObjectItemStatusBoobyTrapPresenceCode::NO,
    ::oo_2_0::ObjectItemStatusBoobyTrapPresenceCode::UNK,
    ::oo_2_0::ObjectItemStatusBoobyTrapPresenceCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemStatusBoobyTrapPresenceCode >
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_type_factory_init (
    "ObjectItemStatusBoobyTrapPresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemStatusCategoryCode
  //

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemStatusCategoryCode_convert ();
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemStatusCategoryCode_convert ();
  }

  ObjectItemStatusCategoryCode::
  ObjectItemStatusCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemStatusCategoryCode_convert ();
  }

  ObjectItemStatusCategoryCode* ObjectItemStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemStatusCategoryCode (*this, f, c);
  }

  ObjectItemStatusCategoryCode::value ObjectItemStatusCategoryCode::
  _xsd_ObjectItemStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemStatusCategoryCode_indexes_,
                      _xsd_ObjectItemStatusCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_ObjectItemStatusCategoryCode_indexes_ + 7 || _xsd_ObjectItemStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemStatusCategoryCode::
  _xsd_ObjectItemStatusCategoryCode_literals_[7] =
  {
    "CF",
    "FA",
    "GF",
    "MA",
    "NKN",
    "OR",
    "PE"
  };

  const ObjectItemStatusCategoryCode::value ObjectItemStatusCategoryCode::
  _xsd_ObjectItemStatusCategoryCode_indexes_[7] =
  {
    ::oo_2_0::ObjectItemStatusCategoryCode::CF,
    ::oo_2_0::ObjectItemStatusCategoryCode::FA,
    ::oo_2_0::ObjectItemStatusCategoryCode::GF,
    ::oo_2_0::ObjectItemStatusCategoryCode::MA,
    ::oo_2_0::ObjectItemStatusCategoryCode::NKN,
    ::oo_2_0::ObjectItemStatusCategoryCode::OR,
    ::oo_2_0::ObjectItemStatusCategoryCode::PE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemStatusCategoryCode >
  _xsd_ObjectItemStatusCategoryCode_type_factory_init (
    "ObjectItemStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectItemStatusEmissionControlCode
  //

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectItemStatusEmissionControlCode_convert ();
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectItemStatusEmissionControlCode_convert ();
  }

  ObjectItemStatusEmissionControlCode::
  ObjectItemStatusEmissionControlCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectItemStatusEmissionControlCode_convert ();
  }

  ObjectItemStatusEmissionControlCode* ObjectItemStatusEmissionControlCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectItemStatusEmissionControlCode (*this, f, c);
  }

  ObjectItemStatusEmissionControlCode::value ObjectItemStatusEmissionControlCode::
  _xsd_ObjectItemStatusEmissionControlCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectItemStatusEmissionControlCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectItemStatusEmissionControlCode_indexes_,
                      _xsd_ObjectItemStatusEmissionControlCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ObjectItemStatusEmissionControlCode_indexes_ + 3 || _xsd_ObjectItemStatusEmissionControlCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectItemStatusEmissionControlCode::
  _xsd_ObjectItemStatusEmissionControlCode_literals_[3] =
  {
    "EMCON1",
    "EMCON2",
    "EMCON3"
  };

  const ObjectItemStatusEmissionControlCode::value ObjectItemStatusEmissionControlCode::
  _xsd_ObjectItemStatusEmissionControlCode_indexes_[3] =
  {
    ::oo_2_0::ObjectItemStatusEmissionControlCode::EMCON1,
    ::oo_2_0::ObjectItemStatusEmissionControlCode::EMCON2,
    ::oo_2_0::ObjectItemStatusEmissionControlCode::EMCON3
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectItemStatusEmissionControlCode >
  _xsd_ObjectItemStatusEmissionControlCode_type_factory_init (
    "ObjectItemStatusEmissionControlCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeCategoryCode
  //

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeCategoryCode_convert ();
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeCategoryCode_convert ();
  }

  ObjectTypeCategoryCode::
  ObjectTypeCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeCategoryCode_convert ();
  }

  ObjectTypeCategoryCode* ObjectTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeCategoryCode (*this, f, c);
  }

  ObjectTypeCategoryCode::value ObjectTypeCategoryCode::
  _xsd_ObjectTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeCategoryCode_indexes_,
                      _xsd_ObjectTypeCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeCategoryCode_indexes_ + 6 || _xsd_ObjectTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeCategoryCode::
  _xsd_ObjectTypeCategoryCode_literals_[6] =
  {
    "FA",
    "FE",
    "MA",
    "NKN",
    "OR",
    "PE"
  };

  const ObjectTypeCategoryCode::value ObjectTypeCategoryCode::
  _xsd_ObjectTypeCategoryCode_indexes_[6] =
  {
    ::oo_2_0::ObjectTypeCategoryCode::FA,
    ::oo_2_0::ObjectTypeCategoryCode::FE,
    ::oo_2_0::ObjectTypeCategoryCode::MA,
    ::oo_2_0::ObjectTypeCategoryCode::NKN,
    ::oo_2_0::ObjectTypeCategoryCode::OR,
    ::oo_2_0::ObjectTypeCategoryCode::PE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeCategoryCode >
  _xsd_ObjectTypeCategoryCode_type_factory_init (
    "ObjectTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeDecoyIndicatorCode
  //

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeDecoyIndicatorCode_convert ();
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeDecoyIndicatorCode_convert ();
  }

  ObjectTypeDecoyIndicatorCode::
  ObjectTypeDecoyIndicatorCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeDecoyIndicatorCode_convert ();
  }

  ObjectTypeDecoyIndicatorCode* ObjectTypeDecoyIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeDecoyIndicatorCode (*this, f, c);
  }

  ObjectTypeDecoyIndicatorCode::value ObjectTypeDecoyIndicatorCode::
  _xsd_ObjectTypeDecoyIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeDecoyIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeDecoyIndicatorCode_indexes_,
                      _xsd_ObjectTypeDecoyIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeDecoyIndicatorCode_indexes_ + 2 || _xsd_ObjectTypeDecoyIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeDecoyIndicatorCode::
  _xsd_ObjectTypeDecoyIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ObjectTypeDecoyIndicatorCode::value ObjectTypeDecoyIndicatorCode::
  _xsd_ObjectTypeDecoyIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ObjectTypeDecoyIndicatorCode::NO,
    ::oo_2_0::ObjectTypeDecoyIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeDecoyIndicatorCode >
  _xsd_ObjectTypeDecoyIndicatorCode_type_factory_init (
    "ObjectTypeDecoyIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeEstablishmentCategoryCode
  //

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeEstablishmentCategoryCode_convert ();
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeEstablishmentCategoryCode_convert ();
  }

  ObjectTypeEstablishmentCategoryCode::
  ObjectTypeEstablishmentCategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeEstablishmentCategoryCode_convert ();
  }

  ObjectTypeEstablishmentCategoryCode* ObjectTypeEstablishmentCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeEstablishmentCategoryCode (*this, f, c);
  }

  ObjectTypeEstablishmentCategoryCode::value ObjectTypeEstablishmentCategoryCode::
  _xsd_ObjectTypeEstablishmentCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeEstablishmentCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeEstablishmentCategoryCode_indexes_,
                      _xsd_ObjectTypeEstablishmentCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeEstablishmentCategoryCode_indexes_ + 2 || _xsd_ObjectTypeEstablishmentCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeEstablishmentCategoryCode::
  _xsd_ObjectTypeEstablishmentCategoryCode_literals_[2] =
  {
    "CES",
    "PCG"
  };

  const ObjectTypeEstablishmentCategoryCode::value ObjectTypeEstablishmentCategoryCode::
  _xsd_ObjectTypeEstablishmentCategoryCode_indexes_[2] =
  {
    ::oo_2_0::ObjectTypeEstablishmentCategoryCode::CES,
    ::oo_2_0::ObjectTypeEstablishmentCategoryCode::PCG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeEstablishmentCategoryCode >
  _xsd_ObjectTypeEstablishmentCategoryCode_type_factory_init (
    "ObjectTypeEstablishmentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeEstablishmentEnvironmentConditionCode
  //

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_convert ();
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ::xercesc::DOMAttr& a,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_convert ();
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::
  ObjectTypeEstablishmentEnvironmentConditionCode (const ::std::string& s,
                                                   const ::xercesc::DOMElement* e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_convert ();
  }

  ObjectTypeEstablishmentEnvironmentConditionCode* ObjectTypeEstablishmentEnvironmentConditionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeEstablishmentEnvironmentConditionCode (*this, f, c);
  }

  ObjectTypeEstablishmentEnvironmentConditionCode::value ObjectTypeEstablishmentEnvironmentConditionCode::
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_indexes_,
                      _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_indexes_ + 8 || _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeEstablishmentEnvironmentConditionCode::
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_[8] =
  {
    "ARC",
    "DES",
    "JUN",
    "MOUNTN",
    "NKN",
    "NOS",
    "TMP",
    "TRP"
  };

  const ObjectTypeEstablishmentEnvironmentConditionCode::value ObjectTypeEstablishmentEnvironmentConditionCode::
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_indexes_[8] =
  {
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::ARC,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::DES,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::JUN,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::MOUNTN,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::NKN,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::NOS,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::TMP,
    ::oo_2_0::ObjectTypeEstablishmentEnvironmentConditionCode::TRP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeEstablishmentEnvironmentConditionCode >
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_type_factory_init (
    "ObjectTypeEstablishmentEnvironmentConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode
  //

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ::xercesc::DOMElement& e,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_convert ();
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ::xercesc::DOMAttr& a,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_convert ();
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (const ::std::string& s,
                                                                 const ::xercesc::DOMElement* e,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_convert ();
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode* ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode (*this, f, c);
  }

  ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::value ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_indexes_,
                      _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_indexes_ + 2 || _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::value ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::NO,
    ::oo_2_0::ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode >
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_type_factory_init (
    "ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeEstablishmentOperationalModeCode
  //

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeEstablishmentOperationalModeCode_convert ();
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeEstablishmentOperationalModeCode_convert ();
  }

  ObjectTypeEstablishmentOperationalModeCode::
  ObjectTypeEstablishmentOperationalModeCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeEstablishmentOperationalModeCode_convert ();
  }

  ObjectTypeEstablishmentOperationalModeCode* ObjectTypeEstablishmentOperationalModeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeEstablishmentOperationalModeCode (*this, f, c);
  }

  ObjectTypeEstablishmentOperationalModeCode::value ObjectTypeEstablishmentOperationalModeCode::
  _xsd_ObjectTypeEstablishmentOperationalModeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeEstablishmentOperationalModeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeEstablishmentOperationalModeCode_indexes_,
                      _xsd_ObjectTypeEstablishmentOperationalModeCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeEstablishmentOperationalModeCode_indexes_ + 7 || _xsd_ObjectTypeEstablishmentOperationalModeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeEstablishmentOperationalModeCode::
  _xsd_ObjectTypeEstablishmentOperationalModeCode_literals_[7] =
  {
    "CV",
    "HU",
    "IS",
    "PE",
    "PK",
    "PSO",
    "WA"
  };

  const ObjectTypeEstablishmentOperationalModeCode::value ObjectTypeEstablishmentOperationalModeCode::
  _xsd_ObjectTypeEstablishmentOperationalModeCode_indexes_[7] =
  {
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::CV,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::HU,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::IS,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::PE,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::PK,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::PSO,
    ::oo_2_0::ObjectTypeEstablishmentOperationalModeCode::WA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeEstablishmentOperationalModeCode >
  _xsd_ObjectTypeEstablishmentOperationalModeCode_type_factory_init (
    "ObjectTypeEstablishmentOperationalModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ObjectTypeCitationAssociationCategoryCode
  //

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ObjectTypeCitationAssociationCategoryCode_convert ();
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ObjectTypeCitationAssociationCategoryCode_convert ();
  }

  ObjectTypeCitationAssociationCategoryCode::
  ObjectTypeCitationAssociationCategoryCode (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ObjectTypeCitationAssociationCategoryCode_convert ();
  }

  ObjectTypeCitationAssociationCategoryCode* ObjectTypeCitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ObjectTypeCitationAssociationCategoryCode (*this, f, c);
  }

  ObjectTypeCitationAssociationCategoryCode::value ObjectTypeCitationAssociationCategoryCode::
  _xsd_ObjectTypeCitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ObjectTypeCitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ObjectTypeCitationAssociationCategoryCode_indexes_,
                      _xsd_ObjectTypeCitationAssociationCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_ObjectTypeCitationAssociationCategoryCode_indexes_ + 7 || _xsd_ObjectTypeCitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ObjectTypeCitationAssociationCategoryCode::
  _xsd_ObjectTypeCitationAssociationCategoryCode_literals_[7] =
  {
    "HASCAP",
    "HASTNG",
    "ISDSCR",
    "ISMNTN",
    "ISPRCR",
    "ISRFNC",
    "ISSPCF"
  };

  const ObjectTypeCitationAssociationCategoryCode::value ObjectTypeCitationAssociationCategoryCode::
  _xsd_ObjectTypeCitationAssociationCategoryCode_indexes_[7] =
  {
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::HASCAP,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::HASTNG,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::ISDSCR,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::ISMNTN,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::ISPRCR,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::ISRFNC,
    ::oo_2_0::ObjectTypeCitationAssociationCategoryCode::ISSPCF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ObjectTypeCitationAssociationCategoryCode >
  _xsd_ObjectTypeCitationAssociationCategoryCode_type_factory_init (
    "ObjectTypeCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OperationalCapabilityCategoryCode
  //

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OperationalCapabilityCategoryCode_convert ();
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OperationalCapabilityCategoryCode_convert ();
  }

  OperationalCapabilityCategoryCode::
  OperationalCapabilityCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OperationalCapabilityCategoryCode_convert ();
  }

  OperationalCapabilityCategoryCode* OperationalCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationalCapabilityCategoryCode (*this, f, c);
  }

  OperationalCapabilityCategoryCode::value OperationalCapabilityCategoryCode::
  _xsd_OperationalCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperationalCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperationalCapabilityCategoryCode_indexes_,
                      _xsd_OperationalCapabilityCategoryCode_indexes_ + 99,
                      *this,
                      c));

    if (i == _xsd_OperationalCapabilityCategoryCode_indexes_ + 99 || _xsd_OperationalCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperationalCapabilityCategoryCode::
  _xsd_OperationalCapabilityCategoryCode_literals_[99] =
  {
    "AIRBRN",
    "AIRDEF",
    "AIRGRD",
    "AIRINT",
    "AMPH",
    "ANTSUB",
    "ARASLT",
    "ARC",
    "ARLRFL",
    "ARTYSV",
    "ATTACK",
    "BIOMAT",
    "C2",
    "CAS",
    "CBRNDC",
    "CHMDEC",
    "CHMMAT",
    "CHMSMK",
    "CIVLWE",
    "CMDOPS",
    "CNTRIN",
    "CTRINT",
    "ELCRNG",
    "ENGCBT",
    "ENGCN",
    "ENGCNN",
    "EW",
    "EWDF",
    "EWINTC",
    "EWJAM",
    "FINANC",
    "INTERO",
    "JNTINT",
    "LABOUR",
    "LEGAL",
    "MAINT",
    "MARINE",
    "MARTME",
    "MCM",
    "MEDEVC",
    "MIAREX",
    "MIOPS",
    "MITCEX",
    "MNTELO",
    "MNTOD",
    "MNTODM",
    "MOUNTN",
    "MRTGRR",
    "MWR",
    "NUCMAT",
    "PERSVC",
    "PSO",
    "PUBAF",
    "PUBAFB",
    "PUBAFJ",
    "RADMAT",
    "RAILWY",
    "RECCE",
    "RECVRY",
    "REPLHO",
    "SAR",
    "SCOUT",
    "SGFC",
    "SGNC",
    "SGNLE",
    "SGNSE",
    "SGRDRL",
    "SGRDTA",
    "SGRDTE",
    "SGSPT",
    "SIGINT",
    "SIGRAD",
    "SPLC1",
    "SPLC2",
    "SPLC3",
    "SPLC3A",
    "SPLC4",
    "SPLC5",
    "SPLLDB",
    "SPLWAT",
    "SRV",
    "SRVGM",
    "SRVLR",
    "SRVMET",
    "SRVSEN",
    "TAIRRE",
    "TGT",
    "TGTAFL",
    "TGTARD",
    "TGTASD",
    "TGTNG",
    "THTMSD",
    "TRAIN",
    "TRNAPD",
    "TRNMSL",
    "TRNMVC",
    "TRNSPD",
    "UTILTY",
    "WATER"
  };

  const OperationalCapabilityCategoryCode::value OperationalCapabilityCategoryCode::
  _xsd_OperationalCapabilityCategoryCode_indexes_[99] =
  {
    ::oo_2_0::OperationalCapabilityCategoryCode::AIRBRN,
    ::oo_2_0::OperationalCapabilityCategoryCode::AIRDEF,
    ::oo_2_0::OperationalCapabilityCategoryCode::AIRGRD,
    ::oo_2_0::OperationalCapabilityCategoryCode::AIRINT,
    ::oo_2_0::OperationalCapabilityCategoryCode::AMPH,
    ::oo_2_0::OperationalCapabilityCategoryCode::ANTSUB,
    ::oo_2_0::OperationalCapabilityCategoryCode::ARASLT,
    ::oo_2_0::OperationalCapabilityCategoryCode::ARC,
    ::oo_2_0::OperationalCapabilityCategoryCode::ARLRFL,
    ::oo_2_0::OperationalCapabilityCategoryCode::ARTYSV,
    ::oo_2_0::OperationalCapabilityCategoryCode::ATTACK,
    ::oo_2_0::OperationalCapabilityCategoryCode::BIOMAT,
    ::oo_2_0::OperationalCapabilityCategoryCode::C2,
    ::oo_2_0::OperationalCapabilityCategoryCode::CAS,
    ::oo_2_0::OperationalCapabilityCategoryCode::CBRNDC,
    ::oo_2_0::OperationalCapabilityCategoryCode::CHMDEC,
    ::oo_2_0::OperationalCapabilityCategoryCode::CHMMAT,
    ::oo_2_0::OperationalCapabilityCategoryCode::CHMSMK,
    ::oo_2_0::OperationalCapabilityCategoryCode::CIVLWE,
    ::oo_2_0::OperationalCapabilityCategoryCode::CMDOPS,
    ::oo_2_0::OperationalCapabilityCategoryCode::CNTRIN,
    ::oo_2_0::OperationalCapabilityCategoryCode::CTRINT,
    ::oo_2_0::OperationalCapabilityCategoryCode::ELCRNG,
    ::oo_2_0::OperationalCapabilityCategoryCode::ENGCBT,
    ::oo_2_0::OperationalCapabilityCategoryCode::ENGCN,
    ::oo_2_0::OperationalCapabilityCategoryCode::ENGCNN,
    ::oo_2_0::OperationalCapabilityCategoryCode::EW,
    ::oo_2_0::OperationalCapabilityCategoryCode::EWDF,
    ::oo_2_0::OperationalCapabilityCategoryCode::EWINTC,
    ::oo_2_0::OperationalCapabilityCategoryCode::EWJAM,
    ::oo_2_0::OperationalCapabilityCategoryCode::FINANC,
    ::oo_2_0::OperationalCapabilityCategoryCode::INTERO,
    ::oo_2_0::OperationalCapabilityCategoryCode::JNTINT,
    ::oo_2_0::OperationalCapabilityCategoryCode::LABOUR,
    ::oo_2_0::OperationalCapabilityCategoryCode::LEGAL,
    ::oo_2_0::OperationalCapabilityCategoryCode::MAINT,
    ::oo_2_0::OperationalCapabilityCategoryCode::MARINE,
    ::oo_2_0::OperationalCapabilityCategoryCode::MARTME,
    ::oo_2_0::OperationalCapabilityCategoryCode::MCM,
    ::oo_2_0::OperationalCapabilityCategoryCode::MEDEVC,
    ::oo_2_0::OperationalCapabilityCategoryCode::MIAREX,
    ::oo_2_0::OperationalCapabilityCategoryCode::MIOPS,
    ::oo_2_0::OperationalCapabilityCategoryCode::MITCEX,
    ::oo_2_0::OperationalCapabilityCategoryCode::MNTELO,
    ::oo_2_0::OperationalCapabilityCategoryCode::MNTOD,
    ::oo_2_0::OperationalCapabilityCategoryCode::MNTODM,
    ::oo_2_0::OperationalCapabilityCategoryCode::MOUNTN,
    ::oo_2_0::OperationalCapabilityCategoryCode::MRTGRR,
    ::oo_2_0::OperationalCapabilityCategoryCode::MWR,
    ::oo_2_0::OperationalCapabilityCategoryCode::NUCMAT,
    ::oo_2_0::OperationalCapabilityCategoryCode::PERSVC,
    ::oo_2_0::OperationalCapabilityCategoryCode::PSO,
    ::oo_2_0::OperationalCapabilityCategoryCode::PUBAF,
    ::oo_2_0::OperationalCapabilityCategoryCode::PUBAFB,
    ::oo_2_0::OperationalCapabilityCategoryCode::PUBAFJ,
    ::oo_2_0::OperationalCapabilityCategoryCode::RADMAT,
    ::oo_2_0::OperationalCapabilityCategoryCode::RAILWY,
    ::oo_2_0::OperationalCapabilityCategoryCode::RECCE,
    ::oo_2_0::OperationalCapabilityCategoryCode::RECVRY,
    ::oo_2_0::OperationalCapabilityCategoryCode::REPLHO,
    ::oo_2_0::OperationalCapabilityCategoryCode::SAR,
    ::oo_2_0::OperationalCapabilityCategoryCode::SCOUT,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGFC,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGNC,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGNLE,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGNSE,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGRDRL,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGRDTA,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGRDTE,
    ::oo_2_0::OperationalCapabilityCategoryCode::SGSPT,
    ::oo_2_0::OperationalCapabilityCategoryCode::SIGINT,
    ::oo_2_0::OperationalCapabilityCategoryCode::SIGRAD,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC1,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC2,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC3,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC3A,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC4,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLC5,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLLDB,
    ::oo_2_0::OperationalCapabilityCategoryCode::SPLWAT,
    ::oo_2_0::OperationalCapabilityCategoryCode::SRV,
    ::oo_2_0::OperationalCapabilityCategoryCode::SRVGM,
    ::oo_2_0::OperationalCapabilityCategoryCode::SRVLR,
    ::oo_2_0::OperationalCapabilityCategoryCode::SRVMET,
    ::oo_2_0::OperationalCapabilityCategoryCode::SRVSEN,
    ::oo_2_0::OperationalCapabilityCategoryCode::TAIRRE,
    ::oo_2_0::OperationalCapabilityCategoryCode::TGT,
    ::oo_2_0::OperationalCapabilityCategoryCode::TGTAFL,
    ::oo_2_0::OperationalCapabilityCategoryCode::TGTARD,
    ::oo_2_0::OperationalCapabilityCategoryCode::TGTASD,
    ::oo_2_0::OperationalCapabilityCategoryCode::TGTNG,
    ::oo_2_0::OperationalCapabilityCategoryCode::THTMSD,
    ::oo_2_0::OperationalCapabilityCategoryCode::TRAIN,
    ::oo_2_0::OperationalCapabilityCategoryCode::TRNAPD,
    ::oo_2_0::OperationalCapabilityCategoryCode::TRNMSL,
    ::oo_2_0::OperationalCapabilityCategoryCode::TRNMVC,
    ::oo_2_0::OperationalCapabilityCategoryCode::TRNSPD,
    ::oo_2_0::OperationalCapabilityCategoryCode::UTILTY,
    ::oo_2_0::OperationalCapabilityCategoryCode::WATER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalCapabilityCategoryCode >
  _xsd_OperationalCapabilityCategoryCode_type_factory_init (
    "OperationalCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OperationalCapabilityLevelCode
  //

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OperationalCapabilityLevelCode_convert ();
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OperationalCapabilityLevelCode_convert ();
  }

  OperationalCapabilityLevelCode::
  OperationalCapabilityLevelCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OperationalCapabilityLevelCode_convert ();
  }

  OperationalCapabilityLevelCode* OperationalCapabilityLevelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationalCapabilityLevelCode (*this, f, c);
  }

  OperationalCapabilityLevelCode::value OperationalCapabilityLevelCode::
  _xsd_OperationalCapabilityLevelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperationalCapabilityLevelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperationalCapabilityLevelCode_indexes_,
                      _xsd_OperationalCapabilityLevelCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_OperationalCapabilityLevelCode_indexes_ + 7 || _xsd_OperationalCapabilityLevelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperationalCapabilityLevelCode::
  _xsd_OperationalCapabilityLevelCode_literals_[7] =
  {
    "CORPS",
    "DIV",
    "FORCE",
    "OPR",
    "STRTGC",
    "TACTCL",
    "THTRE"
  };

  const OperationalCapabilityLevelCode::value OperationalCapabilityLevelCode::
  _xsd_OperationalCapabilityLevelCode_indexes_[7] =
  {
    ::oo_2_0::OperationalCapabilityLevelCode::CORPS,
    ::oo_2_0::OperationalCapabilityLevelCode::DIV,
    ::oo_2_0::OperationalCapabilityLevelCode::FORCE,
    ::oo_2_0::OperationalCapabilityLevelCode::OPR,
    ::oo_2_0::OperationalCapabilityLevelCode::STRTGC,
    ::oo_2_0::OperationalCapabilityLevelCode::TACTCL,
    ::oo_2_0::OperationalCapabilityLevelCode::THTRE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalCapabilityLevelCode >
  _xsd_OperationalCapabilityLevelCode_type_factory_init (
    "OperationalCapabilityLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OperationalCapabilityQualifierCode
  //

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OperationalCapabilityQualifierCode_convert ();
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OperationalCapabilityQualifierCode_convert ();
  }

  OperationalCapabilityQualifierCode::
  OperationalCapabilityQualifierCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OperationalCapabilityQualifierCode_convert ();
  }

  OperationalCapabilityQualifierCode* OperationalCapabilityQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationalCapabilityQualifierCode (*this, f, c);
  }

  OperationalCapabilityQualifierCode::value OperationalCapabilityQualifierCode::
  _xsd_OperationalCapabilityQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperationalCapabilityQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperationalCapabilityQualifierCode_indexes_,
                      _xsd_OperationalCapabilityQualifierCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_OperationalCapabilityQualifierCode_indexes_ + 3 || _xsd_OperationalCapabilityQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperationalCapabilityQualifierCode::
  _xsd_OperationalCapabilityQualifierCode_literals_[3] =
  {
    "HIGH",
    "LOW",
    "MEDIUM"
  };

  const OperationalCapabilityQualifierCode::value OperationalCapabilityQualifierCode::
  _xsd_OperationalCapabilityQualifierCode_indexes_[3] =
  {
    ::oo_2_0::OperationalCapabilityQualifierCode::HIGH,
    ::oo_2_0::OperationalCapabilityQualifierCode::LOW,
    ::oo_2_0::OperationalCapabilityQualifierCode::MEDIUM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalCapabilityQualifierCode >
  _xsd_OperationalCapabilityQualifierCode_type_factory_init (
    "OperationalCapabilityQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OperationalInformationGroupCategoryCode
  //

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OperationalInformationGroupCategoryCode_convert ();
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OperationalInformationGroupCategoryCode_convert ();
  }

  OperationalInformationGroupCategoryCode::
  OperationalInformationGroupCategoryCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OperationalInformationGroupCategoryCode_convert ();
  }

  OperationalInformationGroupCategoryCode* OperationalInformationGroupCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationalInformationGroupCategoryCode (*this, f, c);
  }

  OperationalInformationGroupCategoryCode::value OperationalInformationGroupCategoryCode::
  _xsd_OperationalInformationGroupCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperationalInformationGroupCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperationalInformationGroupCategoryCode_indexes_,
                      _xsd_OperationalInformationGroupCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_OperationalInformationGroupCategoryCode_indexes_ + 6 || _xsd_OperationalInformationGroupCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperationalInformationGroupCategoryCode::
  _xsd_OperationalInformationGroupCategoryCode_literals_[6] =
  {
    "CORENU",
    "FRDNEU",
    "FRNENO",
    "GLBSGN",
    "UNCORR",
    "PLNORD"
  };

  const OperationalInformationGroupCategoryCode::value OperationalInformationGroupCategoryCode::
  _xsd_OperationalInformationGroupCategoryCode_indexes_[6] =
  {
    ::oo_2_0::OperationalInformationGroupCategoryCode::CORENU,
    ::oo_2_0::OperationalInformationGroupCategoryCode::FRDNEU,
    ::oo_2_0::OperationalInformationGroupCategoryCode::FRNENO,
    ::oo_2_0::OperationalInformationGroupCategoryCode::GLBSGN,
    ::oo_2_0::OperationalInformationGroupCategoryCode::PLNORD,
    ::oo_2_0::OperationalInformationGroupCategoryCode::UNCORR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalInformationGroupCategoryCode >
  _xsd_OperationalInformationGroupCategoryCode_type_factory_init (
    "OperationalInformationGroupCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OperationalInformationGroupOrganisationAssociationCategoryCode
  //

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_convert ();
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_convert ();
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::
  OperationalInformationGroupOrganisationAssociationCategoryCode (const ::std::string& s,
                                                                  const ::xercesc::DOMElement* e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_convert ();
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode* OperationalInformationGroupOrganisationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationalInformationGroupOrganisationAssociationCategoryCode (*this, f, c);
  }

  OperationalInformationGroupOrganisationAssociationCategoryCode::value OperationalInformationGroupOrganisationAssociationCategoryCode::
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_indexes_,
                      _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_indexes_ + 2 || _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperationalInformationGroupOrganisationAssociationCategoryCode::
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_[2] =
  {
    "RESP",
    "PROXY"
  };

  const OperationalInformationGroupOrganisationAssociationCategoryCode::value OperationalInformationGroupOrganisationAssociationCategoryCode::
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_indexes_[2] =
  {
    ::oo_2_0::OperationalInformationGroupOrganisationAssociationCategoryCode::PROXY,
    ::oo_2_0::OperationalInformationGroupOrganisationAssociationCategoryCode::RESP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalInformationGroupOrganisationAssociationCategoryCode >
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_type_factory_init (
    "OperationalInformationGroupOrganisationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrbitAreaAlignmentCode
  //

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrbitAreaAlignmentCode_convert ();
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrbitAreaAlignmentCode_convert ();
  }

  OrbitAreaAlignmentCode::
  OrbitAreaAlignmentCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrbitAreaAlignmentCode_convert ();
  }

  OrbitAreaAlignmentCode* OrbitAreaAlignmentCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrbitAreaAlignmentCode (*this, f, c);
  }

  OrbitAreaAlignmentCode::value OrbitAreaAlignmentCode::
  _xsd_OrbitAreaAlignmentCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrbitAreaAlignmentCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrbitAreaAlignmentCode_indexes_,
                      _xsd_OrbitAreaAlignmentCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_OrbitAreaAlignmentCode_indexes_ + 3 || _xsd_OrbitAreaAlignmentCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrbitAreaAlignmentCode::
  _xsd_OrbitAreaAlignmentCode_literals_[3] =
  {
    "CENTRE",
    "LEFT",
    "RIGHT"
  };

  const OrbitAreaAlignmentCode::value OrbitAreaAlignmentCode::
  _xsd_OrbitAreaAlignmentCode_indexes_[3] =
  {
    ::oo_2_0::OrbitAreaAlignmentCode::CENTRE,
    ::oo_2_0::OrbitAreaAlignmentCode::LEFT,
    ::oo_2_0::OrbitAreaAlignmentCode::RIGHT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrbitAreaAlignmentCode >
  _xsd_OrbitAreaAlignmentCode_type_factory_init (
    "OrbitAreaAlignmentCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrderCategoryCode
  //

  OrderCategoryCode::
  OrderCategoryCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrderCategoryCode_convert ();
  }

  OrderCategoryCode::
  OrderCategoryCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrderCategoryCode_convert ();
  }

  OrderCategoryCode::
  OrderCategoryCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrderCategoryCode_convert ();
  }

  OrderCategoryCode* OrderCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrderCategoryCode (*this, f, c);
  }

  OrderCategoryCode::value OrderCategoryCode::
  _xsd_OrderCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrderCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrderCategoryCode_indexes_,
                      _xsd_OrderCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrderCategoryCode_indexes_ + 5 || _xsd_OrderCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrderCategoryCode::
  _xsd_OrderCategoryCode_literals_[5] =
  {
    "ADLOGO",
    "FRAGO",
    "OPORD",
    "WNGO",
    "NOS"
  };

  const OrderCategoryCode::value OrderCategoryCode::
  _xsd_OrderCategoryCode_indexes_[5] =
  {
    ::oo_2_0::OrderCategoryCode::ADLOGO,
    ::oo_2_0::OrderCategoryCode::FRAGO,
    ::oo_2_0::OrderCategoryCode::NOS,
    ::oo_2_0::OrderCategoryCode::OPORD,
    ::oo_2_0::OrderCategoryCode::WNGO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrderCategoryCode >
  _xsd_OrderCategoryCode_type_factory_init (
    "OrderCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrderStatusExecutionStateCode
  //

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrderStatusExecutionStateCode_convert ();
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrderStatusExecutionStateCode_convert ();
  }

  OrderStatusExecutionStateCode::
  OrderStatusExecutionStateCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrderStatusExecutionStateCode_convert ();
  }

  OrderStatusExecutionStateCode* OrderStatusExecutionStateCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrderStatusExecutionStateCode (*this, f, c);
  }

  OrderStatusExecutionStateCode::value OrderStatusExecutionStateCode::
  _xsd_OrderStatusExecutionStateCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrderStatusExecutionStateCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrderStatusExecutionStateCode_indexes_,
                      _xsd_OrderStatusExecutionStateCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OrderStatusExecutionStateCode_indexes_ + 2 || _xsd_OrderStatusExecutionStateCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrderStatusExecutionStateCode::
  _xsd_OrderStatusExecutionStateCode_literals_[2] =
  {
    "ISSUED",
    "STOPPD"
  };

  const OrderStatusExecutionStateCode::value OrderStatusExecutionStateCode::
  _xsd_OrderStatusExecutionStateCode_indexes_[2] =
  {
    ::oo_2_0::OrderStatusExecutionStateCode::ISSUED,
    ::oo_2_0::OrderStatusExecutionStateCode::STOPPD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrderStatusExecutionStateCode >
  _xsd_OrderStatusExecutionStateCode_type_factory_init (
    "OrderStatusExecutionStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationActionAssociationCategoryCode
  //

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationActionAssociationCategoryCode_convert ();
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationActionAssociationCategoryCode_convert ();
  }

  OrganisationActionAssociationCategoryCode::
  OrganisationActionAssociationCategoryCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationActionAssociationCategoryCode_convert ();
  }

  OrganisationActionAssociationCategoryCode* OrganisationActionAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationActionAssociationCategoryCode (*this, f, c);
  }

  OrganisationActionAssociationCategoryCode::value OrganisationActionAssociationCategoryCode::
  _xsd_OrganisationActionAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationActionAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationActionAssociationCategoryCode_indexes_,
                      _xsd_OrganisationActionAssociationCategoryCode_indexes_ + 14,
                      *this,
                      c));

    if (i == _xsd_OrganisationActionAssociationCategoryCode_indexes_ + 14 || _xsd_OrganisationActionAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationActionAssociationCategoryCode::
  _xsd_OrganisationActionAssociationCategoryCode_literals_[14] =
  {
    "APPR",
    "CONTRL",
    "COOR",
    "INIT",
    "INTRST",
    "ISSCRM",
    "LIAISN",
    "OBSRVD",
    "PLAN",
    "POC",
    "PROVDR",
    "REP",
    "REQUST",
    "SSPCTD"
  };

  const OrganisationActionAssociationCategoryCode::value OrganisationActionAssociationCategoryCode::
  _xsd_OrganisationActionAssociationCategoryCode_indexes_[14] =
  {
    ::oo_2_0::OrganisationActionAssociationCategoryCode::APPR,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::CONTRL,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::COOR,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::INIT,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::INTRST,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::ISSCRM,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::LIAISN,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::OBSRVD,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::PLAN,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::POC,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::PROVDR,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::REP,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::REQUST,
    ::oo_2_0::OrganisationActionAssociationCategoryCode::SSPCTD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationActionAssociationCategoryCode >
  _xsd_OrganisationActionAssociationCategoryCode_type_factory_init (
    "OrganisationActionAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationActionTaskRuleOfEngagementStatusCategoryCode
  //

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_convert ();
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const ::xercesc::DOMAttr& a,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_convert ();
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  OrganisationActionTaskRuleOfEngagementStatusCategoryCode (const ::std::string& s,
                                                            const ::xercesc::DOMElement* e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_convert ();
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode* OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationActionTaskRuleOfEngagementStatusCategoryCode (*this, f, c);
  }

  OrganisationActionTaskRuleOfEngagementStatusCategoryCode::value OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_indexes_,
                      _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_indexes_ + 5 || _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_[5] =
  {
    "AUTHRQ",
    "AUTHRS",
    "CANCEL",
    "CNCLRQ",
    "DENYRQ"
  };

  const OrganisationActionTaskRuleOfEngagementStatusCategoryCode::value OrganisationActionTaskRuleOfEngagementStatusCategoryCode::
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_indexes_[5] =
  {
    ::oo_2_0::OrganisationActionTaskRuleOfEngagementStatusCategoryCode::AUTHRQ,
    ::oo_2_0::OrganisationActionTaskRuleOfEngagementStatusCategoryCode::AUTHRS,
    ::oo_2_0::OrganisationActionTaskRuleOfEngagementStatusCategoryCode::CANCEL,
    ::oo_2_0::OrganisationActionTaskRuleOfEngagementStatusCategoryCode::CNCLRQ,
    ::oo_2_0::OrganisationActionTaskRuleOfEngagementStatusCategoryCode::DENYRQ
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationActionTaskRuleOfEngagementStatusCategoryCode >
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_type_factory_init (
    "OrganisationActionTaskRuleOfEngagementStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationCategoryCode
  //

  OrganisationCategoryCode::
  OrganisationCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationCategoryCode_convert ();
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationCategoryCode_convert ();
  }

  OrganisationCategoryCode::
  OrganisationCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationCategoryCode_convert ();
  }

  OrganisationCategoryCode* OrganisationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationCategoryCode (*this, f, c);
  }

  OrganisationCategoryCode::value OrganisationCategoryCode::
  _xsd_OrganisationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationCategoryCode_indexes_,
                      _xsd_OrganisationCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_OrganisationCategoryCode_indexes_ + 3 || _xsd_OrganisationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationCategoryCode::
  _xsd_OrganisationCategoryCode_literals_[3] =
  {
    "CO",
    "NOS",
    "UN"
  };

  const OrganisationCategoryCode::value OrganisationCategoryCode::
  _xsd_OrganisationCategoryCode_indexes_[3] =
  {
    ::oo_2_0::OrganisationCategoryCode::CO,
    ::oo_2_0::OrganisationCategoryCode::NOS,
    ::oo_2_0::OrganisationCategoryCode::UN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationCategoryCode >
  _xsd_OrganisationCategoryCode_type_factory_init (
    "OrganisationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationMaterielTypeAssociationReportableTypeCode
  //

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_convert ();
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const ::xercesc::DOMAttr& a,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_convert ();
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::
  OrganisationMaterielTypeAssociationReportableTypeCode (const ::std::string& s,
                                                         const ::xercesc::DOMElement* e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_convert ();
  }

  OrganisationMaterielTypeAssociationReportableTypeCode* OrganisationMaterielTypeAssociationReportableTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationMaterielTypeAssociationReportableTypeCode (*this, f, c);
  }

  OrganisationMaterielTypeAssociationReportableTypeCode::value OrganisationMaterielTypeAssociationReportableTypeCode::
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_indexes_,
                      _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_indexes_ + 2 || _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationMaterielTypeAssociationReportableTypeCode::
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_[2] =
  {
    "LFRIL",
    "RIC"
  };

  const OrganisationMaterielTypeAssociationReportableTypeCode::value OrganisationMaterielTypeAssociationReportableTypeCode::
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_indexes_[2] =
  {
    ::oo_2_0::OrganisationMaterielTypeAssociationReportableTypeCode::LFRIL,
    ::oo_2_0::OrganisationMaterielTypeAssociationReportableTypeCode::RIC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationMaterielTypeAssociationReportableTypeCode >
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_type_factory_init (
    "OrganisationMaterielTypeAssociationReportableTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationPlanOrderAssociationCategoryCode
  //

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationPlanOrderAssociationCategoryCode_convert ();
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationPlanOrderAssociationCategoryCode_convert ();
  }

  OrganisationPlanOrderAssociationCategoryCode::
  OrganisationPlanOrderAssociationCategoryCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationPlanOrderAssociationCategoryCode_convert ();
  }

  OrganisationPlanOrderAssociationCategoryCode* OrganisationPlanOrderAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationPlanOrderAssociationCategoryCode (*this, f, c);
  }

  OrganisationPlanOrderAssociationCategoryCode::value OrganisationPlanOrderAssociationCategoryCode::
  _xsd_OrganisationPlanOrderAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationPlanOrderAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationPlanOrderAssociationCategoryCode_indexes_,
                      _xsd_OrganisationPlanOrderAssociationCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrganisationPlanOrderAssociationCategoryCode_indexes_ + 5 || _xsd_OrganisationPlanOrderAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationPlanOrderAssociationCategoryCode::
  _xsd_OrganisationPlanOrderAssociationCategoryCode_literals_[5] =
  {
    "APPR",
    "DISTR",
    "PREP",
    "EXEC",
    "ISSHQ"
  };

  const OrganisationPlanOrderAssociationCategoryCode::value OrganisationPlanOrderAssociationCategoryCode::
  _xsd_OrganisationPlanOrderAssociationCategoryCode_indexes_[5] =
  {
    ::oo_2_0::OrganisationPlanOrderAssociationCategoryCode::APPR,
    ::oo_2_0::OrganisationPlanOrderAssociationCategoryCode::DISTR,
    ::oo_2_0::OrganisationPlanOrderAssociationCategoryCode::EXEC,
    ::oo_2_0::OrganisationPlanOrderAssociationCategoryCode::ISSHQ,
    ::oo_2_0::OrganisationPlanOrderAssociationCategoryCode::PREP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationPlanOrderAssociationCategoryCode >
  _xsd_OrganisationPlanOrderAssociationCategoryCode_type_factory_init (
    "OrganisationPlanOrderAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationCitationAssociationCategoryCode
  //

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationCitationAssociationCategoryCode_convert ();
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationCitationAssociationCategoryCode_convert ();
  }

  OrganisationCitationAssociationCategoryCode::
  OrganisationCitationAssociationCategoryCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationCitationAssociationCategoryCode_convert ();
  }

  OrganisationCitationAssociationCategoryCode* OrganisationCitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationCitationAssociationCategoryCode (*this, f, c);
  }

  OrganisationCitationAssociationCategoryCode::value OrganisationCitationAssociationCategoryCode::
  _xsd_OrganisationCitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationCitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationCitationAssociationCategoryCode_indexes_,
                      _xsd_OrganisationCitationAssociationCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_OrganisationCitationAssociationCategoryCode_indexes_ + 6 || _xsd_OrganisationCitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationCitationAssociationCategoryCode::
  _xsd_OrganisationCitationAssociationCategoryCode_literals_[6] =
  {
    "ISAPRL",
    "ISCLSF",
    "ISCNGF",
    "ISCRTR",
    "ISPLNR",
    "ISRLSA"
  };

  const OrganisationCitationAssociationCategoryCode::value OrganisationCitationAssociationCategoryCode::
  _xsd_OrganisationCitationAssociationCategoryCode_indexes_[6] =
  {
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISAPRL,
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISCLSF,
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISCNGF,
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISCRTR,
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISPLNR,
    ::oo_2_0::OrganisationCitationAssociationCategoryCode::ISRLSA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationCitationAssociationCategoryCode >
  _xsd_OrganisationCitationAssociationCategoryCode_type_factory_init (
    "OrganisationCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusAvailabilityCode
  //

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusAvailabilityCode_convert ();
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusAvailabilityCode_convert ();
  }

  OrganisationStatusAvailabilityCode::
  OrganisationStatusAvailabilityCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusAvailabilityCode_convert ();
  }

  OrganisationStatusAvailabilityCode* OrganisationStatusAvailabilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusAvailabilityCode (*this, f, c);
  }

  OrganisationStatusAvailabilityCode::value OrganisationStatusAvailabilityCode::
  _xsd_OrganisationStatusAvailabilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusAvailabilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusAvailabilityCode_indexes_,
                      _xsd_OrganisationStatusAvailabilityCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusAvailabilityCode_indexes_ + 6 || _xsd_OrganisationStatusAvailabilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusAvailabilityCode::
  _xsd_OrganisationStatusAvailabilityCode_literals_[6] =
  {
    "AFT30D",
    "BTW163",
    "BTW484",
    "BTW515",
    "NA",
    "WTN48H"
  };

  const OrganisationStatusAvailabilityCode::value OrganisationStatusAvailabilityCode::
  _xsd_OrganisationStatusAvailabilityCode_indexes_[6] =
  {
    ::oo_2_0::OrganisationStatusAvailabilityCode::AFT30D,
    ::oo_2_0::OrganisationStatusAvailabilityCode::BTW163,
    ::oo_2_0::OrganisationStatusAvailabilityCode::BTW484,
    ::oo_2_0::OrganisationStatusAvailabilityCode::BTW515,
    ::oo_2_0::OrganisationStatusAvailabilityCode::NA,
    ::oo_2_0::OrganisationStatusAvailabilityCode::WTN48H
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusAvailabilityCode >
  _xsd_OrganisationStatusAvailabilityCode_type_factory_init (
    "OrganisationStatusAvailabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusCbrnDressStateCode
  //

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusCbrnDressStateCode_convert ();
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusCbrnDressStateCode_convert ();
  }

  OrganisationStatusCbrnDressStateCode::
  OrganisationStatusCbrnDressStateCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusCbrnDressStateCode_convert ();
  }

  OrganisationStatusCbrnDressStateCode* OrganisationStatusCbrnDressStateCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusCbrnDressStateCode (*this, f, c);
  }

  OrganisationStatusCbrnDressStateCode::value OrganisationStatusCbrnDressStateCode::
  _xsd_OrganisationStatusCbrnDressStateCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusCbrnDressStateCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusCbrnDressStateCode_indexes_,
                      _xsd_OrganisationStatusCbrnDressStateCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusCbrnDressStateCode_indexes_ + 5 || _xsd_OrganisationStatusCbrnDressStateCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusCbrnDressStateCode::
  _xsd_OrganisationStatusCbrnDressStateCode_literals_[5] =
  {
    "MOPP0",
    "MOPP1",
    "MOPP2",
    "MOPP3",
    "MOPPRY"
  };

  const OrganisationStatusCbrnDressStateCode::value OrganisationStatusCbrnDressStateCode::
  _xsd_OrganisationStatusCbrnDressStateCode_indexes_[5] =
  {
    ::oo_2_0::OrganisationStatusCbrnDressStateCode::MOPP0,
    ::oo_2_0::OrganisationStatusCbrnDressStateCode::MOPP1,
    ::oo_2_0::OrganisationStatusCbrnDressStateCode::MOPP2,
    ::oo_2_0::OrganisationStatusCbrnDressStateCode::MOPP3,
    ::oo_2_0::OrganisationStatusCbrnDressStateCode::MOPPRY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusCbrnDressStateCode >
  _xsd_OrganisationStatusCbrnDressStateCode_type_factory_init (
    "OrganisationStatusCbrnDressStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusCommandAndControlRoleCode
  //

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusCommandAndControlRoleCode_convert ();
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusCommandAndControlRoleCode_convert ();
  }

  OrganisationStatusCommandAndControlRoleCode::
  OrganisationStatusCommandAndControlRoleCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusCommandAndControlRoleCode_convert ();
  }

  OrganisationStatusCommandAndControlRoleCode* OrganisationStatusCommandAndControlRoleCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusCommandAndControlRoleCode (*this, f, c);
  }

  OrganisationStatusCommandAndControlRoleCode::value OrganisationStatusCommandAndControlRoleCode::
  _xsd_OrganisationStatusCommandAndControlRoleCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusCommandAndControlRoleCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusCommandAndControlRoleCode_indexes_,
                      _xsd_OrganisationStatusCommandAndControlRoleCode_indexes_ + 20,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusCommandAndControlRoleCode_indexes_ + 20 || _xsd_OrganisationStatusCommandAndControlRoleCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusCommandAndControlRoleCode::
  _xsd_OrganisationStatusCommandAndControlRoleCode_literals_[20] =
  {
    "ADVNCP",
    "FRWDHQ",
    "LOGCP",
    "LPFRGE",
    "MAINCP",
    "MOBLCP",
    "MOBLHQ",
    "NATLHQ",
    "NKN",
    "PEACCP",
    "PEACHQ",
    "PRWRHQ",
    "REARCP",
    "RESVCP",
    "STATCP",
    "STATHQ",
    "STUPCP",
    "STUPHQ",
    "TACTCP",
    "TACTHQ"
  };

  const OrganisationStatusCommandAndControlRoleCode::value OrganisationStatusCommandAndControlRoleCode::
  _xsd_OrganisationStatusCommandAndControlRoleCode_indexes_[20] =
  {
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::ADVNCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::FRWDHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::LOGCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::LPFRGE,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::MAINCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::MOBLCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::MOBLHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::NATLHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::NKN,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::PEACCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::PEACHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::PRWRHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::REARCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::RESVCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::STATCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::STATHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::STUPCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::STUPHQ,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::TACTCP,
    ::oo_2_0::OrganisationStatusCommandAndControlRoleCode::TACTHQ
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusCommandAndControlRoleCode >
  _xsd_OrganisationStatusCommandAndControlRoleCode_type_factory_init (
    "OrganisationStatusCommandAndControlRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusCommitmentStatusCode
  //

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusCommitmentStatusCode_convert ();
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusCommitmentStatusCode_convert ();
  }

  OrganisationStatusCommitmentStatusCode::
  OrganisationStatusCommitmentStatusCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusCommitmentStatusCode_convert ();
  }

  OrganisationStatusCommitmentStatusCode* OrganisationStatusCommitmentStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusCommitmentStatusCode (*this, f, c);
  }

  OrganisationStatusCommitmentStatusCode::value OrganisationStatusCommitmentStatusCode::
  _xsd_OrganisationStatusCommitmentStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusCommitmentStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusCommitmentStatusCode_indexes_,
                      _xsd_OrganisationStatusCommitmentStatusCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusCommitmentStatusCode_indexes_ + 2 || _xsd_OrganisationStatusCommitmentStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusCommitmentStatusCode::
  _xsd_OrganisationStatusCommitmentStatusCode_literals_[2] =
  {
    "COMM",
    "UNCOMM"
  };

  const OrganisationStatusCommitmentStatusCode::value OrganisationStatusCommitmentStatusCode::
  _xsd_OrganisationStatusCommitmentStatusCode_indexes_[2] =
  {
    ::oo_2_0::OrganisationStatusCommitmentStatusCode::COMM,
    ::oo_2_0::OrganisationStatusCommitmentStatusCode::UNCOMM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusCommitmentStatusCode >
  _xsd_OrganisationStatusCommitmentStatusCode_type_factory_init (
    "OrganisationStatusCommitmentStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusFireModeCode
  //

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusFireModeCode_convert ();
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusFireModeCode_convert ();
  }

  OrganisationStatusFireModeCode::
  OrganisationStatusFireModeCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusFireModeCode_convert ();
  }

  OrganisationStatusFireModeCode* OrganisationStatusFireModeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusFireModeCode (*this, f, c);
  }

  OrganisationStatusFireModeCode::value OrganisationStatusFireModeCode::
  _xsd_OrganisationStatusFireModeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusFireModeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusFireModeCode_indexes_,
                      _xsd_OrganisationStatusFireModeCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusFireModeCode_indexes_ + 4 || _xsd_OrganisationStatusFireModeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusFireModeCode::
  _xsd_OrganisationStatusFireModeCode_literals_[4] =
  {
    "HLDFIR",
    "NKN",
    "WPNFRE",
    "WPNTGT"
  };

  const OrganisationStatusFireModeCode::value OrganisationStatusFireModeCode::
  _xsd_OrganisationStatusFireModeCode_indexes_[4] =
  {
    ::oo_2_0::OrganisationStatusFireModeCode::HLDFIR,
    ::oo_2_0::OrganisationStatusFireModeCode::NKN,
    ::oo_2_0::OrganisationStatusFireModeCode::WPNFRE,
    ::oo_2_0::OrganisationStatusFireModeCode::WPNTGT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusFireModeCode >
  _xsd_OrganisationStatusFireModeCode_type_factory_init (
    "OrganisationStatusFireModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusOperationalStatusCode
  //

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusCode_convert ();
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusCode_convert ();
  }

  OrganisationStatusOperationalStatusCode::
  OrganisationStatusOperationalStatusCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusCode_convert ();
  }

  OrganisationStatusOperationalStatusCode* OrganisationStatusOperationalStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusOperationalStatusCode (*this, f, c);
  }

  OrganisationStatusOperationalStatusCode::value OrganisationStatusOperationalStatusCode::
  _xsd_OrganisationStatusOperationalStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusOperationalStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusOperationalStatusCode_indexes_,
                      _xsd_OrganisationStatusOperationalStatusCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusOperationalStatusCode_indexes_ + 6 || _xsd_OrganisationStatusOperationalStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusOperationalStatusCode::
  _xsd_OrganisationStatusOperationalStatusCode_literals_[6] =
  {
    "MOPS",
    "NKN",
    "NOP",
    "OPR",
    "SOPS",
    "TNOPS"
  };

  const OrganisationStatusOperationalStatusCode::value OrganisationStatusOperationalStatusCode::
  _xsd_OrganisationStatusOperationalStatusCode_indexes_[6] =
  {
    ::oo_2_0::OrganisationStatusOperationalStatusCode::MOPS,
    ::oo_2_0::OrganisationStatusOperationalStatusCode::NKN,
    ::oo_2_0::OrganisationStatusOperationalStatusCode::NOP,
    ::oo_2_0::OrganisationStatusOperationalStatusCode::OPR,
    ::oo_2_0::OrganisationStatusOperationalStatusCode::SOPS,
    ::oo_2_0::OrganisationStatusOperationalStatusCode::TNOPS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusOperationalStatusCode >
  _xsd_OrganisationStatusOperationalStatusCode_type_factory_init (
    "OrganisationStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusOperationalStatusQualifierCode
  //

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusQualifierCode_convert ();
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusQualifierCode_convert ();
  }

  OrganisationStatusOperationalStatusQualifierCode::
  OrganisationStatusOperationalStatusQualifierCode (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusOperationalStatusQualifierCode_convert ();
  }

  OrganisationStatusOperationalStatusQualifierCode* OrganisationStatusOperationalStatusQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusOperationalStatusQualifierCode (*this, f, c);
  }

  OrganisationStatusOperationalStatusQualifierCode::value OrganisationStatusOperationalStatusQualifierCode::
  _xsd_OrganisationStatusOperationalStatusQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusOperationalStatusQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusOperationalStatusQualifierCode_indexes_,
                      _xsd_OrganisationStatusOperationalStatusQualifierCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusOperationalStatusQualifierCode_indexes_ + 7 || _xsd_OrganisationStatusOperationalStatusQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusOperationalStatusQualifierCode::
  _xsd_OrganisationStatusOperationalStatusQualifierCode_literals_[7] =
  {
    "DSTRYD",
    "HVYDAM",
    "LGTDAM",
    "LST",
    "LVR",
    "MODDAM",
    "NKN"
  };

  const OrganisationStatusOperationalStatusQualifierCode::value OrganisationStatusOperationalStatusQualifierCode::
  _xsd_OrganisationStatusOperationalStatusQualifierCode_indexes_[7] =
  {
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::DSTRYD,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::HVYDAM,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::LGTDAM,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::LST,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::LVR,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::MODDAM,
    ::oo_2_0::OrganisationStatusOperationalStatusQualifierCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusOperationalStatusQualifierCode >
  _xsd_OrganisationStatusOperationalStatusQualifierCode_type_factory_init (
    "OrganisationStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusReadinessCode
  //

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusReadinessCode_convert ();
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusReadinessCode_convert ();
  }

  OrganisationStatusReadinessCode::
  OrganisationStatusReadinessCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusReadinessCode_convert ();
  }

  OrganisationStatusReadinessCode* OrganisationStatusReadinessCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusReadinessCode (*this, f, c);
  }

  OrganisationStatusReadinessCode::value OrganisationStatusReadinessCode::
  _xsd_OrganisationStatusReadinessCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusReadinessCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusReadinessCode_indexes_,
                      _xsd_OrganisationStatusReadinessCode_indexes_ + 39,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusReadinessCode_indexes_ + 39 || _xsd_OrganisationStatusReadinessCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusReadinessCode::
  _xsd_OrganisationStatusReadinessCode_literals_[39] =
  {
    "AIRALR",
    "BTLSTN",
    "GRDALR",
    "NKN",
    "NOS",
    "NRD12H",
    "RDNS1",
    "RDNS2",
    "RDNS3",
    "RDNS4",
    "RDNS5",
    "RDNS6",
    "RDNS7",
    "RDNS8",
    "RDNS9",
    "RDY10M",
    "RDY12H",
    "RDY15M",
    "RDY20M",
    "RDY2H",
    "RDY30M",
    "RDY3H",
    "RDY5M",
    "RDY60M",
    "RDY6H",
    "RDYL5M",
    "RED",
    "RNYALR",
    "WHITE",
    "WT10D",
    "WT180D",
    "WT20D",
    "WT2D",
    "WT30D",
    "WT365D",
    "WT5D",
    "WT60D",
    "WT90D",
    "YELLOW"
  };

  const OrganisationStatusReadinessCode::value OrganisationStatusReadinessCode::
  _xsd_OrganisationStatusReadinessCode_indexes_[39] =
  {
    ::oo_2_0::OrganisationStatusReadinessCode::AIRALR,
    ::oo_2_0::OrganisationStatusReadinessCode::BTLSTN,
    ::oo_2_0::OrganisationStatusReadinessCode::GRDALR,
    ::oo_2_0::OrganisationStatusReadinessCode::NKN,
    ::oo_2_0::OrganisationStatusReadinessCode::NOS,
    ::oo_2_0::OrganisationStatusReadinessCode::NRD12H,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS1,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS2,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS3,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS4,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS5,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS6,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS7,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS8,
    ::oo_2_0::OrganisationStatusReadinessCode::RDNS9,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY10M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY12H,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY15M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY20M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY2H,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY30M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY3H,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY5M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY60M,
    ::oo_2_0::OrganisationStatusReadinessCode::RDY6H,
    ::oo_2_0::OrganisationStatusReadinessCode::RDYL5M,
    ::oo_2_0::OrganisationStatusReadinessCode::RED,
    ::oo_2_0::OrganisationStatusReadinessCode::RNYALR,
    ::oo_2_0::OrganisationStatusReadinessCode::WHITE,
    ::oo_2_0::OrganisationStatusReadinessCode::WT10D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT180D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT20D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT2D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT30D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT365D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT5D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT60D,
    ::oo_2_0::OrganisationStatusReadinessCode::WT90D,
    ::oo_2_0::OrganisationStatusReadinessCode::YELLOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusReadinessCode >
  _xsd_OrganisationStatusReadinessCode_type_factory_init (
    "OrganisationStatusReadinessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusReinforcementCode
  //

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusReinforcementCode_convert ();
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusReinforcementCode_convert ();
  }

  OrganisationStatusReinforcementCode::
  OrganisationStatusReinforcementCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusReinforcementCode_convert ();
  }

  OrganisationStatusReinforcementCode* OrganisationStatusReinforcementCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusReinforcementCode (*this, f, c);
  }

  OrganisationStatusReinforcementCode::value OrganisationStatusReinforcementCode::
  _xsd_OrganisationStatusReinforcementCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusReinforcementCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusReinforcementCode_indexes_,
                      _xsd_OrganisationStatusReinforcementCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusReinforcementCode_indexes_ + 5 || _xsd_OrganisationStatusReinforcementCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusReinforcementCode::
  _xsd_OrganisationStatusReinforcementCode_literals_[5] =
  {
    "DETD",
    "NKN",
    "NORM",
    "REIN",
    "RIDT"
  };

  const OrganisationStatusReinforcementCode::value OrganisationStatusReinforcementCode::
  _xsd_OrganisationStatusReinforcementCode_indexes_[5] =
  {
    ::oo_2_0::OrganisationStatusReinforcementCode::DETD,
    ::oo_2_0::OrganisationStatusReinforcementCode::NKN,
    ::oo_2_0::OrganisationStatusReinforcementCode::NORM,
    ::oo_2_0::OrganisationStatusReinforcementCode::REIN,
    ::oo_2_0::OrganisationStatusReinforcementCode::RIDT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusReinforcementCode >
  _xsd_OrganisationStatusReinforcementCode_type_factory_init (
    "OrganisationStatusReinforcementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusReserveIndicatorCode
  //

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusReserveIndicatorCode_convert ();
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusReserveIndicatorCode_convert ();
  }

  OrganisationStatusReserveIndicatorCode::
  OrganisationStatusReserveIndicatorCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusReserveIndicatorCode_convert ();
  }

  OrganisationStatusReserveIndicatorCode* OrganisationStatusReserveIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusReserveIndicatorCode (*this, f, c);
  }

  OrganisationStatusReserveIndicatorCode::value OrganisationStatusReserveIndicatorCode::
  _xsd_OrganisationStatusReserveIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusReserveIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusReserveIndicatorCode_indexes_,
                      _xsd_OrganisationStatusReserveIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusReserveIndicatorCode_indexes_ + 2 || _xsd_OrganisationStatusReserveIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusReserveIndicatorCode::
  _xsd_OrganisationStatusReserveIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const OrganisationStatusReserveIndicatorCode::value OrganisationStatusReserveIndicatorCode::
  _xsd_OrganisationStatusReserveIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::OrganisationStatusReserveIndicatorCode::NO,
    ::oo_2_0::OrganisationStatusReserveIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusReserveIndicatorCode >
  _xsd_OrganisationStatusReserveIndicatorCode_type_factory_init (
    "OrganisationStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusTrainingCode
  //

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusTrainingCode_convert ();
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusTrainingCode_convert ();
  }

  OrganisationStatusTrainingCode::
  OrganisationStatusTrainingCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusTrainingCode_convert ();
  }

  OrganisationStatusTrainingCode* OrganisationStatusTrainingCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusTrainingCode (*this, f, c);
  }

  OrganisationStatusTrainingCode::value OrganisationStatusTrainingCode::
  _xsd_OrganisationStatusTrainingCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusTrainingCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusTrainingCode_indexes_,
                      _xsd_OrganisationStatusTrainingCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusTrainingCode_indexes_ + 4 || _xsd_OrganisationStatusTrainingCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusTrainingCode::
  _xsd_OrganisationStatusTrainingCode_literals_[4] =
  {
    "AMBER",
    "GREEN",
    "NKN",
    "RED"
  };

  const OrganisationStatusTrainingCode::value OrganisationStatusTrainingCode::
  _xsd_OrganisationStatusTrainingCode_indexes_[4] =
  {
    ::oo_2_0::OrganisationStatusTrainingCode::AMBER,
    ::oo_2_0::OrganisationStatusTrainingCode::GREEN,
    ::oo_2_0::OrganisationStatusTrainingCode::NKN,
    ::oo_2_0::OrganisationStatusTrainingCode::RED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusTrainingCode >
  _xsd_OrganisationStatusTrainingCode_type_factory_init (
    "OrganisationStatusTrainingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationStatusUsageStatusCode
  //

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationStatusUsageStatusCode_convert ();
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationStatusUsageStatusCode_convert ();
  }

  OrganisationStatusUsageStatusCode::
  OrganisationStatusUsageStatusCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationStatusUsageStatusCode_convert ();
  }

  OrganisationStatusUsageStatusCode* OrganisationStatusUsageStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationStatusUsageStatusCode (*this, f, c);
  }

  OrganisationStatusUsageStatusCode::value OrganisationStatusUsageStatusCode::
  _xsd_OrganisationStatusUsageStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationStatusUsageStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationStatusUsageStatusCode_indexes_,
                      _xsd_OrganisationStatusUsageStatusCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_OrganisationStatusUsageStatusCode_indexes_ + 3 || _xsd_OrganisationStatusUsageStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationStatusUsageStatusCode::
  _xsd_OrganisationStatusUsageStatusCode_literals_[3] =
  {
    "INACT",
    "NKN",
    "OUTACT"
  };

  const OrganisationStatusUsageStatusCode::value OrganisationStatusUsageStatusCode::
  _xsd_OrganisationStatusUsageStatusCode_indexes_[3] =
  {
    ::oo_2_0::OrganisationStatusUsageStatusCode::INACT,
    ::oo_2_0::OrganisationStatusUsageStatusCode::NKN,
    ::oo_2_0::OrganisationStatusUsageStatusCode::OUTACT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationStatusUsageStatusCode >
  _xsd_OrganisationStatusUsageStatusCode_type_factory_init (
    "OrganisationStatusUsageStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationTypeCategoryCode
  //

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationTypeCategoryCode_convert ();
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationTypeCategoryCode_convert ();
  }

  OrganisationTypeCategoryCode::
  OrganisationTypeCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationTypeCategoryCode_convert ();
  }

  OrganisationTypeCategoryCode* OrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationTypeCategoryCode (*this, f, c);
  }

  OrganisationTypeCategoryCode::value OrganisationTypeCategoryCode::
  _xsd_OrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationTypeCategoryCode_indexes_,
                      _xsd_OrganisationTypeCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_OrganisationTypeCategoryCode_indexes_ + 5 || _xsd_OrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationTypeCategoryCode::
  _xsd_OrganisationTypeCategoryCode_literals_[5] =
  {
    "CIVPST",
    "GRPORG",
    "GVTORG",
    "NOS",
    "PVSORG"
  };

  const OrganisationTypeCategoryCode::value OrganisationTypeCategoryCode::
  _xsd_OrganisationTypeCategoryCode_indexes_[5] =
  {
    ::oo_2_0::OrganisationTypeCategoryCode::CIVPST,
    ::oo_2_0::OrganisationTypeCategoryCode::GRPORG,
    ::oo_2_0::OrganisationTypeCategoryCode::GVTORG,
    ::oo_2_0::OrganisationTypeCategoryCode::NOS,
    ::oo_2_0::OrganisationTypeCategoryCode::PVSORG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationTypeCategoryCode >
  _xsd_OrganisationTypeCategoryCode_type_factory_init (
    "OrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationTypeCommandAndControlCategoryCode
  //

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationTypeCommandAndControlCategoryCode_convert ();
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationTypeCommandAndControlCategoryCode_convert ();
  }

  OrganisationTypeCommandAndControlCategoryCode::
  OrganisationTypeCommandAndControlCategoryCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationTypeCommandAndControlCategoryCode_convert ();
  }

  OrganisationTypeCommandAndControlCategoryCode* OrganisationTypeCommandAndControlCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationTypeCommandAndControlCategoryCode (*this, f, c);
  }

  OrganisationTypeCommandAndControlCategoryCode::value OrganisationTypeCommandAndControlCategoryCode::
  _xsd_OrganisationTypeCommandAndControlCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationTypeCommandAndControlCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationTypeCommandAndControlCategoryCode_indexes_,
                      _xsd_OrganisationTypeCommandAndControlCategoryCode_indexes_ + 27,
                      *this,
                      c));

    if (i == _xsd_OrganisationTypeCommandAndControlCategoryCode_indexes_ + 27 || _xsd_OrganisationTypeCommandAndControlCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationTypeCommandAndControlCategoryCode::
  _xsd_OrganisationTypeCommandAndControlCategoryCode_literals_[27] =
  {
    "AIROPC",
    "ARCNTC",
    "AROPCC",
    "ARSOPC",
    "AWACS",
    "CAOC",
    "CC",
    "CNTRPC",
    "CNTRPP",
    "CP",
    "DASC",
    "DASCAR",
    "FACC",
    "GRBOPC",
    "HQ",
    "MTACMC",
    "MTADRC",
    "MTAOPC",
    "NKN",
    "NOS",
    "OC",
    "RAPPRC",
    "SAMOPC",
    "SQDOPC",
    "TACOPC",
    "TACP",
    "WNGOPC"
  };

  const OrganisationTypeCommandAndControlCategoryCode::value OrganisationTypeCommandAndControlCategoryCode::
  _xsd_OrganisationTypeCommandAndControlCategoryCode_indexes_[27] =
  {
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::AIROPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::ARCNTC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::AROPCC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::ARSOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::AWACS,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::CAOC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::CC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::CNTRPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::CNTRPP,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::CP,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::DASC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::DASCAR,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::FACC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::GRBOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::HQ,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::MTACMC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::MTADRC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::MTAOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::NKN,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::NOS,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::OC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::RAPPRC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::SAMOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::SQDOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::TACOPC,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::TACP,
    ::oo_2_0::OrganisationTypeCommandAndControlCategoryCode::WNGOPC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationTypeCommandAndControlCategoryCode >
  _xsd_OrganisationTypeCommandAndControlCategoryCode_type_factory_init (
    "OrganisationTypeCommandAndControlCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // OrganisationTypeCommandFunctionIndicatorCode
  //

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_OrganisationTypeCommandFunctionIndicatorCode_convert ();
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_OrganisationTypeCommandFunctionIndicatorCode_convert ();
  }

  OrganisationTypeCommandFunctionIndicatorCode::
  OrganisationTypeCommandFunctionIndicatorCode (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_OrganisationTypeCommandFunctionIndicatorCode_convert ();
  }

  OrganisationTypeCommandFunctionIndicatorCode* OrganisationTypeCommandFunctionIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OrganisationTypeCommandFunctionIndicatorCode (*this, f, c);
  }

  OrganisationTypeCommandFunctionIndicatorCode::value OrganisationTypeCommandFunctionIndicatorCode::
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OrganisationTypeCommandFunctionIndicatorCode_indexes_,
                      _xsd_OrganisationTypeCommandFunctionIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_OrganisationTypeCommandFunctionIndicatorCode_indexes_ + 2 || _xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OrganisationTypeCommandFunctionIndicatorCode::
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const OrganisationTypeCommandFunctionIndicatorCode::value OrganisationTypeCommandFunctionIndicatorCode::
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::OrganisationTypeCommandFunctionIndicatorCode::NO,
    ::oo_2_0::OrganisationTypeCommandFunctionIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OrganisationTypeCommandFunctionIndicatorCode >
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_type_factory_init (
    "OrganisationTypeCommandFunctionIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersistencyCode
  //

  PersistencyCode::
  PersistencyCode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersistencyCode_convert ();
  }

  PersistencyCode::
  PersistencyCode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersistencyCode_convert ();
  }

  PersistencyCode::
  PersistencyCode (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersistencyCode_convert ();
  }

  PersistencyCode* PersistencyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersistencyCode (*this, f, c);
  }

  PersistencyCode::value PersistencyCode::
  _xsd_PersistencyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersistencyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersistencyCode_indexes_,
                      _xsd_PersistencyCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_PersistencyCode_indexes_ + 4 || _xsd_PersistencyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersistencyCode::
  _xsd_PersistencyCode_literals_[4] =
  {
    "NKN",
    "NONPRS",
    "PRSTNT",
    "THCKND"
  };

  const PersistencyCode::value PersistencyCode::
  _xsd_PersistencyCode_indexes_[4] =
  {
    ::oo_2_0::PersistencyCode::NKN,
    ::oo_2_0::PersistencyCode::NONPRS,
    ::oo_2_0::PersistencyCode::PRSTNT,
    ::oo_2_0::PersistencyCode::THCKND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersistencyCode >
  _xsd_PersistencyCode_type_factory_init (
    "PersistencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonBloodTypeCode
  //

  PersonBloodTypeCode::
  PersonBloodTypeCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonBloodTypeCode_convert ();
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonBloodTypeCode_convert ();
  }

  PersonBloodTypeCode::
  PersonBloodTypeCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonBloodTypeCode_convert ();
  }

  PersonBloodTypeCode* PersonBloodTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonBloodTypeCode (*this, f, c);
  }

  PersonBloodTypeCode::value PersonBloodTypeCode::
  _xsd_PersonBloodTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonBloodTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonBloodTypeCode_indexes_,
                      _xsd_PersonBloodTypeCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_PersonBloodTypeCode_indexes_ + 9 || _xsd_PersonBloodTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonBloodTypeCode::
  _xsd_PersonBloodTypeCode_literals_[9] =
  {
    "APLUS",
    "AMNUS",
    "ABPLUS",
    "ABMNUS",
    "BPLUS",
    "BMNUS",
    "NKN",
    "OPLUS",
    "OMNUS"
  };

  const PersonBloodTypeCode::value PersonBloodTypeCode::
  _xsd_PersonBloodTypeCode_indexes_[9] =
  {
    ::oo_2_0::PersonBloodTypeCode::ABMNUS,
    ::oo_2_0::PersonBloodTypeCode::ABPLUS,
    ::oo_2_0::PersonBloodTypeCode::AMNUS,
    ::oo_2_0::PersonBloodTypeCode::APLUS,
    ::oo_2_0::PersonBloodTypeCode::BMNUS,
    ::oo_2_0::PersonBloodTypeCode::BPLUS,
    ::oo_2_0::PersonBloodTypeCode::NKN,
    ::oo_2_0::PersonBloodTypeCode::OMNUS,
    ::oo_2_0::PersonBloodTypeCode::OPLUS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonBloodTypeCode >
  _xsd_PersonBloodTypeCode_type_factory_init (
    "PersonBloodTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonIdentificationDocumentCode
  //

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonIdentificationDocumentCode_convert ();
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonIdentificationDocumentCode_convert ();
  }

  PersonIdentificationDocumentCode::
  PersonIdentificationDocumentCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonIdentificationDocumentCode_convert ();
  }

  PersonIdentificationDocumentCode* PersonIdentificationDocumentCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonIdentificationDocumentCode (*this, f, c);
  }

  PersonIdentificationDocumentCode::value PersonIdentificationDocumentCode::
  _xsd_PersonIdentificationDocumentCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonIdentificationDocumentCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonIdentificationDocumentCode_indexes_,
                      _xsd_PersonIdentificationDocumentCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_PersonIdentificationDocumentCode_indexes_ + 5 || _xsd_PersonIdentificationDocumentCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonIdentificationDocumentCode::
  _xsd_PersonIdentificationDocumentCode_literals_[5] =
  {
    "CIVID",
    "MILID",
    "MILORD",
    "NOS",
    "PSSPRT"
  };

  const PersonIdentificationDocumentCode::value PersonIdentificationDocumentCode::
  _xsd_PersonIdentificationDocumentCode_indexes_[5] =
  {
    ::oo_2_0::PersonIdentificationDocumentCode::CIVID,
    ::oo_2_0::PersonIdentificationDocumentCode::MILID,
    ::oo_2_0::PersonIdentificationDocumentCode::MILORD,
    ::oo_2_0::PersonIdentificationDocumentCode::NOS,
    ::oo_2_0::PersonIdentificationDocumentCode::PSSPRT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonIdentificationDocumentCode >
  _xsd_PersonIdentificationDocumentCode_type_factory_init (
    "PersonIdentificationDocumentCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonLanguageSkillGeneralProficiencyCode
  //

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonLanguageSkillGeneralProficiencyCode_convert ();
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonLanguageSkillGeneralProficiencyCode_convert ();
  }

  PersonLanguageSkillGeneralProficiencyCode::
  PersonLanguageSkillGeneralProficiencyCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonLanguageSkillGeneralProficiencyCode_convert ();
  }

  PersonLanguageSkillGeneralProficiencyCode* PersonLanguageSkillGeneralProficiencyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonLanguageSkillGeneralProficiencyCode (*this, f, c);
  }

  PersonLanguageSkillGeneralProficiencyCode::value PersonLanguageSkillGeneralProficiencyCode::
  _xsd_PersonLanguageSkillGeneralProficiencyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonLanguageSkillGeneralProficiencyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonLanguageSkillGeneralProficiencyCode_indexes_,
                      _xsd_PersonLanguageSkillGeneralProficiencyCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_PersonLanguageSkillGeneralProficiencyCode_indexes_ + 6 || _xsd_PersonLanguageSkillGeneralProficiencyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonLanguageSkillGeneralProficiencyCode::
  _xsd_PersonLanguageSkillGeneralProficiencyCode_literals_[6] =
  {
    "ELEM",
    "EXCLNT",
    "FAIR",
    "NKN",
    "NONE",
    "VERY"
  };

  const PersonLanguageSkillGeneralProficiencyCode::value PersonLanguageSkillGeneralProficiencyCode::
  _xsd_PersonLanguageSkillGeneralProficiencyCode_indexes_[6] =
  {
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::ELEM,
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::EXCLNT,
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::FAIR,
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::NKN,
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::NONE,
    ::oo_2_0::PersonLanguageSkillGeneralProficiencyCode::VERY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonLanguageSkillGeneralProficiencyCode >
  _xsd_PersonLanguageSkillGeneralProficiencyCode_type_factory_init (
    "PersonLanguageSkillGeneralProficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonProfessingIndicatorCode
  //

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonProfessingIndicatorCode_convert ();
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonProfessingIndicatorCode_convert ();
  }

  PersonProfessingIndicatorCode::
  PersonProfessingIndicatorCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonProfessingIndicatorCode_convert ();
  }

  PersonProfessingIndicatorCode* PersonProfessingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonProfessingIndicatorCode (*this, f, c);
  }

  PersonProfessingIndicatorCode::value PersonProfessingIndicatorCode::
  _xsd_PersonProfessingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonProfessingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonProfessingIndicatorCode_indexes_,
                      _xsd_PersonProfessingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PersonProfessingIndicatorCode_indexes_ + 2 || _xsd_PersonProfessingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonProfessingIndicatorCode::
  _xsd_PersonProfessingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const PersonProfessingIndicatorCode::value PersonProfessingIndicatorCode::
  _xsd_PersonProfessingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::PersonProfessingIndicatorCode::NO,
    ::oo_2_0::PersonProfessingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonProfessingIndicatorCode >
  _xsd_PersonProfessingIndicatorCode_type_factory_init (
    "PersonProfessingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonStatusDutyStatusCode
  //

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonStatusDutyStatusCode_convert ();
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonStatusDutyStatusCode_convert ();
  }

  PersonStatusDutyStatusCode::
  PersonStatusDutyStatusCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonStatusDutyStatusCode_convert ();
  }

  PersonStatusDutyStatusCode* PersonStatusDutyStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonStatusDutyStatusCode (*this, f, c);
  }

  PersonStatusDutyStatusCode::value PersonStatusDutyStatusCode::
  _xsd_PersonStatusDutyStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonStatusDutyStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonStatusDutyStatusCode_indexes_,
                      _xsd_PersonStatusDutyStatusCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_PersonStatusDutyStatusCode_indexes_ + 12 || _xsd_PersonStatusDutyStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonStatusDutyStatusCode::
  _xsd_PersonStatusDutyStatusCode_literals_[12] =
  {
    "ABS",
    "ADU",
    "AKIA",
    "ARR",
    "DEC",
    "DESRTD",
    "HSP",
    "HST",
    "MIS",
    "NKN",
    "OLV",
    "POW"
  };

  const PersonStatusDutyStatusCode::value PersonStatusDutyStatusCode::
  _xsd_PersonStatusDutyStatusCode_indexes_[12] =
  {
    ::oo_2_0::PersonStatusDutyStatusCode::ABS,
    ::oo_2_0::PersonStatusDutyStatusCode::ADU,
    ::oo_2_0::PersonStatusDutyStatusCode::AKIA,
    ::oo_2_0::PersonStatusDutyStatusCode::ARR,
    ::oo_2_0::PersonStatusDutyStatusCode::DEC,
    ::oo_2_0::PersonStatusDutyStatusCode::DESRTD,
    ::oo_2_0::PersonStatusDutyStatusCode::HSP,
    ::oo_2_0::PersonStatusDutyStatusCode::HST,
    ::oo_2_0::PersonStatusDutyStatusCode::MIS,
    ::oo_2_0::PersonStatusDutyStatusCode::NKN,
    ::oo_2_0::PersonStatusDutyStatusCode::OLV,
    ::oo_2_0::PersonStatusDutyStatusCode::POW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonStatusDutyStatusCode >
  _xsd_PersonStatusDutyStatusCode_type_factory_init (
    "PersonStatusDutyStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonStatusPhysicalStatusCode
  //

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonStatusPhysicalStatusCode_convert ();
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonStatusPhysicalStatusCode_convert ();
  }

  PersonStatusPhysicalStatusCode::
  PersonStatusPhysicalStatusCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonStatusPhysicalStatusCode_convert ();
  }

  PersonStatusPhysicalStatusCode* PersonStatusPhysicalStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonStatusPhysicalStatusCode (*this, f, c);
  }

  PersonStatusPhysicalStatusCode::value PersonStatusPhysicalStatusCode::
  _xsd_PersonStatusPhysicalStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonStatusPhysicalStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonStatusPhysicalStatusCode_indexes_,
                      _xsd_PersonStatusPhysicalStatusCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_PersonStatusPhysicalStatusCode_indexes_ + 5 || _xsd_PersonStatusPhysicalStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonStatusPhysicalStatusCode::
  _xsd_PersonStatusPhysicalStatusCode_literals_[5] =
  {
    "FT",
    "IN",
    "IW",
    "NKN",
    "SI"
  };

  const PersonStatusPhysicalStatusCode::value PersonStatusPhysicalStatusCode::
  _xsd_PersonStatusPhysicalStatusCode_indexes_[5] =
  {
    ::oo_2_0::PersonStatusPhysicalStatusCode::FT,
    ::oo_2_0::PersonStatusPhysicalStatusCode::IN,
    ::oo_2_0::PersonStatusPhysicalStatusCode::IW,
    ::oo_2_0::PersonStatusPhysicalStatusCode::NKN,
    ::oo_2_0::PersonStatusPhysicalStatusCode::SI
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonStatusPhysicalStatusCode >
  _xsd_PersonStatusPhysicalStatusCode_type_factory_init (
    "PersonStatusPhysicalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonStatusPhysicalStatusQualifierCode
  //

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonStatusPhysicalStatusQualifierCode_convert ();
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonStatusPhysicalStatusQualifierCode_convert ();
  }

  PersonStatusPhysicalStatusQualifierCode::
  PersonStatusPhysicalStatusQualifierCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonStatusPhysicalStatusQualifierCode_convert ();
  }

  PersonStatusPhysicalStatusQualifierCode* PersonStatusPhysicalStatusQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonStatusPhysicalStatusQualifierCode (*this, f, c);
  }

  PersonStatusPhysicalStatusQualifierCode::value PersonStatusPhysicalStatusQualifierCode::
  _xsd_PersonStatusPhysicalStatusQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonStatusPhysicalStatusQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonStatusPhysicalStatusQualifierCode_indexes_,
                      _xsd_PersonStatusPhysicalStatusQualifierCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_PersonStatusPhysicalStatusQualifierCode_indexes_ + 7 || _xsd_PersonStatusPhysicalStatusQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonStatusPhysicalStatusQualifierCode::
  _xsd_PersonStatusPhysicalStatusQualifierCode_literals_[7] =
  {
    "ILLCNT",
    "ILLNCN",
    "ILLUNK",
    "INJRD",
    "NKN",
    "PRGNT",
    "WNDD"
  };

  const PersonStatusPhysicalStatusQualifierCode::value PersonStatusPhysicalStatusQualifierCode::
  _xsd_PersonStatusPhysicalStatusQualifierCode_indexes_[7] =
  {
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::ILLCNT,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::ILLNCN,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::ILLUNK,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::INJRD,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::NKN,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::PRGNT,
    ::oo_2_0::PersonStatusPhysicalStatusQualifierCode::WNDD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonStatusPhysicalStatusQualifierCode >
  _xsd_PersonStatusPhysicalStatusQualifierCode_type_factory_init (
    "PersonStatusPhysicalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonStatusReserveIndicatorCode
  //

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonStatusReserveIndicatorCode_convert ();
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonStatusReserveIndicatorCode_convert ();
  }

  PersonStatusReserveIndicatorCode::
  PersonStatusReserveIndicatorCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonStatusReserveIndicatorCode_convert ();
  }

  PersonStatusReserveIndicatorCode* PersonStatusReserveIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonStatusReserveIndicatorCode (*this, f, c);
  }

  PersonStatusReserveIndicatorCode::value PersonStatusReserveIndicatorCode::
  _xsd_PersonStatusReserveIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonStatusReserveIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonStatusReserveIndicatorCode_indexes_,
                      _xsd_PersonStatusReserveIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PersonStatusReserveIndicatorCode_indexes_ + 2 || _xsd_PersonStatusReserveIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonStatusReserveIndicatorCode::
  _xsd_PersonStatusReserveIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const PersonStatusReserveIndicatorCode::value PersonStatusReserveIndicatorCode::
  _xsd_PersonStatusReserveIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::PersonStatusReserveIndicatorCode::NO,
    ::oo_2_0::PersonStatusReserveIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonStatusReserveIndicatorCode >
  _xsd_PersonStatusReserveIndicatorCode_type_factory_init (
    "PersonStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonTypeCategoryCode
  //

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonTypeCategoryCode_convert ();
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonTypeCategoryCode_convert ();
  }

  PersonTypeCategoryCode::
  PersonTypeCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonTypeCategoryCode_convert ();
  }

  PersonTypeCategoryCode* PersonTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonTypeCategoryCode (*this, f, c);
  }

  PersonTypeCategoryCode::value PersonTypeCategoryCode::
  _xsd_PersonTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonTypeCategoryCode_indexes_,
                      _xsd_PersonTypeCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_PersonTypeCategoryCode_indexes_ + 5 || _xsd_PersonTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonTypeCategoryCode::
  _xsd_PersonTypeCategoryCode_literals_[5] =
  {
    "CIV",
    "MILTRY",
    "NKN",
    "NOS",
    "PAR"
  };

  const PersonTypeCategoryCode::value PersonTypeCategoryCode::
  _xsd_PersonTypeCategoryCode_indexes_[5] =
  {
    ::oo_2_0::PersonTypeCategoryCode::CIV,
    ::oo_2_0::PersonTypeCategoryCode::MILTRY,
    ::oo_2_0::PersonTypeCategoryCode::NKN,
    ::oo_2_0::PersonTypeCategoryCode::NOS,
    ::oo_2_0::PersonTypeCategoryCode::PAR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonTypeCategoryCode >
  _xsd_PersonTypeCategoryCode_type_factory_init (
    "PersonTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonTypeRankCode
  //

  PersonTypeRankCode::
  PersonTypeRankCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonTypeRankCode_convert ();
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonTypeRankCode_convert ();
  }

  PersonTypeRankCode::
  PersonTypeRankCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonTypeRankCode_convert ();
  }

  PersonTypeRankCode* PersonTypeRankCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonTypeRankCode (*this, f, c);
  }

  PersonTypeRankCode::value PersonTypeRankCode::
  _xsd_PersonTypeRankCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonTypeRankCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonTypeRankCode_indexes_,
                      _xsd_PersonTypeRankCode_indexes_ + 24,
                      *this,
                      c));

    if (i == _xsd_PersonTypeRankCode_indexes_ + 24 || _xsd_PersonTypeRankCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonTypeRankCode::
  _xsd_PersonTypeRankCode_literals_[24] =
  {
    "EPTE",
    "NCO",
    "NKN",
    "OF1",
    "OF10",
    "OF2",
    "OF3",
    "OF4",
    "OF5",
    "OF6",
    "OF7",
    "OF8",
    "OF9",
    "OFFR",
    "OR1",
    "OR2",
    "OR3",
    "OR4",
    "OR5",
    "OR6",
    "OR7",
    "OR8",
    "OR9",
    "OTHR"
  };

  const PersonTypeRankCode::value PersonTypeRankCode::
  _xsd_PersonTypeRankCode_indexes_[24] =
  {
    ::oo_2_0::PersonTypeRankCode::EPTE,
    ::oo_2_0::PersonTypeRankCode::NCO,
    ::oo_2_0::PersonTypeRankCode::NKN,
    ::oo_2_0::PersonTypeRankCode::OF1,
    ::oo_2_0::PersonTypeRankCode::OF10,
    ::oo_2_0::PersonTypeRankCode::OF2,
    ::oo_2_0::PersonTypeRankCode::OF3,
    ::oo_2_0::PersonTypeRankCode::OF4,
    ::oo_2_0::PersonTypeRankCode::OF5,
    ::oo_2_0::PersonTypeRankCode::OF6,
    ::oo_2_0::PersonTypeRankCode::OF7,
    ::oo_2_0::PersonTypeRankCode::OF8,
    ::oo_2_0::PersonTypeRankCode::OF9,
    ::oo_2_0::PersonTypeRankCode::OFFR,
    ::oo_2_0::PersonTypeRankCode::OR1,
    ::oo_2_0::PersonTypeRankCode::OR2,
    ::oo_2_0::PersonTypeRankCode::OR3,
    ::oo_2_0::PersonTypeRankCode::OR4,
    ::oo_2_0::PersonTypeRankCode::OR5,
    ::oo_2_0::PersonTypeRankCode::OR6,
    ::oo_2_0::PersonTypeRankCode::OR7,
    ::oo_2_0::PersonTypeRankCode::OR8,
    ::oo_2_0::PersonTypeRankCode::OR9,
    ::oo_2_0::PersonTypeRankCode::OTHR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonTypeRankCode >
  _xsd_PersonTypeRankCode_type_factory_init (
    "PersonTypeRankCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PersonTypeSubcategoryCode
  //

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PersonTypeSubcategoryCode_convert ();
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PersonTypeSubcategoryCode_convert ();
  }

  PersonTypeSubcategoryCode::
  PersonTypeSubcategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PersonTypeSubcategoryCode_convert ();
  }

  PersonTypeSubcategoryCode* PersonTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PersonTypeSubcategoryCode (*this, f, c);
  }

  PersonTypeSubcategoryCode::value PersonTypeSubcategoryCode::
  _xsd_PersonTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PersonTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PersonTypeSubcategoryCode_indexes_,
                      _xsd_PersonTypeSubcategoryCode_indexes_ + 36,
                      *this,
                      c));

    if (i == _xsd_PersonTypeSubcategoryCode_indexes_ + 36 || _xsd_PersonTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PersonTypeSubcategoryCode::
  _xsd_PersonTypeSubcategoryCode_literals_[36] =
  {
    "DEFCTR",
    "DETNEE",
    "DSPLPR",
    "DSRTR",
    "ENGNER",
    "GOVEMP",
    "INTLCT",
    "JRNLST",
    "LNDOWN",
    "MEDCAL",
    "MEDINT",
    "MEDLCL",
    "MEDNAT",
    "MEDNOS",
    "MESSNG",
    "MISSNR",
    "MRCHNT",
    "NKN",
    "NONGVE",
    "NOS",
    "PARARS",
    "PARTSN",
    "PILOT",
    "POLCHF",
    "POLCMN",
    "POW",
    "PRSNR",
    "REFUGE",
    "REPAT",
    "SABOTR",
    "SPY",
    "TERRST",
    "UNLCMB",
    "VILELD",
    "VIP",
    "WRITER"
  };

  const PersonTypeSubcategoryCode::value PersonTypeSubcategoryCode::
  _xsd_PersonTypeSubcategoryCode_indexes_[36] =
  {
    ::oo_2_0::PersonTypeSubcategoryCode::DEFCTR,
    ::oo_2_0::PersonTypeSubcategoryCode::DETNEE,
    ::oo_2_0::PersonTypeSubcategoryCode::DSPLPR,
    ::oo_2_0::PersonTypeSubcategoryCode::DSRTR,
    ::oo_2_0::PersonTypeSubcategoryCode::ENGNER,
    ::oo_2_0::PersonTypeSubcategoryCode::GOVEMP,
    ::oo_2_0::PersonTypeSubcategoryCode::INTLCT,
    ::oo_2_0::PersonTypeSubcategoryCode::JRNLST,
    ::oo_2_0::PersonTypeSubcategoryCode::LNDOWN,
    ::oo_2_0::PersonTypeSubcategoryCode::MEDCAL,
    ::oo_2_0::PersonTypeSubcategoryCode::MEDINT,
    ::oo_2_0::PersonTypeSubcategoryCode::MEDLCL,
    ::oo_2_0::PersonTypeSubcategoryCode::MEDNAT,
    ::oo_2_0::PersonTypeSubcategoryCode::MEDNOS,
    ::oo_2_0::PersonTypeSubcategoryCode::MESSNG,
    ::oo_2_0::PersonTypeSubcategoryCode::MISSNR,
    ::oo_2_0::PersonTypeSubcategoryCode::MRCHNT,
    ::oo_2_0::PersonTypeSubcategoryCode::NKN,
    ::oo_2_0::PersonTypeSubcategoryCode::NONGVE,
    ::oo_2_0::PersonTypeSubcategoryCode::NOS,
    ::oo_2_0::PersonTypeSubcategoryCode::PARARS,
    ::oo_2_0::PersonTypeSubcategoryCode::PARTSN,
    ::oo_2_0::PersonTypeSubcategoryCode::PILOT,
    ::oo_2_0::PersonTypeSubcategoryCode::POLCHF,
    ::oo_2_0::PersonTypeSubcategoryCode::POLCMN,
    ::oo_2_0::PersonTypeSubcategoryCode::POW,
    ::oo_2_0::PersonTypeSubcategoryCode::PRSNR,
    ::oo_2_0::PersonTypeSubcategoryCode::REFUGE,
    ::oo_2_0::PersonTypeSubcategoryCode::REPAT,
    ::oo_2_0::PersonTypeSubcategoryCode::SABOTR,
    ::oo_2_0::PersonTypeSubcategoryCode::SPY,
    ::oo_2_0::PersonTypeSubcategoryCode::TERRST,
    ::oo_2_0::PersonTypeSubcategoryCode::UNLCMB,
    ::oo_2_0::PersonTypeSubcategoryCode::VILELD,
    ::oo_2_0::PersonTypeSubcategoryCode::VIP,
    ::oo_2_0::PersonTypeSubcategoryCode::WRITER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PersonTypeSubcategoryCode >
  _xsd_PersonTypeSubcategoryCode_type_factory_init (
    "PersonTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PhysicalAddressCategoryCode
  //

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PhysicalAddressCategoryCode_convert ();
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PhysicalAddressCategoryCode_convert ();
  }

  PhysicalAddressCategoryCode::
  PhysicalAddressCategoryCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PhysicalAddressCategoryCode_convert ();
  }

  PhysicalAddressCategoryCode* PhysicalAddressCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PhysicalAddressCategoryCode (*this, f, c);
  }

  PhysicalAddressCategoryCode::value PhysicalAddressCategoryCode::
  _xsd_PhysicalAddressCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PhysicalAddressCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PhysicalAddressCategoryCode_indexes_,
                      _xsd_PhysicalAddressCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_PhysicalAddressCategoryCode_indexes_ + 5 || _xsd_PhysicalAddressCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PhysicalAddressCategoryCode::
  _xsd_PhysicalAddressCategoryCode_literals_[5] =
  {
    "MLADDR",
    "NOS",
    "PHADDR",
    "PSTMRK",
    "RTADDR"
  };

  const PhysicalAddressCategoryCode::value PhysicalAddressCategoryCode::
  _xsd_PhysicalAddressCategoryCode_indexes_[5] =
  {
    ::oo_2_0::PhysicalAddressCategoryCode::MLADDR,
    ::oo_2_0::PhysicalAddressCategoryCode::NOS,
    ::oo_2_0::PhysicalAddressCategoryCode::PHADDR,
    ::oo_2_0::PhysicalAddressCategoryCode::PSTMRK,
    ::oo_2_0::PhysicalAddressCategoryCode::RTADDR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PhysicalAddressCategoryCode >
  _xsd_PhysicalAddressCategoryCode_type_factory_init (
    "PhysicalAddressCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanCategoryCode
  //

  PlanCategoryCode::
  PlanCategoryCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanCategoryCode_convert ();
  }

  PlanCategoryCode::
  PlanCategoryCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanCategoryCode_convert ();
  }

  PlanCategoryCode::
  PlanCategoryCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanCategoryCode_convert ();
  }

  PlanCategoryCode* PlanCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanCategoryCode (*this, f, c);
  }

  PlanCategoryCode::value PlanCategoryCode::
  _xsd_PlanCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanCategoryCode_indexes_,
                      _xsd_PlanCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PlanCategoryCode_indexes_ + 2 || _xsd_PlanCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanCategoryCode::
  _xsd_PlanCategoryCode_literals_[2] =
  {
    "OPLAN",
    "NOS"
  };

  const PlanCategoryCode::value PlanCategoryCode::
  _xsd_PlanCategoryCode_indexes_[2] =
  {
    ::oo_2_0::PlanCategoryCode::NOS,
    ::oo_2_0::PlanCategoryCode::OPLAN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanCategoryCode >
  _xsd_PlanCategoryCode_type_factory_init (
    "PlanCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderAssociationCategoryCode
  //

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderAssociationCategoryCode_convert ();
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderAssociationCategoryCode_convert ();
  }

  PlanOrderAssociationCategoryCode::
  PlanOrderAssociationCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderAssociationCategoryCode_convert ();
  }

  PlanOrderAssociationCategoryCode* PlanOrderAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderAssociationCategoryCode (*this, f, c);
  }

  PlanOrderAssociationCategoryCode::value PlanOrderAssociationCategoryCode::
  _xsd_PlanOrderAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderAssociationCategoryCode_indexes_,
                      _xsd_PlanOrderAssociationCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_PlanOrderAssociationCategoryCode_indexes_ + 5 || _xsd_PlanOrderAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderAssociationCategoryCode::
  _xsd_PlanOrderAssociationCategoryCode_literals_[5] =
  {
    "ISAMND",
    "ISDTCH",
    "ISORDR",
    "ISSPRD",
    "ISSUPP"
  };

  const PlanOrderAssociationCategoryCode::value PlanOrderAssociationCategoryCode::
  _xsd_PlanOrderAssociationCategoryCode_indexes_[5] =
  {
    ::oo_2_0::PlanOrderAssociationCategoryCode::ISAMND,
    ::oo_2_0::PlanOrderAssociationCategoryCode::ISDTCH,
    ::oo_2_0::PlanOrderAssociationCategoryCode::ISORDR,
    ::oo_2_0::PlanOrderAssociationCategoryCode::ISSPRD,
    ::oo_2_0::PlanOrderAssociationCategoryCode::ISSUPP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderAssociationCategoryCode >
  _xsd_PlanOrderAssociationCategoryCode_type_factory_init (
    "PlanOrderAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderCategoryCode
  //

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderCategoryCode_convert ();
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderCategoryCode_convert ();
  }

  PlanOrderCategoryCode::
  PlanOrderCategoryCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderCategoryCode_convert ();
  }

  PlanOrderCategoryCode* PlanOrderCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderCategoryCode (*this, f, c);
  }

  PlanOrderCategoryCode::value PlanOrderCategoryCode::
  _xsd_PlanOrderCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderCategoryCode_indexes_,
                      _xsd_PlanOrderCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PlanOrderCategoryCode_indexes_ + 2 || _xsd_PlanOrderCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderCategoryCode::
  _xsd_PlanOrderCategoryCode_literals_[2] =
  {
    "ORDER",
    "PLAN"
  };

  const PlanOrderCategoryCode::value PlanOrderCategoryCode::
  _xsd_PlanOrderCategoryCode_indexes_[2] =
  {
    ::oo_2_0::PlanOrderCategoryCode::ORDER,
    ::oo_2_0::PlanOrderCategoryCode::PLAN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderCategoryCode >
  _xsd_PlanOrderCategoryCode_type_factory_init (
    "PlanOrderCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderComponentContentCitationCategoryCode
  //

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderComponentContentCitationCategoryCode_convert ();
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const ::xercesc::DOMAttr& a,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderComponentContentCitationCategoryCode_convert ();
  }

  PlanOrderComponentContentCitationCategoryCode::
  PlanOrderComponentContentCitationCategoryCode (const ::std::string& s,
                                                  const ::xercesc::DOMElement* e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderComponentContentCitationCategoryCode_convert ();
  }

  PlanOrderComponentContentCitationCategoryCode* PlanOrderComponentContentCitationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderComponentContentCitationCategoryCode (*this, f, c);
  }

  PlanOrderComponentContentCitationCategoryCode::value PlanOrderComponentContentCitationCategoryCode::
  _xsd_PlanOrderComponentContentCitationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderComponentContentCitationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderComponentContentCitationCategoryCode_indexes_,
                      _xsd_PlanOrderComponentContentCitationCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_PlanOrderComponentContentCitationCategoryCode_indexes_ + 7 || _xsd_PlanOrderComponentContentCitationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderComponentContentCitationCategoryCode::
  _xsd_PlanOrderComponentContentCitationCategoryCode_literals_[7] =
  {
    "HASINS",
    "ISAMPL",
    "ISDISS",
    "ISPROV",
    "ISRCRD",
    "ISSPCM",
    "ISSPPM"
  };

  const PlanOrderComponentContentCitationCategoryCode::value PlanOrderComponentContentCitationCategoryCode::
  _xsd_PlanOrderComponentContentCitationCategoryCode_indexes_[7] =
  {
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::HASINS,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISAMPL,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISDISS,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISPROV,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISRCRD,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISSPCM,
    ::oo_2_0::PlanOrderComponentContentCitationCategoryCode::ISSPPM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderComponentContentCitationCategoryCode >
  _xsd_PlanOrderComponentContentCitationCategoryCode_type_factory_init (
    "PlanOrderComponentContentCitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderComponentStructureCategoryCode
  //

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderComponentStructureCategoryCode_convert ();
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderComponentStructureCategoryCode_convert ();
  }

  PlanOrderComponentStructureCategoryCode::
  PlanOrderComponentStructureCategoryCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderComponentStructureCategoryCode_convert ();
  }

  PlanOrderComponentStructureCategoryCode* PlanOrderComponentStructureCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderComponentStructureCategoryCode (*this, f, c);
  }

  PlanOrderComponentStructureCategoryCode::value PlanOrderComponentStructureCategoryCode::
  _xsd_PlanOrderComponentStructureCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderComponentStructureCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderComponentStructureCategoryCode_indexes_,
                      _xsd_PlanOrderComponentStructureCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_PlanOrderComponentStructureCategoryCode_indexes_ + 3 || _xsd_PlanOrderComponentStructureCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderComponentStructureCategoryCode::
  _xsd_PlanOrderComponentStructureCategoryCode_literals_[3] =
  {
    "ISDISS",
    "ISPRNT",
    "ISREPL"
  };

  const PlanOrderComponentStructureCategoryCode::value PlanOrderComponentStructureCategoryCode::
  _xsd_PlanOrderComponentStructureCategoryCode_indexes_[3] =
  {
    ::oo_2_0::PlanOrderComponentStructureCategoryCode::ISDISS,
    ::oo_2_0::PlanOrderComponentStructureCategoryCode::ISPRNT,
    ::oo_2_0::PlanOrderComponentStructureCategoryCode::ISREPL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderComponentStructureCategoryCode >
  _xsd_PlanOrderComponentStructureCategoryCode_type_factory_init (
    "PlanOrderComponentStructureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderDistributionAcknowledgementCode
  //

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderDistributionAcknowledgementCode_convert ();
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderDistributionAcknowledgementCode_convert ();
  }

  PlanOrderDistributionAcknowledgementCode::
  PlanOrderDistributionAcknowledgementCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderDistributionAcknowledgementCode_convert ();
  }

  PlanOrderDistributionAcknowledgementCode* PlanOrderDistributionAcknowledgementCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderDistributionAcknowledgementCode (*this, f, c);
  }

  PlanOrderDistributionAcknowledgementCode::value PlanOrderDistributionAcknowledgementCode::
  _xsd_PlanOrderDistributionAcknowledgementCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderDistributionAcknowledgementCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderDistributionAcknowledgementCode_indexes_,
                      _xsd_PlanOrderDistributionAcknowledgementCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_PlanOrderDistributionAcknowledgementCode_indexes_ + 3 || _xsd_PlanOrderDistributionAcknowledgementCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderDistributionAcknowledgementCode::
  _xsd_PlanOrderDistributionAcknowledgementCode_literals_[3] =
  {
    "ACK",
    "READ",
    "RCVD"
  };

  const PlanOrderDistributionAcknowledgementCode::value PlanOrderDistributionAcknowledgementCode::
  _xsd_PlanOrderDistributionAcknowledgementCode_indexes_[3] =
  {
    ::oo_2_0::PlanOrderDistributionAcknowledgementCode::ACK,
    ::oo_2_0::PlanOrderDistributionAcknowledgementCode::RCVD,
    ::oo_2_0::PlanOrderDistributionAcknowledgementCode::READ
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderDistributionAcknowledgementCode >
  _xsd_PlanOrderDistributionAcknowledgementCode_type_factory_init (
    "PlanOrderDistributionAcknowledgementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderDistributionCategoryCode
  //

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderDistributionCategoryCode_convert ();
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderDistributionCategoryCode_convert ();
  }

  PlanOrderDistributionCategoryCode::
  PlanOrderDistributionCategoryCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderDistributionCategoryCode_convert ();
  }

  PlanOrderDistributionCategoryCode* PlanOrderDistributionCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderDistributionCategoryCode (*this, f, c);
  }

  PlanOrderDistributionCategoryCode::value PlanOrderDistributionCategoryCode::
  _xsd_PlanOrderDistributionCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderDistributionCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderDistributionCategoryCode_indexes_,
                      _xsd_PlanOrderDistributionCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PlanOrderDistributionCategoryCode_indexes_ + 2 || _xsd_PlanOrderDistributionCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderDistributionCategoryCode::
  _xsd_PlanOrderDistributionCategoryCode_literals_[2] =
  {
    "DSTEXE",
    "DSTINF"
  };

  const PlanOrderDistributionCategoryCode::value PlanOrderDistributionCategoryCode::
  _xsd_PlanOrderDistributionCategoryCode_indexes_[2] =
  {
    ::oo_2_0::PlanOrderDistributionCategoryCode::DSTEXE,
    ::oo_2_0::PlanOrderDistributionCategoryCode::DSTINF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderDistributionCategoryCode >
  _xsd_PlanOrderDistributionCategoryCode_type_factory_init (
    "PlanOrderDistributionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanOrderHeaderContentTimeZoneCode
  //

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanOrderHeaderContentTimeZoneCode_convert ();
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanOrderHeaderContentTimeZoneCode_convert ();
  }

  PlanOrderHeaderContentTimeZoneCode::
  PlanOrderHeaderContentTimeZoneCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanOrderHeaderContentTimeZoneCode_convert ();
  }

  PlanOrderHeaderContentTimeZoneCode* PlanOrderHeaderContentTimeZoneCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanOrderHeaderContentTimeZoneCode (*this, f, c);
  }

  PlanOrderHeaderContentTimeZoneCode::value PlanOrderHeaderContentTimeZoneCode::
  _xsd_PlanOrderHeaderContentTimeZoneCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanOrderHeaderContentTimeZoneCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanOrderHeaderContentTimeZoneCode_indexes_,
                      _xsd_PlanOrderHeaderContentTimeZoneCode_indexes_ + 25,
                      *this,
                      c));

    if (i == _xsd_PlanOrderHeaderContentTimeZoneCode_indexes_ + 25 || _xsd_PlanOrderHeaderContentTimeZoneCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanOrderHeaderContentTimeZoneCode::
  _xsd_PlanOrderHeaderContentTimeZoneCode_literals_[25] =
  {
    "Z",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "K",
    "L",
    "M",
    "Y",
    "X",
    "W",
    "V",
    "U",
    "T",
    "S",
    "R",
    "Q",
    "P",
    "O",
    "N"
  };

  const PlanOrderHeaderContentTimeZoneCode::value PlanOrderHeaderContentTimeZoneCode::
  _xsd_PlanOrderHeaderContentTimeZoneCode_indexes_[25] =
  {
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::A,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::B,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::C,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::D,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::E,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::F,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::G,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::H,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::I,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::K,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::L,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::M,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::N,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::O,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::P,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::Q,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::R,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::S,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::T,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::U,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::V,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::W,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::X,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::Y,
    ::oo_2_0::PlanOrderHeaderContentTimeZoneCode::Z
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanOrderHeaderContentTimeZoneCode >
  _xsd_PlanOrderHeaderContentTimeZoneCode_type_factory_init (
    "PlanOrderHeaderContentTimeZoneCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanStatusDevelopmentStatusCode
  //

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanStatusDevelopmentStatusCode_convert ();
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanStatusDevelopmentStatusCode_convert ();
  }

  PlanStatusDevelopmentStatusCode::
  PlanStatusDevelopmentStatusCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanStatusDevelopmentStatusCode_convert ();
  }

  PlanStatusDevelopmentStatusCode* PlanStatusDevelopmentStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanStatusDevelopmentStatusCode (*this, f, c);
  }

  PlanStatusDevelopmentStatusCode::value PlanStatusDevelopmentStatusCode::
  _xsd_PlanStatusDevelopmentStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanStatusDevelopmentStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanStatusDevelopmentStatusCode_indexes_,
                      _xsd_PlanStatusDevelopmentStatusCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PlanStatusDevelopmentStatusCode_indexes_ + 2 || _xsd_PlanStatusDevelopmentStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanStatusDevelopmentStatusCode::
  _xsd_PlanStatusDevelopmentStatusCode_literals_[2] =
  {
    "COMPL",
    "NCOMPL"
  };

  const PlanStatusDevelopmentStatusCode::value PlanStatusDevelopmentStatusCode::
  _xsd_PlanStatusDevelopmentStatusCode_indexes_[2] =
  {
    ::oo_2_0::PlanStatusDevelopmentStatusCode::COMPL,
    ::oo_2_0::PlanStatusDevelopmentStatusCode::NCOMPL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanStatusDevelopmentStatusCode >
  _xsd_PlanStatusDevelopmentStatusCode_type_factory_init (
    "PlanStatusDevelopmentStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PlanStatusStateCode
  //

  PlanStatusStateCode::
  PlanStatusStateCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PlanStatusStateCode_convert ();
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PlanStatusStateCode_convert ();
  }

  PlanStatusStateCode::
  PlanStatusStateCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PlanStatusStateCode_convert ();
  }

  PlanStatusStateCode* PlanStatusStateCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PlanStatusStateCode (*this, f, c);
  }

  PlanStatusStateCode::value PlanStatusStateCode::
  _xsd_PlanStatusStateCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanStatusStateCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PlanStatusStateCode_indexes_,
                      _xsd_PlanStatusStateCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_PlanStatusStateCode_indexes_ + 3 || _xsd_PlanStatusStateCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PlanStatusStateCode::
  _xsd_PlanStatusStateCode_literals_[3] =
  {
    "APPRVD",
    "CANCEL",
    "WTHDRN"
  };

  const PlanStatusStateCode::value PlanStatusStateCode::
  _xsd_PlanStatusStateCode_indexes_[3] =
  {
    ::oo_2_0::PlanStatusStateCode::APPRVD,
    ::oo_2_0::PlanStatusStateCode::CANCEL,
    ::oo_2_0::PlanStatusStateCode::WTHDRN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlanStatusStateCode >
  _xsd_PlanStatusStateCode_type_factory_init (
    "PlanStatusStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PointCategoryCode
  //

  PointCategoryCode::
  PointCategoryCode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PointCategoryCode_convert ();
  }

  PointCategoryCode::
  PointCategoryCode (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PointCategoryCode_convert ();
  }

  PointCategoryCode::
  PointCategoryCode (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PointCategoryCode_convert ();
  }

  PointCategoryCode* PointCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PointCategoryCode (*this, f, c);
  }

  PointCategoryCode::value PointCategoryCode::
  _xsd_PointCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PointCategoryCode_indexes_,
                      _xsd_PointCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_PointCategoryCode_indexes_ + 2 || _xsd_PointCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PointCategoryCode::
  _xsd_PointCategoryCode_literals_[2] =
  {
    "ABS",
    "REL"
  };

  const PointCategoryCode::value PointCategoryCode::
  _xsd_PointCategoryCode_indexes_[2] =
  {
    ::oo_2_0::PointCategoryCode::ABS,
    ::oo_2_0::PointCategoryCode::REL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PointCategoryCode >
  _xsd_PointCategoryCode_type_factory_init (
    "PointCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PrecipitationCategoryCode
  //

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PrecipitationCategoryCode_convert ();
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PrecipitationCategoryCode_convert ();
  }

  PrecipitationCategoryCode::
  PrecipitationCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PrecipitationCategoryCode_convert ();
  }

  PrecipitationCategoryCode* PrecipitationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PrecipitationCategoryCode (*this, f, c);
  }

  PrecipitationCategoryCode::value PrecipitationCategoryCode::
  _xsd_PrecipitationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PrecipitationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PrecipitationCategoryCode_indexes_,
                      _xsd_PrecipitationCategoryCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_PrecipitationCategoryCode_indexes_ + 13 || _xsd_PrecipitationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PrecipitationCategoryCode::
  _xsd_PrecipitationCategoryCode_literals_[13] =
  {
    "DRZLE",
    "FDRZLE",
    "FRAIN",
    "HAIL",
    "ICECRY",
    "ICEPLT",
    "NPR",
    "RAIN",
    "RAINSR",
    "SLEET",
    "SNOW",
    "SNWGRN",
    "SNWSHR"
  };

  const PrecipitationCategoryCode::value PrecipitationCategoryCode::
  _xsd_PrecipitationCategoryCode_indexes_[13] =
  {
    ::oo_2_0::PrecipitationCategoryCode::DRZLE,
    ::oo_2_0::PrecipitationCategoryCode::FDRZLE,
    ::oo_2_0::PrecipitationCategoryCode::FRAIN,
    ::oo_2_0::PrecipitationCategoryCode::HAIL,
    ::oo_2_0::PrecipitationCategoryCode::ICECRY,
    ::oo_2_0::PrecipitationCategoryCode::ICEPLT,
    ::oo_2_0::PrecipitationCategoryCode::NPR,
    ::oo_2_0::PrecipitationCategoryCode::RAIN,
    ::oo_2_0::PrecipitationCategoryCode::RAINSR,
    ::oo_2_0::PrecipitationCategoryCode::SLEET,
    ::oo_2_0::PrecipitationCategoryCode::SNOW,
    ::oo_2_0::PrecipitationCategoryCode::SNWGRN,
    ::oo_2_0::PrecipitationCategoryCode::SNWSHR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PrecipitationCategoryCode >
  _xsd_PrecipitationCategoryCode_type_factory_init (
    "PrecipitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // PrivateSectorOrganisationTypeCategoryCode
  //

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_PrivateSectorOrganisationTypeCategoryCode_convert ();
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_PrivateSectorOrganisationTypeCategoryCode_convert ();
  }

  PrivateSectorOrganisationTypeCategoryCode::
  PrivateSectorOrganisationTypeCategoryCode (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_PrivateSectorOrganisationTypeCategoryCode_convert ();
  }

  PrivateSectorOrganisationTypeCategoryCode* PrivateSectorOrganisationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PrivateSectorOrganisationTypeCategoryCode (*this, f, c);
  }

  PrivateSectorOrganisationTypeCategoryCode::value PrivateSectorOrganisationTypeCategoryCode::
  _xsd_PrivateSectorOrganisationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PrivateSectorOrganisationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_PrivateSectorOrganisationTypeCategoryCode_indexes_,
                      _xsd_PrivateSectorOrganisationTypeCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_PrivateSectorOrganisationTypeCategoryCode_indexes_ + 10 || _xsd_PrivateSectorOrganisationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const PrivateSectorOrganisationTypeCategoryCode::
  _xsd_PrivateSectorOrganisationTypeCategoryCode_literals_[10] =
  {
    "AGRCTL",
    "DEFIND",
    "FSHIND",
    "MFG",
    "MULTIN",
    "NEWSMD",
    "NOS",
    "PHLNTP",
    "RETAIL",
    "TRADE"
  };

  const PrivateSectorOrganisationTypeCategoryCode::value PrivateSectorOrganisationTypeCategoryCode::
  _xsd_PrivateSectorOrganisationTypeCategoryCode_indexes_[10] =
  {
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::AGRCTL,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::DEFIND,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::FSHIND,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::MFG,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::MULTIN,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::NEWSMD,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::NOS,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::PHLNTP,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::RETAIL,
    ::oo_2_0::PrivateSectorOrganisationTypeCategoryCode::TRADE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PrivateSectorOrganisationTypeCategoryCode >
  _xsd_PrivateSectorOrganisationTypeCategoryCode_type_factory_init (
    "PrivateSectorOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // QuayContainerHandlingTypeCode
  //

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_QuayContainerHandlingTypeCode_convert ();
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_QuayContainerHandlingTypeCode_convert ();
  }

  QuayContainerHandlingTypeCode::
  QuayContainerHandlingTypeCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_QuayContainerHandlingTypeCode_convert ();
  }

  QuayContainerHandlingTypeCode* QuayContainerHandlingTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class QuayContainerHandlingTypeCode (*this, f, c);
  }

  QuayContainerHandlingTypeCode::value QuayContainerHandlingTypeCode::
  _xsd_QuayContainerHandlingTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QuayContainerHandlingTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_QuayContainerHandlingTypeCode_indexes_,
                      _xsd_QuayContainerHandlingTypeCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_QuayContainerHandlingTypeCode_indexes_ + 7 || _xsd_QuayContainerHandlingTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const QuayContainerHandlingTypeCode::
  _xsd_QuayContainerHandlingTypeCode_literals_[7] =
  {
    "CNTSTR",
    "EMPCNT",
    "NOS",
    "RCHSTK",
    "RGHTER",
    "SHNTER",
    "SHPTSH"
  };

  const QuayContainerHandlingTypeCode::value QuayContainerHandlingTypeCode::
  _xsd_QuayContainerHandlingTypeCode_indexes_[7] =
  {
    ::oo_2_0::QuayContainerHandlingTypeCode::CNTSTR,
    ::oo_2_0::QuayContainerHandlingTypeCode::EMPCNT,
    ::oo_2_0::QuayContainerHandlingTypeCode::NOS,
    ::oo_2_0::QuayContainerHandlingTypeCode::RCHSTK,
    ::oo_2_0::QuayContainerHandlingTypeCode::RGHTER,
    ::oo_2_0::QuayContainerHandlingTypeCode::SHNTER,
    ::oo_2_0::QuayContainerHandlingTypeCode::SHPTSH
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, QuayContainerHandlingTypeCode >
  _xsd_QuayContainerHandlingTypeCode_type_factory_init (
    "QuayContainerHandlingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // QuayCraneOffloadingTypeCode
  //

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_QuayCraneOffloadingTypeCode_convert ();
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_QuayCraneOffloadingTypeCode_convert ();
  }

  QuayCraneOffloadingTypeCode::
  QuayCraneOffloadingTypeCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_QuayCraneOffloadingTypeCode_convert ();
  }

  QuayCraneOffloadingTypeCode* QuayCraneOffloadingTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class QuayCraneOffloadingTypeCode (*this, f, c);
  }

  QuayCraneOffloadingTypeCode::value QuayCraneOffloadingTypeCode::
  _xsd_QuayCraneOffloadingTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QuayCraneOffloadingTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_QuayCraneOffloadingTypeCode_indexes_,
                      _xsd_QuayCraneOffloadingTypeCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_QuayCraneOffloadingTypeCode_indexes_ + 6 || _xsd_QuayCraneOffloadingTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const QuayCraneOffloadingTypeCode::
  _xsd_QuayCraneOffloadingTypeCode_literals_[6] =
  {
    "FLTCRN",
    "NOS",
    "RAILCR",
    "STATCR",
    "TRKCRW",
    "WHLCRN"
  };

  const QuayCraneOffloadingTypeCode::value QuayCraneOffloadingTypeCode::
  _xsd_QuayCraneOffloadingTypeCode_indexes_[6] =
  {
    ::oo_2_0::QuayCraneOffloadingTypeCode::FLTCRN,
    ::oo_2_0::QuayCraneOffloadingTypeCode::NOS,
    ::oo_2_0::QuayCraneOffloadingTypeCode::RAILCR,
    ::oo_2_0::QuayCraneOffloadingTypeCode::STATCR,
    ::oo_2_0::QuayCraneOffloadingTypeCode::TRKCRW,
    ::oo_2_0::QuayCraneOffloadingTypeCode::WHLCRN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, QuayCraneOffloadingTypeCode >
  _xsd_QuayCraneOffloadingTypeCode_type_factory_init (
    "QuayCraneOffloadingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // QuayRailServedIndicatorCode
  //

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_QuayRailServedIndicatorCode_convert ();
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_QuayRailServedIndicatorCode_convert ();
  }

  QuayRailServedIndicatorCode::
  QuayRailServedIndicatorCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_QuayRailServedIndicatorCode_convert ();
  }

  QuayRailServedIndicatorCode* QuayRailServedIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class QuayRailServedIndicatorCode (*this, f, c);
  }

  QuayRailServedIndicatorCode::value QuayRailServedIndicatorCode::
  _xsd_QuayRailServedIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QuayRailServedIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_QuayRailServedIndicatorCode_indexes_,
                      _xsd_QuayRailServedIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_QuayRailServedIndicatorCode_indexes_ + 2 || _xsd_QuayRailServedIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const QuayRailServedIndicatorCode::
  _xsd_QuayRailServedIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const QuayRailServedIndicatorCode::value QuayRailServedIndicatorCode::
  _xsd_QuayRailServedIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::QuayRailServedIndicatorCode::NO,
    ::oo_2_0::QuayRailServedIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, QuayRailServedIndicatorCode >
  _xsd_QuayRailServedIndicatorCode_type_factory_init (
    "QuayRailServedIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // QuayStorageCode
  //

  QuayStorageCode::
  QuayStorageCode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_QuayStorageCode_convert ();
  }

  QuayStorageCode::
  QuayStorageCode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_QuayStorageCode_convert ();
  }

  QuayStorageCode::
  QuayStorageCode (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_QuayStorageCode_convert ();
  }

  QuayStorageCode* QuayStorageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class QuayStorageCode (*this, f, c);
  }

  QuayStorageCode::value QuayStorageCode::
  _xsd_QuayStorageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QuayStorageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_QuayStorageCode_indexes_,
                      _xsd_QuayStorageCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_QuayStorageCode_indexes_ + 10 || _xsd_QuayStorageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const QuayStorageCode::
  _xsd_QuayStorageCode_literals_[10] =
  {
    "CBRN",
    "GRNSIL",
    "HAZCAR",
    "LQDSTR",
    "MNTEXP",
    "NOS",
    "OPENAR",
    "RFRGTD",
    "VEHCLE",
    "WARHSE"
  };

  const QuayStorageCode::value QuayStorageCode::
  _xsd_QuayStorageCode_indexes_[10] =
  {
    ::oo_2_0::QuayStorageCode::CBRN,
    ::oo_2_0::QuayStorageCode::GRNSIL,
    ::oo_2_0::QuayStorageCode::HAZCAR,
    ::oo_2_0::QuayStorageCode::LQDSTR,
    ::oo_2_0::QuayStorageCode::MNTEXP,
    ::oo_2_0::QuayStorageCode::NOS,
    ::oo_2_0::QuayStorageCode::OPENAR,
    ::oo_2_0::QuayStorageCode::RFRGTD,
    ::oo_2_0::QuayStorageCode::VEHCLE,
    ::oo_2_0::QuayStorageCode::WARHSE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, QuayStorageCode >
  _xsd_QuayStorageCode_type_factory_init (
    "QuayStorageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RadioactiveEventCategoryCode
  //

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RadioactiveEventCategoryCode_convert ();
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RadioactiveEventCategoryCode_convert ();
  }

  RadioactiveEventCategoryCode::
  RadioactiveEventCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RadioactiveEventCategoryCode_convert ();
  }

  RadioactiveEventCategoryCode* RadioactiveEventCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RadioactiveEventCategoryCode (*this, f, c);
  }

  RadioactiveEventCategoryCode::value RadioactiveEventCategoryCode::
  _xsd_RadioactiveEventCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RadioactiveEventCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RadioactiveEventCategoryCode_indexes_,
                      _xsd_RadioactiveEventCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RadioactiveEventCategoryCode_indexes_ + 4 || _xsd_RadioactiveEventCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RadioactiveEventCategoryCode::
  _xsd_RadioactiveEventCategoryCode_literals_[4] =
  {
    "NOS",
    "NUCEVT",
    "RADALM",
    "RADEVT"
  };

  const RadioactiveEventCategoryCode::value RadioactiveEventCategoryCode::
  _xsd_RadioactiveEventCategoryCode_indexes_[4] =
  {
    ::oo_2_0::RadioactiveEventCategoryCode::NOS,
    ::oo_2_0::RadioactiveEventCategoryCode::NUCEVT,
    ::oo_2_0::RadioactiveEventCategoryCode::RADALM,
    ::oo_2_0::RadioactiveEventCategoryCode::RADEVT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RadioactiveEventCategoryCode >
  _xsd_RadioactiveEventCategoryCode_type_factory_init (
    "RadioactiveEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RadioactiveEventDoseRateTrendCode
  //

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RadioactiveEventDoseRateTrendCode_convert ();
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RadioactiveEventDoseRateTrendCode_convert ();
  }

  RadioactiveEventDoseRateTrendCode::
  RadioactiveEventDoseRateTrendCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RadioactiveEventDoseRateTrendCode_convert ();
  }

  RadioactiveEventDoseRateTrendCode* RadioactiveEventDoseRateTrendCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RadioactiveEventDoseRateTrendCode (*this, f, c);
  }

  RadioactiveEventDoseRateTrendCode::value RadioactiveEventDoseRateTrendCode::
  _xsd_RadioactiveEventDoseRateTrendCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RadioactiveEventDoseRateTrendCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RadioactiveEventDoseRateTrendCode_indexes_,
                      _xsd_RadioactiveEventDoseRateTrendCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_RadioactiveEventDoseRateTrendCode_indexes_ + 7 || _xsd_RadioactiveEventDoseRateTrendCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RadioactiveEventDoseRateTrendCode::
  _xsd_RadioactiveEventDoseRateTrendCode_literals_[7] =
  {
    "DECR",
    "INCR",
    "INIT",
    "NKN",
    "PEAK",
    "SAME",
    "BACK"
  };

  const RadioactiveEventDoseRateTrendCode::value RadioactiveEventDoseRateTrendCode::
  _xsd_RadioactiveEventDoseRateTrendCode_indexes_[7] =
  {
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::BACK,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::DECR,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::INCR,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::INIT,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::NKN,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::PEAK,
    ::oo_2_0::RadioactiveEventDoseRateTrendCode::SAME
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RadioactiveEventDoseRateTrendCode >
  _xsd_RadioactiveEventDoseRateTrendCode_type_factory_init (
    "RadioactiveEventDoseRateTrendCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RadioactiveEventRelativeDecayRateCode
  //

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RadioactiveEventRelativeDecayRateCode_convert ();
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RadioactiveEventRelativeDecayRateCode_convert ();
  }

  RadioactiveEventRelativeDecayRateCode::
  RadioactiveEventRelativeDecayRateCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RadioactiveEventRelativeDecayRateCode_convert ();
  }

  RadioactiveEventRelativeDecayRateCode* RadioactiveEventRelativeDecayRateCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RadioactiveEventRelativeDecayRateCode (*this, f, c);
  }

  RadioactiveEventRelativeDecayRateCode::value RadioactiveEventRelativeDecayRateCode::
  _xsd_RadioactiveEventRelativeDecayRateCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RadioactiveEventRelativeDecayRateCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RadioactiveEventRelativeDecayRateCode_indexes_,
                      _xsd_RadioactiveEventRelativeDecayRateCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_RadioactiveEventRelativeDecayRateCode_indexes_ + 3 || _xsd_RadioactiveEventRelativeDecayRateCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RadioactiveEventRelativeDecayRateCode::
  _xsd_RadioactiveEventRelativeDecayRateCode_literals_[3] =
  {
    "DF",
    "DN",
    "DS"
  };

  const RadioactiveEventRelativeDecayRateCode::value RadioactiveEventRelativeDecayRateCode::
  _xsd_RadioactiveEventRelativeDecayRateCode_indexes_[3] =
  {
    ::oo_2_0::RadioactiveEventRelativeDecayRateCode::DF,
    ::oo_2_0::RadioactiveEventRelativeDecayRateCode::DN,
    ::oo_2_0::RadioactiveEventRelativeDecayRateCode::DS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RadioactiveEventRelativeDecayRateCode >
  _xsd_RadioactiveEventRelativeDecayRateCode_type_factory_init (
    "RadioactiveEventRelativeDecayRateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RadioactiveMaterielTypeCategoryCode
  //

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RadioactiveMaterielTypeCategoryCode_convert ();
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RadioactiveMaterielTypeCategoryCode_convert ();
  }

  RadioactiveMaterielTypeCategoryCode::
  RadioactiveMaterielTypeCategoryCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RadioactiveMaterielTypeCategoryCode_convert ();
  }

  RadioactiveMaterielTypeCategoryCode* RadioactiveMaterielTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RadioactiveMaterielTypeCategoryCode (*this, f, c);
  }

  RadioactiveMaterielTypeCategoryCode::value RadioactiveMaterielTypeCategoryCode::
  _xsd_RadioactiveMaterielTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RadioactiveMaterielTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RadioactiveMaterielTypeCategoryCode_indexes_,
                      _xsd_RadioactiveMaterielTypeCategoryCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_RadioactiveMaterielTypeCategoryCode_indexes_ + 11 || _xsd_RadioactiveMaterielTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RadioactiveMaterielTypeCategoryCode::
  _xsd_RadioactiveMaterielTypeCategoryCode_literals_[11] =
  {
    "CESIUM",
    "COBALT",
    "FRFUEL",
    "IODINE",
    "NKN",
    "NOS",
    "NROTA",
    "NUCFLT",
    "PLTNUM",
    "SPFUEL",
    "TOXMAT"
  };

  const RadioactiveMaterielTypeCategoryCode::value RadioactiveMaterielTypeCategoryCode::
  _xsd_RadioactiveMaterielTypeCategoryCode_indexes_[11] =
  {
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::CESIUM,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::COBALT,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::FRFUEL,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::IODINE,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::NKN,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::NOS,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::NROTA,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::NUCFLT,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::PLTNUM,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::SPFUEL,
    ::oo_2_0::RadioactiveMaterielTypeCategoryCode::TOXMAT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RadioactiveMaterielTypeCategoryCode >
  _xsd_RadioactiveMaterielTypeCategoryCode_type_factory_init (
    "RadioactiveMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RadioactiveMaterielTypePrimaryRadiationCode
  //

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RadioactiveMaterielTypePrimaryRadiationCode_convert ();
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RadioactiveMaterielTypePrimaryRadiationCode_convert ();
  }

  RadioactiveMaterielTypePrimaryRadiationCode::
  RadioactiveMaterielTypePrimaryRadiationCode (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RadioactiveMaterielTypePrimaryRadiationCode_convert ();
  }

  RadioactiveMaterielTypePrimaryRadiationCode* RadioactiveMaterielTypePrimaryRadiationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RadioactiveMaterielTypePrimaryRadiationCode (*this, f, c);
  }

  RadioactiveMaterielTypePrimaryRadiationCode::value RadioactiveMaterielTypePrimaryRadiationCode::
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RadioactiveMaterielTypePrimaryRadiationCode_indexes_,
                      _xsd_RadioactiveMaterielTypePrimaryRadiationCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_RadioactiveMaterielTypePrimaryRadiationCode_indexes_ + 5 || _xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RadioactiveMaterielTypePrimaryRadiationCode::
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_[5] =
  {
    "ALPHA",
    "BETA",
    "GAMMA",
    "NEUTRN",
    "NKN"
  };

  const RadioactiveMaterielTypePrimaryRadiationCode::value RadioactiveMaterielTypePrimaryRadiationCode::
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_indexes_[5] =
  {
    ::oo_2_0::RadioactiveMaterielTypePrimaryRadiationCode::ALPHA,
    ::oo_2_0::RadioactiveMaterielTypePrimaryRadiationCode::BETA,
    ::oo_2_0::RadioactiveMaterielTypePrimaryRadiationCode::GAMMA,
    ::oo_2_0::RadioactiveMaterielTypePrimaryRadiationCode::NEUTRN,
    ::oo_2_0::RadioactiveMaterielTypePrimaryRadiationCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RadioactiveMaterielTypePrimaryRadiationCode >
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_type_factory_init (
    "RadioactiveMaterielTypePrimaryRadiationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailcarTypeCategoryCode
  //

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailcarTypeCategoryCode_convert ();
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailcarTypeCategoryCode_convert ();
  }

  RailcarTypeCategoryCode::
  RailcarTypeCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailcarTypeCategoryCode_convert ();
  }

  RailcarTypeCategoryCode* RailcarTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailcarTypeCategoryCode (*this, f, c);
  }

  RailcarTypeCategoryCode::value RailcarTypeCategoryCode::
  _xsd_RailcarTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailcarTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailcarTypeCategoryCode_indexes_,
                      _xsd_RailcarTypeCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_RailcarTypeCategoryCode_indexes_ + 7 || _xsd_RailcarTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailcarTypeCategoryCode::
  _xsd_RailcarTypeCategoryCode_literals_[7] =
  {
    "LCMTVE",
    "NKN",
    "NOS",
    "RLDEQP",
    "RLLSTK",
    "TRAIN",
    "TRAM"
  };

  const RailcarTypeCategoryCode::value RailcarTypeCategoryCode::
  _xsd_RailcarTypeCategoryCode_indexes_[7] =
  {
    ::oo_2_0::RailcarTypeCategoryCode::LCMTVE,
    ::oo_2_0::RailcarTypeCategoryCode::NKN,
    ::oo_2_0::RailcarTypeCategoryCode::NOS,
    ::oo_2_0::RailcarTypeCategoryCode::RLDEQP,
    ::oo_2_0::RailcarTypeCategoryCode::RLLSTK,
    ::oo_2_0::RailcarTypeCategoryCode::TRAIN,
    ::oo_2_0::RailcarTypeCategoryCode::TRAM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailcarTypeCategoryCode >
  _xsd_RailcarTypeCategoryCode_type_factory_init (
    "RailcarTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailcarTypeSubcategoryCode
  //

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailcarTypeSubcategoryCode_convert ();
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailcarTypeSubcategoryCode_convert ();
  }

  RailcarTypeSubcategoryCode::
  RailcarTypeSubcategoryCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailcarTypeSubcategoryCode_convert ();
  }

  RailcarTypeSubcategoryCode* RailcarTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailcarTypeSubcategoryCode (*this, f, c);
  }

  RailcarTypeSubcategoryCode::value RailcarTypeSubcategoryCode::
  _xsd_RailcarTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailcarTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailcarTypeSubcategoryCode_indexes_,
                      _xsd_RailcarTypeSubcategoryCode_indexes_ + 26,
                      *this,
                      c));

    if (i == _xsd_RailcarTypeSubcategoryCode_indexes_ + 26 || _xsd_RailcarTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailcarTypeSubcategoryCode::
  _xsd_RailcarTypeSubcategoryCode_literals_[26] =
  {
    "LCMDSE",
    "LCMDSL",
    "LCMELC",
    "LCMSTM",
    "LCMTND",
    "NKN",
    "NOS",
    "WGNART",
    "WGNBRK",
    "WGNCAR",
    "WGNCRG",
    "WGNCSS",
    "WGNCTL",
    "WGNFLB",
    "WGNFUL",
    "WGNHPR",
    "WGNISO",
    "WGNLQD",
    "WGNMNR",
    "WGNOPC",
    "WGNPAS",
    "WGNRFG",
    "WGNRPR",
    "WGNSPP",
    "WGNWAT",
    "WGNWFL"
  };

  const RailcarTypeSubcategoryCode::value RailcarTypeSubcategoryCode::
  _xsd_RailcarTypeSubcategoryCode_indexes_[26] =
  {
    ::oo_2_0::RailcarTypeSubcategoryCode::LCMDSE,
    ::oo_2_0::RailcarTypeSubcategoryCode::LCMDSL,
    ::oo_2_0::RailcarTypeSubcategoryCode::LCMELC,
    ::oo_2_0::RailcarTypeSubcategoryCode::LCMSTM,
    ::oo_2_0::RailcarTypeSubcategoryCode::LCMTND,
    ::oo_2_0::RailcarTypeSubcategoryCode::NKN,
    ::oo_2_0::RailcarTypeSubcategoryCode::NOS,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNART,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNBRK,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNCAR,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNCRG,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNCSS,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNCTL,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNFLB,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNFUL,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNHPR,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNISO,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNLQD,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNMNR,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNOPC,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNPAS,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNRFG,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNRPR,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNSPP,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNWAT,
    ::oo_2_0::RailcarTypeSubcategoryCode::WGNWFL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailcarTypeSubcategoryCode >
  _xsd_RailcarTypeSubcategoryCode_type_factory_init (
    "RailcarTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailwaySignalSystemCode
  //

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailwaySignalSystemCode_convert ();
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailwaySignalSystemCode_convert ();
  }

  RailwaySignalSystemCode::
  RailwaySignalSystemCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailwaySignalSystemCode_convert ();
  }

  RailwaySignalSystemCode* RailwaySignalSystemCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailwaySignalSystemCode (*this, f, c);
  }

  RailwaySignalSystemCode::value RailwaySignalSystemCode::
  _xsd_RailwaySignalSystemCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailwaySignalSystemCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailwaySignalSystemCode_indexes_,
                      _xsd_RailwaySignalSystemCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_RailwaySignalSystemCode_indexes_ + 7 || _xsd_RailwaySignalSystemCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailwaySignalSystemCode::
  _xsd_RailwaySignalSystemCode_literals_[7] =
  {
    "CL",
    "CP",
    "EL",
    "NKN",
    "PL",
    "SF",
    "Z"
  };

  const RailwaySignalSystemCode::value RailwaySignalSystemCode::
  _xsd_RailwaySignalSystemCode_indexes_[7] =
  {
    ::oo_2_0::RailwaySignalSystemCode::CL,
    ::oo_2_0::RailwaySignalSystemCode::CP,
    ::oo_2_0::RailwaySignalSystemCode::EL,
    ::oo_2_0::RailwaySignalSystemCode::NKN,
    ::oo_2_0::RailwaySignalSystemCode::PL,
    ::oo_2_0::RailwaySignalSystemCode::SF,
    ::oo_2_0::RailwaySignalSystemCode::Z
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailwaySignalSystemCode >
  _xsd_RailwaySignalSystemCode_type_factory_init (
    "RailwaySignalSystemCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailwaySignalSystemEfficiencyCode
  //

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailwaySignalSystemEfficiencyCode_convert ();
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailwaySignalSystemEfficiencyCode_convert ();
  }

  RailwaySignalSystemEfficiencyCode::
  RailwaySignalSystemEfficiencyCode (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailwaySignalSystemEfficiencyCode_convert ();
  }

  RailwaySignalSystemEfficiencyCode* RailwaySignalSystemEfficiencyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailwaySignalSystemEfficiencyCode (*this, f, c);
  }

  RailwaySignalSystemEfficiencyCode::value RailwaySignalSystemEfficiencyCode::
  _xsd_RailwaySignalSystemEfficiencyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailwaySignalSystemEfficiencyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailwaySignalSystemEfficiencyCode_indexes_,
                      _xsd_RailwaySignalSystemEfficiencyCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RailwaySignalSystemEfficiencyCode_indexes_ + 4 || _xsd_RailwaySignalSystemEfficiencyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailwaySignalSystemEfficiencyCode::
  _xsd_RailwaySignalSystemEfficiencyCode_literals_[4] =
  {
    "50",
    "70",
    "80",
    "85"
  };

  const RailwaySignalSystemEfficiencyCode::value RailwaySignalSystemEfficiencyCode::
  _xsd_RailwaySignalSystemEfficiencyCode_indexes_[4] =
  {
    ::oo_2_0::RailwaySignalSystemEfficiencyCode::cxx_50,
    ::oo_2_0::RailwaySignalSystemEfficiencyCode::cxx_70,
    ::oo_2_0::RailwaySignalSystemEfficiencyCode::cxx_80,
    ::oo_2_0::RailwaySignalSystemEfficiencyCode::cxx_85
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailwaySignalSystemEfficiencyCode >
  _xsd_RailwaySignalSystemEfficiencyCode_type_factory_init (
    "RailwaySignalSystemEfficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailwayTrackGaugeCode
  //

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailwayTrackGaugeCode_convert ();
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailwayTrackGaugeCode_convert ();
  }

  RailwayTrackGaugeCode::
  RailwayTrackGaugeCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailwayTrackGaugeCode_convert ();
  }

  RailwayTrackGaugeCode* RailwayTrackGaugeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailwayTrackGaugeCode (*this, f, c);
  }

  RailwayTrackGaugeCode::value RailwayTrackGaugeCode::
  _xsd_RailwayTrackGaugeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailwayTrackGaugeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailwayTrackGaugeCode_indexes_,
                      _xsd_RailwayTrackGaugeCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RailwayTrackGaugeCode_indexes_ + 2 || _xsd_RailwayTrackGaugeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailwayTrackGaugeCode::
  _xsd_RailwayTrackGaugeCode_literals_[2] =
  {
    "NAR",
    "STD"
  };

  const RailwayTrackGaugeCode::value RailwayTrackGaugeCode::
  _xsd_RailwayTrackGaugeCode_indexes_[2] =
  {
    ::oo_2_0::RailwayTrackGaugeCode::NAR,
    ::oo_2_0::RailwayTrackGaugeCode::STD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailwayTrackGaugeCode >
  _xsd_RailwayTrackGaugeCode_type_factory_init (
    "RailwayTrackGaugeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RailwayTractionSystemCode
  //

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RailwayTractionSystemCode_convert ();
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RailwayTractionSystemCode_convert ();
  }

  RailwayTractionSystemCode::
  RailwayTractionSystemCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RailwayTractionSystemCode_convert ();
  }

  RailwayTractionSystemCode* RailwayTractionSystemCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RailwayTractionSystemCode (*this, f, c);
  }

  RailwayTractionSystemCode::value RailwayTractionSystemCode::
  _xsd_RailwayTractionSystemCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RailwayTractionSystemCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RailwayTractionSystemCode_indexes_,
                      _xsd_RailwayTractionSystemCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RailwayTractionSystemCode_indexes_ + 2 || _xsd_RailwayTractionSystemCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RailwayTractionSystemCode::
  _xsd_RailwayTractionSystemCode_literals_[2] =
  {
    "E",
    "NE"
  };

  const RailwayTractionSystemCode::value RailwayTractionSystemCode::
  _xsd_RailwayTractionSystemCode_indexes_[2] =
  {
    ::oo_2_0::RailwayTractionSystemCode::E,
    ::oo_2_0::RailwayTractionSystemCode::NE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RailwayTractionSystemCode >
  _xsd_RailwayTractionSystemCode_type_factory_init (
    "RailwayTractionSystemCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationAssociationCategoryCode
  //

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationAssociationCategoryCode_convert ();
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationAssociationCategoryCode_convert ();
  }

  CitationAssociationCategoryCode::
  CitationAssociationCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationAssociationCategoryCode_convert ();
  }

  CitationAssociationCategoryCode* CitationAssociationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationAssociationCategoryCode (*this, f, c);
  }

  CitationAssociationCategoryCode::value CitationAssociationCategoryCode::
  _xsd_CitationAssociationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationAssociationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationAssociationCategoryCode_indexes_,
                      _xsd_CitationAssociationCategoryCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_CitationAssociationCategoryCode_indexes_ + 11 || _xsd_CitationAssociationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationAssociationCategoryCode::
  _xsd_CitationAssociationCategoryCode_literals_[11] =
  {
    "CANCEL",
    "GRPHDP",
    "INCLDE",
    "ISAMND",
    "ISATTC",
    "ISDRVD",
    "ISMODF",
    "PRVATH",
    "REFRNC",
    "SUPLMN",
    "SUPRCD"
  };

  const CitationAssociationCategoryCode::value CitationAssociationCategoryCode::
  _xsd_CitationAssociationCategoryCode_indexes_[11] =
  {
    ::oo_2_0::CitationAssociationCategoryCode::CANCEL,
    ::oo_2_0::CitationAssociationCategoryCode::GRPHDP,
    ::oo_2_0::CitationAssociationCategoryCode::INCLDE,
    ::oo_2_0::CitationAssociationCategoryCode::ISAMND,
    ::oo_2_0::CitationAssociationCategoryCode::ISATTC,
    ::oo_2_0::CitationAssociationCategoryCode::ISDRVD,
    ::oo_2_0::CitationAssociationCategoryCode::ISMODF,
    ::oo_2_0::CitationAssociationCategoryCode::PRVATH,
    ::oo_2_0::CitationAssociationCategoryCode::REFRNC,
    ::oo_2_0::CitationAssociationCategoryCode::SUPLMN,
    ::oo_2_0::CitationAssociationCategoryCode::SUPRCD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationAssociationCategoryCode >
  _xsd_CitationAssociationCategoryCode_type_factory_init (
    "CitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationContentCategoryCode
  //

  CitationContentCategoryCode::
  CitationContentCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationContentCategoryCode_convert ();
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationContentCategoryCode_convert ();
  }

  CitationContentCategoryCode::
  CitationContentCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationContentCategoryCode_convert ();
  }

  CitationContentCategoryCode* CitationContentCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationContentCategoryCode (*this, f, c);
  }

  CitationContentCategoryCode::value CitationContentCategoryCode::
  _xsd_CitationContentCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationContentCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationContentCategoryCode_indexes_,
                      _xsd_CitationContentCategoryCode_indexes_ + 20,
                      *this,
                      c));

    if (i == _xsd_CitationContentCategoryCode_indexes_ + 20 || _xsd_CitationContentCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationContentCategoryCode::
  _xsd_CitationContentCategoryCode_literals_[20] =
  {
    "ADMDOC",
    "AUTHRS",
    "CERTFC",
    "DRCTV",
    "GUIDNC",
    "HISDOC",
    "HLTDOC",
    "IDDOC",
    "INSTRC",
    "LGLDOC",
    "MAP",
    "MTF",
    "NOS",
    "ORDER",
    "PERDOC",
    "REPORT",
    "STFFJR",
    "TECDOC",
    "TEMPLT",
    "TSTDOC"
  };

  const CitationContentCategoryCode::value CitationContentCategoryCode::
  _xsd_CitationContentCategoryCode_indexes_[20] =
  {
    ::oo_2_0::CitationContentCategoryCode::ADMDOC,
    ::oo_2_0::CitationContentCategoryCode::AUTHRS,
    ::oo_2_0::CitationContentCategoryCode::CERTFC,
    ::oo_2_0::CitationContentCategoryCode::DRCTV,
    ::oo_2_0::CitationContentCategoryCode::GUIDNC,
    ::oo_2_0::CitationContentCategoryCode::HISDOC,
    ::oo_2_0::CitationContentCategoryCode::HLTDOC,
    ::oo_2_0::CitationContentCategoryCode::IDDOC,
    ::oo_2_0::CitationContentCategoryCode::INSTRC,
    ::oo_2_0::CitationContentCategoryCode::LGLDOC,
    ::oo_2_0::CitationContentCategoryCode::MAP,
    ::oo_2_0::CitationContentCategoryCode::MTF,
    ::oo_2_0::CitationContentCategoryCode::NOS,
    ::oo_2_0::CitationContentCategoryCode::ORDER,
    ::oo_2_0::CitationContentCategoryCode::PERDOC,
    ::oo_2_0::CitationContentCategoryCode::REPORT,
    ::oo_2_0::CitationContentCategoryCode::STFFJR,
    ::oo_2_0::CitationContentCategoryCode::TECDOC,
    ::oo_2_0::CitationContentCategoryCode::TEMPLT,
    ::oo_2_0::CitationContentCategoryCode::TSTDOC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationContentCategoryCode >
  _xsd_CitationContentCategoryCode_type_factory_init (
    "CitationContentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationLifecycleCode
  //

  CitationLifecycleCode::
  CitationLifecycleCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationLifecycleCode_convert ();
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationLifecycleCode_convert ();
  }

  CitationLifecycleCode::
  CitationLifecycleCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationLifecycleCode_convert ();
  }

  CitationLifecycleCode* CitationLifecycleCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationLifecycleCode (*this, f, c);
  }

  CitationLifecycleCode::value CitationLifecycleCode::
  _xsd_CitationLifecycleCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationLifecycleCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationLifecycleCode_indexes_,
                      _xsd_CitationLifecycleCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CitationLifecycleCode_indexes_ + 3 || _xsd_CitationLifecycleCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationLifecycleCode::
  _xsd_CitationLifecycleCode_literals_[3] =
  {
    "DRAFT",
    "FINAL",
    "OBSLTE"
  };

  const CitationLifecycleCode::value CitationLifecycleCode::
  _xsd_CitationLifecycleCode_indexes_[3] =
  {
    ::oo_2_0::CitationLifecycleCode::DRAFT,
    ::oo_2_0::CitationLifecycleCode::FINAL,
    ::oo_2_0::CitationLifecycleCode::OBSLTE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationLifecycleCode >
  _xsd_CitationLifecycleCode_type_factory_init (
    "CitationLifecycleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationMediumTypeCode
  //

  CitationMediumTypeCode::
  CitationMediumTypeCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationMediumTypeCode_convert ();
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationMediumTypeCode_convert ();
  }

  CitationMediumTypeCode::
  CitationMediumTypeCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationMediumTypeCode_convert ();
  }

  CitationMediumTypeCode* CitationMediumTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationMediumTypeCode (*this, f, c);
  }

  CitationMediumTypeCode::value CitationMediumTypeCode::
  _xsd_CitationMediumTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationMediumTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationMediumTypeCode_indexes_,
                      _xsd_CitationMediumTypeCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_CitationMediumTypeCode_indexes_ + 7 || _xsd_CitationMediumTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationMediumTypeCode::
  _xsd_CitationMediumTypeCode_literals_[7] =
  {
    "ELCFLD",
    "ELCFLN",
    "FILM",
    "MAGTPE",
    "NKN",
    "NOS",
    "PAPERB"
  };

  const CitationMediumTypeCode::value CitationMediumTypeCode::
  _xsd_CitationMediumTypeCode_indexes_[7] =
  {
    ::oo_2_0::CitationMediumTypeCode::ELCFLD,
    ::oo_2_0::CitationMediumTypeCode::ELCFLN,
    ::oo_2_0::CitationMediumTypeCode::FILM,
    ::oo_2_0::CitationMediumTypeCode::MAGTPE,
    ::oo_2_0::CitationMediumTypeCode::NKN,
    ::oo_2_0::CitationMediumTypeCode::NOS,
    ::oo_2_0::CitationMediumTypeCode::PAPERB
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationMediumTypeCode >
  _xsd_CitationMediumTypeCode_type_factory_init (
    "CitationMediumTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationTransmittalTypeCode
  //

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationTransmittalTypeCode_convert ();
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationTransmittalTypeCode_convert ();
  }

  CitationTransmittalTypeCode::
  CitationTransmittalTypeCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationTransmittalTypeCode_convert ();
  }

  CitationTransmittalTypeCode* CitationTransmittalTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationTransmittalTypeCode (*this, f, c);
  }

  CitationTransmittalTypeCode::value CitationTransmittalTypeCode::
  _xsd_CitationTransmittalTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationTransmittalTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationTransmittalTypeCode_indexes_,
                      _xsd_CitationTransmittalTypeCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_CitationTransmittalTypeCode_indexes_ + 11 || _xsd_CitationTransmittalTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationTransmittalTypeCode::
  _xsd_CitationTransmittalTypeCode_literals_[11] =
  {
    "COUMSG",
    "ELCTRF",
    "EMLMSG",
    "FAXMSG",
    "NKN",
    "NOS",
    "PHNMSG",
    "RADMSG",
    "SFXMSG",
    "TELEX",
    "VIDEO"
  };

  const CitationTransmittalTypeCode::value CitationTransmittalTypeCode::
  _xsd_CitationTransmittalTypeCode_indexes_[11] =
  {
    ::oo_2_0::CitationTransmittalTypeCode::COUMSG,
    ::oo_2_0::CitationTransmittalTypeCode::ELCTRF,
    ::oo_2_0::CitationTransmittalTypeCode::EMLMSG,
    ::oo_2_0::CitationTransmittalTypeCode::FAXMSG,
    ::oo_2_0::CitationTransmittalTypeCode::NKN,
    ::oo_2_0::CitationTransmittalTypeCode::NOS,
    ::oo_2_0::CitationTransmittalTypeCode::PHNMSG,
    ::oo_2_0::CitationTransmittalTypeCode::RADMSG,
    ::oo_2_0::CitationTransmittalTypeCode::SFXMSG,
    ::oo_2_0::CitationTransmittalTypeCode::TELEX,
    ::oo_2_0::CitationTransmittalTypeCode::VIDEO
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationTransmittalTypeCode >
  _xsd_CitationTransmittalTypeCode_type_factory_init (
    "CitationTransmittalTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // CitationVerificationCode
  //

  CitationVerificationCode::
  CitationVerificationCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_CitationVerificationCode_convert ();
  }

  CitationVerificationCode::
  CitationVerificationCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_CitationVerificationCode_convert ();
  }

  CitationVerificationCode::
  CitationVerificationCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_CitationVerificationCode_convert ();
  }

  CitationVerificationCode* CitationVerificationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CitationVerificationCode (*this, f, c);
  }

  CitationVerificationCode::value CitationVerificationCode::
  _xsd_CitationVerificationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CitationVerificationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CitationVerificationCode_indexes_,
                      _xsd_CitationVerificationCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CitationVerificationCode_indexes_ + 3 || _xsd_CitationVerificationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CitationVerificationCode::
  _xsd_CitationVerificationCode_literals_[3] =
  {
    "REFUNV",
    "REFVER",
    "REFVNA"
  };

  const CitationVerificationCode::value CitationVerificationCode::
  _xsd_CitationVerificationCode_indexes_[3] =
  {
    ::oo_2_0::CitationVerificationCode::REFUNV,
    ::oo_2_0::CitationVerificationCode::REFVER,
    ::oo_2_0::CitationVerificationCode::REFVNA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CitationVerificationCode >
  _xsd_CitationVerificationCode_type_factory_init (
    "CitationVerificationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RelativeCoordinateSystemCitationCategoryCode
  //

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RelativeCoordinateSystemCitationCategoryCode_convert ();
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RelativeCoordinateSystemCitationCategoryCode_convert ();
  }

  RelativeCoordinateSystemCitationCategoryCode::
  RelativeCoordinateSystemCitationCategoryCode (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RelativeCoordinateSystemCitationCategoryCode_convert ();
  }

  RelativeCoordinateSystemCitationCategoryCode* RelativeCoordinateSystemCitationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RelativeCoordinateSystemCitationCategoryCode (*this, f, c);
  }

  RelativeCoordinateSystemCitationCategoryCode::value RelativeCoordinateSystemCitationCategoryCode::
  _xsd_RelativeCoordinateSystemCitationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RelativeCoordinateSystemCitationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RelativeCoordinateSystemCitationCategoryCode_indexes_,
                      _xsd_RelativeCoordinateSystemCitationCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RelativeCoordinateSystemCitationCategoryCode_indexes_ + 2 || _xsd_RelativeCoordinateSystemCitationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RelativeCoordinateSystemCitationCategoryCode::
  _xsd_RelativeCoordinateSystemCitationCategoryCode_literals_[2] =
  {
    "OBJREF",
    "PNTREF"
  };

  const RelativeCoordinateSystemCitationCategoryCode::value RelativeCoordinateSystemCitationCategoryCode::
  _xsd_RelativeCoordinateSystemCitationCategoryCode_indexes_[2] =
  {
    ::oo_2_0::RelativeCoordinateSystemCitationCategoryCode::OBJREF,
    ::oo_2_0::RelativeCoordinateSystemCitationCategoryCode::PNTREF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RelativeCoordinateSystemCitationCategoryCode >
  _xsd_RelativeCoordinateSystemCitationCategoryCode_type_factory_init (
    "RelativeCoordinateSystemCitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReleaseCategoryCode
  //

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReleaseCategoryCode_convert ();
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReleaseCategoryCode_convert ();
  }

  ReleaseCategoryCode::
  ReleaseCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReleaseCategoryCode_convert ();
  }

  ReleaseCategoryCode* ReleaseCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReleaseCategoryCode (*this, f, c);
  }

  ReleaseCategoryCode::value ReleaseCategoryCode::
  _xsd_ReleaseCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReleaseCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReleaseCategoryCode_indexes_,
                      _xsd_ReleaseCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ReleaseCategoryCode_indexes_ + 5 || _xsd_ReleaseCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReleaseCategoryCode::
  _xsd_ReleaseCategoryCode_literals_[5] =
  {
    "CONT",
    "NKN",
    "NOS",
    "PUFF",
    "SPRAY"
  };

  const ReleaseCategoryCode::value ReleaseCategoryCode::
  _xsd_ReleaseCategoryCode_indexes_[5] =
  {
    ::oo_2_0::ReleaseCategoryCode::CONT,
    ::oo_2_0::ReleaseCategoryCode::NKN,
    ::oo_2_0::ReleaseCategoryCode::NOS,
    ::oo_2_0::ReleaseCategoryCode::PUFF,
    ::oo_2_0::ReleaseCategoryCode::SPRAY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReleaseCategoryCode >
  _xsd_ReleaseCategoryCode_type_factory_init (
    "ReleaseCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataAccuracyCode
  //

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataAccuracyCode_convert ();
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataAccuracyCode_convert ();
  }

  ReportingDataAccuracyCode::
  ReportingDataAccuracyCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataAccuracyCode_convert ();
  }

  ReportingDataAccuracyCode* ReportingDataAccuracyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataAccuracyCode (*this, f, c);
  }

  ReportingDataAccuracyCode::value ReportingDataAccuracyCode::
  _xsd_ReportingDataAccuracyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataAccuracyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataAccuracyCode_indexes_,
                      _xsd_ReportingDataAccuracyCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ReportingDataAccuracyCode_indexes_ + 6 || _xsd_ReportingDataAccuracyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataAccuracyCode::
  _xsd_ReportingDataAccuracyCode_literals_[6] =
  {
    "1",
    "2",
    "3",
    "4",
    "5",
    "6"
  };

  const ReportingDataAccuracyCode::value ReportingDataAccuracyCode::
  _xsd_ReportingDataAccuracyCode_indexes_[6] =
  {
    ::oo_2_0::ReportingDataAccuracyCode::cxx_1,
    ::oo_2_0::ReportingDataAccuracyCode::cxx_2,
    ::oo_2_0::ReportingDataAccuracyCode::cxx_3,
    ::oo_2_0::ReportingDataAccuracyCode::cxx_4,
    ::oo_2_0::ReportingDataAccuracyCode::cxx_5,
    ::oo_2_0::ReportingDataAccuracyCode::cxx_6
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataAccuracyCode >
  _xsd_ReportingDataAccuracyCode_type_factory_init (
    "ReportingDataAccuracyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataCategoryCode
  //

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataCategoryCode_convert ();
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataCategoryCode_convert ();
  }

  ReportingDataCategoryCode::
  ReportingDataCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataCategoryCode_convert ();
  }

  ReportingDataCategoryCode* ReportingDataCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataCategoryCode (*this, f, c);
  }

  ReportingDataCategoryCode::value ReportingDataCategoryCode::
  _xsd_ReportingDataCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataCategoryCode_indexes_,
                      _xsd_ReportingDataCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ReportingDataCategoryCode_indexes_ + 6 || _xsd_ReportingDataCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataCategoryCode::
  _xsd_ReportingDataCategoryCode_literals_[6] =
  {
    "ASS",
    "ERR",
    "INFER",
    "PLAN",
    "PRDCTD",
    "REP"
  };

  const ReportingDataCategoryCode::value ReportingDataCategoryCode::
  _xsd_ReportingDataCategoryCode_indexes_[6] =
  {
    ::oo_2_0::ReportingDataCategoryCode::ASS,
    ::oo_2_0::ReportingDataCategoryCode::ERR,
    ::oo_2_0::ReportingDataCategoryCode::INFER,
    ::oo_2_0::ReportingDataCategoryCode::PLAN,
    ::oo_2_0::ReportingDataCategoryCode::PRDCTD,
    ::oo_2_0::ReportingDataCategoryCode::REP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataCategoryCode >
  _xsd_ReportingDataCategoryCode_type_factory_init (
    "ReportingDataCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataCountingIndicatorCode
  //

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataCountingIndicatorCode_convert ();
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataCountingIndicatorCode_convert ();
  }

  ReportingDataCountingIndicatorCode::
  ReportingDataCountingIndicatorCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataCountingIndicatorCode_convert ();
  }

  ReportingDataCountingIndicatorCode* ReportingDataCountingIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataCountingIndicatorCode (*this, f, c);
  }

  ReportingDataCountingIndicatorCode::value ReportingDataCountingIndicatorCode::
  _xsd_ReportingDataCountingIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataCountingIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataCountingIndicatorCode_indexes_,
                      _xsd_ReportingDataCountingIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_ReportingDataCountingIndicatorCode_indexes_ + 2 || _xsd_ReportingDataCountingIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataCountingIndicatorCode::
  _xsd_ReportingDataCountingIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const ReportingDataCountingIndicatorCode::value ReportingDataCountingIndicatorCode::
  _xsd_ReportingDataCountingIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::ReportingDataCountingIndicatorCode::NO,
    ::oo_2_0::ReportingDataCountingIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataCountingIndicatorCode >
  _xsd_ReportingDataCountingIndicatorCode_type_factory_init (
    "ReportingDataCountingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataCredibilityCode
  //

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataCredibilityCode_convert ();
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataCredibilityCode_convert ();
  }

  ReportingDataCredibilityCode::
  ReportingDataCredibilityCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataCredibilityCode_convert ();
  }

  ReportingDataCredibilityCode* ReportingDataCredibilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataCredibilityCode (*this, f, c);
  }

  ReportingDataCredibilityCode::value ReportingDataCredibilityCode::
  _xsd_ReportingDataCredibilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataCredibilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataCredibilityCode_indexes_,
                      _xsd_ReportingDataCredibilityCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_ReportingDataCredibilityCode_indexes_ + 4 || _xsd_ReportingDataCredibilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataCredibilityCode::
  _xsd_ReportingDataCredibilityCode_literals_[4] =
  {
    "IND",
    "RPTFCT",
    "RPTPLA",
    "RPTUNC"
  };

  const ReportingDataCredibilityCode::value ReportingDataCredibilityCode::
  _xsd_ReportingDataCredibilityCode_indexes_[4] =
  {
    ::oo_2_0::ReportingDataCredibilityCode::IND,
    ::oo_2_0::ReportingDataCredibilityCode::RPTFCT,
    ::oo_2_0::ReportingDataCredibilityCode::RPTPLA,
    ::oo_2_0::ReportingDataCredibilityCode::RPTUNC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataCredibilityCode >
  _xsd_ReportingDataCredibilityCode_type_factory_init (
    "ReportingDataCredibilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataEntityCategoryCode
  //

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataEntityCategoryCode_convert ();
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataEntityCategoryCode_convert ();
  }

  ReportingDataEntityCategoryCode::
  ReportingDataEntityCategoryCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataEntityCategoryCode_convert ();
  }

  ReportingDataEntityCategoryCode* ReportingDataEntityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataEntityCategoryCode (*this, f, c);
  }

  ReportingDataEntityCategoryCode::value ReportingDataEntityCategoryCode::
  _xsd_ReportingDataEntityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataEntityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataEntityCategoryCode_indexes_,
                      _xsd_ReportingDataEntityCategoryCode_indexes_ + 24,
                      *this,
                      c));

    if (i == _xsd_ReportingDataEntityCategoryCode_indexes_ + 24 || _xsd_ReportingDataEntityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataEntityCategoryCode::
  _xsd_ReportingDataEntityCategoryCode_literals_[24] =
  {
    "ACTEFF",
    "ACTEVD",
    "ACTEVS",
    "ACTLOC",
    "ACTTST",
    "CNTASS",
    "CTDAUT",
    "CTLAUT",
    "CTLIST",
    "HLDTRF",
    "HOLDNG",
    "NTSRST",
    "OIADDR",
    "OIAFFL",
    "OIASST",
    "OICAPA",
    "OIGRPA",
    "OIHSTS",
    "OILOCA",
    "OISTAT",
    "OITYPE",
    "ORGSTR",
    "REQANS",
    "TPRSPR"
  };

  const ReportingDataEntityCategoryCode::value ReportingDataEntityCategoryCode::
  _xsd_ReportingDataEntityCategoryCode_indexes_[24] =
  {
    ::oo_2_0::ReportingDataEntityCategoryCode::ACTEFF,
    ::oo_2_0::ReportingDataEntityCategoryCode::ACTEVD,
    ::oo_2_0::ReportingDataEntityCategoryCode::ACTEVS,
    ::oo_2_0::ReportingDataEntityCategoryCode::ACTLOC,
    ::oo_2_0::ReportingDataEntityCategoryCode::ACTTST,
    ::oo_2_0::ReportingDataEntityCategoryCode::CNTASS,
    ::oo_2_0::ReportingDataEntityCategoryCode::CTDAUT,
    ::oo_2_0::ReportingDataEntityCategoryCode::CTLAUT,
    ::oo_2_0::ReportingDataEntityCategoryCode::CTLIST,
    ::oo_2_0::ReportingDataEntityCategoryCode::HLDTRF,
    ::oo_2_0::ReportingDataEntityCategoryCode::HOLDNG,
    ::oo_2_0::ReportingDataEntityCategoryCode::NTSRST,
    ::oo_2_0::ReportingDataEntityCategoryCode::OIADDR,
    ::oo_2_0::ReportingDataEntityCategoryCode::OIAFFL,
    ::oo_2_0::ReportingDataEntityCategoryCode::OIASST,
    ::oo_2_0::ReportingDataEntityCategoryCode::OICAPA,
    ::oo_2_0::ReportingDataEntityCategoryCode::OIGRPA,
    ::oo_2_0::ReportingDataEntityCategoryCode::OIHSTS,
    ::oo_2_0::ReportingDataEntityCategoryCode::OILOCA,
    ::oo_2_0::ReportingDataEntityCategoryCode::OISTAT,
    ::oo_2_0::ReportingDataEntityCategoryCode::OITYPE,
    ::oo_2_0::ReportingDataEntityCategoryCode::ORGSTR,
    ::oo_2_0::ReportingDataEntityCategoryCode::REQANS,
    ::oo_2_0::ReportingDataEntityCategoryCode::TPRSPR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataEntityCategoryCode >
  _xsd_ReportingDataEntityCategoryCode_type_factory_init (
    "ReportingDataEntityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataRealDataExerciseUseOnlyCode
  //

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataRealDataExerciseUseOnlyCode_convert ();
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataRealDataExerciseUseOnlyCode_convert ();
  }

  ReportingDataRealDataExerciseUseOnlyCode::
  ReportingDataRealDataExerciseUseOnlyCode (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataRealDataExerciseUseOnlyCode_convert ();
  }

  ReportingDataRealDataExerciseUseOnlyCode* ReportingDataRealDataExerciseUseOnlyCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataRealDataExerciseUseOnlyCode (*this, f, c);
  }

  ReportingDataRealDataExerciseUseOnlyCode::value ReportingDataRealDataExerciseUseOnlyCode::
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataRealDataExerciseUseOnlyCode_indexes_,
                      _xsd_ReportingDataRealDataExerciseUseOnlyCode_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_ReportingDataRealDataExerciseUseOnlyCode_indexes_ + 1 || _xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataRealDataExerciseUseOnlyCode::
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_[1] =
  {
    "REAL"
  };

  const ReportingDataRealDataExerciseUseOnlyCode::value ReportingDataRealDataExerciseUseOnlyCode::
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_indexes_[1] =
  {
    ::oo_2_0::ReportingDataRealDataExerciseUseOnlyCode::REAL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataRealDataExerciseUseOnlyCode >
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_type_factory_init (
    "ReportingDataRealDataExerciseUseOnlyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataReliabilityCode
  //

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataReliabilityCode_convert ();
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataReliabilityCode_convert ();
  }

  ReportingDataReliabilityCode::
  ReportingDataReliabilityCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataReliabilityCode_convert ();
  }

  ReportingDataReliabilityCode* ReportingDataReliabilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataReliabilityCode (*this, f, c);
  }

  ReportingDataReliabilityCode::value ReportingDataReliabilityCode::
  _xsd_ReportingDataReliabilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataReliabilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataReliabilityCode_indexes_,
                      _xsd_ReportingDataReliabilityCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_ReportingDataReliabilityCode_indexes_ + 6 || _xsd_ReportingDataReliabilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataReliabilityCode::
  _xsd_ReportingDataReliabilityCode_literals_[6] =
  {
    "A",
    "B",
    "C",
    "D",
    "E",
    "F"
  };

  const ReportingDataReliabilityCode::value ReportingDataReliabilityCode::
  _xsd_ReportingDataReliabilityCode_indexes_[6] =
  {
    ::oo_2_0::ReportingDataReliabilityCode::A,
    ::oo_2_0::ReportingDataReliabilityCode::B,
    ::oo_2_0::ReportingDataReliabilityCode::C,
    ::oo_2_0::ReportingDataReliabilityCode::D,
    ::oo_2_0::ReportingDataReliabilityCode::E,
    ::oo_2_0::ReportingDataReliabilityCode::F
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataReliabilityCode >
  _xsd_ReportingDataReliabilityCode_type_factory_init (
    "ReportingDataReliabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataSourceTypeCode
  //

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataSourceTypeCode_convert ();
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataSourceTypeCode_convert ();
  }

  ReportingDataSourceTypeCode::
  ReportingDataSourceTypeCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataSourceTypeCode_convert ();
  }

  ReportingDataSourceTypeCode* ReportingDataSourceTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataSourceTypeCode (*this, f, c);
  }

  ReportingDataSourceTypeCode::value ReportingDataSourceTypeCode::
  _xsd_ReportingDataSourceTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataSourceTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataSourceTypeCode_indexes_,
                      _xsd_ReportingDataSourceTypeCode_indexes_ + 35,
                      *this,
                      c));

    if (i == _xsd_ReportingDataSourceTypeCode_indexes_ + 35 || _xsd_ReportingDataSourceTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataSourceTypeCode::
  _xsd_ReportingDataSourceTypeCode_literals_[35] =
  {
    "AIRIFR",
    "AIRREC",
    "AOBSR",
    "ARTOBS",
    "CAPDOC",
    "CAPMAT",
    "CBRR",
    "CMRR",
    "COMINT",
    "CONTAC",
    "DEFECT",
    "ELINT",
    "EYOBSN",
    "FLRNG",
    "FO",
    "FOWOL",
    "GRDREC",
    "GSRA",
    "HUMINT",
    "INFLIT",
    "LRRP",
    "OBSR",
    "PI",
    "POW",
    "REFUGE",
    "RPV",
    "SAT",
    "SIGINT",
    "SLAR",
    "SORNG",
    "TACAIR",
    "TGTB",
    "UGS",
    "UNSPEC",
    "VARI"
  };

  const ReportingDataSourceTypeCode::value ReportingDataSourceTypeCode::
  _xsd_ReportingDataSourceTypeCode_indexes_[35] =
  {
    ::oo_2_0::ReportingDataSourceTypeCode::AIRIFR,
    ::oo_2_0::ReportingDataSourceTypeCode::AIRREC,
    ::oo_2_0::ReportingDataSourceTypeCode::AOBSR,
    ::oo_2_0::ReportingDataSourceTypeCode::ARTOBS,
    ::oo_2_0::ReportingDataSourceTypeCode::CAPDOC,
    ::oo_2_0::ReportingDataSourceTypeCode::CAPMAT,
    ::oo_2_0::ReportingDataSourceTypeCode::CBRR,
    ::oo_2_0::ReportingDataSourceTypeCode::CMRR,
    ::oo_2_0::ReportingDataSourceTypeCode::COMINT,
    ::oo_2_0::ReportingDataSourceTypeCode::CONTAC,
    ::oo_2_0::ReportingDataSourceTypeCode::DEFECT,
    ::oo_2_0::ReportingDataSourceTypeCode::ELINT,
    ::oo_2_0::ReportingDataSourceTypeCode::EYOBSN,
    ::oo_2_0::ReportingDataSourceTypeCode::FLRNG,
    ::oo_2_0::ReportingDataSourceTypeCode::FO,
    ::oo_2_0::ReportingDataSourceTypeCode::FOWOL,
    ::oo_2_0::ReportingDataSourceTypeCode::GRDREC,
    ::oo_2_0::ReportingDataSourceTypeCode::GSRA,
    ::oo_2_0::ReportingDataSourceTypeCode::HUMINT,
    ::oo_2_0::ReportingDataSourceTypeCode::INFLIT,
    ::oo_2_0::ReportingDataSourceTypeCode::LRRP,
    ::oo_2_0::ReportingDataSourceTypeCode::OBSR,
    ::oo_2_0::ReportingDataSourceTypeCode::PI,
    ::oo_2_0::ReportingDataSourceTypeCode::POW,
    ::oo_2_0::ReportingDataSourceTypeCode::REFUGE,
    ::oo_2_0::ReportingDataSourceTypeCode::RPV,
    ::oo_2_0::ReportingDataSourceTypeCode::SAT,
    ::oo_2_0::ReportingDataSourceTypeCode::SIGINT,
    ::oo_2_0::ReportingDataSourceTypeCode::SLAR,
    ::oo_2_0::ReportingDataSourceTypeCode::SORNG,
    ::oo_2_0::ReportingDataSourceTypeCode::TACAIR,
    ::oo_2_0::ReportingDataSourceTypeCode::TGTB,
    ::oo_2_0::ReportingDataSourceTypeCode::UGS,
    ::oo_2_0::ReportingDataSourceTypeCode::UNSPEC,
    ::oo_2_0::ReportingDataSourceTypeCode::VARI
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataSourceTypeCode >
  _xsd_ReportingDataSourceTypeCode_type_factory_init (
    "ReportingDataSourceTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // ReportingDataTimingCategoryCode
  //

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_ReportingDataTimingCategoryCode_convert ();
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_ReportingDataTimingCategoryCode_convert ();
  }

  ReportingDataTimingCategoryCode::
  ReportingDataTimingCategoryCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_ReportingDataTimingCategoryCode_convert ();
  }

  ReportingDataTimingCategoryCode* ReportingDataTimingCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ReportingDataTimingCategoryCode (*this, f, c);
  }

  ReportingDataTimingCategoryCode::value ReportingDataTimingCategoryCode::
  _xsd_ReportingDataTimingCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ReportingDataTimingCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ReportingDataTimingCategoryCode_indexes_,
                      _xsd_ReportingDataTimingCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_ReportingDataTimingCategoryCode_indexes_ + 3 || _xsd_ReportingDataTimingCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ReportingDataTimingCategoryCode::
  _xsd_ReportingDataTimingCategoryCode_literals_[3] =
  {
    "RDABST",
    "RDRELT",
    "TIMNA"
  };

  const ReportingDataTimingCategoryCode::value ReportingDataTimingCategoryCode::
  _xsd_ReportingDataTimingCategoryCode_indexes_[3] =
  {
    ::oo_2_0::ReportingDataTimingCategoryCode::RDABST,
    ::oo_2_0::ReportingDataTimingCategoryCode::RDRELT,
    ::oo_2_0::ReportingDataTimingCategoryCode::TIMNA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReportingDataTimingCategoryCode >
  _xsd_ReportingDataTimingCategoryCode_type_factory_init (
    "ReportingDataTimingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RequestAnswerCategoryCode
  //

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RequestAnswerCategoryCode_convert ();
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RequestAnswerCategoryCode_convert ();
  }

  RequestAnswerCategoryCode::
  RequestAnswerCategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RequestAnswerCategoryCode_convert ();
  }

  RequestAnswerCategoryCode* RequestAnswerCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RequestAnswerCategoryCode (*this, f, c);
  }

  RequestAnswerCategoryCode::value RequestAnswerCategoryCode::
  _xsd_RequestAnswerCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RequestAnswerCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RequestAnswerCategoryCode_indexes_,
                      _xsd_RequestAnswerCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RequestAnswerCategoryCode_indexes_ + 4 || _xsd_RequestAnswerCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RequestAnswerCategoryCode::
  _xsd_RequestAnswerCategoryCode_literals_[4] =
  {
    "NO",
    "UNA",
    "UNK",
    "YES"
  };

  const RequestAnswerCategoryCode::value RequestAnswerCategoryCode::
  _xsd_RequestAnswerCategoryCode_indexes_[4] =
  {
    ::oo_2_0::RequestAnswerCategoryCode::NO,
    ::oo_2_0::RequestAnswerCategoryCode::UNA,
    ::oo_2_0::RequestAnswerCategoryCode::UNK,
    ::oo_2_0::RequestAnswerCategoryCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RequestAnswerCategoryCode >
  _xsd_RequestAnswerCategoryCode_type_factory_init (
    "RequestAnswerCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RequestCategoryCode
  //

  RequestCategoryCode::
  RequestCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RequestCategoryCode_convert ();
  }

  RequestCategoryCode::
  RequestCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RequestCategoryCode_convert ();
  }

  RequestCategoryCode::
  RequestCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RequestCategoryCode_convert ();
  }

  RequestCategoryCode* RequestCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RequestCategoryCode (*this, f, c);
  }

  RequestCategoryCode::value RequestCategoryCode::
  _xsd_RequestCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RequestCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RequestCategoryCode_indexes_,
                      _xsd_RequestCategoryCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_RequestCategoryCode_indexes_ + 9 || _xsd_RequestCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RequestCategoryCode::
  _xsd_RequestCategoryCode_literals_[9] =
  {
    "ACTION",
    "ASSOC",
    "CAPAB",
    "HOLDNG",
    "HOSTIL",
    "LOCATN",
    "PRESNC",
    "STATUS",
    "TYPE"
  };

  const RequestCategoryCode::value RequestCategoryCode::
  _xsd_RequestCategoryCode_indexes_[9] =
  {
    ::oo_2_0::RequestCategoryCode::ACTION,
    ::oo_2_0::RequestCategoryCode::ASSOC,
    ::oo_2_0::RequestCategoryCode::CAPAB,
    ::oo_2_0::RequestCategoryCode::HOLDNG,
    ::oo_2_0::RequestCategoryCode::HOSTIL,
    ::oo_2_0::RequestCategoryCode::LOCATN,
    ::oo_2_0::RequestCategoryCode::PRESNC,
    ::oo_2_0::RequestCategoryCode::STATUS,
    ::oo_2_0::RequestCategoryCode::TYPE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RequestCategoryCode >
  _xsd_RequestCategoryCode_type_factory_init (
    "RequestCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RequestImmediateInterestIndicatorCode
  //

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RequestImmediateInterestIndicatorCode_convert ();
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RequestImmediateInterestIndicatorCode_convert ();
  }

  RequestImmediateInterestIndicatorCode::
  RequestImmediateInterestIndicatorCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RequestImmediateInterestIndicatorCode_convert ();
  }

  RequestImmediateInterestIndicatorCode* RequestImmediateInterestIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RequestImmediateInterestIndicatorCode (*this, f, c);
  }

  RequestImmediateInterestIndicatorCode::value RequestImmediateInterestIndicatorCode::
  _xsd_RequestImmediateInterestIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RequestImmediateInterestIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RequestImmediateInterestIndicatorCode_indexes_,
                      _xsd_RequestImmediateInterestIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RequestImmediateInterestIndicatorCode_indexes_ + 2 || _xsd_RequestImmediateInterestIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RequestImmediateInterestIndicatorCode::
  _xsd_RequestImmediateInterestIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const RequestImmediateInterestIndicatorCode::value RequestImmediateInterestIndicatorCode::
  _xsd_RequestImmediateInterestIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::RequestImmediateInterestIndicatorCode::NO,
    ::oo_2_0::RequestImmediateInterestIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RequestImmediateInterestIndicatorCode >
  _xsd_RequestImmediateInterestIndicatorCode_type_factory_init (
    "RequestImmediateInterestIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RoadCategoryCode
  //

  RoadCategoryCode::
  RoadCategoryCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RoadCategoryCode_convert ();
  }

  RoadCategoryCode::
  RoadCategoryCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RoadCategoryCode_convert ();
  }

  RoadCategoryCode::
  RoadCategoryCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RoadCategoryCode_convert ();
  }

  RoadCategoryCode* RoadCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RoadCategoryCode (*this, f, c);
  }

  RoadCategoryCode::value RoadCategoryCode::
  _xsd_RoadCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RoadCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RoadCategoryCode_indexes_,
                      _xsd_RoadCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_RoadCategoryCode_indexes_ + 8 || _xsd_RoadCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RoadCategoryCode::
  _xsd_RoadCategoryCode_literals_[8] =
  {
    "A",
    "B",
    "C",
    "D",
    "E",
    "NOS",
    "P",
    "R"
  };

  const RoadCategoryCode::value RoadCategoryCode::
  _xsd_RoadCategoryCode_indexes_[8] =
  {
    ::oo_2_0::RoadCategoryCode::A,
    ::oo_2_0::RoadCategoryCode::B,
    ::oo_2_0::RoadCategoryCode::C,
    ::oo_2_0::RoadCategoryCode::D,
    ::oo_2_0::RoadCategoryCode::E,
    ::oo_2_0::RoadCategoryCode::NOS,
    ::oo_2_0::RoadCategoryCode::P,
    ::oo_2_0::RoadCategoryCode::R
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RoadCategoryCode >
  _xsd_RoadCategoryCode_type_factory_init (
    "RoadCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RoadQualityCode
  //

  RoadQualityCode::
  RoadQualityCode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RoadQualityCode_convert ();
  }

  RoadQualityCode::
  RoadQualityCode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RoadQualityCode_convert ();
  }

  RoadQualityCode::
  RoadQualityCode (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RoadQualityCode_convert ();
  }

  RoadQualityCode* RoadQualityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RoadQualityCode (*this, f, c);
  }

  RoadQualityCode::value RoadQualityCode::
  _xsd_RoadQualityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RoadQualityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RoadQualityCode_indexes_,
                      _xsd_RoadQualityCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RoadQualityCode_indexes_ + 4 || _xsd_RoadQualityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RoadQualityCode::
  _xsd_RoadQualityCode_literals_[4] =
  {
    "E",
    "F",
    "G",
    "P"
  };

  const RoadQualityCode::value RoadQualityCode::
  _xsd_RoadQualityCode_indexes_[4] =
  {
    ::oo_2_0::RoadQualityCode::E,
    ::oo_2_0::RoadQualityCode::F,
    ::oo_2_0::RoadQualityCode::G,
    ::oo_2_0::RoadQualityCode::P
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RoadQualityCode >
  _xsd_RoadQualityCode_type_factory_init (
    "RoadQualityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RoadShoulderWidthCode
  //

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RoadShoulderWidthCode_convert ();
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RoadShoulderWidthCode_convert ();
  }

  RoadShoulderWidthCode::
  RoadShoulderWidthCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RoadShoulderWidthCode_convert ();
  }

  RoadShoulderWidthCode* RoadShoulderWidthCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RoadShoulderWidthCode (*this, f, c);
  }

  RoadShoulderWidthCode::value RoadShoulderWidthCode::
  _xsd_RoadShoulderWidthCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RoadShoulderWidthCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RoadShoulderWidthCode_indexes_,
                      _xsd_RoadShoulderWidthCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_RoadShoulderWidthCode_indexes_ + 3 || _xsd_RoadShoulderWidthCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RoadShoulderWidthCode::
  _xsd_RoadShoulderWidthCode_literals_[3] =
  {
    "1",
    "2",
    "3"
  };

  const RoadShoulderWidthCode::value RoadShoulderWidthCode::
  _xsd_RoadShoulderWidthCode_indexes_[3] =
  {
    ::oo_2_0::RoadShoulderWidthCode::cxx_1,
    ::oo_2_0::RoadShoulderWidthCode::cxx_2,
    ::oo_2_0::RoadShoulderWidthCode::cxx_3
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RoadShoulderWidthCode >
  _xsd_RoadShoulderWidthCode_type_factory_init (
    "RoadShoulderWidthCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RoadWeatherConditionCategoryCode
  //

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RoadWeatherConditionCategoryCode_convert ();
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RoadWeatherConditionCategoryCode_convert ();
  }

  RoadWeatherConditionCategoryCode::
  RoadWeatherConditionCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RoadWeatherConditionCategoryCode_convert ();
  }

  RoadWeatherConditionCategoryCode* RoadWeatherConditionCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RoadWeatherConditionCategoryCode (*this, f, c);
  }

  RoadWeatherConditionCategoryCode::value RoadWeatherConditionCategoryCode::
  _xsd_RoadWeatherConditionCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RoadWeatherConditionCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RoadWeatherConditionCategoryCode_indexes_,
                      _xsd_RoadWeatherConditionCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_RoadWeatherConditionCategoryCode_indexes_ + 3 || _xsd_RoadWeatherConditionCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RoadWeatherConditionCategoryCode::
  _xsd_RoadWeatherConditionCategoryCode_literals_[3] =
  {
    "AWR",
    "FWR",
    "LAWR"
  };

  const RoadWeatherConditionCategoryCode::value RoadWeatherConditionCategoryCode::
  _xsd_RoadWeatherConditionCategoryCode_indexes_[3] =
  {
    ::oo_2_0::RoadWeatherConditionCategoryCode::AWR,
    ::oo_2_0::RoadWeatherConditionCategoryCode::FWR,
    ::oo_2_0::RoadWeatherConditionCategoryCode::LAWR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RoadWeatherConditionCategoryCode >
  _xsd_RoadWeatherConditionCategoryCode_type_factory_init (
    "RoadWeatherConditionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RouteDirectionUsageCode
  //

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RouteDirectionUsageCode_convert ();
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RouteDirectionUsageCode_convert ();
  }

  RouteDirectionUsageCode::
  RouteDirectionUsageCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RouteDirectionUsageCode_convert ();
  }

  RouteDirectionUsageCode* RouteDirectionUsageCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RouteDirectionUsageCode (*this, f, c);
  }

  RouteDirectionUsageCode::value RouteDirectionUsageCode::
  _xsd_RouteDirectionUsageCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RouteDirectionUsageCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RouteDirectionUsageCode_indexes_,
                      _xsd_RouteDirectionUsageCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_RouteDirectionUsageCode_indexes_ + 3 || _xsd_RouteDirectionUsageCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RouteDirectionUsageCode::
  _xsd_RouteDirectionUsageCode_literals_[3] =
  {
    "ALTRNG",
    "ONEWAY",
    "TWOWAY"
  };

  const RouteDirectionUsageCode::value RouteDirectionUsageCode::
  _xsd_RouteDirectionUsageCode_indexes_[3] =
  {
    ::oo_2_0::RouteDirectionUsageCode::ALTRNG,
    ::oo_2_0::RouteDirectionUsageCode::ONEWAY,
    ::oo_2_0::RouteDirectionUsageCode::TWOWAY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RouteDirectionUsageCode >
  _xsd_RouteDirectionUsageCode_type_factory_init (
    "RouteDirectionUsageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RouteSegmentCategoryCode
  //

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RouteSegmentCategoryCode_convert ();
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RouteSegmentCategoryCode_convert ();
  }

  RouteSegmentCategoryCode::
  RouteSegmentCategoryCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RouteSegmentCategoryCode_convert ();
  }

  RouteSegmentCategoryCode* RouteSegmentCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RouteSegmentCategoryCode (*this, f, c);
  }

  RouteSegmentCategoryCode::value RouteSegmentCategoryCode::
  _xsd_RouteSegmentCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RouteSegmentCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RouteSegmentCategoryCode_indexes_,
                      _xsd_RouteSegmentCategoryCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RouteSegmentCategoryCode_indexes_ + 2 || _xsd_RouteSegmentCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RouteSegmentCategoryCode::
  _xsd_RouteSegmentCategoryCode_literals_[2] =
  {
    "AIRRTE",
    "NOS"
  };

  const RouteSegmentCategoryCode::value RouteSegmentCategoryCode::
  _xsd_RouteSegmentCategoryCode_indexes_[2] =
  {
    ::oo_2_0::RouteSegmentCategoryCode::AIRRTE,
    ::oo_2_0::RouteSegmentCategoryCode::NOS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RouteSegmentCategoryCode >
  _xsd_RouteSegmentCategoryCode_type_factory_init (
    "RouteSegmentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RouteTypeCategoryCode
  //

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RouteTypeCategoryCode_convert ();
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RouteTypeCategoryCode_convert ();
  }

  RouteTypeCategoryCode::
  RouteTypeCategoryCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RouteTypeCategoryCode_convert ();
  }

  RouteTypeCategoryCode* RouteTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RouteTypeCategoryCode (*this, f, c);
  }

  RouteTypeCategoryCode::value RouteTypeCategoryCode::
  _xsd_RouteTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RouteTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RouteTypeCategoryCode_indexes_,
                      _xsd_RouteTypeCategoryCode_indexes_ + 40,
                      *this,
                      c));

    if (i == _xsd_RouteTypeCategoryCode_indexes_ + 40 || _xsd_RouteTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RouteTypeCategoryCode::
  _xsd_RouteTypeCategoryCode_literals_[40] =
  {
    "ADVRTE",
    "AIRCOR",
    "AIRRTE",
    "AIRWAY",
    "ALTSPL",
    "APRCOR",
    "ATS",
    "CONDRT",
    "CONVRT",
    "DCT",
    "EGRRTU",
    "FLTPTH",
    "GRCLRT",
    "INGRTE",
    "LATR",
    "LLTR",
    "MAMNST",
    "MAMNTR",
    "MRR",
    "MSR",
    "NAVRTE",
    "NKN",
    "NOS",
    "POLRRT",
    "QROUTE",
    "QRTESG",
    "REFTRK",
    "RETFRT",
    "RHLNRT",
    "SPCCDR",
    "STDART",
    "STRDRT",
    "SUPRRT",
    "TACAN",
    "TMMRRT",
    "TRNKRT",
    "TRSTRT",
    "UNMVRT",
    "USCTRT",
    "VARTRA"
  };

  const RouteTypeCategoryCode::value RouteTypeCategoryCode::
  _xsd_RouteTypeCategoryCode_indexes_[40] =
  {
    ::oo_2_0::RouteTypeCategoryCode::ADVRTE,
    ::oo_2_0::RouteTypeCategoryCode::AIRCOR,
    ::oo_2_0::RouteTypeCategoryCode::AIRRTE,
    ::oo_2_0::RouteTypeCategoryCode::AIRWAY,
    ::oo_2_0::RouteTypeCategoryCode::ALTSPL,
    ::oo_2_0::RouteTypeCategoryCode::APRCOR,
    ::oo_2_0::RouteTypeCategoryCode::ATS,
    ::oo_2_0::RouteTypeCategoryCode::CONDRT,
    ::oo_2_0::RouteTypeCategoryCode::CONVRT,
    ::oo_2_0::RouteTypeCategoryCode::DCT,
    ::oo_2_0::RouteTypeCategoryCode::EGRRTU,
    ::oo_2_0::RouteTypeCategoryCode::FLTPTH,
    ::oo_2_0::RouteTypeCategoryCode::GRCLRT,
    ::oo_2_0::RouteTypeCategoryCode::INGRTE,
    ::oo_2_0::RouteTypeCategoryCode::LATR,
    ::oo_2_0::RouteTypeCategoryCode::LLTR,
    ::oo_2_0::RouteTypeCategoryCode::MAMNST,
    ::oo_2_0::RouteTypeCategoryCode::MAMNTR,
    ::oo_2_0::RouteTypeCategoryCode::MRR,
    ::oo_2_0::RouteTypeCategoryCode::MSR,
    ::oo_2_0::RouteTypeCategoryCode::NAVRTE,
    ::oo_2_0::RouteTypeCategoryCode::NKN,
    ::oo_2_0::RouteTypeCategoryCode::NOS,
    ::oo_2_0::RouteTypeCategoryCode::POLRRT,
    ::oo_2_0::RouteTypeCategoryCode::QROUTE,
    ::oo_2_0::RouteTypeCategoryCode::QRTESG,
    ::oo_2_0::RouteTypeCategoryCode::REFTRK,
    ::oo_2_0::RouteTypeCategoryCode::RETFRT,
    ::oo_2_0::RouteTypeCategoryCode::RHLNRT,
    ::oo_2_0::RouteTypeCategoryCode::SPCCDR,
    ::oo_2_0::RouteTypeCategoryCode::STDART,
    ::oo_2_0::RouteTypeCategoryCode::STRDRT,
    ::oo_2_0::RouteTypeCategoryCode::SUPRRT,
    ::oo_2_0::RouteTypeCategoryCode::TACAN,
    ::oo_2_0::RouteTypeCategoryCode::TMMRRT,
    ::oo_2_0::RouteTypeCategoryCode::TRNKRT,
    ::oo_2_0::RouteTypeCategoryCode::TRSTRT,
    ::oo_2_0::RouteTypeCategoryCode::UNMVRT,
    ::oo_2_0::RouteTypeCategoryCode::USCTRT,
    ::oo_2_0::RouteTypeCategoryCode::VARTRA
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RouteTypeCategoryCode >
  _xsd_RouteTypeCategoryCode_type_factory_init (
    "RouteTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RunwayLightingPresenceIndicatorCode
  //

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RunwayLightingPresenceIndicatorCode_convert ();
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RunwayLightingPresenceIndicatorCode_convert ();
  }

  RunwayLightingPresenceIndicatorCode::
  RunwayLightingPresenceIndicatorCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RunwayLightingPresenceIndicatorCode_convert ();
  }

  RunwayLightingPresenceIndicatorCode* RunwayLightingPresenceIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RunwayLightingPresenceIndicatorCode (*this, f, c);
  }

  RunwayLightingPresenceIndicatorCode::value RunwayLightingPresenceIndicatorCode::
  _xsd_RunwayLightingPresenceIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RunwayLightingPresenceIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RunwayLightingPresenceIndicatorCode_indexes_,
                      _xsd_RunwayLightingPresenceIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RunwayLightingPresenceIndicatorCode_indexes_ + 2 || _xsd_RunwayLightingPresenceIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RunwayLightingPresenceIndicatorCode::
  _xsd_RunwayLightingPresenceIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const RunwayLightingPresenceIndicatorCode::value RunwayLightingPresenceIndicatorCode::
  _xsd_RunwayLightingPresenceIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::RunwayLightingPresenceIndicatorCode::NO,
    ::oo_2_0::RunwayLightingPresenceIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunwayLightingPresenceIndicatorCode >
  _xsd_RunwayLightingPresenceIndicatorCode_type_factory_init (
    "RunwayLightingPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RunwayPavementEvaluationMethodCode
  //

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RunwayPavementEvaluationMethodCode_convert ();
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RunwayPavementEvaluationMethodCode_convert ();
  }

  RunwayPavementEvaluationMethodCode::
  RunwayPavementEvaluationMethodCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RunwayPavementEvaluationMethodCode_convert ();
  }

  RunwayPavementEvaluationMethodCode* RunwayPavementEvaluationMethodCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RunwayPavementEvaluationMethodCode (*this, f, c);
  }

  RunwayPavementEvaluationMethodCode::value RunwayPavementEvaluationMethodCode::
  _xsd_RunwayPavementEvaluationMethodCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RunwayPavementEvaluationMethodCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RunwayPavementEvaluationMethodCode_indexes_,
                      _xsd_RunwayPavementEvaluationMethodCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RunwayPavementEvaluationMethodCode_indexes_ + 2 || _xsd_RunwayPavementEvaluationMethodCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RunwayPavementEvaluationMethodCode::
  _xsd_RunwayPavementEvaluationMethodCode_literals_[2] =
  {
    "T",
    "U"
  };

  const RunwayPavementEvaluationMethodCode::value RunwayPavementEvaluationMethodCode::
  _xsd_RunwayPavementEvaluationMethodCode_indexes_[2] =
  {
    ::oo_2_0::RunwayPavementEvaluationMethodCode::T,
    ::oo_2_0::RunwayPavementEvaluationMethodCode::U
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunwayPavementEvaluationMethodCode >
  _xsd_RunwayPavementEvaluationMethodCode_type_factory_init (
    "RunwayPavementEvaluationMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RunwayPavementMaximumTyrePressureCode
  //

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RunwayPavementMaximumTyrePressureCode_convert ();
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RunwayPavementMaximumTyrePressureCode_convert ();
  }

  RunwayPavementMaximumTyrePressureCode::
  RunwayPavementMaximumTyrePressureCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RunwayPavementMaximumTyrePressureCode_convert ();
  }

  RunwayPavementMaximumTyrePressureCode* RunwayPavementMaximumTyrePressureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RunwayPavementMaximumTyrePressureCode (*this, f, c);
  }

  RunwayPavementMaximumTyrePressureCode::value RunwayPavementMaximumTyrePressureCode::
  _xsd_RunwayPavementMaximumTyrePressureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RunwayPavementMaximumTyrePressureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RunwayPavementMaximumTyrePressureCode_indexes_,
                      _xsd_RunwayPavementMaximumTyrePressureCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RunwayPavementMaximumTyrePressureCode_indexes_ + 4 || _xsd_RunwayPavementMaximumTyrePressureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RunwayPavementMaximumTyrePressureCode::
  _xsd_RunwayPavementMaximumTyrePressureCode_literals_[4] =
  {
    "W",
    "X",
    "Y",
    "Z"
  };

  const RunwayPavementMaximumTyrePressureCode::value RunwayPavementMaximumTyrePressureCode::
  _xsd_RunwayPavementMaximumTyrePressureCode_indexes_[4] =
  {
    ::oo_2_0::RunwayPavementMaximumTyrePressureCode::W,
    ::oo_2_0::RunwayPavementMaximumTyrePressureCode::X,
    ::oo_2_0::RunwayPavementMaximumTyrePressureCode::Y,
    ::oo_2_0::RunwayPavementMaximumTyrePressureCode::Z
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunwayPavementMaximumTyrePressureCode >
  _xsd_RunwayPavementMaximumTyrePressureCode_type_factory_init (
    "RunwayPavementMaximumTyrePressureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RunwayPavementSubgradeCategoryCode
  //

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RunwayPavementSubgradeCategoryCode_convert ();
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RunwayPavementSubgradeCategoryCode_convert ();
  }

  RunwayPavementSubgradeCategoryCode::
  RunwayPavementSubgradeCategoryCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RunwayPavementSubgradeCategoryCode_convert ();
  }

  RunwayPavementSubgradeCategoryCode* RunwayPavementSubgradeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RunwayPavementSubgradeCategoryCode (*this, f, c);
  }

  RunwayPavementSubgradeCategoryCode::value RunwayPavementSubgradeCategoryCode::
  _xsd_RunwayPavementSubgradeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RunwayPavementSubgradeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RunwayPavementSubgradeCategoryCode_indexes_,
                      _xsd_RunwayPavementSubgradeCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_RunwayPavementSubgradeCategoryCode_indexes_ + 4 || _xsd_RunwayPavementSubgradeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RunwayPavementSubgradeCategoryCode::
  _xsd_RunwayPavementSubgradeCategoryCode_literals_[4] =
  {
    "A",
    "B",
    "C",
    "D"
  };

  const RunwayPavementSubgradeCategoryCode::value RunwayPavementSubgradeCategoryCode::
  _xsd_RunwayPavementSubgradeCategoryCode_indexes_[4] =
  {
    ::oo_2_0::RunwayPavementSubgradeCategoryCode::A,
    ::oo_2_0::RunwayPavementSubgradeCategoryCode::B,
    ::oo_2_0::RunwayPavementSubgradeCategoryCode::C,
    ::oo_2_0::RunwayPavementSubgradeCategoryCode::D
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunwayPavementSubgradeCategoryCode >
  _xsd_RunwayPavementSubgradeCategoryCode_type_factory_init (
    "RunwayPavementSubgradeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // RunwayPavementTypeCode
  //

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_RunwayPavementTypeCode_convert ();
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_RunwayPavementTypeCode_convert ();
  }

  RunwayPavementTypeCode::
  RunwayPavementTypeCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_RunwayPavementTypeCode_convert ();
  }

  RunwayPavementTypeCode* RunwayPavementTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class RunwayPavementTypeCode (*this, f, c);
  }

  RunwayPavementTypeCode::value RunwayPavementTypeCode::
  _xsd_RunwayPavementTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RunwayPavementTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_RunwayPavementTypeCode_indexes_,
                      _xsd_RunwayPavementTypeCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_RunwayPavementTypeCode_indexes_ + 2 || _xsd_RunwayPavementTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const RunwayPavementTypeCode::
  _xsd_RunwayPavementTypeCode_literals_[2] =
  {
    "F",
    "R"
  };

  const RunwayPavementTypeCode::value RunwayPavementTypeCode::
  _xsd_RunwayPavementTypeCode_indexes_[2] =
  {
    ::oo_2_0::RunwayPavementTypeCode::F,
    ::oo_2_0::RunwayPavementTypeCode::R
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunwayPavementTypeCode >
  _xsd_RunwayPavementTypeCode_type_factory_init (
    "RunwayPavementTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SecurityClassificationLevelCode
  //

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SecurityClassificationLevelCode_convert ();
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SecurityClassificationLevelCode_convert ();
  }

  SecurityClassificationLevelCode::
  SecurityClassificationLevelCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SecurityClassificationLevelCode_convert ();
  }

  SecurityClassificationLevelCode* SecurityClassificationLevelCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SecurityClassificationLevelCode (*this, f, c);
  }

  SecurityClassificationLevelCode::value SecurityClassificationLevelCode::
  _xsd_SecurityClassificationLevelCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityClassificationLevelCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SecurityClassificationLevelCode_indexes_,
                      _xsd_SecurityClassificationLevelCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_SecurityClassificationLevelCode_indexes_ + 6 || _xsd_SecurityClassificationLevelCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SecurityClassificationLevelCode::
  _xsd_SecurityClassificationLevelCode_literals_[6] =
  {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5"
  };

  const SecurityClassificationLevelCode::value SecurityClassificationLevelCode::
  _xsd_SecurityClassificationLevelCode_indexes_[6] =
  {
    ::oo_2_0::SecurityClassificationLevelCode::cxx_0,
    ::oo_2_0::SecurityClassificationLevelCode::cxx_1,
    ::oo_2_0::SecurityClassificationLevelCode::cxx_2,
    ::oo_2_0::SecurityClassificationLevelCode::cxx_3,
    ::oo_2_0::SecurityClassificationLevelCode::cxx_4,
    ::oo_2_0::SecurityClassificationLevelCode::cxx_5
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SecurityClassificationLevelCode >
  _xsd_SecurityClassificationLevelCode_type_factory_init (
    "SecurityClassificationLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SolidSurfaceStatusCode
  //

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SolidSurfaceStatusCode_convert ();
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SolidSurfaceStatusCode_convert ();
  }

  SolidSurfaceStatusCode::
  SolidSurfaceStatusCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SolidSurfaceStatusCode_convert ();
  }

  SolidSurfaceStatusCode* SolidSurfaceStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SolidSurfaceStatusCode (*this, f, c);
  }

  SolidSurfaceStatusCode::value SolidSurfaceStatusCode::
  _xsd_SolidSurfaceStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SolidSurfaceStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SolidSurfaceStatusCode_indexes_,
                      _xsd_SolidSurfaceStatusCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_SolidSurfaceStatusCode_indexes_ + 8 || _xsd_SolidSurfaceStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SolidSurfaceStatusCode::
  _xsd_SolidSurfaceStatusCode_literals_[8] =
  {
    "CLEARD",
    "CNTMND",
    "DSTRYD",
    "HVYDAM",
    "LGTDAM",
    "MODDAM",
    "NKN",
    "OBSTRD"
  };

  const SolidSurfaceStatusCode::value SolidSurfaceStatusCode::
  _xsd_SolidSurfaceStatusCode_indexes_[8] =
  {
    ::oo_2_0::SolidSurfaceStatusCode::CLEARD,
    ::oo_2_0::SolidSurfaceStatusCode::CNTMND,
    ::oo_2_0::SolidSurfaceStatusCode::DSTRYD,
    ::oo_2_0::SolidSurfaceStatusCode::HVYDAM,
    ::oo_2_0::SolidSurfaceStatusCode::LGTDAM,
    ::oo_2_0::SolidSurfaceStatusCode::MODDAM,
    ::oo_2_0::SolidSurfaceStatusCode::NKN,
    ::oo_2_0::SolidSurfaceStatusCode::OBSTRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SolidSurfaceStatusCode >
  _xsd_SolidSurfaceStatusCode_type_factory_init (
    "SolidSurfaceStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SolidSurfaceStatusSurfaceConditionCode
  //

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceConditionCode_convert ();
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceConditionCode_convert ();
  }

  SolidSurfaceStatusSurfaceConditionCode::
  SolidSurfaceStatusSurfaceConditionCode (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceConditionCode_convert ();
  }

  SolidSurfaceStatusSurfaceConditionCode* SolidSurfaceStatusSurfaceConditionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SolidSurfaceStatusSurfaceConditionCode (*this, f, c);
  }

  SolidSurfaceStatusSurfaceConditionCode::value SolidSurfaceStatusSurfaceConditionCode::
  _xsd_SolidSurfaceStatusSurfaceConditionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SolidSurfaceStatusSurfaceConditionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SolidSurfaceStatusSurfaceConditionCode_indexes_,
                      _xsd_SolidSurfaceStatusSurfaceConditionCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_SolidSurfaceStatusSurfaceConditionCode_indexes_ + 8 || _xsd_SolidSurfaceStatusSurfaceConditionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SolidSurfaceStatusSurfaceConditionCode::
  _xsd_SolidSurfaceStatusSurfaceConditionCode_literals_[8] =
  {
    "DUST",
    "EARTH",
    "FLOOD",
    "ICE",
    "NKN",
    "NOS",
    "SAND",
    "SNOW"
  };

  const SolidSurfaceStatusSurfaceConditionCode::value SolidSurfaceStatusSurfaceConditionCode::
  _xsd_SolidSurfaceStatusSurfaceConditionCode_indexes_[8] =
  {
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::DUST,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::EARTH,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::FLOOD,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::ICE,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::NKN,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::NOS,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::SAND,
    ::oo_2_0::SolidSurfaceStatusSurfaceConditionCode::SNOW
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SolidSurfaceStatusSurfaceConditionCode >
  _xsd_SolidSurfaceStatusSurfaceConditionCode_type_factory_init (
    "SolidSurfaceStatusSurfaceConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SolidSurfaceStatusSurfaceFirmnessCode
  //

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceFirmnessCode_convert ();
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceFirmnessCode_convert ();
  }

  SolidSurfaceStatusSurfaceFirmnessCode::
  SolidSurfaceStatusSurfaceFirmnessCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SolidSurfaceStatusSurfaceFirmnessCode_convert ();
  }

  SolidSurfaceStatusSurfaceFirmnessCode* SolidSurfaceStatusSurfaceFirmnessCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SolidSurfaceStatusSurfaceFirmnessCode (*this, f, c);
  }

  SolidSurfaceStatusSurfaceFirmnessCode::value SolidSurfaceStatusSurfaceFirmnessCode::
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SolidSurfaceStatusSurfaceFirmnessCode_indexes_,
                      _xsd_SolidSurfaceStatusSurfaceFirmnessCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_SolidSurfaceStatusSurfaceFirmnessCode_indexes_ + 4 || _xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SolidSurfaceStatusSurfaceFirmnessCode::
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_[4] =
  {
    "HARD",
    "MODER",
    "SOFT",
    "VSOFT"
  };

  const SolidSurfaceStatusSurfaceFirmnessCode::value SolidSurfaceStatusSurfaceFirmnessCode::
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_indexes_[4] =
  {
    ::oo_2_0::SolidSurfaceStatusSurfaceFirmnessCode::HARD,
    ::oo_2_0::SolidSurfaceStatusSurfaceFirmnessCode::MODER,
    ::oo_2_0::SolidSurfaceStatusSurfaceFirmnessCode::SOFT,
    ::oo_2_0::SolidSurfaceStatusSurfaceFirmnessCode::VSOFT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SolidSurfaceStatusSurfaceFirmnessCode >
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_type_factory_init (
    "SolidSurfaceStatusSurfaceFirmnessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SpeedPrecisionCode
  //

  SpeedPrecisionCode::
  SpeedPrecisionCode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SpeedPrecisionCode_convert ();
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SpeedPrecisionCode_convert ();
  }

  SpeedPrecisionCode::
  SpeedPrecisionCode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SpeedPrecisionCode_convert ();
  }

  SpeedPrecisionCode* SpeedPrecisionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SpeedPrecisionCode (*this, f, c);
  }

  SpeedPrecisionCode::value SpeedPrecisionCode::
  _xsd_SpeedPrecisionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SpeedPrecisionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SpeedPrecisionCode_indexes_,
                      _xsd_SpeedPrecisionCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_SpeedPrecisionCode_indexes_ + 3 || _xsd_SpeedPrecisionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SpeedPrecisionCode::
  _xsd_SpeedPrecisionCode_literals_[3] =
  {
    "KNOTS",
    "KPH",
    "MPS"
  };

  const SpeedPrecisionCode::value SpeedPrecisionCode::
  _xsd_SpeedPrecisionCode_indexes_[3] =
  {
    ::oo_2_0::SpeedPrecisionCode::KNOTS,
    ::oo_2_0::SpeedPrecisionCode::KPH,
    ::oo_2_0::SpeedPrecisionCode::MPS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SpeedPrecisionCode >
  _xsd_SpeedPrecisionCode_type_factory_init (
    "SpeedPrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // StorageCapabilityConditionCode
  //

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_StorageCapabilityConditionCode_convert ();
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_StorageCapabilityConditionCode_convert ();
  }

  StorageCapabilityConditionCode::
  StorageCapabilityConditionCode (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_StorageCapabilityConditionCode_convert ();
  }

  StorageCapabilityConditionCode* StorageCapabilityConditionCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class StorageCapabilityConditionCode (*this, f, c);
  }

  StorageCapabilityConditionCode::value StorageCapabilityConditionCode::
  _xsd_StorageCapabilityConditionCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StorageCapabilityConditionCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_StorageCapabilityConditionCode_indexes_,
                      _xsd_StorageCapabilityConditionCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_StorageCapabilityConditionCode_indexes_ + 4 || _xsd_StorageCapabilityConditionCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const StorageCapabilityConditionCode::
  _xsd_StorageCapabilityConditionCode_literals_[4] =
  {
    "CC",
    "CS",
    "HS",
    "OS"
  };

  const StorageCapabilityConditionCode::value StorageCapabilityConditionCode::
  _xsd_StorageCapabilityConditionCode_indexes_[4] =
  {
    ::oo_2_0::StorageCapabilityConditionCode::CC,
    ::oo_2_0::StorageCapabilityConditionCode::CS,
    ::oo_2_0::StorageCapabilityConditionCode::HS,
    ::oo_2_0::StorageCapabilityConditionCode::OS
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, StorageCapabilityConditionCode >
  _xsd_StorageCapabilityConditionCode_type_factory_init (
    "StorageCapabilityConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // StorageCapabilityDescriptorCode
  //

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_StorageCapabilityDescriptorCode_convert ();
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_StorageCapabilityDescriptorCode_convert ();
  }

  StorageCapabilityDescriptorCode::
  StorageCapabilityDescriptorCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_StorageCapabilityDescriptorCode_convert ();
  }

  StorageCapabilityDescriptorCode* StorageCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class StorageCapabilityDescriptorCode (*this, f, c);
  }

  StorageCapabilityDescriptorCode::value StorageCapabilityDescriptorCode::
  _xsd_StorageCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StorageCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_StorageCapabilityDescriptorCode_indexes_,
                      _xsd_StorageCapabilityDescriptorCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_StorageCapabilityDescriptorCode_indexes_ + 11 || _xsd_StorageCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const StorageCapabilityDescriptorCode::
  _xsd_StorageCapabilityDescriptorCode_literals_[11] =
  {
    "BLKLIQ",
    "BLKVOL",
    "MAXCNT",
    "MCRHEI",
    "MCRLEN",
    "MCRWGT",
    "MCRWID",
    "MLNLEN",
    "MSRFAR",
    "MWGTBR",
    "NEQLMT"
  };

  const StorageCapabilityDescriptorCode::value StorageCapabilityDescriptorCode::
  _xsd_StorageCapabilityDescriptorCode_indexes_[11] =
  {
    ::oo_2_0::StorageCapabilityDescriptorCode::BLKLIQ,
    ::oo_2_0::StorageCapabilityDescriptorCode::BLKVOL,
    ::oo_2_0::StorageCapabilityDescriptorCode::MAXCNT,
    ::oo_2_0::StorageCapabilityDescriptorCode::MCRHEI,
    ::oo_2_0::StorageCapabilityDescriptorCode::MCRLEN,
    ::oo_2_0::StorageCapabilityDescriptorCode::MCRWGT,
    ::oo_2_0::StorageCapabilityDescriptorCode::MCRWID,
    ::oo_2_0::StorageCapabilityDescriptorCode::MLNLEN,
    ::oo_2_0::StorageCapabilityDescriptorCode::MSRFAR,
    ::oo_2_0::StorageCapabilityDescriptorCode::MWGTBR,
    ::oo_2_0::StorageCapabilityDescriptorCode::NEQLMT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, StorageCapabilityDescriptorCode >
  _xsd_StorageCapabilityDescriptorCode_type_factory_init (
    "StorageCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SubsurfaceVesselTypeCategoryCode
  //

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SubsurfaceVesselTypeCategoryCode_convert ();
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SubsurfaceVesselTypeCategoryCode_convert ();
  }

  SubsurfaceVesselTypeCategoryCode::
  SubsurfaceVesselTypeCategoryCode (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SubsurfaceVesselTypeCategoryCode_convert ();
  }

  SubsurfaceVesselTypeCategoryCode* SubsurfaceVesselTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SubsurfaceVesselTypeCategoryCode (*this, f, c);
  }

  SubsurfaceVesselTypeCategoryCode::value SubsurfaceVesselTypeCategoryCode::
  _xsd_SubsurfaceVesselTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SubsurfaceVesselTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SubsurfaceVesselTypeCategoryCode_indexes_,
                      _xsd_SubsurfaceVesselTypeCategoryCode_indexes_ + 24,
                      *this,
                      c));

    if (i == _xsd_SubsurfaceVesselTypeCategoryCode_indexes_ + 24 || _xsd_SubsurfaceVesselTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SubsurfaceVesselTypeCategoryCode::
  _xsd_SubsurfaceVesselTypeCategoryCode_literals_[24] =
  {
    "DSV",
    "NKN",
    "NOS",
    "SS",
    "SSA",
    "SSAN",
    "SSB",
    "SSBN",
    "SSC",
    "SSG",
    "SSGN",
    "SSK",
    "SSN",
    "SST",
    "SSU",
    "SSUN",
    "SSW",
    "TS",
    "TSG",
    "TSR",
    "YSG",
    "YSR",
    "YSRV",
    "YSV"
  };

  const SubsurfaceVesselTypeCategoryCode::value SubsurfaceVesselTypeCategoryCode::
  _xsd_SubsurfaceVesselTypeCategoryCode_indexes_[24] =
  {
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::DSV,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::NKN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::NOS,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SS,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSA,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSAN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSB,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSBN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSC,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSG,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSGN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSK,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SST,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSU,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSUN,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::SSW,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::TS,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::TSG,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::TSR,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::YSG,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::YSR,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::YSRV,
    ::oo_2_0::SubsurfaceVesselTypeCategoryCode::YSV
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubsurfaceVesselTypeCategoryCode >
  _xsd_SubsurfaceVesselTypeCategoryCode_type_factory_init (
    "SubsurfaceVesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode
  //

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_convert ();
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const ::xercesc::DOMAttr& a,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_convert ();
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (const ::std::string& s,
                                                       const ::xercesc::DOMElement* e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_convert ();
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode* SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode (*this, f, c);
  }

  SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::value SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_indexes_,
                      _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_indexes_ + 2 || _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::value SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::NO,
    ::oo_2_0::SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode >
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_type_factory_init (
    "SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SupportCapabilityCategoryCode
  //

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SupportCapabilityCategoryCode_convert ();
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SupportCapabilityCategoryCode_convert ();
  }

  SupportCapabilityCategoryCode::
  SupportCapabilityCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SupportCapabilityCategoryCode_convert ();
  }

  SupportCapabilityCategoryCode* SupportCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SupportCapabilityCategoryCode (*this, f, c);
  }

  SupportCapabilityCategoryCode::value SupportCapabilityCategoryCode::
  _xsd_SupportCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SupportCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SupportCapabilityCategoryCode_indexes_,
                      _xsd_SupportCapabilityCategoryCode_indexes_ + 27,
                      *this,
                      c));

    if (i == _xsd_SupportCapabilityCategoryCode_indexes_ + 27 || _xsd_SupportCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SupportCapabilityCategoryCode::
  _xsd_SupportCapabilityCategoryCode_literals_[27] =
  {
    "BEDDNG",
    "CMPAIR",
    "DECK",
    "EDUCTN",
    "ELECTR",
    "ENGINE",
    "FODRAT",
    "FUELHE",
    "HELPLT",
    "HLTHCR",
    "INFSTR",
    "LUNDRY",
    "MEDCAL",
    "MEDSPL",
    "MESSNG",
    "PERSEQ",
    "RECRTN",
    "SECRTY",
    "SEWAGE",
    "SHLTER",
    "SPLC1",
    "SPLC2",
    "SPLC3",
    "SPLC3A",
    "SPLC4",
    "SPLC5",
    "WATER"
  };

  const SupportCapabilityCategoryCode::value SupportCapabilityCategoryCode::
  _xsd_SupportCapabilityCategoryCode_indexes_[27] =
  {
    ::oo_2_0::SupportCapabilityCategoryCode::BEDDNG,
    ::oo_2_0::SupportCapabilityCategoryCode::CMPAIR,
    ::oo_2_0::SupportCapabilityCategoryCode::DECK,
    ::oo_2_0::SupportCapabilityCategoryCode::EDUCTN,
    ::oo_2_0::SupportCapabilityCategoryCode::ELECTR,
    ::oo_2_0::SupportCapabilityCategoryCode::ENGINE,
    ::oo_2_0::SupportCapabilityCategoryCode::FODRAT,
    ::oo_2_0::SupportCapabilityCategoryCode::FUELHE,
    ::oo_2_0::SupportCapabilityCategoryCode::HELPLT,
    ::oo_2_0::SupportCapabilityCategoryCode::HLTHCR,
    ::oo_2_0::SupportCapabilityCategoryCode::INFSTR,
    ::oo_2_0::SupportCapabilityCategoryCode::LUNDRY,
    ::oo_2_0::SupportCapabilityCategoryCode::MEDCAL,
    ::oo_2_0::SupportCapabilityCategoryCode::MEDSPL,
    ::oo_2_0::SupportCapabilityCategoryCode::MESSNG,
    ::oo_2_0::SupportCapabilityCategoryCode::PERSEQ,
    ::oo_2_0::SupportCapabilityCategoryCode::RECRTN,
    ::oo_2_0::SupportCapabilityCategoryCode::SECRTY,
    ::oo_2_0::SupportCapabilityCategoryCode::SEWAGE,
    ::oo_2_0::SupportCapabilityCategoryCode::SHLTER,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC1,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC2,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC3,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC3A,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC4,
    ::oo_2_0::SupportCapabilityCategoryCode::SPLC5,
    ::oo_2_0::SupportCapabilityCategoryCode::WATER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SupportCapabilityCategoryCode >
  _xsd_SupportCapabilityCategoryCode_type_factory_init (
    "SupportCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SupportCapabilityDescriptorCode
  //

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SupportCapabilityDescriptorCode_convert ();
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SupportCapabilityDescriptorCode_convert ();
  }

  SupportCapabilityDescriptorCode::
  SupportCapabilityDescriptorCode (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SupportCapabilityDescriptorCode_convert ();
  }

  SupportCapabilityDescriptorCode* SupportCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SupportCapabilityDescriptorCode (*this, f, c);
  }

  SupportCapabilityDescriptorCode::value SupportCapabilityDescriptorCode::
  _xsd_SupportCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SupportCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SupportCapabilityDescriptorCode_indexes_,
                      _xsd_SupportCapabilityDescriptorCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_SupportCapabilityDescriptorCode_indexes_ + 5 || _xsd_SupportCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SupportCapabilityDescriptorCode::
  _xsd_SupportCapabilityDescriptorCode_literals_[5] =
  {
    "BEDCNT",
    "BLKLIQ",
    "BLKVOL",
    "MAXCNT",
    "OPRCNT"
  };

  const SupportCapabilityDescriptorCode::value SupportCapabilityDescriptorCode::
  _xsd_SupportCapabilityDescriptorCode_indexes_[5] =
  {
    ::oo_2_0::SupportCapabilityDescriptorCode::BEDCNT,
    ::oo_2_0::SupportCapabilityDescriptorCode::BLKLIQ,
    ::oo_2_0::SupportCapabilityDescriptorCode::BLKVOL,
    ::oo_2_0::SupportCapabilityDescriptorCode::MAXCNT,
    ::oo_2_0::SupportCapabilityDescriptorCode::OPRCNT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SupportCapabilityDescriptorCode >
  _xsd_SupportCapabilityDescriptorCode_type_factory_init (
    "SupportCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SurfaceCategoryCode
  //

  SurfaceCategoryCode::
  SurfaceCategoryCode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SurfaceCategoryCode_convert ();
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SurfaceCategoryCode_convert ();
  }

  SurfaceCategoryCode::
  SurfaceCategoryCode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SurfaceCategoryCode_convert ();
  }

  SurfaceCategoryCode* SurfaceCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SurfaceCategoryCode (*this, f, c);
  }

  SurfaceCategoryCode::value SurfaceCategoryCode::
  _xsd_SurfaceCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurfaceCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SurfaceCategoryCode_indexes_,
                      _xsd_SurfaceCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_SurfaceCategoryCode_indexes_ + 7 || _xsd_SurfaceCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SurfaceCategoryCode::
  _xsd_SurfaceCategoryCode_literals_[7] =
  {
    "CORDAR",
    "ELLPSE",
    "FA",
    "ORBTAR",
    "PLYAAR",
    "PLYGAR",
    "TRCKAR"
  };

  const SurfaceCategoryCode::value SurfaceCategoryCode::
  _xsd_SurfaceCategoryCode_indexes_[7] =
  {
    ::oo_2_0::SurfaceCategoryCode::CORDAR,
    ::oo_2_0::SurfaceCategoryCode::ELLPSE,
    ::oo_2_0::SurfaceCategoryCode::FA,
    ::oo_2_0::SurfaceCategoryCode::ORBTAR,
    ::oo_2_0::SurfaceCategoryCode::PLYAAR,
    ::oo_2_0::SurfaceCategoryCode::PLYGAR,
    ::oo_2_0::SurfaceCategoryCode::TRCKAR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SurfaceCategoryCode >
  _xsd_SurfaceCategoryCode_type_factory_init (
    "SurfaceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SurfaceVesselTypeCategoryCode
  //

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SurfaceVesselTypeCategoryCode_convert ();
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SurfaceVesselTypeCategoryCode_convert ();
  }

  SurfaceVesselTypeCategoryCode::
  SurfaceVesselTypeCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SurfaceVesselTypeCategoryCode_convert ();
  }

  SurfaceVesselTypeCategoryCode* SurfaceVesselTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SurfaceVesselTypeCategoryCode (*this, f, c);
  }

  SurfaceVesselTypeCategoryCode::value SurfaceVesselTypeCategoryCode::
  _xsd_SurfaceVesselTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurfaceVesselTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SurfaceVesselTypeCategoryCode_indexes_,
                      _xsd_SurfaceVesselTypeCategoryCode_indexes_ + 424,
                      *this,
                      c));

    if (i == _xsd_SurfaceVesselTypeCategoryCode_indexes_ + 424 || _xsd_SurfaceVesselTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SurfaceVesselTypeCategoryCode::
  _xsd_SurfaceVesselTypeCategoryCode_literals_[424] =
  {
    "AA",
    "AAR",
    "AAV",
    "AB",
    "ABU",
    "ABUD",
    "AD",
    "ADG",
    "AE",
    "AEL",
    "AEM",
    "AET",
    "AETL",
    "AF",
    "AFDB",
    "AFDL",
    "AFDM",
    "AFL",
    "AFS",
    "AFT",
    "AG",
    "AGB",
    "AGBL",
    "AGBN",
    "AGCL",
    "AGCM",
    "AGDS",
    "AGE",
    "AGF",
    "AGH",
    "AGI",
    "AGM",
    "AGMS",
    "AGOB",
    "AGOR",
    "AGOS",
    "AGP",
    "AGR",
    "AGS",
    "AGSA",
    "AGSC",
    "AGSL",
    "AGT",
    "AGTT",
    "AH",
    "AK",
    "AKL",
    "AKR",
    "AKS",
    "AKSL",
    "AKV",
    "ALS",
    "AN",
    "ANL",
    "AO",
    "AOE",
    "AOL",
    "AOR",
    "AORL",
    "AOS",
    "AOSR",
    "AOT",
    "AOTL",
    "AP",
    "APB",
    "APCR",
    "APCT",
    "APL",
    "AR",
    "ARB",
    "ARC",
    "ARD",
    "ARDM",
    "ARH",
    "ARL",
    "ARR",
    "ARS",
    "ARSD",
    "ARV",
    "AS",
    "ASL",
    "ASR",
    "ASVR",
    "AT",
    "ATA",
    "ATF",
    "ATR",
    "ATS",
    "AV",
    "AVB",
    "AVM",
    "AVR",
    "AVS",
    "AVT",
    "AWT",
    "AWW",
    "AX",
    "AXL",
    "AXS",
    "BB",
    "CA",
    "CAT",
    "CATBAT",
    "CC",
    "CG",
    "CGH",
    "CGHN",
    "CGN",
    "CH",
    "CUTTER",
    "CV",
    "CVG",
    "CVGN",
    "CVH",
    "CVHG",
    "CVHGN",
    "CVHN",
    "CVL",
    "CVLG",
    "CVN",
    "CVS",
    "CVT",
    "DD",
    "DDG",
    "DDGH",
    "DDH",
    "DDT",
    "DE",
    "DHOW",
    "FF",
    "FFG",
    "FFGH",
    "FFH",
    "FFL",
    "FFLG",
    "FFT",
    "FS",
    "HUSBAT",
    "KETCH",
    "LARC",
    "LARCV",
    "LC",
    "LCAC",
    "LCC",
    "LCFS",
    "LCM",
    "LCMJ",
    "LCP",
    "LCPA",
    "LCPL",
    "LCT",
    "LCU",
    "LCUJ",
    "LCVP",
    "LCW",
    "LDW",
    "LFS",
    "LG",
    "LHA",
    "LHD",
    "LKA",
    "LL",
    "LLB",
    "LLP",
    "LLT",
    "LM",
    "LPD",
    "LPH",
    "LPP",
    "LS",
    "LSD",
    "LSL",
    "LSM",
    "LST",
    "LSV",
    "MC",
    "MCCS",
    "MCD",
    "MCJ",
    "MCMV",
    "MCS",
    "MCSL",
    "MCT",
    "MH",
    "MHA",
    "MHC",
    "MHCD",
    "MHI",
    "MHO",
    "MHS",
    "MHSC",
    "MHSD",
    "MHSO",
    "ML",
    "MLA",
    "MLC",
    "MLI",
    "MLO",
    "MLR",
    "MLS",
    "MM",
    "MS",
    "MSA",
    "MSB",
    "MSC",
    "MSCD",
    "MSCJ",
    "MSCK",
    "MSCS",
    "MSCT",
    "MSD",
    "MSF",
    "MSFJ",
    "MSFK",
    "MSI",
    "MSIJ",
    "MSL",
    "MSO",
    "MSR",
    "MSS",
    "MYAC",
    "NKN",
    "NOS",
    "PB",
    "PBF",
    "PBK",
    "PBO",
    "PBR",
    "PC",
    "PCE",
    "PCF",
    "PCFJ",
    "PCFK",
    "PCK",
    "PCS",
    "PCT",
    "PG",
    "PGB",
    "PGF",
    "PGG",
    "PGGJ",
    "PGGK",
    "PGK",
    "PGM",
    "PGS",
    "PHJ",
    "PHJM",
    "PHJS",
    "PP",
    "PSO",
    "PT",
    "PTG",
    "PTGJ",
    "PTGK",
    "PTGT",
    "PTJ",
    "PTK",
    "PTL",
    "PTLK",
    "PTT",
    "QJ",
    "QR",
    "QS",
    "RABOUT",
    "RCRUSR",
    "SCHOON",
    "SLOOP",
    "SPDBAT",
    "SWCL",
    "SWCM",
    "TJ",
    "TJC",
    "TJF",
    "TJGB",
    "TJGS",
    "TJL",
    "TM",
    "TMA",
    "TMB",
    "TMC",
    "TMCS",
    "TMD",
    "TME",
    "TMF",
    "TMFR",
    "TMGB",
    "TMGS",
    "TMH",
    "TMI",
    "TMK",
    "TML",
    "TMLS",
    "TMM",
    "TMO",
    "TMOL",
    "TMOR",
    "TMOS",
    "TMOT",
    "TMP",
    "TMR",
    "TMS",
    "TMT",
    "TMTR",
    "TMTS",
    "TMWT",
    "TMWW",
    "TMX",
    "TRIHUL",
    "TU",
    "TUB",
    "TUC",
    "TUF",
    "TUI",
    "TUR",
    "TUS",
    "TUT",
    "TUW",
    "VPB",
    "VPC",
    "VPG",
    "VYDT",
    "VYFL",
    "WDD",
    "WFF",
    "WFFL",
    "WQS",
    "YAC",
    "YAG",
    "YAGE",
    "YAGEN",
    "YAGF",
    "YAGK",
    "YAGT",
    "YAM",
    "YAWL",
    "YB",
    "YC",
    "YCK",
    "YCV",
    "YD",
    "YDG",
    "YDT",
    "YE",
    "YF",
    "YFB",
    "YFC",
    "YFD",
    "YFDB",
    "YFDL",
    "YFDM",
    "YFL",
    "YFLB",
    "YFLK",
    "YFLN",
    "YFND",
    "YFNX",
    "YFP",
    "YFR",
    "YFRT",
    "YFT",
    "YFU",
    "YGG",
    "YGS",
    "YGT",
    "YGTN",
    "YH",
    "YHT",
    "YL",
    "YLC",
    "YLG",
    "YLWT",
    "YM",
    "YMN",
    "YNC",
    "YNG",
    "YNT",
    "YO",
    "YOG",
    "YOM",
    "YOR",
    "YOS",
    "YOSR",
    "YOSS",
    "YP",
    "YPB",
    "YPD",
    "YPK",
    "YPT",
    "YR",
    "YRB",
    "YRBM",
    "YRC",
    "YRCN",
    "YRD",
    "YRDB",
    "YRDH",
    "YRDL",
    "YRDM",
    "YRG",
    "YRNS",
    "YRR",
    "YRRN",
    "YRST",
    "YS",
    "YT",
    "YTB",
    "YTD",
    "YTL",
    "YTM",
    "YTR",
    "YTS",
    "YTT",
    "YV",
    "YVS",
    "YW",
    "YXR",
    "YXT",
    "YY",
    "ZPB",
    "ZPC",
    "ZPG",
    "ZYFL",
    "ZYTB",
    "ZYTR"
  };

  const SurfaceVesselTypeCategoryCode::value SurfaceVesselTypeCategoryCode::
  _xsd_SurfaceVesselTypeCategoryCode_indexes_[424] =
  {
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AAR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AAV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ABU,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ABUD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ADG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AEL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AEM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AET,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AETL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFDB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFDL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFDM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AFT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGBL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGBN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGCL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGCM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGDS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGMS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGOB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGOR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGOS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGSA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGSC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGSL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AGTT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AKL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AKR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AKS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AKSL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AKV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ALS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ANL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AORL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOSR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AOTL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::APB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::APCR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::APCT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::APL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARDM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARSD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ARV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ASL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ASR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ASVR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ATA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ATF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ATR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ATS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AVB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AVM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AVR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AVS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AVT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AWT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AWW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AX,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AXL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::AXS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::BB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CAT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CATBAT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CGH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CGHN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CGN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CUTTER,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVGN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVHG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVHGN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVHN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVLG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::CVT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DDG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DDGH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DDH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DDT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::DHOW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFGH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFLG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FFT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::FS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::HUSBAT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::KETCH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LARC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LARCV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCAC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCFS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCMJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCPA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCPL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCU,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCUJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCVP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LCW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LDW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LFS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LHA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LHD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LKA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LLB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LLP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LLT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LPD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LPH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LPP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LSD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LSL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LSM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LST,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::LSV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCCS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCMV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCSL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MCT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHCD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHSC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHSD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MHSO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ML,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MLS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSCD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSCJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSCK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSCS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSCT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSFJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSFK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSIJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MSS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::MYAC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::NKN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::NOS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PBF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PBK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PBO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PBR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCFJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCFK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PCT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGGJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGGK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PGS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PHJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PHJM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PHJS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PSO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTGJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTGK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTGT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTLK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::PTT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::QJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::QR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::QS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::RABOUT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::RCRUSR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::SCHOON,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::SLOOP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::SPDBAT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::SWCL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::SWCM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJ,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJGB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJGS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TJL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMA,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMCS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TME,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMFR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMGB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMGS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TML,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMLS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMOL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMOR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMOS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMOT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMTR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMTS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMWT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMWW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TMX,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TRIHUL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TU,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUI,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::TUW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::VPB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::VPC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::VPG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::VYDT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::VYFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::WDD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::WFF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::WFFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::WQS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAGE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAGEN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAGF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAGK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAGT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YAWL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YCK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YCV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YDG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YDT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YE,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YF,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFDB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFDL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFDM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFLB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFLK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFLN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFND,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFNX,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFRT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YFU,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YGG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YGS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YGT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YGTN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YHT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YLC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YLG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YLWT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YMN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YNC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YNG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YNT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YO,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOSR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YOSS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YP,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YPB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YPD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YPK,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YPT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRBM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRCN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRDB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRDH,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRDL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRDM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRNS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRRN,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YRST,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTD,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTM,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YTT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YV,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YVS,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YW,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YXR,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YXT,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::YY,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZPB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZPC,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZPG,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZYFL,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZYTB,
    ::oo_2_0::SurfaceVesselTypeCategoryCode::ZYTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SurfaceVesselTypeCategoryCode >
  _xsd_SurfaceVesselTypeCategoryCode_type_factory_init (
    "SurfaceVesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SurveillanceCapabilityCategoryCode
  //

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SurveillanceCapabilityCategoryCode_convert ();
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SurveillanceCapabilityCategoryCode_convert ();
  }

  SurveillanceCapabilityCategoryCode::
  SurveillanceCapabilityCategoryCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SurveillanceCapabilityCategoryCode_convert ();
  }

  SurveillanceCapabilityCategoryCode* SurveillanceCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SurveillanceCapabilityCategoryCode (*this, f, c);
  }

  SurveillanceCapabilityCategoryCode::value SurveillanceCapabilityCategoryCode::
  _xsd_SurveillanceCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurveillanceCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SurveillanceCapabilityCategoryCode_indexes_,
                      _xsd_SurveillanceCapabilityCategoryCode_indexes_ + 7,
                      *this,
                      c));

    if (i == _xsd_SurveillanceCapabilityCategoryCode_indexes_ + 7 || _xsd_SurveillanceCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SurveillanceCapabilityCategoryCode::
  _xsd_SurveillanceCapabilityCategoryCode_literals_[7] =
  {
    "COM",
    "ELC",
    "HUM",
    "IMG",
    "NKN",
    "NOS",
    "SIG"
  };

  const SurveillanceCapabilityCategoryCode::value SurveillanceCapabilityCategoryCode::
  _xsd_SurveillanceCapabilityCategoryCode_indexes_[7] =
  {
    ::oo_2_0::SurveillanceCapabilityCategoryCode::COM,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::ELC,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::HUM,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::IMG,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::NKN,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::NOS,
    ::oo_2_0::SurveillanceCapabilityCategoryCode::SIG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SurveillanceCapabilityCategoryCode >
  _xsd_SurveillanceCapabilityCategoryCode_type_factory_init (
    "SurveillanceCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // SurveillanceCapabilityDescriptorCode
  //

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_SurveillanceCapabilityDescriptorCode_convert ();
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_SurveillanceCapabilityDescriptorCode_convert ();
  }

  SurveillanceCapabilityDescriptorCode::
  SurveillanceCapabilityDescriptorCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_SurveillanceCapabilityDescriptorCode_convert ();
  }

  SurveillanceCapabilityDescriptorCode* SurveillanceCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SurveillanceCapabilityDescriptorCode (*this, f, c);
  }

  SurveillanceCapabilityDescriptorCode::value SurveillanceCapabilityDescriptorCode::
  _xsd_SurveillanceCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurveillanceCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_SurveillanceCapabilityDescriptorCode_indexes_,
                      _xsd_SurveillanceCapabilityDescriptorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_SurveillanceCapabilityDescriptorCode_indexes_ + 2 || _xsd_SurveillanceCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const SurveillanceCapabilityDescriptorCode::
  _xsd_SurveillanceCapabilityDescriptorCode_literals_[2] =
  {
    "MRANGE",
    "NRANGE"
  };

  const SurveillanceCapabilityDescriptorCode::value SurveillanceCapabilityDescriptorCode::
  _xsd_SurveillanceCapabilityDescriptorCode_indexes_[2] =
  {
    ::oo_2_0::SurveillanceCapabilityDescriptorCode::MRANGE,
    ::oo_2_0::SurveillanceCapabilityDescriptorCode::NRANGE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SurveillanceCapabilityDescriptorCode >
  _xsd_SurveillanceCapabilityDescriptorCode_type_factory_init (
    "SurveillanceCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // TargetEngagementAuthorityCode
  //

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_TargetEngagementAuthorityCode_convert ();
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_TargetEngagementAuthorityCode_convert ();
  }

  TargetEngagementAuthorityCode::
  TargetEngagementAuthorityCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_TargetEngagementAuthorityCode_convert ();
  }

  TargetEngagementAuthorityCode* TargetEngagementAuthorityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TargetEngagementAuthorityCode (*this, f, c);
  }

  TargetEngagementAuthorityCode::value TargetEngagementAuthorityCode::
  _xsd_TargetEngagementAuthorityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TargetEngagementAuthorityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_TargetEngagementAuthorityCode_indexes_,
                      _xsd_TargetEngagementAuthorityCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_TargetEngagementAuthorityCode_indexes_ + 4 || _xsd_TargetEngagementAuthorityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const TargetEngagementAuthorityCode::
  _xsd_TargetEngagementAuthorityCode_literals_[4] =
  {
    "AVLB",
    "EXCL",
    "HPOTGT",
    "NKN"
  };

  const TargetEngagementAuthorityCode::value TargetEngagementAuthorityCode::
  _xsd_TargetEngagementAuthorityCode_indexes_[4] =
  {
    ::oo_2_0::TargetEngagementAuthorityCode::AVLB,
    ::oo_2_0::TargetEngagementAuthorityCode::EXCL,
    ::oo_2_0::TargetEngagementAuthorityCode::HPOTGT,
    ::oo_2_0::TargetEngagementAuthorityCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TargetEngagementAuthorityCode >
  _xsd_TargetEngagementAuthorityCode_type_factory_init (
    "TargetEngagementAuthorityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // TargetPersonnelProtectionCategoryCode
  //

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_TargetPersonnelProtectionCategoryCode_convert ();
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_TargetPersonnelProtectionCategoryCode_convert ();
  }

  TargetPersonnelProtectionCategoryCode::
  TargetPersonnelProtectionCategoryCode (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_TargetPersonnelProtectionCategoryCode_convert ();
  }

  TargetPersonnelProtectionCategoryCode* TargetPersonnelProtectionCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TargetPersonnelProtectionCategoryCode (*this, f, c);
  }

  TargetPersonnelProtectionCategoryCode::value TargetPersonnelProtectionCategoryCode::
  _xsd_TargetPersonnelProtectionCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TargetPersonnelProtectionCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_TargetPersonnelProtectionCategoryCode_indexes_,
                      _xsd_TargetPersonnelProtectionCategoryCode_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_TargetPersonnelProtectionCategoryCode_indexes_ + 6 || _xsd_TargetPersonnelProtectionCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const TargetPersonnelProtectionCategoryCode::
  _xsd_TargetPersonnelProtectionCategoryCode_literals_[6] =
  {
    "COVER",
    "DUGIN",
    "PRAND",
    "PRONE",
    "PROVER",
    "PRUG"
  };

  const TargetPersonnelProtectionCategoryCode::value TargetPersonnelProtectionCategoryCode::
  _xsd_TargetPersonnelProtectionCategoryCode_indexes_[6] =
  {
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::COVER,
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::DUGIN,
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::PRAND,
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::PRONE,
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::PROVER,
    ::oo_2_0::TargetPersonnelProtectionCategoryCode::PRUG
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TargetPersonnelProtectionCategoryCode >
  _xsd_TargetPersonnelProtectionCategoryCode_type_factory_init (
    "TargetPersonnelProtectionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // TaskFormationTypeCategoryCode
  //

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_TaskFormationTypeCategoryCode_convert ();
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_TaskFormationTypeCategoryCode_convert ();
  }

  TaskFormationTypeCategoryCode::
  TaskFormationTypeCategoryCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_TaskFormationTypeCategoryCode_convert ();
  }

  TaskFormationTypeCategoryCode* TaskFormationTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TaskFormationTypeCategoryCode (*this, f, c);
  }

  TaskFormationTypeCategoryCode::value TaskFormationTypeCategoryCode::
  _xsd_TaskFormationTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TaskFormationTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_TaskFormationTypeCategoryCode_indexes_,
                      _xsd_TaskFormationTypeCategoryCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_TaskFormationTypeCategoryCode_indexes_ + 21 || _xsd_TaskFormationTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const TaskFormationTypeCategoryCode::
  _xsd_TaskFormationTypeCategoryCode_literals_[21] =
  {
    "AIRFMN",
    "AIRTF",
    "AMPHTF",
    "CMBCTM",
    "FLOTLA",
    "GRNAVY",
    "INTGTM",
    "JNTTF",
    "LANDTF",
    "LNDFMN",
    "MLCNVY",
    "MRATCD",
    "MRATCM",
    "NAVFMN",
    "NAVLTE",
    "NAVLTF",
    "NAVLTG",
    "NAVLTU",
    "NOS",
    "PATROL",
    "WRKPTY"
  };

  const TaskFormationTypeCategoryCode::value TaskFormationTypeCategoryCode::
  _xsd_TaskFormationTypeCategoryCode_indexes_[21] =
  {
    ::oo_2_0::TaskFormationTypeCategoryCode::AIRFMN,
    ::oo_2_0::TaskFormationTypeCategoryCode::AIRTF,
    ::oo_2_0::TaskFormationTypeCategoryCode::AMPHTF,
    ::oo_2_0::TaskFormationTypeCategoryCode::CMBCTM,
    ::oo_2_0::TaskFormationTypeCategoryCode::FLOTLA,
    ::oo_2_0::TaskFormationTypeCategoryCode::GRNAVY,
    ::oo_2_0::TaskFormationTypeCategoryCode::INTGTM,
    ::oo_2_0::TaskFormationTypeCategoryCode::JNTTF,
    ::oo_2_0::TaskFormationTypeCategoryCode::LANDTF,
    ::oo_2_0::TaskFormationTypeCategoryCode::LNDFMN,
    ::oo_2_0::TaskFormationTypeCategoryCode::MLCNVY,
    ::oo_2_0::TaskFormationTypeCategoryCode::MRATCD,
    ::oo_2_0::TaskFormationTypeCategoryCode::MRATCM,
    ::oo_2_0::TaskFormationTypeCategoryCode::NAVFMN,
    ::oo_2_0::TaskFormationTypeCategoryCode::NAVLTE,
    ::oo_2_0::TaskFormationTypeCategoryCode::NAVLTF,
    ::oo_2_0::TaskFormationTypeCategoryCode::NAVLTG,
    ::oo_2_0::TaskFormationTypeCategoryCode::NAVLTU,
    ::oo_2_0::TaskFormationTypeCategoryCode::NOS,
    ::oo_2_0::TaskFormationTypeCategoryCode::PATROL,
    ::oo_2_0::TaskFormationTypeCategoryCode::WRKPTY
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TaskFormationTypeCategoryCode >
  _xsd_TaskFormationTypeCategoryCode_type_factory_init (
    "TaskFormationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // TransmissionCapabilityCategoryCode
  //

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_TransmissionCapabilityCategoryCode_convert ();
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_TransmissionCapabilityCategoryCode_convert ();
  }

  TransmissionCapabilityCategoryCode::
  TransmissionCapabilityCategoryCode (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_TransmissionCapabilityCategoryCode_convert ();
  }

  TransmissionCapabilityCategoryCode* TransmissionCapabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TransmissionCapabilityCategoryCode (*this, f, c);
  }

  TransmissionCapabilityCategoryCode::value TransmissionCapabilityCategoryCode::
  _xsd_TransmissionCapabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TransmissionCapabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_TransmissionCapabilityCategoryCode_indexes_,
                      _xsd_TransmissionCapabilityCategoryCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_TransmissionCapabilityCategoryCode_indexes_ + 3 || _xsd_TransmissionCapabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const TransmissionCapabilityCategoryCode::
  _xsd_TransmissionCapabilityCategoryCode_literals_[3] =
  {
    "RECEIV",
    "TRNSMT",
    "TRNSRC"
  };

  const TransmissionCapabilityCategoryCode::value TransmissionCapabilityCategoryCode::
  _xsd_TransmissionCapabilityCategoryCode_indexes_[3] =
  {
    ::oo_2_0::TransmissionCapabilityCategoryCode::RECEIV,
    ::oo_2_0::TransmissionCapabilityCategoryCode::TRNSMT,
    ::oo_2_0::TransmissionCapabilityCategoryCode::TRNSRC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransmissionCapabilityCategoryCode >
  _xsd_TransmissionCapabilityCategoryCode_type_factory_init (
    "TransmissionCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // TransmissionCapabilityDescriptorCode
  //

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_TransmissionCapabilityDescriptorCode_convert ();
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_TransmissionCapabilityDescriptorCode_convert ();
  }

  TransmissionCapabilityDescriptorCode::
  TransmissionCapabilityDescriptorCode (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_TransmissionCapabilityDescriptorCode_convert ();
  }

  TransmissionCapabilityDescriptorCode* TransmissionCapabilityDescriptorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TransmissionCapabilityDescriptorCode (*this, f, c);
  }

  TransmissionCapabilityDescriptorCode::value TransmissionCapabilityDescriptorCode::
  _xsd_TransmissionCapabilityDescriptorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TransmissionCapabilityDescriptorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_TransmissionCapabilityDescriptorCode_indexes_,
                      _xsd_TransmissionCapabilityDescriptorCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_TransmissionCapabilityDescriptorCode_indexes_ + 5 || _xsd_TransmissionCapabilityDescriptorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const TransmissionCapabilityDescriptorCode::
  _xsd_TransmissionCapabilityDescriptorCode_literals_[5] =
  {
    "MAXFRQ",
    "MAXPRF",
    "MNMFRQ",
    "MNMPRF",
    "POWER"
  };

  const TransmissionCapabilityDescriptorCode::value TransmissionCapabilityDescriptorCode::
  _xsd_TransmissionCapabilityDescriptorCode_indexes_[5] =
  {
    ::oo_2_0::TransmissionCapabilityDescriptorCode::MAXFRQ,
    ::oo_2_0::TransmissionCapabilityDescriptorCode::MAXPRF,
    ::oo_2_0::TransmissionCapabilityDescriptorCode::MNMFRQ,
    ::oo_2_0::TransmissionCapabilityDescriptorCode::MNMPRF,
    ::oo_2_0::TransmissionCapabilityDescriptorCode::POWER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransmissionCapabilityDescriptorCode >
  _xsd_TransmissionCapabilityDescriptorCode_type_factory_init (
    "TransmissionCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeArmCategoryCode
  //

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeArmCategoryCode_convert ();
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeArmCategoryCode_convert ();
  }

  UnitTypeArmCategoryCode::
  UnitTypeArmCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeArmCategoryCode_convert ();
  }

  UnitTypeArmCategoryCode* UnitTypeArmCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeArmCategoryCode (*this, f, c);
  }

  UnitTypeArmCategoryCode::value UnitTypeArmCategoryCode::
  _xsd_UnitTypeArmCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeArmCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeArmCategoryCode_indexes_,
                      _xsd_UnitTypeArmCategoryCode_indexes_ + 38,
                      *this,
                      c));

    if (i == _xsd_UnitTypeArmCategoryCode_indexes_ + 38 || _xsd_UnitTypeArmCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeArmCategoryCode::
  _xsd_UnitTypeArmCategoryCode_literals_[38] =
  {
    "AARMOR",
    "ADMIN",
    "AIRDEF",
    "ARMANT",
    "ARMOUR",
    "ARTLRY",
    "AV",
    "AVACOM",
    "AVAFW",
    "AVARW",
    "AVAVST",
    "CBRN",
    "ENG",
    "EOD",
    "FA",
    "FIRSPT",
    "HQSIGS",
    "HQSTF",
    "INF",
    "INFWAR",
    "ISFRCE",
    "LAWENF",
    "LNDSPT",
    "LOG",
    "MAINT",
    "MANOV",
    "MEDCL",
    "MILINT",
    "MSL",
    "MSLSTA",
    "NKN",
    "NOS",
    "RECCE",
    "ROCKET",
    "SIG",
    "SUPPLY",
    "TRNPTN",
    "TRSSUP"
  };

  const UnitTypeArmCategoryCode::value UnitTypeArmCategoryCode::
  _xsd_UnitTypeArmCategoryCode_indexes_[38] =
  {
    ::oo_2_0::UnitTypeArmCategoryCode::AARMOR,
    ::oo_2_0::UnitTypeArmCategoryCode::ADMIN,
    ::oo_2_0::UnitTypeArmCategoryCode::AIRDEF,
    ::oo_2_0::UnitTypeArmCategoryCode::ARMANT,
    ::oo_2_0::UnitTypeArmCategoryCode::ARMOUR,
    ::oo_2_0::UnitTypeArmCategoryCode::ARTLRY,
    ::oo_2_0::UnitTypeArmCategoryCode::AV,
    ::oo_2_0::UnitTypeArmCategoryCode::AVACOM,
    ::oo_2_0::UnitTypeArmCategoryCode::AVAFW,
    ::oo_2_0::UnitTypeArmCategoryCode::AVARW,
    ::oo_2_0::UnitTypeArmCategoryCode::AVAVST,
    ::oo_2_0::UnitTypeArmCategoryCode::CBRN,
    ::oo_2_0::UnitTypeArmCategoryCode::ENG,
    ::oo_2_0::UnitTypeArmCategoryCode::EOD,
    ::oo_2_0::UnitTypeArmCategoryCode::FA,
    ::oo_2_0::UnitTypeArmCategoryCode::FIRSPT,
    ::oo_2_0::UnitTypeArmCategoryCode::HQSIGS,
    ::oo_2_0::UnitTypeArmCategoryCode::HQSTF,
    ::oo_2_0::UnitTypeArmCategoryCode::INF,
    ::oo_2_0::UnitTypeArmCategoryCode::INFWAR,
    ::oo_2_0::UnitTypeArmCategoryCode::ISFRCE,
    ::oo_2_0::UnitTypeArmCategoryCode::LAWENF,
    ::oo_2_0::UnitTypeArmCategoryCode::LNDSPT,
    ::oo_2_0::UnitTypeArmCategoryCode::LOG,
    ::oo_2_0::UnitTypeArmCategoryCode::MAINT,
    ::oo_2_0::UnitTypeArmCategoryCode::MANOV,
    ::oo_2_0::UnitTypeArmCategoryCode::MEDCL,
    ::oo_2_0::UnitTypeArmCategoryCode::MILINT,
    ::oo_2_0::UnitTypeArmCategoryCode::MSL,
    ::oo_2_0::UnitTypeArmCategoryCode::MSLSTA,
    ::oo_2_0::UnitTypeArmCategoryCode::NKN,
    ::oo_2_0::UnitTypeArmCategoryCode::NOS,
    ::oo_2_0::UnitTypeArmCategoryCode::RECCE,
    ::oo_2_0::UnitTypeArmCategoryCode::ROCKET,
    ::oo_2_0::UnitTypeArmCategoryCode::SIG,
    ::oo_2_0::UnitTypeArmCategoryCode::SUPPLY,
    ::oo_2_0::UnitTypeArmCategoryCode::TRNPTN,
    ::oo_2_0::UnitTypeArmCategoryCode::TRSSUP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeArmCategoryCode >
  _xsd_UnitTypeArmCategoryCode_type_factory_init (
    "UnitTypeArmCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeArmSpecialisationCode
  //

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeArmSpecialisationCode_convert ();
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeArmSpecialisationCode_convert ();
  }

  UnitTypeArmSpecialisationCode::
  UnitTypeArmSpecialisationCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeArmSpecialisationCode_convert ();
  }

  UnitTypeArmSpecialisationCode* UnitTypeArmSpecialisationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeArmSpecialisationCode (*this, f, c);
  }

  UnitTypeArmSpecialisationCode::value UnitTypeArmSpecialisationCode::
  _xsd_UnitTypeArmSpecialisationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeArmSpecialisationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeArmSpecialisationCode_indexes_,
                      _xsd_UnitTypeArmSpecialisationCode_indexes_ + 130,
                      *this,
                      c));

    if (i == _xsd_UnitTypeArmSpecialisationCode_indexes_ + 130 || _xsd_UnitTypeArmSpecialisationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeArmSpecialisationCode::
  _xsd_UnitTypeArmSpecialisationCode_literals_[130] =
  {
    "ADCOMP",
    "ADGUN",
    "ADMSL",
    "AIREXP",
    "ANTSUB",
    "APOD",
    "ARMREC",
    "ARTSVY",
    "ATTACK",
    "AVASEC",
    "BIOLOG",
    "BIOREC",
    "BRDGG",
    "BRDRPT",
    "C2AVA",
    "CAVLRY",
    "CBRNRC",
    "CHMCAL",
    "CHMREC",
    "CHMSMD",
    "CHMSMK",
    "CIVAFR",
    "CIVLWE",
    "CNTINT",
    "CNTRIN",
    "CSAR",
    "DECONT",
    "DENTAL",
    "DISSEC",
    "ENCNST",
    "ENGREC",
    "ENGRRW",
    "EW",
    "EWDF",
    "EWINTC",
    "EWJAM",
    "FAHOW",
    "FAMLRS",
    "FAMORT",
    "FARCKL",
    "FASLRS",
    "FINANC",
    "HNDLDG",
    "INTERO",
    "JNTINT",
    "LABOUR",
    "LEGAL",
    "MCMAVA",
    "MEDEVC",
    "MEDTRS",
    "MEDTRT",
    "METEO",
    "MILPOL",
    "MIOPS",
    "MNTELC",
    "MNTELO",
    "MNTHVY",
    "MNTMSL",
    "MNTORD",
    "MRTGRR",
    "MVTCNT",
    "MWR",
    "NUCRAD",
    "PERSVC",
    "PIPELN",
    "POSTAL",
    "PSYCH",
    "PSYOP",
    "PUBAF",
    "PUBAFB",
    "PUBAFJ",
    "QM",
    "RAILSE",
    "RANGER",
    "RECAVA",
    "RECOVR",
    "REFAVA",
    "RELCHP",
    "REPLHO",
    "RIVSEC",
    "SARAVA",
    "SCOUT",
    "SEAL",
    "SECPOL",
    "SGCMDO",
    "SGELCR",
    "SGNC",
    "SGNLE",
    "SGNSE",
    "SGRAD",
    "SGRDRL",
    "SGSPT",
    "SGTACS",
    "SGTELC",
    "SGTELS",
    "SHRPAT",
    "SIGINT",
    "SPBOAT",
    "SPCFOR",
    "SPLC1",
    "SPLC2",
    "SPLC3",
    "SPLC3A",
    "SPLC4",
    "SPLC5",
    "SPLLDB",
    "SPLWAT",
    "SPOD",
    "SPOPSP",
    "SPSSNR",
    "SRSNSC",
    "SRV",
    "SRVGSM",
    "SRVGSR",
    "SRVLR",
    "SRVSEN",
    "SURG",
    "TACEXP",
    "TGTACQ",
    "TGTAOP",
    "TGTARD",
    "TGTASD",
    "TGTNG",
    "TOPO",
    "TRNMSL",
    "TRNRLY",
    "UDT",
    "UTLAVA",
    "VET",
    "WATER"
  };

  const UnitTypeArmSpecialisationCode::value UnitTypeArmSpecialisationCode::
  _xsd_UnitTypeArmSpecialisationCode_indexes_[130] =
  {
    ::oo_2_0::UnitTypeArmSpecialisationCode::ADCOMP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ADGUN,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ADMSL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::AIREXP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ANTSUB,
    ::oo_2_0::UnitTypeArmSpecialisationCode::APOD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ARMREC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ARTSVY,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ATTACK,
    ::oo_2_0::UnitTypeArmSpecialisationCode::AVASEC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::BIOLOG,
    ::oo_2_0::UnitTypeArmSpecialisationCode::BIOREC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::BRDGG,
    ::oo_2_0::UnitTypeArmSpecialisationCode::BRDRPT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::C2AVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CAVLRY,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CBRNRC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CHMCAL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CHMREC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CHMSMD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CHMSMK,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CIVAFR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CIVLWE,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CNTINT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CNTRIN,
    ::oo_2_0::UnitTypeArmSpecialisationCode::CSAR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::DECONT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::DENTAL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::DISSEC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ENCNST,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ENGREC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::ENGRRW,
    ::oo_2_0::UnitTypeArmSpecialisationCode::EW,
    ::oo_2_0::UnitTypeArmSpecialisationCode::EWDF,
    ::oo_2_0::UnitTypeArmSpecialisationCode::EWINTC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::EWJAM,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FAHOW,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FAMLRS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FAMORT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FARCKL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FASLRS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::FINANC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::HNDLDG,
    ::oo_2_0::UnitTypeArmSpecialisationCode::INTERO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::JNTINT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::LABOUR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::LEGAL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MCMAVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MEDEVC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MEDTRS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MEDTRT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::METEO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MILPOL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MIOPS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MNTELC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MNTELO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MNTHVY,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MNTMSL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MNTORD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MRTGRR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MVTCNT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::MWR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::NUCRAD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PERSVC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PIPELN,
    ::oo_2_0::UnitTypeArmSpecialisationCode::POSTAL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PSYCH,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PSYOP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PUBAF,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PUBAFB,
    ::oo_2_0::UnitTypeArmSpecialisationCode::PUBAFJ,
    ::oo_2_0::UnitTypeArmSpecialisationCode::QM,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RAILSE,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RANGER,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RECAVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RECOVR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::REFAVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RELCHP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::REPLHO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::RIVSEC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SARAVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SCOUT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SEAL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SECPOL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGCMDO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGELCR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGNC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGNLE,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGNSE,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGRAD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGRDRL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGSPT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGTACS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGTELC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SGTELS,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SHRPAT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SIGINT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPBOAT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPCFOR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC1,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC2,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC3,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC3A,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC4,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLC5,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLLDB,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPLWAT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPOD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPOPSP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SPSSNR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRSNSC,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRV,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRVGSM,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRVGSR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRVLR,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SRVSEN,
    ::oo_2_0::UnitTypeArmSpecialisationCode::SURG,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TACEXP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TGTACQ,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TGTAOP,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TGTARD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TGTASD,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TGTNG,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TOPO,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TRNMSL,
    ::oo_2_0::UnitTypeArmSpecialisationCode::TRNRLY,
    ::oo_2_0::UnitTypeArmSpecialisationCode::UDT,
    ::oo_2_0::UnitTypeArmSpecialisationCode::UTLAVA,
    ::oo_2_0::UnitTypeArmSpecialisationCode::VET,
    ::oo_2_0::UnitTypeArmSpecialisationCode::WATER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeArmSpecialisationCode >
  _xsd_UnitTypeArmSpecialisationCode_type_factory_init (
    "UnitTypeArmSpecialisationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeCategoryCode
  //

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeCategoryCode_convert ();
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeCategoryCode_convert ();
  }

  UnitTypeCategoryCode::
  UnitTypeCategoryCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeCategoryCode_convert ();
  }

  UnitTypeCategoryCode* UnitTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeCategoryCode (*this, f, c);
  }

  UnitTypeCategoryCode::value UnitTypeCategoryCode::
  _xsd_UnitTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeCategoryCode_indexes_,
                      _xsd_UnitTypeCategoryCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_UnitTypeCategoryCode_indexes_ + 5 || _xsd_UnitTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeCategoryCode::
  _xsd_UnitTypeCategoryCode_literals_[5] =
  {
    "COMBAT",
    "COMSER",
    "COMSPT",
    "NKN",
    "SOF"
  };

  const UnitTypeCategoryCode::value UnitTypeCategoryCode::
  _xsd_UnitTypeCategoryCode_indexes_[5] =
  {
    ::oo_2_0::UnitTypeCategoryCode::COMBAT,
    ::oo_2_0::UnitTypeCategoryCode::COMSER,
    ::oo_2_0::UnitTypeCategoryCode::COMSPT,
    ::oo_2_0::UnitTypeCategoryCode::NKN,
    ::oo_2_0::UnitTypeCategoryCode::SOF
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeCategoryCode >
  _xsd_UnitTypeCategoryCode_type_factory_init (
    "UnitTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeGeneralMobilityCode
  //

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeGeneralMobilityCode_convert ();
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeGeneralMobilityCode_convert ();
  }

  UnitTypeGeneralMobilityCode::
  UnitTypeGeneralMobilityCode (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeGeneralMobilityCode_convert ();
  }

  UnitTypeGeneralMobilityCode* UnitTypeGeneralMobilityCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeGeneralMobilityCode (*this, f, c);
  }

  UnitTypeGeneralMobilityCode::value UnitTypeGeneralMobilityCode::
  _xsd_UnitTypeGeneralMobilityCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeGeneralMobilityCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeGeneralMobilityCode_indexes_,
                      _xsd_UnitTypeGeneralMobilityCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_UnitTypeGeneralMobilityCode_indexes_ + 13 || _xsd_UnitTypeGeneralMobilityCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeGeneralMobilityCode::
  _xsd_UnitTypeGeneralMobilityCode_literals_[13] =
  {
    "AIR",
    "AIRCMP",
    "AIRFW",
    "AIRRW",
    "AIRVST",
    "AMPH",
    "DSMNTD",
    "HORSE",
    "LAND",
    "LNDRAI",
    "LNDTRC",
    "LNDTWD",
    "LNDWHL"
  };

  const UnitTypeGeneralMobilityCode::value UnitTypeGeneralMobilityCode::
  _xsd_UnitTypeGeneralMobilityCode_indexes_[13] =
  {
    ::oo_2_0::UnitTypeGeneralMobilityCode::AIR,
    ::oo_2_0::UnitTypeGeneralMobilityCode::AIRCMP,
    ::oo_2_0::UnitTypeGeneralMobilityCode::AIRFW,
    ::oo_2_0::UnitTypeGeneralMobilityCode::AIRRW,
    ::oo_2_0::UnitTypeGeneralMobilityCode::AIRVST,
    ::oo_2_0::UnitTypeGeneralMobilityCode::AMPH,
    ::oo_2_0::UnitTypeGeneralMobilityCode::DSMNTD,
    ::oo_2_0::UnitTypeGeneralMobilityCode::HORSE,
    ::oo_2_0::UnitTypeGeneralMobilityCode::LAND,
    ::oo_2_0::UnitTypeGeneralMobilityCode::LNDRAI,
    ::oo_2_0::UnitTypeGeneralMobilityCode::LNDTRC,
    ::oo_2_0::UnitTypeGeneralMobilityCode::LNDTWD,
    ::oo_2_0::UnitTypeGeneralMobilityCode::LNDWHL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeGeneralMobilityCode >
  _xsd_UnitTypeGeneralMobilityCode_type_factory_init (
    "UnitTypeGeneralMobilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeQualifierCode
  //

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeQualifierCode_convert ();
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeQualifierCode_convert ();
  }

  UnitTypeQualifierCode::
  UnitTypeQualifierCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeQualifierCode_convert ();
  }

  UnitTypeQualifierCode* UnitTypeQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeQualifierCode (*this, f, c);
  }

  UnitTypeQualifierCode::value UnitTypeQualifierCode::
  _xsd_UnitTypeQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeQualifierCode_indexes_,
                      _xsd_UnitTypeQualifierCode_indexes_ + 15,
                      *this,
                      c));

    if (i == _xsd_UnitTypeQualifierCode_indexes_ + 15 || _xsd_UnitTypeQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeQualifierCode::
  _xsd_UnitTypeQualifierCode_literals_[15] =
  {
    "CORPS",
    "DIV",
    "FORCE",
    "HEAVY",
    "HMAD",
    "LIGHT",
    "LR",
    "MEDIUM",
    "MR",
    "SR",
    "STRTGC",
    "TACTCL",
    "THTRE",
    "TMD",
    "VSR"
  };

  const UnitTypeQualifierCode::value UnitTypeQualifierCode::
  _xsd_UnitTypeQualifierCode_indexes_[15] =
  {
    ::oo_2_0::UnitTypeQualifierCode::CORPS,
    ::oo_2_0::UnitTypeQualifierCode::DIV,
    ::oo_2_0::UnitTypeQualifierCode::FORCE,
    ::oo_2_0::UnitTypeQualifierCode::HEAVY,
    ::oo_2_0::UnitTypeQualifierCode::HMAD,
    ::oo_2_0::UnitTypeQualifierCode::LIGHT,
    ::oo_2_0::UnitTypeQualifierCode::LR,
    ::oo_2_0::UnitTypeQualifierCode::MEDIUM,
    ::oo_2_0::UnitTypeQualifierCode::MR,
    ::oo_2_0::UnitTypeQualifierCode::SR,
    ::oo_2_0::UnitTypeQualifierCode::STRTGC,
    ::oo_2_0::UnitTypeQualifierCode::TACTCL,
    ::oo_2_0::UnitTypeQualifierCode::THTRE,
    ::oo_2_0::UnitTypeQualifierCode::TMD,
    ::oo_2_0::UnitTypeQualifierCode::VSR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeQualifierCode >
  _xsd_UnitTypeQualifierCode_type_factory_init (
    "UnitTypeQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeSizeCode
  //

  UnitTypeSizeCode::
  UnitTypeSizeCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeSizeCode_convert ();
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeSizeCode_convert ();
  }

  UnitTypeSizeCode::
  UnitTypeSizeCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeSizeCode_convert ();
  }

  UnitTypeSizeCode* UnitTypeSizeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeSizeCode (*this, f, c);
  }

  UnitTypeSizeCode::value UnitTypeSizeCode::
  _xsd_UnitTypeSizeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeSizeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeSizeCode_indexes_,
                      _xsd_UnitTypeSizeCode_indexes_ + 28,
                      *this,
                      c));

    if (i == _xsd_UnitTypeSizeCode_indexes_ + 28 || _xsd_UnitTypeSizeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeSizeCode::
  _xsd_UnitTypeSizeCode_literals_[28] =
  {
    "AG",
    "ARMY",
    "BATGRP",
    "BDE",
    "BDEGRP",
    "BN",
    "BNG",
    "CORPS",
    "COY",
    "COYG",
    "DIV",
    "FLEET",
    "FLIGHT",
    "NKN",
    "NOS",
    "NTF",
    "NTG",
    "NTU",
    "PLT",
    "REGION",
    "RGT",
    "SECT",
    "SQDRNA",
    "SQDRNM",
    "SQUAD",
    "TEAM",
    "TSKELN",
    "WING"
  };

  const UnitTypeSizeCode::value UnitTypeSizeCode::
  _xsd_UnitTypeSizeCode_indexes_[28] =
  {
    ::oo_2_0::UnitTypeSizeCode::AG,
    ::oo_2_0::UnitTypeSizeCode::ARMY,
    ::oo_2_0::UnitTypeSizeCode::BATGRP,
    ::oo_2_0::UnitTypeSizeCode::BDE,
    ::oo_2_0::UnitTypeSizeCode::BDEGRP,
    ::oo_2_0::UnitTypeSizeCode::BN,
    ::oo_2_0::UnitTypeSizeCode::BNG,
    ::oo_2_0::UnitTypeSizeCode::CORPS,
    ::oo_2_0::UnitTypeSizeCode::COY,
    ::oo_2_0::UnitTypeSizeCode::COYG,
    ::oo_2_0::UnitTypeSizeCode::DIV,
    ::oo_2_0::UnitTypeSizeCode::FLEET,
    ::oo_2_0::UnitTypeSizeCode::FLIGHT,
    ::oo_2_0::UnitTypeSizeCode::NKN,
    ::oo_2_0::UnitTypeSizeCode::NOS,
    ::oo_2_0::UnitTypeSizeCode::NTF,
    ::oo_2_0::UnitTypeSizeCode::NTG,
    ::oo_2_0::UnitTypeSizeCode::NTU,
    ::oo_2_0::UnitTypeSizeCode::PLT,
    ::oo_2_0::UnitTypeSizeCode::REGION,
    ::oo_2_0::UnitTypeSizeCode::RGT,
    ::oo_2_0::UnitTypeSizeCode::SECT,
    ::oo_2_0::UnitTypeSizeCode::SQDRNA,
    ::oo_2_0::UnitTypeSizeCode::SQDRNM,
    ::oo_2_0::UnitTypeSizeCode::SQUAD,
    ::oo_2_0::UnitTypeSizeCode::TEAM,
    ::oo_2_0::UnitTypeSizeCode::TSKELN,
    ::oo_2_0::UnitTypeSizeCode::WING
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeSizeCode >
  _xsd_UnitTypeSizeCode_type_factory_init (
    "UnitTypeSizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UnitTypeSupplementarySpecialisationCode
  //

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UnitTypeSupplementarySpecialisationCode_convert ();
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UnitTypeSupplementarySpecialisationCode_convert ();
  }

  UnitTypeSupplementarySpecialisationCode::
  UnitTypeSupplementarySpecialisationCode (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UnitTypeSupplementarySpecialisationCode_convert ();
  }

  UnitTypeSupplementarySpecialisationCode* UnitTypeSupplementarySpecialisationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UnitTypeSupplementarySpecialisationCode (*this, f, c);
  }

  UnitTypeSupplementarySpecialisationCode::value UnitTypeSupplementarySpecialisationCode::
  _xsd_UnitTypeSupplementarySpecialisationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UnitTypeSupplementarySpecialisationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UnitTypeSupplementarySpecialisationCode_indexes_,
                      _xsd_UnitTypeSupplementarySpecialisationCode_indexes_ + 13,
                      *this,
                      c));

    if (i == _xsd_UnitTypeSupplementarySpecialisationCode_indexes_ + 13 || _xsd_UnitTypeSupplementarySpecialisationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UnitTypeSupplementarySpecialisationCode::
  _xsd_UnitTypeSupplementarySpecialisationCode_literals_[13] =
  {
    "AIR",
    "AIRBRN",
    "AMPH",
    "ARASLT",
    "ARCTIC",
    "ARMORD",
    "GROUND",
    "LIGHT",
    "MARINE",
    "MECH",
    "MOUNTN",
    "MTRSD",
    "NAVAL"
  };

  const UnitTypeSupplementarySpecialisationCode::value UnitTypeSupplementarySpecialisationCode::
  _xsd_UnitTypeSupplementarySpecialisationCode_indexes_[13] =
  {
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::AIR,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::AIRBRN,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::AMPH,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::ARASLT,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::ARCTIC,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::ARMORD,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::GROUND,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::LIGHT,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::MARINE,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::MECH,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::MOUNTN,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::MTRSD,
    ::oo_2_0::UnitTypeSupplementarySpecialisationCode::NAVAL
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnitTypeSupplementarySpecialisationCode >
  _xsd_UnitTypeSupplementarySpecialisationCode_type_factory_init (
    "UnitTypeSupplementarySpecialisationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UsageStatusCode
  //

  UsageStatusCode::
  UsageStatusCode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UsageStatusCode_convert ();
  }

  UsageStatusCode::
  UsageStatusCode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UsageStatusCode_convert ();
  }

  UsageStatusCode::
  UsageStatusCode (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UsageStatusCode_convert ();
  }

  UsageStatusCode* UsageStatusCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UsageStatusCode (*this, f, c);
  }

  UsageStatusCode::value UsageStatusCode::
  _xsd_UsageStatusCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UsageStatusCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UsageStatusCode_indexes_,
                      _xsd_UsageStatusCode_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_UsageStatusCode_indexes_ + 3 || _xsd_UsageStatusCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UsageStatusCode::
  _xsd_UsageStatusCode_literals_[3] =
  {
    "ACTIVE",
    "DEACTV",
    "NKN"
  };

  const UsageStatusCode::value UsageStatusCode::
  _xsd_UsageStatusCode_indexes_[3] =
  {
    ::oo_2_0::UsageStatusCode::ACTIVE,
    ::oo_2_0::UsageStatusCode::DEACTV,
    ::oo_2_0::UsageStatusCode::NKN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UsageStatusCode >
  _xsd_UsageStatusCode_type_factory_init (
    "UsageStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UxoStatusExposureCode
  //

  UxoStatusExposureCode::
  UxoStatusExposureCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UxoStatusExposureCode_convert ();
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UxoStatusExposureCode_convert ();
  }

  UxoStatusExposureCode::
  UxoStatusExposureCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UxoStatusExposureCode_convert ();
  }

  UxoStatusExposureCode* UxoStatusExposureCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UxoStatusExposureCode (*this, f, c);
  }

  UxoStatusExposureCode::value UxoStatusExposureCode::
  _xsd_UxoStatusExposureCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UxoStatusExposureCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UxoStatusExposureCode_indexes_,
                      _xsd_UxoStatusExposureCode_indexes_ + 9,
                      *this,
                      c));

    if (i == _xsd_UxoStatusExposureCode_indexes_ + 9 || _xsd_UxoStatusExposureCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UxoStatusExposureCode::
  _xsd_UxoStatusExposureCode_literals_[9] =
  {
    "FULEXP",
    "NKN",
    "NOS",
    "PRTEX",
    "PRTEXB",
    "PRTEXN",
    "PRTEXS",
    "PRTEXT",
    "UNEXPD"
  };

  const UxoStatusExposureCode::value UxoStatusExposureCode::
  _xsd_UxoStatusExposureCode_indexes_[9] =
  {
    ::oo_2_0::UxoStatusExposureCode::FULEXP,
    ::oo_2_0::UxoStatusExposureCode::NKN,
    ::oo_2_0::UxoStatusExposureCode::NOS,
    ::oo_2_0::UxoStatusExposureCode::PRTEX,
    ::oo_2_0::UxoStatusExposureCode::PRTEXB,
    ::oo_2_0::UxoStatusExposureCode::PRTEXN,
    ::oo_2_0::UxoStatusExposureCode::PRTEXS,
    ::oo_2_0::UxoStatusExposureCode::PRTEXT,
    ::oo_2_0::UxoStatusExposureCode::UNEXPD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UxoStatusExposureCode >
  _xsd_UxoStatusExposureCode_type_factory_init (
    "UxoStatusExposureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // UxoStatusQualifierCode
  //

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_UxoStatusQualifierCode_convert ();
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_UxoStatusQualifierCode_convert ();
  }

  UxoStatusQualifierCode::
  UxoStatusQualifierCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_UxoStatusQualifierCode_convert ();
  }

  UxoStatusQualifierCode* UxoStatusQualifierCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class UxoStatusQualifierCode (*this, f, c);
  }

  UxoStatusQualifierCode::value UxoStatusQualifierCode::
  _xsd_UxoStatusQualifierCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UxoStatusQualifierCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_UxoStatusQualifierCode_indexes_,
                      _xsd_UxoStatusQualifierCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_UxoStatusQualifierCode_indexes_ + 8 || _xsd_UxoStatusQualifierCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const UxoStatusQualifierCode::
  _xsd_UxoStatusQualifierCode_literals_[8] =
  {
    "BROKEN",
    "INTACT",
    "LEAKNG",
    "NEW",
    "NKN",
    "NOS",
    "OLD",
    "RUSTED"
  };

  const UxoStatusQualifierCode::value UxoStatusQualifierCode::
  _xsd_UxoStatusQualifierCode_indexes_[8] =
  {
    ::oo_2_0::UxoStatusQualifierCode::BROKEN,
    ::oo_2_0::UxoStatusQualifierCode::INTACT,
    ::oo_2_0::UxoStatusQualifierCode::LEAKNG,
    ::oo_2_0::UxoStatusQualifierCode::NEW,
    ::oo_2_0::UxoStatusQualifierCode::NKN,
    ::oo_2_0::UxoStatusQualifierCode::NOS,
    ::oo_2_0::UxoStatusQualifierCode::OLD,
    ::oo_2_0::UxoStatusQualifierCode::RUSTED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UxoStatusQualifierCode >
  _xsd_UxoStatusQualifierCode_type_factory_init (
    "UxoStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VegetationCategoryCode
  //

  VegetationCategoryCode::
  VegetationCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VegetationCategoryCode_convert ();
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VegetationCategoryCode_convert ();
  }

  VegetationCategoryCode::
  VegetationCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VegetationCategoryCode_convert ();
  }

  VegetationCategoryCode* VegetationCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VegetationCategoryCode (*this, f, c);
  }

  VegetationCategoryCode::value VegetationCategoryCode::
  _xsd_VegetationCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VegetationCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VegetationCategoryCode_indexes_,
                      _xsd_VegetationCategoryCode_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_VegetationCategoryCode_indexes_ + 8 || _xsd_VegetationCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VegetationCategoryCode::
  _xsd_VegetationCategoryCode_literals_[8] =
  {
    "BARE",
    "JUNGLE",
    "NKN",
    "NOS",
    "PLANT",
    "RNGLND",
    "WETLND",
    "WODLND"
  };

  const VegetationCategoryCode::value VegetationCategoryCode::
  _xsd_VegetationCategoryCode_indexes_[8] =
  {
    ::oo_2_0::VegetationCategoryCode::BARE,
    ::oo_2_0::VegetationCategoryCode::JUNGLE,
    ::oo_2_0::VegetationCategoryCode::NKN,
    ::oo_2_0::VegetationCategoryCode::NOS,
    ::oo_2_0::VegetationCategoryCode::PLANT,
    ::oo_2_0::VegetationCategoryCode::RNGLND,
    ::oo_2_0::VegetationCategoryCode::WETLND,
    ::oo_2_0::VegetationCategoryCode::WODLND
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VegetationCategoryCode >
  _xsd_VegetationCategoryCode_type_factory_init (
    "VegetationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VegetationSubcategoryCode
  //

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VegetationSubcategoryCode_convert ();
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VegetationSubcategoryCode_convert ();
  }

  VegetationSubcategoryCode::
  VegetationSubcategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VegetationSubcategoryCode_convert ();
  }

  VegetationSubcategoryCode* VegetationSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VegetationSubcategoryCode (*this, f, c);
  }

  VegetationSubcategoryCode::value VegetationSubcategoryCode::
  _xsd_VegetationSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VegetationSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VegetationSubcategoryCode_indexes_,
                      _xsd_VegetationSubcategoryCode_indexes_ + 23,
                      *this,
                      c));

    if (i == _xsd_VegetationSubcategoryCode_indexes_ + 23 || _xsd_VegetationSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VegetationSubcategoryCode::
  _xsd_VegetationSubcategoryCode_literals_[23] =
  {
    "BAMBOO",
    "BTNCLG",
    "CRPLND",
    "DESERT",
    "FOREST",
    "GRASS",
    "GRSLND",
    "HDGERW",
    "HOPS",
    "JUNGC",
    "JUNGCE",
    "JUNGP",
    "JUNGS",
    "MARSH",
    "NURSRY",
    "OASIS",
    "ORCHRD",
    "SAVNNH",
    "SCRUB",
    "SWAMP",
    "TREES",
    "TUNDRA",
    "VNEYRD"
  };

  const VegetationSubcategoryCode::value VegetationSubcategoryCode::
  _xsd_VegetationSubcategoryCode_indexes_[23] =
  {
    ::oo_2_0::VegetationSubcategoryCode::BAMBOO,
    ::oo_2_0::VegetationSubcategoryCode::BTNCLG,
    ::oo_2_0::VegetationSubcategoryCode::CRPLND,
    ::oo_2_0::VegetationSubcategoryCode::DESERT,
    ::oo_2_0::VegetationSubcategoryCode::FOREST,
    ::oo_2_0::VegetationSubcategoryCode::GRASS,
    ::oo_2_0::VegetationSubcategoryCode::GRSLND,
    ::oo_2_0::VegetationSubcategoryCode::HDGERW,
    ::oo_2_0::VegetationSubcategoryCode::HOPS,
    ::oo_2_0::VegetationSubcategoryCode::JUNGC,
    ::oo_2_0::VegetationSubcategoryCode::JUNGCE,
    ::oo_2_0::VegetationSubcategoryCode::JUNGP,
    ::oo_2_0::VegetationSubcategoryCode::JUNGS,
    ::oo_2_0::VegetationSubcategoryCode::MARSH,
    ::oo_2_0::VegetationSubcategoryCode::NURSRY,
    ::oo_2_0::VegetationSubcategoryCode::OASIS,
    ::oo_2_0::VegetationSubcategoryCode::ORCHRD,
    ::oo_2_0::VegetationSubcategoryCode::SAVNNH,
    ::oo_2_0::VegetationSubcategoryCode::SCRUB,
    ::oo_2_0::VegetationSubcategoryCode::SWAMP,
    ::oo_2_0::VegetationSubcategoryCode::TREES,
    ::oo_2_0::VegetationSubcategoryCode::TUNDRA,
    ::oo_2_0::VegetationSubcategoryCode::VNEYRD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VegetationSubcategoryCode >
  _xsd_VegetationSubcategoryCode_type_factory_init (
    "VegetationSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VehicleTypeCategoryCode
  //

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VehicleTypeCategoryCode_convert ();
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VehicleTypeCategoryCode_convert ();
  }

  VehicleTypeCategoryCode::
  VehicleTypeCategoryCode (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VehicleTypeCategoryCode_convert ();
  }

  VehicleTypeCategoryCode* VehicleTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VehicleTypeCategoryCode (*this, f, c);
  }

  VehicleTypeCategoryCode::value VehicleTypeCategoryCode::
  _xsd_VehicleTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VehicleTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VehicleTypeCategoryCode_indexes_,
                      _xsd_VehicleTypeCategoryCode_indexes_ + 48,
                      *this,
                      c));

    if (i == _xsd_VehicleTypeCategoryCode_indexes_ + 48 || _xsd_VehicleTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VehicleTypeCategoryCode::
  _xsd_VehicleTypeCategoryCode_literals_[48] =
  {
    "ACVACV",
    "AMBUL",
    "AMPH",
    "APC",
    "APCREC",
    "ARMORD",
    "ARMRCC",
    "ARVELT",
    "ASSV",
    "ASSVEH",
    "AUTOMO",
    "BICYCL",
    "BTHVRE",
    "BTLTRE",
    "BTMDRE",
    "BUS",
    "CART",
    "CCTRCK",
    "CEVEH",
    "CMDPST",
    "CMDPTA",
    "CMDPTW",
    "CSVEH",
    "ENGNOS",
    "FORKLF",
    "FRFGTN",
    "GNLPRP",
    "HALFTR",
    "HETVEH",
    "LNDVEH",
    "MAINT",
    "MHVEH",
    "MILUV",
    "MOTCYC",
    "NKN",
    "NOS",
    "SEMI",
    "SNOWPL",
    "SPCPRP",
    "TRACTR",
    "TRAILR",
    "TRANSG",
    "TRANST",
    "TRLBUS",
    "TRUCK",
    "TRUCKD",
    "UTILTY",
    "WRCKR"
  };

  const VehicleTypeCategoryCode::value VehicleTypeCategoryCode::
  _xsd_VehicleTypeCategoryCode_indexes_[48] =
  {
    ::oo_2_0::VehicleTypeCategoryCode::ACVACV,
    ::oo_2_0::VehicleTypeCategoryCode::AMBUL,
    ::oo_2_0::VehicleTypeCategoryCode::AMPH,
    ::oo_2_0::VehicleTypeCategoryCode::APC,
    ::oo_2_0::VehicleTypeCategoryCode::APCREC,
    ::oo_2_0::VehicleTypeCategoryCode::ARMORD,
    ::oo_2_0::VehicleTypeCategoryCode::ARMRCC,
    ::oo_2_0::VehicleTypeCategoryCode::ARVELT,
    ::oo_2_0::VehicleTypeCategoryCode::ASSV,
    ::oo_2_0::VehicleTypeCategoryCode::ASSVEH,
    ::oo_2_0::VehicleTypeCategoryCode::AUTOMO,
    ::oo_2_0::VehicleTypeCategoryCode::BICYCL,
    ::oo_2_0::VehicleTypeCategoryCode::BTHVRE,
    ::oo_2_0::VehicleTypeCategoryCode::BTLTRE,
    ::oo_2_0::VehicleTypeCategoryCode::BTMDRE,
    ::oo_2_0::VehicleTypeCategoryCode::BUS,
    ::oo_2_0::VehicleTypeCategoryCode::CART,
    ::oo_2_0::VehicleTypeCategoryCode::CCTRCK,
    ::oo_2_0::VehicleTypeCategoryCode::CEVEH,
    ::oo_2_0::VehicleTypeCategoryCode::CMDPST,
    ::oo_2_0::VehicleTypeCategoryCode::CMDPTA,
    ::oo_2_0::VehicleTypeCategoryCode::CMDPTW,
    ::oo_2_0::VehicleTypeCategoryCode::CSVEH,
    ::oo_2_0::VehicleTypeCategoryCode::ENGNOS,
    ::oo_2_0::VehicleTypeCategoryCode::FORKLF,
    ::oo_2_0::VehicleTypeCategoryCode::FRFGTN,
    ::oo_2_0::VehicleTypeCategoryCode::GNLPRP,
    ::oo_2_0::VehicleTypeCategoryCode::HALFTR,
    ::oo_2_0::VehicleTypeCategoryCode::HETVEH,
    ::oo_2_0::VehicleTypeCategoryCode::LNDVEH,
    ::oo_2_0::VehicleTypeCategoryCode::MAINT,
    ::oo_2_0::VehicleTypeCategoryCode::MHVEH,
    ::oo_2_0::VehicleTypeCategoryCode::MILUV,
    ::oo_2_0::VehicleTypeCategoryCode::MOTCYC,
    ::oo_2_0::VehicleTypeCategoryCode::NKN,
    ::oo_2_0::VehicleTypeCategoryCode::NOS,
    ::oo_2_0::VehicleTypeCategoryCode::SEMI,
    ::oo_2_0::VehicleTypeCategoryCode::SNOWPL,
    ::oo_2_0::VehicleTypeCategoryCode::SPCPRP,
    ::oo_2_0::VehicleTypeCategoryCode::TRACTR,
    ::oo_2_0::VehicleTypeCategoryCode::TRAILR,
    ::oo_2_0::VehicleTypeCategoryCode::TRANSG,
    ::oo_2_0::VehicleTypeCategoryCode::TRANST,
    ::oo_2_0::VehicleTypeCategoryCode::TRLBUS,
    ::oo_2_0::VehicleTypeCategoryCode::TRUCK,
    ::oo_2_0::VehicleTypeCategoryCode::TRUCKD,
    ::oo_2_0::VehicleTypeCategoryCode::UTILTY,
    ::oo_2_0::VehicleTypeCategoryCode::WRCKR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VehicleTypeCategoryCode >
  _xsd_VehicleTypeCategoryCode_type_factory_init (
    "VehicleTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VerticalDistanceCitationCode
  //

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VerticalDistanceCitationCode_convert ();
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VerticalDistanceCitationCode_convert ();
  }

  VerticalDistanceCitationCode::
  VerticalDistanceCitationCode (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VerticalDistanceCitationCode_convert ();
  }

  VerticalDistanceCitationCode* VerticalDistanceCitationCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VerticalDistanceCitationCode (*this, f, c);
  }

  VerticalDistanceCitationCode::value VerticalDistanceCitationCode::
  _xsd_VerticalDistanceCitationCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VerticalDistanceCitationCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VerticalDistanceCitationCode_indexes_,
                      _xsd_VerticalDistanceCitationCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_VerticalDistanceCitationCode_indexes_ + 10 || _xsd_VerticalDistanceCitationCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VerticalDistanceCitationCode::
  _xsd_VerticalDistanceCitationCode_literals_[10] =
  {
    "CHADAT",
    "LOCDAT",
    "MNSLVL",
    "PDQFE",
    "PDQNH",
    "PDSTDT",
    "TOPOSR",
    "WATBOT",
    "WGS84G",
    "WGS84R"
  };

  const VerticalDistanceCitationCode::value VerticalDistanceCitationCode::
  _xsd_VerticalDistanceCitationCode_indexes_[10] =
  {
    ::oo_2_0::VerticalDistanceCitationCode::CHADAT,
    ::oo_2_0::VerticalDistanceCitationCode::LOCDAT,
    ::oo_2_0::VerticalDistanceCitationCode::MNSLVL,
    ::oo_2_0::VerticalDistanceCitationCode::PDQFE,
    ::oo_2_0::VerticalDistanceCitationCode::PDQNH,
    ::oo_2_0::VerticalDistanceCitationCode::PDSTDT,
    ::oo_2_0::VerticalDistanceCitationCode::TOPOSR,
    ::oo_2_0::VerticalDistanceCitationCode::WATBOT,
    ::oo_2_0::VerticalDistanceCitationCode::WGS84G,
    ::oo_2_0::VerticalDistanceCitationCode::WGS84R
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VerticalDistanceCitationCode >
  _xsd_VerticalDistanceCitationCode_type_factory_init (
    "VerticalDistanceCitationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VesselTypeCategoryCode
  //

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VesselTypeCategoryCode_convert ();
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VesselTypeCategoryCode_convert ();
  }

  VesselTypeCategoryCode::
  VesselTypeCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VesselTypeCategoryCode_convert ();
  }

  VesselTypeCategoryCode* VesselTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VesselTypeCategoryCode (*this, f, c);
  }

  VesselTypeCategoryCode::value VesselTypeCategoryCode::
  _xsd_VesselTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VesselTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VesselTypeCategoryCode_indexes_,
                      _xsd_VesselTypeCategoryCode_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_VesselTypeCategoryCode_indexes_ + 4 || _xsd_VesselTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VesselTypeCategoryCode::
  _xsd_VesselTypeCategoryCode_literals_[4] =
  {
    "IX",
    "NKN",
    "SUBSRF",
    "SURFAC"
  };

  const VesselTypeCategoryCode::value VesselTypeCategoryCode::
  _xsd_VesselTypeCategoryCode_indexes_[4] =
  {
    ::oo_2_0::VesselTypeCategoryCode::IX,
    ::oo_2_0::VesselTypeCategoryCode::NKN,
    ::oo_2_0::VesselTypeCategoryCode::SUBSRF,
    ::oo_2_0::VesselTypeCategoryCode::SURFAC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VesselTypeCategoryCode >
  _xsd_VesselTypeCategoryCode_type_factory_init (
    "VesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VesselTypePropulsionTypeCode
  //

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VesselTypePropulsionTypeCode_convert ();
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VesselTypePropulsionTypeCode_convert ();
  }

  VesselTypePropulsionTypeCode::
  VesselTypePropulsionTypeCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VesselTypePropulsionTypeCode_convert ();
  }

  VesselTypePropulsionTypeCode* VesselTypePropulsionTypeCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VesselTypePropulsionTypeCode (*this, f, c);
  }

  VesselTypePropulsionTypeCode::value VesselTypePropulsionTypeCode::
  _xsd_VesselTypePropulsionTypeCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VesselTypePropulsionTypeCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VesselTypePropulsionTypeCode_indexes_,
                      _xsd_VesselTypePropulsionTypeCode_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_VesselTypePropulsionTypeCode_indexes_ + 21 || _xsd_VesselTypePropulsionTypeCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VesselTypePropulsionTypeCode::
  _xsd_VesselTypePropulsionTypeCode_literals_[21] =
  {
    "AIP",
    "CODAG",
    "CODOG",
    "COGOG",
    "CONAS",
    "COSAG",
    "DE",
    "DG",
    "DM",
    "DMWJ",
    "EM",
    "GTU",
    "NUC",
    "NUCE",
    "OARS",
    "PJ",
    "PM",
    "SAIL",
    "TE",
    "TU",
    "WJ"
  };

  const VesselTypePropulsionTypeCode::value VesselTypePropulsionTypeCode::
  _xsd_VesselTypePropulsionTypeCode_indexes_[21] =
  {
    ::oo_2_0::VesselTypePropulsionTypeCode::AIP,
    ::oo_2_0::VesselTypePropulsionTypeCode::CODAG,
    ::oo_2_0::VesselTypePropulsionTypeCode::CODOG,
    ::oo_2_0::VesselTypePropulsionTypeCode::COGOG,
    ::oo_2_0::VesselTypePropulsionTypeCode::CONAS,
    ::oo_2_0::VesselTypePropulsionTypeCode::COSAG,
    ::oo_2_0::VesselTypePropulsionTypeCode::DE,
    ::oo_2_0::VesselTypePropulsionTypeCode::DG,
    ::oo_2_0::VesselTypePropulsionTypeCode::DM,
    ::oo_2_0::VesselTypePropulsionTypeCode::DMWJ,
    ::oo_2_0::VesselTypePropulsionTypeCode::EM,
    ::oo_2_0::VesselTypePropulsionTypeCode::GTU,
    ::oo_2_0::VesselTypePropulsionTypeCode::NUC,
    ::oo_2_0::VesselTypePropulsionTypeCode::NUCE,
    ::oo_2_0::VesselTypePropulsionTypeCode::OARS,
    ::oo_2_0::VesselTypePropulsionTypeCode::PJ,
    ::oo_2_0::VesselTypePropulsionTypeCode::PM,
    ::oo_2_0::VesselTypePropulsionTypeCode::SAIL,
    ::oo_2_0::VesselTypePropulsionTypeCode::TE,
    ::oo_2_0::VesselTypePropulsionTypeCode::TU,
    ::oo_2_0::VesselTypePropulsionTypeCode::WJ
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VesselTypePropulsionTypeCode >
  _xsd_VesselTypePropulsionTypeCode_type_factory_init (
    "VesselTypePropulsionTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // VisibilityCategoryCode
  //

  VisibilityCategoryCode::
  VisibilityCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_VisibilityCategoryCode_convert ();
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_VisibilityCategoryCode_convert ();
  }

  VisibilityCategoryCode::
  VisibilityCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_VisibilityCategoryCode_convert ();
  }

  VisibilityCategoryCode* VisibilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class VisibilityCategoryCode (*this, f, c);
  }

  VisibilityCategoryCode::value VisibilityCategoryCode::
  _xsd_VisibilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VisibilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_VisibilityCategoryCode_indexes_,
                      _xsd_VisibilityCategoryCode_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_VisibilityCategoryCode_indexes_ + 11 || _xsd_VisibilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const VisibilityCategoryCode::
  _xsd_VisibilityCategoryCode_literals_[11] =
  {
    "BLWSNW",
    "DSTDVL",
    "DSTSND",
    "DSTSTR",
    "FOG",
    "FRZFOG",
    "HAZE",
    "NKN",
    "NOS",
    "SMOKE",
    "SNDSTR"
  };

  const VisibilityCategoryCode::value VisibilityCategoryCode::
  _xsd_VisibilityCategoryCode_indexes_[11] =
  {
    ::oo_2_0::VisibilityCategoryCode::BLWSNW,
    ::oo_2_0::VisibilityCategoryCode::DSTDVL,
    ::oo_2_0::VisibilityCategoryCode::DSTSND,
    ::oo_2_0::VisibilityCategoryCode::DSTSTR,
    ::oo_2_0::VisibilityCategoryCode::FOG,
    ::oo_2_0::VisibilityCategoryCode::FRZFOG,
    ::oo_2_0::VisibilityCategoryCode::HAZE,
    ::oo_2_0::VisibilityCategoryCode::NKN,
    ::oo_2_0::VisibilityCategoryCode::NOS,
    ::oo_2_0::VisibilityCategoryCode::SMOKE,
    ::oo_2_0::VisibilityCategoryCode::SNDSTR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VisibilityCategoryCode >
  _xsd_VisibilityCategoryCode_type_factory_init (
    "VisibilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WeaponTypeCategoryCode
  //

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WeaponTypeCategoryCode_convert ();
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WeaponTypeCategoryCode_convert ();
  }

  WeaponTypeCategoryCode::
  WeaponTypeCategoryCode (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WeaponTypeCategoryCode_convert ();
  }

  WeaponTypeCategoryCode* WeaponTypeCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WeaponTypeCategoryCode (*this, f, c);
  }

  WeaponTypeCategoryCode::value WeaponTypeCategoryCode::
  _xsd_WeaponTypeCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WeaponTypeCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WeaponTypeCategoryCode_indexes_,
                      _xsd_WeaponTypeCategoryCode_indexes_ + 12,
                      *this,
                      c));

    if (i == _xsd_WeaponTypeCategoryCode_indexes_ + 12 || _xsd_WeaponTypeCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WeaponTypeCategoryCode::
  _xsd_WeaponTypeCategoryCode_literals_[12] =
  {
    "AD",
    "ANTSUB",
    "AT",
    "CANNON",
    "FA",
    "MISSYS",
    "MORTAR",
    "NKN",
    "NOS",
    "RCKART",
    "SMARMS",
    "TANK"
  };

  const WeaponTypeCategoryCode::value WeaponTypeCategoryCode::
  _xsd_WeaponTypeCategoryCode_indexes_[12] =
  {
    ::oo_2_0::WeaponTypeCategoryCode::AD,
    ::oo_2_0::WeaponTypeCategoryCode::ANTSUB,
    ::oo_2_0::WeaponTypeCategoryCode::AT,
    ::oo_2_0::WeaponTypeCategoryCode::CANNON,
    ::oo_2_0::WeaponTypeCategoryCode::FA,
    ::oo_2_0::WeaponTypeCategoryCode::MISSYS,
    ::oo_2_0::WeaponTypeCategoryCode::MORTAR,
    ::oo_2_0::WeaponTypeCategoryCode::NKN,
    ::oo_2_0::WeaponTypeCategoryCode::NOS,
    ::oo_2_0::WeaponTypeCategoryCode::RCKART,
    ::oo_2_0::WeaponTypeCategoryCode::SMARMS,
    ::oo_2_0::WeaponTypeCategoryCode::TANK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WeaponTypeCategoryCode >
  _xsd_WeaponTypeCategoryCode_type_factory_init (
    "WeaponTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WeaponTypeFireGuidanceIndicatorCode
  //

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WeaponTypeFireGuidanceIndicatorCode_convert ();
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WeaponTypeFireGuidanceIndicatorCode_convert ();
  }

  WeaponTypeFireGuidanceIndicatorCode::
  WeaponTypeFireGuidanceIndicatorCode (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WeaponTypeFireGuidanceIndicatorCode_convert ();
  }

  WeaponTypeFireGuidanceIndicatorCode* WeaponTypeFireGuidanceIndicatorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WeaponTypeFireGuidanceIndicatorCode (*this, f, c);
  }

  WeaponTypeFireGuidanceIndicatorCode::value WeaponTypeFireGuidanceIndicatorCode::
  _xsd_WeaponTypeFireGuidanceIndicatorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WeaponTypeFireGuidanceIndicatorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WeaponTypeFireGuidanceIndicatorCode_indexes_,
                      _xsd_WeaponTypeFireGuidanceIndicatorCode_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_WeaponTypeFireGuidanceIndicatorCode_indexes_ + 2 || _xsd_WeaponTypeFireGuidanceIndicatorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WeaponTypeFireGuidanceIndicatorCode::
  _xsd_WeaponTypeFireGuidanceIndicatorCode_literals_[2] =
  {
    "NO",
    "YES"
  };

  const WeaponTypeFireGuidanceIndicatorCode::value WeaponTypeFireGuidanceIndicatorCode::
  _xsd_WeaponTypeFireGuidanceIndicatorCode_indexes_[2] =
  {
    ::oo_2_0::WeaponTypeFireGuidanceIndicatorCode::NO,
    ::oo_2_0::WeaponTypeFireGuidanceIndicatorCode::YES
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WeaponTypeFireGuidanceIndicatorCode >
  _xsd_WeaponTypeFireGuidanceIndicatorCode_type_factory_init (
    "WeaponTypeFireGuidanceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WeaponTypeSubcategoryCode
  //

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WeaponTypeSubcategoryCode_convert ();
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WeaponTypeSubcategoryCode_convert ();
  }

  WeaponTypeSubcategoryCode::
  WeaponTypeSubcategoryCode (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WeaponTypeSubcategoryCode_convert ();
  }

  WeaponTypeSubcategoryCode* WeaponTypeSubcategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WeaponTypeSubcategoryCode (*this, f, c);
  }

  WeaponTypeSubcategoryCode::value WeaponTypeSubcategoryCode::
  _xsd_WeaponTypeSubcategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WeaponTypeSubcategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WeaponTypeSubcategoryCode_indexes_,
                      _xsd_WeaponTypeSubcategoryCode_indexes_ + 96,
                      *this,
                      c));

    if (i == _xsd_WeaponTypeSubcategoryCode_indexes_ + 96 || _xsd_WeaponTypeSubcategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WeaponTypeSubcategoryCode::
  _xsd_WeaponTypeSubcategoryCode_literals_[96] =
  {
    "AAARTR",
    "AAMGUN",
    "ADCAN",
    "ADGUN",
    "ADHEV",
    "ADLGT",
    "ADMED",
    "ADMIS",
    "ADMLLR",
    "ADMLMR",
    "ADMLSR",
    "ADMLT",
    "AIFV",
    "ARTHEV",
    "ARTLGT",
    "ARTMED",
    "ARTVHV",
    "ARV",
    "ASSGUN",
    "ASSML",
    "ATGNHV",
    "ATGNLT",
    "ATGNMD",
    "ATGRLC",
    "ATGRLH",
    "ATGRLL",
    "ATGRLM",
    "ATGUN",
    "ATMIS",
    "ATMLHV",
    "ATMLLT",
    "ATMLMD",
    "ATRLHV",
    "ATRLLT",
    "ATRLMD",
    "ATROC",
    "BMLLR",
    "BMLMR",
    "BMLSR",
    "BTNKHE",
    "BTNKLI",
    "BTNKME",
    "CINWPS",
    "CRWPUN",
    "DFGN",
    "DFGNHV",
    "DFGNLT",
    "DFGNMD",
    "FFART",
    "FLAMET",
    "GCML",
    "GRENLN",
    "GRLNHV",
    "GRLNLT",
    "GRLNMD",
    "GUN",
    "GUNHOW",
    "HOWIT",
    "HOWTHV",
    "HOWTLT",
    "HOWTMD",
    "MACGHV",
    "MACGLT",
    "MACGUN",
    "MCHPTL",
    "MLRS",
    "MLRSHV",
    "MLRSLT",
    "MLRSMD",
    "MRTHEV",
    "MRTLGT",
    "MRTMED",
    "MRTVHV",
    "NKN",
    "NOS",
    "PISTOL",
    "RECGUN",
    "RECTNK",
    "RFLASS",
    "RFLCRB",
    "RIFLE",
    "SAMISL",
    "SHOTGU",
    "SRCLAU",
    "SRKLHV",
    "SRKLLG",
    "SRKLMD",
    "SSMIS",
    "SSMLLR",
    "SSMLMR",
    "SSMLSR",
    "SUBMAC",
    "TKDTRY",
    "TKGUNH",
    "TKGUNL",
    "TKGUNM"
  };

  const WeaponTypeSubcategoryCode::value WeaponTypeSubcategoryCode::
  _xsd_WeaponTypeSubcategoryCode_indexes_[96] =
  {
    ::oo_2_0::WeaponTypeSubcategoryCode::AAARTR,
    ::oo_2_0::WeaponTypeSubcategoryCode::AAMGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADCAN,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADHEV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADLGT,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMED,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMIS,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMLLR,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMLMR,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMLSR,
    ::oo_2_0::WeaponTypeSubcategoryCode::ADMLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::AIFV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ARTHEV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ARTLGT,
    ::oo_2_0::WeaponTypeSubcategoryCode::ARTMED,
    ::oo_2_0::WeaponTypeSubcategoryCode::ARTVHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ARV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ASSGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::ASSML,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGNHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGNLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGNMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGRLC,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGRLH,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGRLL,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGRLM,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATMIS,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATMLHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATMLLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATMLMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATRLHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATRLLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATRLMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::ATROC,
    ::oo_2_0::WeaponTypeSubcategoryCode::BMLLR,
    ::oo_2_0::WeaponTypeSubcategoryCode::BMLMR,
    ::oo_2_0::WeaponTypeSubcategoryCode::BMLSR,
    ::oo_2_0::WeaponTypeSubcategoryCode::BTNKHE,
    ::oo_2_0::WeaponTypeSubcategoryCode::BTNKLI,
    ::oo_2_0::WeaponTypeSubcategoryCode::BTNKME,
    ::oo_2_0::WeaponTypeSubcategoryCode::CINWPS,
    ::oo_2_0::WeaponTypeSubcategoryCode::CRWPUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::DFGN,
    ::oo_2_0::WeaponTypeSubcategoryCode::DFGNHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::DFGNLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::DFGNMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::FFART,
    ::oo_2_0::WeaponTypeSubcategoryCode::FLAMET,
    ::oo_2_0::WeaponTypeSubcategoryCode::GCML,
    ::oo_2_0::WeaponTypeSubcategoryCode::GRENLN,
    ::oo_2_0::WeaponTypeSubcategoryCode::GRLNHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::GRLNLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::GRLNMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::GUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::GUNHOW,
    ::oo_2_0::WeaponTypeSubcategoryCode::HOWIT,
    ::oo_2_0::WeaponTypeSubcategoryCode::HOWTHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::HOWTLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::HOWTMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::MACGHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::MACGLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::MACGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::MCHPTL,
    ::oo_2_0::WeaponTypeSubcategoryCode::MLRS,
    ::oo_2_0::WeaponTypeSubcategoryCode::MLRSHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::MLRSLT,
    ::oo_2_0::WeaponTypeSubcategoryCode::MLRSMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::MRTHEV,
    ::oo_2_0::WeaponTypeSubcategoryCode::MRTLGT,
    ::oo_2_0::WeaponTypeSubcategoryCode::MRTMED,
    ::oo_2_0::WeaponTypeSubcategoryCode::MRTVHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::NKN,
    ::oo_2_0::WeaponTypeSubcategoryCode::NOS,
    ::oo_2_0::WeaponTypeSubcategoryCode::PISTOL,
    ::oo_2_0::WeaponTypeSubcategoryCode::RECGUN,
    ::oo_2_0::WeaponTypeSubcategoryCode::RECTNK,
    ::oo_2_0::WeaponTypeSubcategoryCode::RFLASS,
    ::oo_2_0::WeaponTypeSubcategoryCode::RFLCRB,
    ::oo_2_0::WeaponTypeSubcategoryCode::RIFLE,
    ::oo_2_0::WeaponTypeSubcategoryCode::SAMISL,
    ::oo_2_0::WeaponTypeSubcategoryCode::SHOTGU,
    ::oo_2_0::WeaponTypeSubcategoryCode::SRCLAU,
    ::oo_2_0::WeaponTypeSubcategoryCode::SRKLHV,
    ::oo_2_0::WeaponTypeSubcategoryCode::SRKLLG,
    ::oo_2_0::WeaponTypeSubcategoryCode::SRKLMD,
    ::oo_2_0::WeaponTypeSubcategoryCode::SSMIS,
    ::oo_2_0::WeaponTypeSubcategoryCode::SSMLLR,
    ::oo_2_0::WeaponTypeSubcategoryCode::SSMLMR,
    ::oo_2_0::WeaponTypeSubcategoryCode::SSMLSR,
    ::oo_2_0::WeaponTypeSubcategoryCode::SUBMAC,
    ::oo_2_0::WeaponTypeSubcategoryCode::TKDTRY,
    ::oo_2_0::WeaponTypeSubcategoryCode::TKGUNH,
    ::oo_2_0::WeaponTypeSubcategoryCode::TKGUNL,
    ::oo_2_0::WeaponTypeSubcategoryCode::TKGUNM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WeaponTypeSubcategoryCode >
  _xsd_WeaponTypeSubcategoryCode_type_factory_init (
    "WeaponTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WindAirStabilityCategoryCode
  //

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WindAirStabilityCategoryCode_convert ();
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WindAirStabilityCategoryCode_convert ();
  }

  WindAirStabilityCategoryCode::
  WindAirStabilityCategoryCode (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WindAirStabilityCategoryCode_convert ();
  }

  WindAirStabilityCategoryCode* WindAirStabilityCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WindAirStabilityCategoryCode (*this, f, c);
  }

  WindAirStabilityCategoryCode::value WindAirStabilityCategoryCode::
  _xsd_WindAirStabilityCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WindAirStabilityCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WindAirStabilityCategoryCode_indexes_,
                      _xsd_WindAirStabilityCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_WindAirStabilityCategoryCode_indexes_ + 10 || _xsd_WindAirStabilityCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WindAirStabilityCategoryCode::
  _xsd_WindAirStabilityCategoryCode_literals_[10] =
  {
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "N",
    "S",
    "U"
  };

  const WindAirStabilityCategoryCode::value WindAirStabilityCategoryCode::
  _xsd_WindAirStabilityCategoryCode_indexes_[10] =
  {
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_1,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_2,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_3,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_4,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_5,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_6,
    ::oo_2_0::WindAirStabilityCategoryCode::cxx_7,
    ::oo_2_0::WindAirStabilityCategoryCode::N,
    ::oo_2_0::WindAirStabilityCategoryCode::S,
    ::oo_2_0::WindAirStabilityCategoryCode::U
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WindAirStabilityCategoryCode >
  _xsd_WindAirStabilityCategoryCode_type_factory_init (
    "WindAirStabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WindAltitudeLayerCode
  //

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WindAltitudeLayerCode_convert ();
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WindAltitudeLayerCode_convert ();
  }

  WindAltitudeLayerCode::
  WindAltitudeLayerCode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WindAltitudeLayerCode_convert ();
  }

  WindAltitudeLayerCode* WindAltitudeLayerCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WindAltitudeLayerCode (*this, f, c);
  }

  WindAltitudeLayerCode::value WindAltitudeLayerCode::
  _xsd_WindAltitudeLayerCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WindAltitudeLayerCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WindAltitudeLayerCode_indexes_,
                      _xsd_WindAltitudeLayerCode_indexes_ + 15,
                      *this,
                      c));

    if (i == _xsd_WindAltitudeLayerCode_indexes_ + 15 || _xsd_WindAltitudeLayerCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WindAltitudeLayerCode::
  _xsd_WindAltitudeLayerCode_literals_[15] =
  {
    "10",
    "12",
    "14",
    "16",
    "18",
    "2",
    "20",
    "22",
    "24",
    "26",
    "28",
    "30",
    "4",
    "6",
    "8"
  };

  const WindAltitudeLayerCode::value WindAltitudeLayerCode::
  _xsd_WindAltitudeLayerCode_indexes_[15] =
  {
    ::oo_2_0::WindAltitudeLayerCode::cxx_10,
    ::oo_2_0::WindAltitudeLayerCode::cxx_12,
    ::oo_2_0::WindAltitudeLayerCode::cxx_14,
    ::oo_2_0::WindAltitudeLayerCode::cxx_16,
    ::oo_2_0::WindAltitudeLayerCode::cxx_18,
    ::oo_2_0::WindAltitudeLayerCode::cxx_2,
    ::oo_2_0::WindAltitudeLayerCode::cxx_20,
    ::oo_2_0::WindAltitudeLayerCode::cxx_22,
    ::oo_2_0::WindAltitudeLayerCode::cxx_24,
    ::oo_2_0::WindAltitudeLayerCode::cxx_26,
    ::oo_2_0::WindAltitudeLayerCode::cxx_28,
    ::oo_2_0::WindAltitudeLayerCode::cxx_30,
    ::oo_2_0::WindAltitudeLayerCode::cxx_4,
    ::oo_2_0::WindAltitudeLayerCode::cxx_6,
    ::oo_2_0::WindAltitudeLayerCode::cxx_8
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WindAltitudeLayerCode >
  _xsd_WindAltitudeLayerCode_type_factory_init (
    "WindAltitudeLayerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");

  // WindCategoryCode
  //

  WindCategoryCode::
  WindCategoryCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_WindCategoryCode_convert ();
  }

  WindCategoryCode::
  WindCategoryCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_WindCategoryCode_convert ();
  }

  WindCategoryCode::
  WindCategoryCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_WindCategoryCode_convert ();
  }

  WindCategoryCode* WindCategoryCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WindCategoryCode (*this, f, c);
  }

  WindCategoryCode::value WindCategoryCode::
  _xsd_WindCategoryCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WindCategoryCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_WindCategoryCode_indexes_,
                      _xsd_WindCategoryCode_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_WindCategoryCode_indexes_ + 10 || _xsd_WindCategoryCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const WindCategoryCode::
  _xsd_WindCategoryCode_literals_[10] =
  {
    "CONST",
    "GUST",
    "NKN",
    "SQUAL",
    "TRBLEX",
    "TRBLLI",
    "TRBLMO",
    "TRBLSE",
    "VRB",
    "WSHEAR"
  };

  const WindCategoryCode::value WindCategoryCode::
  _xsd_WindCategoryCode_indexes_[10] =
  {
    ::oo_2_0::WindCategoryCode::CONST,
    ::oo_2_0::WindCategoryCode::GUST,
    ::oo_2_0::WindCategoryCode::NKN,
    ::oo_2_0::WindCategoryCode::SQUAL,
    ::oo_2_0::WindCategoryCode::TRBLEX,
    ::oo_2_0::WindCategoryCode::TRBLLI,
    ::oo_2_0::WindCategoryCode::TRBLMO,
    ::oo_2_0::WindCategoryCode::TRBLSE,
    ::oo_2_0::WindCategoryCode::VRB,
    ::oo_2_0::WindCategoryCode::WSHEAR
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, WindCategoryCode >
  _xsd_WindCategoryCode_type_factory_init (
    "WindCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace oo_2_0
{
  ::std::ostream&
  operator<< (::std::ostream& o, AbsolutePointCategoryCode::value i)
  {
    return o << AbsolutePointCategoryCode::_xsd_AbsolutePointCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AbsolutePointCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AbsolutePointCategoryCode >
  _xsd_AbsolutePointCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionAircraftEmploymentApproachOffsetCode::value i)
  {
    return o << ActionAircraftEmploymentApproachOffsetCode::_xsd_ActionAircraftEmploymentApproachOffsetCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionAircraftEmploymentApproachOffsetCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionAircraftEmploymentApproachOffsetCode >
  _xsd_ActionAircraftEmploymentApproachOffsetCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionAircraftEmploymentCrewCompositionCode::value i)
  {
    return o << ActionAircraftEmploymentCrewCompositionCode::_xsd_ActionAircraftEmploymentCrewCompositionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionAircraftEmploymentCrewCompositionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionAircraftEmploymentCrewCompositionCode >
  _xsd_ActionAircraftEmploymentCrewCompositionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionAircraftEmploymentDeplanementMethodCode::value i)
  {
    return o << ActionAircraftEmploymentDeplanementMethodCode::_xsd_ActionAircraftEmploymentDeplanementMethodCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionAircraftEmploymentDeplanementMethodCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionAircraftEmploymentDeplanementMethodCode >
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionAircraftEmploymentGeneralRoleCode::value i)
  {
    return o << ActionAircraftEmploymentGeneralRoleCode::_xsd_ActionAircraftEmploymentGeneralRoleCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionAircraftEmploymentGeneralRoleCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionAircraftEmploymentGeneralRoleCode >
  _xsd_ActionAircraftEmploymentGeneralRoleCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionAircraftEmploymentInflightReportRequirementIndicatorCode::value i)
  {
    return o << ActionAircraftEmploymentInflightReportRequirementIndicatorCode::_xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionAircraftEmploymentInflightReportRequirementIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionAircraftEmploymentInflightReportRequirementIndicatorCode >
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionCategoryCode::value i)
  {
    return o << ActionCategoryCode::_xsd_ActionCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionCategoryCode >
  _xsd_ActionCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionContextCategoryCode::value i)
  {
    return o << ActionContextCategoryCode::_xsd_ActionContextCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionContextCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionContextCategoryCode >
  _xsd_ActionContextCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEffectCategoryCode::value i)
  {
    return o << ActionEffectCategoryCode::_xsd_ActionEffectCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEffectCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEffectCategoryCode >
  _xsd_ActionEffectCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEffectDescriptionCode::value i)
  {
    return o << ActionEffectDescriptionCode::_xsd_ActionEffectDescriptionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEffectDescriptionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEffectDescriptionCode >
  _xsd_ActionEffectDescriptionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEffectSeverityCode::value i)
  {
    return o << ActionEffectSeverityCode::_xsd_ActionEffectSeverityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEffectSeverityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEffectSeverityCode >
  _xsd_ActionEffectSeverityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionElectronicWarfareEmploymentCategoryCode::value i)
  {
    return o << ActionElectronicWarfareEmploymentCategoryCode::_xsd_ActionElectronicWarfareEmploymentCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionElectronicWarfareEmploymentCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionElectronicWarfareEmploymentCategoryCode >
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEventCategoryCode::value i)
  {
    return o << ActionEventCategoryCode::_xsd_ActionEventCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEventCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEventCategoryCode >
  _xsd_ActionEventCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEventDetailClassificationCode::value i)
  {
    return o << ActionEventDetailClassificationCode::_xsd_ActionEventDetailClassificationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEventDetailClassificationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEventDetailClassificationCode >
  _xsd_ActionEventDetailClassificationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionEventDetailCrimeIndicatorCode::value i)
  {
    return o << ActionEventDetailCrimeIndicatorCode::_xsd_ActionEventDetailCrimeIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionEventDetailCrimeIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionEventDetailCrimeIndicatorCode >
  _xsd_ActionEventDetailCrimeIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionFunctionalAssociationCategoryCode::value i)
  {
    return o << ActionFunctionalAssociationCategoryCode::_xsd_ActionFunctionalAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionFunctionalAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionFunctionalAssociationCategoryCode >
  _xsd_ActionFunctionalAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::value i)
  {
    return o << ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode::_xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode >
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionMaritimeEmploymentVesselTransitInstructionCode::value i)
  {
    return o << ActionMaritimeEmploymentVesselTransitInstructionCode::_xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionMaritimeEmploymentVesselTransitInstructionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionMaritimeEmploymentVesselTransitInstructionCode >
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveCategoryCode::value i)
  {
    return o << ActionObjectiveCategoryCode::_xsd_ActionObjectiveCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveCategoryCode >
  _xsd_ActionObjectiveCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveItemCategoryCode::value i)
  {
    return o << ActionObjectiveItemCategoryCode::_xsd_ActionObjectiveItemCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveItemCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveItemCategoryCode >
  _xsd_ActionObjectiveItemCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveItemMarkingMethodCode::value i)
  {
    return o << ActionObjectiveItemMarkingMethodCode::_xsd_ActionObjectiveItemMarkingMethodCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveItemMarkingMethodCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveItemMarkingMethodCode >
  _xsd_ActionObjectiveItemMarkingMethodCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveItemMarkingPanelShapeCode::value i)
  {
    return o << ActionObjectiveItemMarkingPanelShapeCode::_xsd_ActionObjectiveItemMarkingPanelShapeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveItemMarkingPanelShapeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveItemMarkingPanelShapeCode >
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveItemMarkingRecognitionSignalColourCode::value i)
  {
    return o << ActionObjectiveItemMarkingRecognitionSignalColourCode::_xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveItemMarkingRecognitionSignalColourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveItemMarkingRecognitionSignalColourCode >
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveItemPrimacyCode::value i)
  {
    return o << ActionObjectiveItemPrimacyCode::_xsd_ActionObjectiveItemPrimacyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveItemPrimacyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveItemPrimacyCode >
  _xsd_ActionObjectiveItemPrimacyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveQualifierCode::value i)
  {
    return o << ActionObjectiveQualifierCode::_xsd_ActionObjectiveQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveQualifierCode >
  _xsd_ActionObjectiveQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveTypeCategoryCode::value i)
  {
    return o << ActionObjectiveTypeCategoryCode::_xsd_ActionObjectiveTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveTypeCategoryCode >
  _xsd_ActionObjectiveTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionObjectiveTypeImageryProductImageTypeCode::value i)
  {
    return o << ActionObjectiveTypeImageryProductImageTypeCode::_xsd_ActionObjectiveTypeImageryProductImageTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionObjectiveTypeImageryProductImageTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionObjectiveTypeImageryProductImageTypeCode >
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionReconnaissanceEmploymentImageCoverageModeCode::value i)
  {
    return o << ActionReconnaissanceEmploymentImageCoverageModeCode::_xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionReconnaissanceEmploymentImageCoverageModeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionReconnaissanceEmploymentImageCoverageModeCode >
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionReconnaissanceEmploymentImageViewQualifierCode::value i)
  {
    return o << ActionReconnaissanceEmploymentImageViewQualifierCode::_xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionReconnaissanceEmploymentImageViewQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionReconnaissanceEmploymentImageViewQualifierCode >
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionReconnaissanceEmploymentTypeOfCoverageCode::value i)
  {
    return o << ActionReconnaissanceEmploymentTypeOfCoverageCode::_xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionReconnaissanceEmploymentTypeOfCoverageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionReconnaissanceEmploymentTypeOfCoverageCode >
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionCitationAssociationCategoryCode::value i)
  {
    return o << ActionCitationAssociationCategoryCode::_xsd_ActionCitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionCitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionCitationAssociationCategoryCode >
  _xsd_ActionCitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceCategoryCode::value i)
  {
    return o << ActionResourceCategoryCode::_xsd_ActionResourceCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceCategoryCode >
  _xsd_ActionResourceCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceCriticalityIndicatorCode::value i)
  {
    return o << ActionResourceCriticalityIndicatorCode::_xsd_ActionResourceCriticalityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceCriticalityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceCriticalityIndicatorCode >
  _xsd_ActionResourceCriticalityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceEmploymentCategoryCode::value i)
  {
    return o << ActionResourceEmploymentCategoryCode::_xsd_ActionResourceEmploymentCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceEmploymentCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceEmploymentCategoryCode >
  _xsd_ActionResourceEmploymentCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceEmploymentMethodOfControlCode::value i)
  {
    return o << ActionResourceEmploymentMethodOfControlCode::_xsd_ActionResourceEmploymentMethodOfControlCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceEmploymentMethodOfControlCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceEmploymentMethodOfControlCode >
  _xsd_ActionResourceEmploymentMethodOfControlCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceEmploymentTrajectoryFireCode::value i)
  {
    return o << ActionResourceEmploymentTrajectoryFireCode::_xsd_ActionResourceEmploymentTrajectoryFireCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceEmploymentTrajectoryFireCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceEmploymentTrajectoryFireCode >
  _xsd_ActionResourceEmploymentTrajectoryFireCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionResourceQualifierCode::value i)
  {
    return o << ActionResourceQualifierCode::_xsd_ActionResourceQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionResourceQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionResourceQualifierCode >
  _xsd_ActionResourceQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskActivityCode::value i)
  {
    return o << ActionTaskActivityCode::_xsd_ActionTaskActivityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskActivityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskActivityCode >
  _xsd_ActionTaskActivityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskCategoryCode::value i)
  {
    return o << ActionTaskCategoryCode::_xsd_ActionTaskCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskCategoryCode >
  _xsd_ActionTaskCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskEndQualifierCode::value i)
  {
    return o << ActionTaskEndQualifierCode::_xsd_ActionTaskEndQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskEndQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskEndQualifierCode >
  _xsd_ActionTaskEndQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskEntailedSafetyDegreeCode::value i)
  {
    return o << ActionTaskEntailedSafetyDegreeCode::_xsd_ActionTaskEntailedSafetyDegreeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskEntailedSafetyDegreeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskEntailedSafetyDegreeCode >
  _xsd_ActionTaskEntailedSafetyDegreeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskMeteorologicalImpactCode::value i)
  {
    return o << ActionTaskMeteorologicalImpactCode::_xsd_ActionTaskMeteorologicalImpactCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskMeteorologicalImpactCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskMeteorologicalImpactCode >
  _xsd_ActionTaskMeteorologicalImpactCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskOperationalLevelCode::value i)
  {
    return o << ActionTaskOperationalLevelCode::_xsd_ActionTaskOperationalLevelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskOperationalLevelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskOperationalLevelCode >
  _xsd_ActionTaskOperationalLevelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskOvertCovertCode::value i)
  {
    return o << ActionTaskOvertCovertCode::_xsd_ActionTaskOvertCovertCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskOvertCovertCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskOvertCovertCode >
  _xsd_ActionTaskOvertCovertCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskPriorityCode::value i)
  {
    return o << ActionTaskPriorityCode::_xsd_ActionTaskPriorityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskPriorityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskPriorityCode >
  _xsd_ActionTaskPriorityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStartQualifierCode::value i)
  {
    return o << ActionTaskStartQualifierCode::_xsd_ActionTaskStartQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStartQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStartQualifierCode >
  _xsd_ActionTaskStartQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStatusAmendTimingCode::value i)
  {
    return o << ActionTaskStatusAmendTimingCode::_xsd_ActionTaskStatusAmendTimingCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStatusAmendTimingCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStatusAmendTimingCode >
  _xsd_ActionTaskStatusAmendTimingCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStatusApprovalIndicatorCode::value i)
  {
    return o << ActionTaskStatusApprovalIndicatorCode::_xsd_ActionTaskStatusApprovalIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStatusApprovalIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStatusApprovalIndicatorCode >
  _xsd_ActionTaskStatusApprovalIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStatusCategoryCode::value i)
  {
    return o << ActionTaskStatusCategoryCode::_xsd_ActionTaskStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStatusCategoryCode >
  _xsd_ActionTaskStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStatusPlanningIndicatorCode::value i)
  {
    return o << ActionTaskStatusPlanningIndicatorCode::_xsd_ActionTaskStatusPlanningIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStatusPlanningIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStatusPlanningIndicatorCode >
  _xsd_ActionTaskStatusPlanningIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskStatusProgressCode::value i)
  {
    return o << ActionTaskStatusProgressCode::_xsd_ActionTaskStatusProgressCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskStatusProgressCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskStatusProgressCode >
  _xsd_ActionTaskStatusProgressCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskTimingDayCode::value i)
  {
    return o << ActionTaskTimingDayCode::_xsd_ActionTaskTimingDayCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskTimingDayCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskTimingDayCode >
  _xsd_ActionTaskTimingDayCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTaskTimingHourCode::value i)
  {
    return o << ActionTaskTimingHourCode::_xsd_ActionTaskTimingHourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTaskTimingHourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTaskTimingHourCode >
  _xsd_ActionTaskTimingHourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ActionTemporalAssociationCategoryCode::value i)
  {
    return o << ActionTemporalAssociationCategoryCode::_xsd_ActionTemporalAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ActionTemporalAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionTemporalAssociationCategoryCode >
  _xsd_ActionTemporalAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AddressCategoryCode::value i)
  {
    return o << AddressCategoryCode::_xsd_AddressCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AddressCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AddressCategoryCode >
  _xsd_AddressCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AffiliationCategoryCode::value i)
  {
    return o << AffiliationCategoryCode::_xsd_AffiliationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AffiliationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AffiliationCategoryCode >
  _xsd_AffiliationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AffiliationEthnicGroupCode::value i)
  {
    return o << AffiliationEthnicGroupCode::_xsd_AffiliationEthnicGroupCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AffiliationEthnicGroupCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AffiliationEthnicGroupCode >
  _xsd_AffiliationEthnicGroupCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AffiliationFunctionalGroupCode::value i)
  {
    return o << AffiliationFunctionalGroupCode::_xsd_AffiliationFunctionalGroupCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AffiliationFunctionalGroupCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AffiliationFunctionalGroupCode >
  _xsd_AffiliationFunctionalGroupCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AffiliationGeopoliticalCode::value i)
  {
    return o << AffiliationGeopoliticalCode::_xsd_AffiliationGeopoliticalCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AffiliationGeopoliticalCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AffiliationGeopoliticalCode >
  _xsd_AffiliationGeopoliticalCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AffiliationReligionCode::value i)
  {
    return o << AffiliationReligionCode::_xsd_AffiliationReligionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AffiliationReligionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AffiliationReligionCode >
  _xsd_AffiliationReligionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirRouteSegmentCivilMilitaryCode::value i)
  {
    return o << AirRouteSegmentCivilMilitaryCode::_xsd_AirRouteSegmentCivilMilitaryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirRouteSegmentCivilMilitaryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirRouteSegmentCivilMilitaryCode >
  _xsd_AirRouteSegmentCivilMilitaryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirRouteSegmentInternationalRouteCode::value i)
  {
    return o << AirRouteSegmentInternationalRouteCode::_xsd_AirRouteSegmentInternationalRouteCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirRouteSegmentInternationalRouteCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirRouteSegmentInternationalRouteCode >
  _xsd_AirRouteSegmentInternationalRouteCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirRouteSegmentRequiredNavigationPerformanceCode::value i)
  {
    return o << AirRouteSegmentRequiredNavigationPerformanceCode::_xsd_AirRouteSegmentRequiredNavigationPerformanceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirRouteSegmentRequiredNavigationPerformanceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirRouteSegmentRequiredNavigationPerformanceCode >
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeAirframeDesignCode::value i)
  {
    return o << AircraftTypeAirframeDesignCode::_xsd_AircraftTypeAirframeDesignCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeAirframeDesignCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeAirframeDesignCode >
  _xsd_AircraftTypeAirframeDesignCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeCategoryCode::value i)
  {
    return o << AircraftTypeCategoryCode::_xsd_AircraftTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeCategoryCode >
  _xsd_AircraftTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeDesignRangeCode::value i)
  {
    return o << AircraftTypeDesignRangeCode::_xsd_AircraftTypeDesignRangeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeDesignRangeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeDesignRangeCode >
  _xsd_AircraftTypeDesignRangeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeDesignRoleCode::value i)
  {
    return o << AircraftTypeDesignRoleCode::_xsd_AircraftTypeDesignRoleCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeDesignRoleCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeDesignRoleCode >
  _xsd_AircraftTypeDesignRoleCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeLoadCategoryCode::value i)
  {
    return o << AircraftTypeLoadCategoryCode::_xsd_AircraftTypeLoadCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeLoadCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeLoadCategoryCode >
  _xsd_AircraftTypeLoadCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeMainPurposeCode::value i)
  {
    return o << AircraftTypeMainPurposeCode::_xsd_AircraftTypeMainPurposeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeMainPurposeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeMainPurposeCode >
  _xsd_AircraftTypeMainPurposeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeManningCode::value i)
  {
    return o << AircraftTypeManningCode::_xsd_AircraftTypeManningCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeManningCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeManningCode >
  _xsd_AircraftTypeManningCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeMilitaryCivilianCode::value i)
  {
    return o << AircraftTypeMilitaryCivilianCode::_xsd_AircraftTypeMilitaryCivilianCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeMilitaryCivilianCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeMilitaryCivilianCode >
  _xsd_AircraftTypeMilitaryCivilianCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeModelCode::value i)
  {
    return o << AircraftTypeModelCode::_xsd_AircraftTypeModelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeModelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeModelCode >
  _xsd_AircraftTypeModelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeTakeoffAndLandingCode::value i)
  {
    return o << AircraftTypeTakeoffAndLandingCode::_xsd_AircraftTypeTakeoffAndLandingCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeTakeoffAndLandingCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeTakeoffAndLandingCode >
  _xsd_AircraftTypeTakeoffAndLandingCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeTrainingCategoryCode::value i)
  {
    return o << AircraftTypeTrainingCategoryCode::_xsd_AircraftTypeTrainingCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeTrainingCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeTrainingCategoryCode >
  _xsd_AircraftTypeTrainingCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AircraftTypeWeatherQualifierCode::value i)
  {
    return o << AircraftTypeWeatherQualifierCode::_xsd_AircraftTypeWeatherQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AircraftTypeWeatherQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AircraftTypeWeatherQualifierCode >
  _xsd_AircraftTypeWeatherQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldAirTrafficControlPresenceIndicatorCode::value i)
  {
    return o << AirfieldAirTrafficControlPresenceIndicatorCode::_xsd_AirfieldAirTrafficControlPresenceIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldAirTrafficControlPresenceIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldAirTrafficControlPresenceIndicatorCode >
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldInstrumentLandingSystemPresenceIndicatorCode::value i)
  {
    return o << AirfieldInstrumentLandingSystemPresenceIndicatorCode::_xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldInstrumentLandingSystemPresenceIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldInstrumentLandingSystemPresenceIndicatorCode >
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldStatusDayOperationsCode::value i)
  {
    return o << AirfieldStatusDayOperationsCode::_xsd_AirfieldStatusDayOperationsCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldStatusDayOperationsCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldStatusDayOperationsCode >
  _xsd_AirfieldStatusDayOperationsCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldStatusEvaluationIndicatorCode::value i)
  {
    return o << AirfieldStatusEvaluationIndicatorCode::_xsd_AirfieldStatusEvaluationIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldStatusEvaluationIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldStatusEvaluationIndicatorCode >
  _xsd_AirfieldStatusEvaluationIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldStatusFlightSupportCategoryCode::value i)
  {
    return o << AirfieldStatusFlightSupportCategoryCode::_xsd_AirfieldStatusFlightSupportCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldStatusFlightSupportCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldStatusFlightSupportCategoryCode >
  _xsd_AirfieldStatusFlightSupportCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldTypeUseCategoryCode::value i)
  {
    return o << AirfieldTypeUseCategoryCode::_xsd_AirfieldTypeUseCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldTypeUseCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldTypeUseCategoryCode >
  _xsd_AirfieldTypeUseCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AirfieldVisualNavigationalAidIndicatorCode::value i)
  {
    return o << AirfieldVisualNavigationalAidIndicatorCode::_xsd_AirfieldVisualNavigationalAidIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AirfieldVisualNavigationalAidIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirfieldVisualNavigationalAidIndicatorCode >
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AmmunitionTypeCategoryCode::value i)
  {
    return o << AmmunitionTypeCategoryCode::_xsd_AmmunitionTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AmmunitionTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AmmunitionTypeCategoryCode >
  _xsd_AmmunitionTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AmmunitionTypeExerciseMineFlareColourCode::value i)
  {
    return o << AmmunitionTypeExerciseMineFlareColourCode::_xsd_AmmunitionTypeExerciseMineFlareColourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AmmunitionTypeExerciseMineFlareColourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AmmunitionTypeExerciseMineFlareColourCode >
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AmmunitionTypeMineMaritimeFiringCode::value i)
  {
    return o << AmmunitionTypeMineMaritimeFiringCode::_xsd_AmmunitionTypeMineMaritimeFiringCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AmmunitionTypeMineMaritimeFiringCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AmmunitionTypeMineMaritimeFiringCode >
  _xsd_AmmunitionTypeMineMaritimeFiringCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AnchorageBottomTypeCode::value i)
  {
    return o << AnchorageBottomTypeCode::_xsd_AnchorageBottomTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AnchorageBottomTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnchorageBottomTypeCode >
  _xsd_AnchorageBottomTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AnchorageMooringsTypeCode::value i)
  {
    return o << AnchorageMooringsTypeCode::_xsd_AnchorageMooringsTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AnchorageMooringsTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnchorageMooringsTypeCode >
  _xsd_AnchorageMooringsTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AnglePrecisionCode::value i)
  {
    return o << AnglePrecisionCode::_xsd_AnglePrecisionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AnglePrecisionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnglePrecisionCode >
  _xsd_AnglePrecisionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ApproachDirectionCategoryCode::value i)
  {
    return o << ApproachDirectionCategoryCode::_xsd_ApproachDirectionCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ApproachDirectionCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ApproachDirectionCategoryCode >
  _xsd_ApproachDirectionCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AssociationStatusCategoryCode::value i)
  {
    return o << AssociationStatusCategoryCode::_xsd_AssociationStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssociationStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AssociationStatusCategoryCode >
  _xsd_AssociationStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AtmosphereInversionLayerCode::value i)
  {
    return o << AtmosphereInversionLayerCode::_xsd_AtmosphereInversionLayerCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AtmosphereInversionLayerCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AtmosphereInversionLayerCode >
  _xsd_AtmosphereInversionLayerCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AtmospherePressureSystemCategoryCode::value i)
  {
    return o << AtmospherePressureSystemCategoryCode::_xsd_AtmospherePressureSystemCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AtmospherePressureSystemCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AtmospherePressureSystemCategoryCode >
  _xsd_AtmospherePressureSystemCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, AtmosphereTemperatureGradientCode::value i)
  {
    return o << AtmosphereTemperatureGradientCode::_xsd_AtmosphereTemperatureGradientCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AtmosphereTemperatureGradientCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AtmosphereTemperatureGradientCode >
  _xsd_AtmosphereTemperatureGradientCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BerthMajorVesselClassCode::value i)
  {
    return o << BerthMajorVesselClassCode::_xsd_BerthMajorVesselClassCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BerthMajorVesselClassCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BerthMajorVesselClassCode >
  _xsd_BerthMajorVesselClassCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BerthRailAvailabilityIndicatorCode::value i)
  {
    return o << BerthRailAvailabilityIndicatorCode::_xsd_BerthRailAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BerthRailAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BerthRailAvailabilityIndicatorCode >
  _xsd_BerthRailAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BerthRollOnRollOffIndicatorCode::value i)
  {
    return o << BerthRollOnRollOffIndicatorCode::_xsd_BerthRollOnRollOffIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BerthRollOnRollOffIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BerthRollOnRollOffIndicatorCode >
  _xsd_BerthRollOnRollOffIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BiologicalMaterielTypeCategoryCode::value i)
  {
    return o << BiologicalMaterielTypeCategoryCode::_xsd_BiologicalMaterielTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BiologicalMaterielTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BiologicalMaterielTypeCategoryCode >
  _xsd_BiologicalMaterielTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BiologicalMaterielTypeSubcategoryCode::value i)
  {
    return o << BiologicalMaterielTypeSubcategoryCode::_xsd_BiologicalMaterielTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BiologicalMaterielTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BiologicalMaterielTypeSubcategoryCode >
  _xsd_BiologicalMaterielTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BridgeTypeDesignTypeCode::value i)
  {
    return o << BridgeTypeDesignTypeCode::_xsd_BridgeTypeDesignTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BridgeTypeDesignTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BridgeTypeDesignTypeCode >
  _xsd_BridgeTypeDesignTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, BridgeUsageCode::value i)
  {
    return o << BridgeUsageCode::_xsd_BridgeUsageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const BridgeUsageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BridgeUsageCode >
  _xsd_BridgeUsageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetDetailAssociationCategoryCode::value i)
  {
    return o << CandidateTargetDetailAssociationCategoryCode::_xsd_CandidateTargetDetailAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetDetailAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetDetailAssociationCategoryCode >
  _xsd_CandidateTargetDetailAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetDetailAuthorisationApprovalCode::value i)
  {
    return o << CandidateTargetDetailAuthorisationApprovalCode::_xsd_CandidateTargetDetailAuthorisationApprovalCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetDetailAuthorisationApprovalCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetDetailAuthorisationApprovalCode >
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetDetailCategoryCode::value i)
  {
    return o << CandidateTargetDetailCategoryCode::_xsd_CandidateTargetDetailCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetDetailCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetDetailCategoryCode >
  _xsd_CandidateTargetDetailCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetDetailFocusTypeCode::value i)
  {
    return o << CandidateTargetDetailFocusTypeCode::_xsd_CandidateTargetDetailFocusTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetDetailFocusTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetDetailFocusTypeCode >
  _xsd_CandidateTargetDetailFocusTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetDetailSchemeCode::value i)
  {
    return o << CandidateTargetDetailSchemeCode::_xsd_CandidateTargetDetailSchemeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetDetailSchemeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetDetailSchemeCode >
  _xsd_CandidateTargetDetailSchemeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetListAssociationCategoryCode::value i)
  {
    return o << CandidateTargetListAssociationCategoryCode::_xsd_CandidateTargetListAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetListAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetListAssociationCategoryCode >
  _xsd_CandidateTargetListAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CandidateTargetListAuthorisationIndicatorCode::value i)
  {
    return o << CandidateTargetListAuthorisationIndicatorCode::_xsd_CandidateTargetListAuthorisationIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CandidateTargetListAuthorisationIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CandidateTargetListAuthorisationIndicatorCode >
  _xsd_CandidateTargetListAuthorisationIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CapabilityCategoryCode::value i)
  {
    return o << CapabilityCategoryCode::_xsd_CapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CapabilityCategoryCode >
  _xsd_CapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CapabilityDayNightCode::value i)
  {
    return o << CapabilityDayNightCode::_xsd_CapabilityDayNightCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CapabilityDayNightCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CapabilityDayNightCode >
  _xsd_CapabilityDayNightCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CapabilityCitationAssociationCategoryCode::value i)
  {
    return o << CapabilityCitationAssociationCategoryCode::_xsd_CapabilityCitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CapabilityCitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CapabilityCitationAssociationCategoryCode >
  _xsd_CapabilityCitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CapabilityUnitOfMeasureCode::value i)
  {
    return o << CapabilityUnitOfMeasureCode::_xsd_CapabilityUnitOfMeasureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CapabilityUnitOfMeasureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CapabilityUnitOfMeasureCode >
  _xsd_CapabilityUnitOfMeasureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CargoCategoryCode::value i)
  {
    return o << CargoCategoryCode::_xsd_CargoCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CargoCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CargoCategoryCode >
  _xsd_CargoCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CasualtyGroupCode::value i)
  {
    return o << CasualtyGroupCode::_xsd_CasualtyGroupCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CasualtyGroupCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CasualtyGroupCode >
  _xsd_CasualtyGroupCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEquipmentTypeCategoryCode::value i)
  {
    return o << CbrnEquipmentTypeCategoryCode::_xsd_CbrnEquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEquipmentTypeCategoryCode >
  _xsd_CbrnEquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEventAlarmResultIndicatorCode::value i)
  {
    return o << CbrnEventAlarmResultIndicatorCode::_xsd_CbrnEventAlarmResultIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEventAlarmResultIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEventAlarmResultIndicatorCode >
  _xsd_CbrnEventAlarmResultIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEventCategoryCode::value i)
  {
    return o << CbrnEventCategoryCode::_xsd_CbrnEventCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEventCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEventCategoryCode >
  _xsd_CbrnEventCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEventConfirmationTestIndicatorCode::value i)
  {
    return o << CbrnEventConfirmationTestIndicatorCode::_xsd_CbrnEventConfirmationTestIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEventConfirmationTestIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEventConfirmationTestIndicatorCode >
  _xsd_CbrnEventConfirmationTestIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEventMaterielContainerTypeCode::value i)
  {
    return o << CbrnEventMaterielContainerTypeCode::_xsd_CbrnEventMaterielContainerTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEventMaterielContainerTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEventMaterielContainerTypeCode >
  _xsd_CbrnEventMaterielContainerTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CbrnEventSubcategoryCode::value i)
  {
    return o << CbrnEventSubcategoryCode::_xsd_CbrnEventSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CbrnEventSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CbrnEventSubcategoryCode >
  _xsd_CbrnEventSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ChemicalBiologicalEventCategoryCode::value i)
  {
    return o << ChemicalBiologicalEventCategoryCode::_xsd_ChemicalBiologicalEventCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ChemicalBiologicalEventCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChemicalBiologicalEventCategoryCode >
  _xsd_ChemicalBiologicalEventCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ChemicalBiologicalEventSpillSizeCode::value i)
  {
    return o << ChemicalBiologicalEventSpillSizeCode::_xsd_ChemicalBiologicalEventSpillSizeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ChemicalBiologicalEventSpillSizeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChemicalBiologicalEventSpillSizeCode >
  _xsd_ChemicalBiologicalEventSpillSizeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ChemicalMaterielTypeCategoryCode::value i)
  {
    return o << ChemicalMaterielTypeCategoryCode::_xsd_ChemicalMaterielTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ChemicalMaterielTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChemicalMaterielTypeCategoryCode >
  _xsd_ChemicalMaterielTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ChemicalMaterielTypeSubcategoryCode::value i)
  {
    return o << ChemicalMaterielTypeSubcategoryCode::_xsd_ChemicalMaterielTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ChemicalMaterielTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChemicalMaterielTypeSubcategoryCode >
  _xsd_ChemicalMaterielTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CivilianPostTypeCategoryCode::value i)
  {
    return o << CivilianPostTypeCategoryCode::_xsd_CivilianPostTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CivilianPostTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CivilianPostTypeCategoryCode >
  _xsd_CivilianPostTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CloudCoverAverageCoverageCode::value i)
  {
    return o << CloudCoverAverageCoverageCode::_xsd_CloudCoverAverageCoverageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CloudCoverAverageCoverageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CloudCoverAverageCoverageCode >
  _xsd_CloudCoverAverageCoverageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CloudCoverCategoryCode::value i)
  {
    return o << CloudCoverCategoryCode::_xsd_CloudCoverCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CloudCoverCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CloudCoverCategoryCode >
  _xsd_CloudCoverCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeCategoryCode::value i)
  {
    return o << ConsumableMaterielTypeCategoryCode::_xsd_ConsumableMaterielTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeCategoryCode >
  _xsd_ConsumableMaterielTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeHazardCode::value i)
  {
    return o << ConsumableMaterielTypeHazardCode::_xsd_ConsumableMaterielTypeHazardCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeHazardCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeHazardCode >
  _xsd_ConsumableMaterielTypeHazardCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeIssuingElementCode::value i)
  {
    return o << ConsumableMaterielTypeIssuingElementCode::_xsd_ConsumableMaterielTypeIssuingElementCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeIssuingElementCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeIssuingElementCode >
  _xsd_ConsumableMaterielTypeIssuingElementCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeIssuingUnitOfMeasureCode::value i)
  {
    return o << ConsumableMaterielTypeIssuingUnitOfMeasureCode::_xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeIssuingUnitOfMeasureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeIssuingUnitOfMeasureCode >
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypePerishabilityIndicatorCode::value i)
  {
    return o << ConsumableMaterielTypePerishabilityIndicatorCode::_xsd_ConsumableMaterielTypePerishabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypePerishabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypePerishabilityIndicatorCode >
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeSubcategoryCode::value i)
  {
    return o << ConsumableMaterielTypeSubcategoryCode::_xsd_ConsumableMaterielTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeSubcategoryCode >
  _xsd_ConsumableMaterielTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ConsumableMaterielTypeUnitedNationsNumberCode::value i)
  {
    return o << ConsumableMaterielTypeUnitedNationsNumberCode::_xsd_ConsumableMaterielTypeUnitedNationsNumberCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ConsumableMaterielTypeUnitedNationsNumberCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumableMaterielTypeUnitedNationsNumberCode >
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextAssessmentLimitingFactorsCode::value i)
  {
    return o << ContextAssessmentLimitingFactorsCode::_xsd_ContextAssessmentLimitingFactorsCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextAssessmentLimitingFactorsCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextAssessmentLimitingFactorsCode >
  _xsd_ContextAssessmentLimitingFactorsCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextAssociationCategoryCode::value i)
  {
    return o << ContextAssociationCategoryCode::_xsd_ContextAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextAssociationCategoryCode >
  _xsd_ContextAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextCategoryCode::value i)
  {
    return o << ContextCategoryCode::_xsd_ContextCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextCategoryCode >
  _xsd_ContextCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextElementStatusCategoryCode::value i)
  {
    return o << ContextElementStatusCategoryCode::_xsd_ContextElementStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextElementStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextElementStatusCategoryCode >
  _xsd_ContextElementStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextObjectItemAssociationCategoryCode::value i)
  {
    return o << ContextObjectItemAssociationCategoryCode::_xsd_ContextObjectItemAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextObjectItemAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextObjectItemAssociationCategoryCode >
  _xsd_ContextObjectItemAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ContextReportingDataAssociationCategoryCode::value i)
  {
    return o << ContextReportingDataAssociationCategoryCode::_xsd_ContextReportingDataAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ContextReportingDataAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ContextReportingDataAssociationCategoryCode >
  _xsd_ContextReportingDataAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ControlFeatureCategoryCode::value i)
  {
    return o << ControlFeatureCategoryCode::_xsd_ControlFeatureCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ControlFeatureCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ControlFeatureCategoryCode >
  _xsd_ControlFeatureCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ControlFeatureStatusCbrnThreatLevelCode::value i)
  {
    return o << ControlFeatureStatusCbrnThreatLevelCode::_xsd_ControlFeatureStatusCbrnThreatLevelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ControlFeatureStatusCbrnThreatLevelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ControlFeatureStatusCbrnThreatLevelCode >
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ControlFeatureStatusInvestigationStatusCode::value i)
  {
    return o << ControlFeatureStatusInvestigationStatusCode::_xsd_ControlFeatureStatusInvestigationStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ControlFeatureStatusInvestigationStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ControlFeatureStatusInvestigationStatusCode >
  _xsd_ControlFeatureStatusInvestigationStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ControlFeatureStatusSecurityStatusCode::value i)
  {
    return o << ControlFeatureStatusSecurityStatusCode::_xsd_ControlFeatureStatusSecurityStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ControlFeatureStatusSecurityStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ControlFeatureStatusSecurityStatusCode >
  _xsd_ControlFeatureStatusSecurityStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ControlFeatureTypeCategoryCode::value i)
  {
    return o << ControlFeatureTypeCategoryCode::_xsd_ControlFeatureTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ControlFeatureTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ControlFeatureTypeCategoryCode >
  _xsd_ControlFeatureTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, DemolitionStatusCode::value i)
  {
    return o << DemolitionStatusCode::_xsd_DemolitionStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const DemolitionStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DemolitionStatusCode >
  _xsd_DemolitionStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, DirectionCode::value i)
  {
    return o << DirectionCode::_xsd_DirectionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const DirectionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DirectionCode >
  _xsd_DirectionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, DistancePrecisionCode::value i)
  {
    return o << DistancePrecisionCode::_xsd_DistancePrecisionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const DistancePrecisionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DistancePrecisionCode >
  _xsd_DistancePrecisionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, DryDockMarineRailwaySizeCode::value i)
  {
    return o << DryDockMarineRailwaySizeCode::_xsd_DryDockMarineRailwaySizeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const DryDockMarineRailwaySizeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DryDockMarineRailwaySizeCode >
  _xsd_DryDockMarineRailwaySizeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ElectronicEquipmentTypeCategoryCode::value i)
  {
    return o << ElectronicEquipmentTypeCategoryCode::_xsd_ElectronicEquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ElectronicEquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectronicEquipmentTypeCategoryCode >
  _xsd_ElectronicEquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ElectronicEquipmentTypeSubcategoryCode::value i)
  {
    return o << ElectronicEquipmentTypeSubcategoryCode::_xsd_ElectronicEquipmentTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ElectronicEquipmentTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectronicEquipmentTypeSubcategoryCode >
  _xsd_ElectronicEquipmentTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, EngineeringCapabilityCategoryCode::value i)
  {
    return o << EngineeringCapabilityCategoryCode::_xsd_EngineeringCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EngineeringCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EngineeringCapabilityCategoryCode >
  _xsd_EngineeringCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, EngineeringCapabilityDescriptorCode::value i)
  {
    return o << EngineeringCapabilityDescriptorCode::_xsd_EngineeringCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EngineeringCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EngineeringCapabilityDescriptorCode >
  _xsd_EngineeringCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, EngineeringEquipmentTypeCategoryCode::value i)
  {
    return o << EngineeringEquipmentTypeCategoryCode::_xsd_EngineeringEquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EngineeringEquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EngineeringEquipmentTypeCategoryCode >
  _xsd_EngineeringEquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, EquipmentTypeCategoryCode::value i)
  {
    return o << EquipmentTypeCategoryCode::_xsd_EquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EquipmentTypeCategoryCode >
  _xsd_EquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, EvacuationDestinationCode::value i)
  {
    return o << EvacuationDestinationCode::_xsd_EvacuationDestinationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EvacuationDestinationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EvacuationDestinationCode >
  _xsd_EvacuationDestinationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ExecutiveMilitaryOrganisationTypeCategoryCode::value i)
  {
    return o << ExecutiveMilitaryOrganisationTypeCategoryCode::_xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ExecutiveMilitaryOrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ExecutiveMilitaryOrganisationTypeCategoryCode >
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityCategoryCode::value i)
  {
    return o << FacilityCategoryCode::_xsd_FacilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityCategoryCode >
  _xsd_FacilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityPrimaryConstructionMaterialCode::value i)
  {
    return o << FacilityPrimaryConstructionMaterialCode::_xsd_FacilityPrimaryConstructionMaterialCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityPrimaryConstructionMaterialCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityPrimaryConstructionMaterialCode >
  _xsd_FacilityPrimaryConstructionMaterialCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusCategoryCode::value i)
  {
    return o << FacilityStatusCategoryCode::_xsd_FacilityStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusCategoryCode >
  _xsd_FacilityStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusEnemyActivityConditionCode::value i)
  {
    return o << FacilityStatusEnemyActivityConditionCode::_xsd_FacilityStatusEnemyActivityConditionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusEnemyActivityConditionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusEnemyActivityConditionCode >
  _xsd_FacilityStatusEnemyActivityConditionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusOccupationProgramIndicatorCode::value i)
  {
    return o << FacilityStatusOccupationProgramIndicatorCode::_xsd_FacilityStatusOccupationProgramIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusOccupationProgramIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusOccupationProgramIndicatorCode >
  _xsd_FacilityStatusOccupationProgramIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusOperationalStatusCode::value i)
  {
    return o << FacilityStatusOperationalStatusCode::_xsd_FacilityStatusOperationalStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusOperationalStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusOperationalStatusCode >
  _xsd_FacilityStatusOperationalStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusOperationalStatusQualifierCode::value i)
  {
    return o << FacilityStatusOperationalStatusQualifierCode::_xsd_FacilityStatusOperationalStatusQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusOperationalStatusQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusOperationalStatusQualifierCode >
  _xsd_FacilityStatusOperationalStatusQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusReserveIndicatorCode::value i)
  {
    return o << FacilityStatusReserveIndicatorCode::_xsd_FacilityStatusReserveIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusReserveIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusReserveIndicatorCode >
  _xsd_FacilityStatusReserveIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityStatusSecurityStatusCode::value i)
  {
    return o << FacilityStatusSecurityStatusCode::_xsd_FacilityStatusSecurityStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityStatusSecurityStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityStatusSecurityStatusCode >
  _xsd_FacilityStatusSecurityStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FacilityTypeCategoryCode::value i)
  {
    return o << FacilityTypeCategoryCode::_xsd_FacilityTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FacilityTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FacilityTypeCategoryCode >
  _xsd_FacilityTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FeatureCategoryCode::value i)
  {
    return o << FeatureCategoryCode::_xsd_FeatureCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FeatureCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FeatureCategoryCode >
  _xsd_FeatureCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FeatureTypeCategoryCode::value i)
  {
    return o << FeatureTypeCategoryCode::_xsd_FeatureTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FeatureTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FeatureTypeCategoryCode >
  _xsd_FeatureTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FeintIndicatorCode::value i)
  {
    return o << FeintIndicatorCode::_xsd_FeintIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FeintIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FeintIndicatorCode >
  _xsd_FeintIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FireCapabilityCategoryCode::value i)
  {
    return o << FireCapabilityCategoryCode::_xsd_FireCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FireCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FireCapabilityCategoryCode >
  _xsd_FireCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FireCapabilityDescriptorCode::value i)
  {
    return o << FireCapabilityDescriptorCode::_xsd_FireCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FireCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FireCapabilityDescriptorCode >
  _xsd_FireCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, FireCapabilityWeaponTypeCode::value i)
  {
    return o << FireCapabilityWeaponTypeCode::_xsd_FireCapabilityWeaponTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const FireCapabilityWeaponTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FireCapabilityWeaponTypeCode >
  _xsd_FireCapabilityWeaponTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GenderCode::value i)
  {
    return o << GenderCode::_xsd_GenderCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GenderCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GenderCode >
  _xsd_GenderCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureBottomHardnessCode::value i)
  {
    return o << GeographicFeatureBottomHardnessCode::_xsd_GeographicFeatureBottomHardnessCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureBottomHardnessCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureBottomHardnessCode >
  _xsd_GeographicFeatureBottomHardnessCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureSolidSurfaceCompositionCode::value i)
  {
    return o << GeographicFeatureSolidSurfaceCompositionCode::_xsd_GeographicFeatureSolidSurfaceCompositionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureSolidSurfaceCompositionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureSolidSurfaceCompositionCode >
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureStatusCategoryCode::value i)
  {
    return o << GeographicFeatureStatusCategoryCode::_xsd_GeographicFeatureStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureStatusCategoryCode >
  _xsd_GeographicFeatureStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureStatusSurfaceRecirculationIndicatorCode::value i)
  {
    return o << GeographicFeatureStatusSurfaceRecirculationIndicatorCode::_xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureStatusSurfaceRecirculationIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureStatusSurfaceRecirculationIndicatorCode >
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureSurfaceCategoryCode::value i)
  {
    return o << GeographicFeatureSurfaceCategoryCode::_xsd_GeographicFeatureSurfaceCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureSurfaceCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureSurfaceCategoryCode >
  _xsd_GeographicFeatureSurfaceCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureTerrainCode::value i)
  {
    return o << GeographicFeatureTerrainCode::_xsd_GeographicFeatureTerrainCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureTerrainCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureTerrainCode >
  _xsd_GeographicFeatureTerrainCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureTypeCategoryCode::value i)
  {
    return o << GeographicFeatureTypeCategoryCode::_xsd_GeographicFeatureTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureTypeCategoryCode >
  _xsd_GeographicFeatureTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeographicFeatureTypeSubcategoryCode::value i)
  {
    return o << GeographicFeatureTypeSubcategoryCode::_xsd_GeographicFeatureTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeographicFeatureTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeographicFeatureTypeSubcategoryCode >
  _xsd_GeographicFeatureTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GeometricVolumeCategoryCode::value i)
  {
    return o << GeometricVolumeCategoryCode::_xsd_GeometricVolumeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GeometricVolumeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GeometricVolumeCategoryCode >
  _xsd_GeometricVolumeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GovernmentOrganisationTypeCategoryCode::value i)
  {
    return o << GovernmentOrganisationTypeCategoryCode::_xsd_GovernmentOrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GovernmentOrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GovernmentOrganisationTypeCategoryCode >
  _xsd_GovernmentOrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GroupCharacteristicAgeGroupCode::value i)
  {
    return o << GroupCharacteristicAgeGroupCode::_xsd_GroupCharacteristicAgeGroupCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GroupCharacteristicAgeGroupCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupCharacteristicAgeGroupCode >
  _xsd_GroupCharacteristicAgeGroupCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GroupCharacteristicMaladyCode::value i)
  {
    return o << GroupCharacteristicMaladyCode::_xsd_GroupCharacteristicMaladyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GroupCharacteristicMaladyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupCharacteristicMaladyCode >
  _xsd_GroupCharacteristicMaladyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GroupCharacteristicMaladyTransmissibilityIndicatorCode::value i)
  {
    return o << GroupCharacteristicMaladyTransmissibilityIndicatorCode::_xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GroupCharacteristicMaladyTransmissibilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupCharacteristicMaladyTransmissibilityIndicatorCode >
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GroupCharacteristicTriageCode::value i)
  {
    return o << GroupCharacteristicTriageCode::_xsd_GroupCharacteristicTriageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GroupCharacteristicTriageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupCharacteristicTriageCode >
  _xsd_GroupCharacteristicTriageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, GroupOrganisationTypeCategoryCode::value i)
  {
    return o << GroupOrganisationTypeCategoryCode::_xsd_GroupOrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const GroupOrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupOrganisationTypeCategoryCode >
  _xsd_GroupOrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HandlingCapabilityActionCode::value i)
  {
    return o << HandlingCapabilityActionCode::_xsd_HandlingCapabilityActionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HandlingCapabilityActionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HandlingCapabilityActionCode >
  _xsd_HandlingCapabilityActionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HandlingCapabilityDescriptorCode::value i)
  {
    return o << HandlingCapabilityDescriptorCode::_xsd_HandlingCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HandlingCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HandlingCapabilityDescriptorCode >
  _xsd_HandlingCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourAirportNearIndicatorCode::value i)
  {
    return o << HarbourAirportNearIndicatorCode::_xsd_HarbourAirportNearIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourAirportNearIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourAirportNearIndicatorCode >
  _xsd_HarbourAirportNearIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourBiologicallySecureAvailabilityIndicatorCode::value i)
  {
    return o << HarbourBiologicallySecureAvailabilityIndicatorCode::_xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourBiologicallySecureAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourBiologicallySecureAvailabilityIndicatorCode >
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourConvoyMarshallingIndicatorCode::value i)
  {
    return o << HarbourConvoyMarshallingIndicatorCode::_xsd_HarbourConvoyMarshallingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourConvoyMarshallingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourConvoyMarshallingIndicatorCode >
  _xsd_HarbourConvoyMarshallingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourDegaussingIndicatorCode::value i)
  {
    return o << HarbourDegaussingIndicatorCode::_xsd_HarbourDegaussingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourDegaussingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourDegaussingIndicatorCode >
  _xsd_HarbourDegaussingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourDirtyBallastIndicatorCode::value i)
  {
    return o << HarbourDirtyBallastIndicatorCode::_xsd_HarbourDirtyBallastIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourDirtyBallastIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourDirtyBallastIndicatorCode >
  _xsd_HarbourDirtyBallastIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourEntranceRestrictionsIceIndicatorCode::value i)
  {
    return o << HarbourEntranceRestrictionsIceIndicatorCode::_xsd_HarbourEntranceRestrictionsIceIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourEntranceRestrictionsIceIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourEntranceRestrictionsIceIndicatorCode >
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourEntranceRestrictionsSwellIndicatorCode::value i)
  {
    return o << HarbourEntranceRestrictionsSwellIndicatorCode::_xsd_HarbourEntranceRestrictionsSwellIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourEntranceRestrictionsSwellIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourEntranceRestrictionsSwellIndicatorCode >
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourEstimatedTimeOfArrivalIndicatorCode::value i)
  {
    return o << HarbourEstimatedTimeOfArrivalIndicatorCode::_xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourEstimatedTimeOfArrivalIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourEstimatedTimeOfArrivalIndicatorCode >
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourFireFightingCapabilityCode::value i)
  {
    return o << HarbourFireFightingCapabilityCode::_xsd_HarbourFireFightingCapabilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourFireFightingCapabilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourFireFightingCapabilityCode >
  _xsd_HarbourFireFightingCapabilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourFireFightingIndicatorCode::value i)
  {
    return o << HarbourFireFightingIndicatorCode::_xsd_HarbourFireFightingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourFireFightingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourFireFightingIndicatorCode >
  _xsd_HarbourFireFightingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourFirstPortOfEntryIndicatorCode::value i)
  {
    return o << HarbourFirstPortOfEntryIndicatorCode::_xsd_HarbourFirstPortOfEntryIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourFirstPortOfEntryIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourFirstPortOfEntryIndicatorCode >
  _xsd_HarbourFirstPortOfEntryIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourFreshWaterAvailabilityIndicatorCode::value i)
  {
    return o << HarbourFreshWaterAvailabilityIndicatorCode::_xsd_HarbourFreshWaterAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourFreshWaterAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourFreshWaterAvailabilityIndicatorCode >
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourLashIndicatorCode::value i)
  {
    return o << HarbourLashIndicatorCode::_xsd_HarbourLashIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourLashIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourLashIndicatorCode >
  _xsd_HarbourLashIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourLighterageAvailabilityIndicatorCode::value i)
  {
    return o << HarbourLighterageAvailabilityIndicatorCode::_xsd_HarbourLighterageAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourLighterageAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourLighterageAvailabilityIndicatorCode >
  _xsd_HarbourLighterageAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourOverheadLimitsIndicatorCode::value i)
  {
    return o << HarbourOverheadLimitsIndicatorCode::_xsd_HarbourOverheadLimitsIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourOverheadLimitsIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourOverheadLimitsIndicatorCode >
  _xsd_HarbourOverheadLimitsIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourPassengerHandlingIndicatorCode::value i)
  {
    return o << HarbourPassengerHandlingIndicatorCode::_xsd_HarbourPassengerHandlingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourPassengerHandlingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourPassengerHandlingIndicatorCode >
  _xsd_HarbourPassengerHandlingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourPersistenceCode::value i)
  {
    return o << HarbourPersistenceCode::_xsd_HarbourPersistenceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourPersistenceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourPersistenceCode >
  _xsd_HarbourPersistenceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourPilotageAvailabilityIndicatorCode::value i)
  {
    return o << HarbourPilotageAvailabilityIndicatorCode::_xsd_HarbourPilotageAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourPilotageAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourPilotageAvailabilityIndicatorCode >
  _xsd_HarbourPilotageAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourPilotageRequirementIndicatorCode::value i)
  {
    return o << HarbourPilotageRequirementIndicatorCode::_xsd_HarbourPilotageRequirementIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourPilotageRequirementIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourPilotageRequirementIndicatorCode >
  _xsd_HarbourPilotageRequirementIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourRefuellingAvailabilityIndicatorCode::value i)
  {
    return o << HarbourRefuellingAvailabilityIndicatorCode::_xsd_HarbourRefuellingAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourRefuellingAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourRefuellingAvailabilityIndicatorCode >
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourRefuellingTypeCode::value i)
  {
    return o << HarbourRefuellingTypeCode::_xsd_HarbourRefuellingTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourRefuellingTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourRefuellingTypeCode >
  _xsd_HarbourRefuellingTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourShelterQualityCode::value i)
  {
    return o << HarbourShelterQualityCode::_xsd_HarbourShelterQualityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourShelterQualityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourShelterQualityCode >
  _xsd_HarbourShelterQualityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourTankerFacilitiesIndicatorCode::value i)
  {
    return o << HarbourTankerFacilitiesIndicatorCode::_xsd_HarbourTankerFacilitiesIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourTankerFacilitiesIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourTankerFacilitiesIndicatorCode >
  _xsd_HarbourTankerFacilitiesIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourTransitAccommodationIndicatorCode::value i)
  {
    return o << HarbourTransitAccommodationIndicatorCode::_xsd_HarbourTransitAccommodationIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourTransitAccommodationIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourTransitAccommodationIndicatorCode >
  _xsd_HarbourTransitAccommodationIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourTugAvailabilityIndicatorCode::value i)
  {
    return o << HarbourTugAvailabilityIndicatorCode::_xsd_HarbourTugAvailabilityIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourTugAvailabilityIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourTugAvailabilityIndicatorCode >
  _xsd_HarbourTugAvailabilityIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourTurningAreaIndicatorCode::value i)
  {
    return o << HarbourTurningAreaIndicatorCode::_xsd_HarbourTurningAreaIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourTurningAreaIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourTurningAreaIndicatorCode >
  _xsd_HarbourTurningAreaIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourTypeCategoryCode::value i)
  {
    return o << HarbourTypeCategoryCode::_xsd_HarbourTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourTypeCategoryCode >
  _xsd_HarbourTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HarbourVehicleHandlingTypeCode::value i)
  {
    return o << HarbourVehicleHandlingTypeCode::_xsd_HarbourVehicleHandlingTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HarbourVehicleHandlingTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HarbourVehicleHandlingTypeCode >
  _xsd_HarbourVehicleHandlingTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HoldingRequiredCalculationMethodCode::value i)
  {
    return o << HoldingRequiredCalculationMethodCode::_xsd_HoldingRequiredCalculationMethodCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HoldingRequiredCalculationMethodCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HoldingRequiredCalculationMethodCode >
  _xsd_HoldingRequiredCalculationMethodCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, HoldingTransferReasonCode::value i)
  {
    return o << HoldingTransferReasonCode::_xsd_HoldingTransferReasonCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HoldingTransferReasonCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HoldingTransferReasonCode >
  _xsd_HoldingTransferReasonCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, IcingCategoryCode::value i)
  {
    return o << IcingCategoryCode::_xsd_IcingCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const IcingCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, IcingCategoryCode >
  _xsd_IcingCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, IcingSeverityQualifierCode::value i)
  {
    return o << IcingSeverityQualifierCode::_xsd_IcingSeverityQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const IcingSeverityQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, IcingSeverityQualifierCode >
  _xsd_IcingSeverityQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, JettyRailServedIndicatorCode::value i)
  {
    return o << JettyRailServedIndicatorCode::_xsd_JettyRailServedIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const JettyRailServedIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, JettyRailServedIndicatorCode >
  _xsd_JettyRailServedIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LanguageCategoryCode::value i)
  {
    return o << LanguageCategoryCode::_xsd_LanguageCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LanguageCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LanguageCategoryCode >
  _xsd_LanguageCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LanguageSkillProficiencyCode::value i)
  {
    return o << LanguageSkillProficiencyCode::_xsd_LanguageSkillProficiencyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LanguageSkillProficiencyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LanguageSkillProficiencyCode >
  _xsd_LanguageSkillProficiencyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LightCategoryCode::value i)
  {
    return o << LightCategoryCode::_xsd_LightCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LightCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LightCategoryCode >
  _xsd_LightCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LightMoonPhaseCode::value i)
  {
    return o << LightMoonPhaseCode::_xsd_LightMoonPhaseCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LightMoonPhaseCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LightMoonPhaseCode >
  _xsd_LightMoonPhaseCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LiquidSurfaceStatusSeaStateCode::value i)
  {
    return o << LiquidSurfaceStatusSeaStateCode::_xsd_LiquidSurfaceStatusSeaStateCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LiquidSurfaceStatusSeaStateCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidSurfaceStatusSeaStateCode >
  _xsd_LiquidSurfaceStatusSeaStateCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LiquidSurfaceStatusSurfaceConditionCode::value i)
  {
    return o << LiquidSurfaceStatusSurfaceConditionCode::_xsd_LiquidSurfaceStatusSurfaceConditionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LiquidSurfaceStatusSurfaceConditionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidSurfaceStatusSurfaceConditionCode >
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, LocationCategoryCode::value i)
  {
    return o << LocationCategoryCode::_xsd_LocationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LocationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LocationCategoryCode >
  _xsd_LocationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MainActivityCode::value i)
  {
    return o << MainActivityCode::_xsd_MainActivityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MainActivityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MainActivityCode >
  _xsd_MainActivityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaintenanceCapabilityCategoryCode::value i)
  {
    return o << MaintenanceCapabilityCategoryCode::_xsd_MaintenanceCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaintenanceCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaintenanceCapabilityCategoryCode >
  _xsd_MaintenanceCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaintenanceCapabilityLevelCode::value i)
  {
    return o << MaintenanceCapabilityLevelCode::_xsd_MaintenanceCapabilityLevelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaintenanceCapabilityLevelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaintenanceCapabilityLevelCode >
  _xsd_MaintenanceCapabilityLevelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaritimeEquipmentTypeCategoryCode::value i)
  {
    return o << MaritimeEquipmentTypeCategoryCode::_xsd_MaritimeEquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaritimeEquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaritimeEquipmentTypeCategoryCode >
  _xsd_MaritimeEquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaritimeEquipmentTypeSubcategoryCode::value i)
  {
    return o << MaritimeEquipmentTypeSubcategoryCode::_xsd_MaritimeEquipmentTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaritimeEquipmentTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaritimeEquipmentTypeSubcategoryCode >
  _xsd_MaritimeEquipmentTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielCategoryCode::value i)
  {
    return o << MaterielCategoryCode::_xsd_MaterielCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielCategoryCode >
  _xsd_MaterielCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusBodyColourCode::value i)
  {
    return o << MaterielStatusBodyColourCode::_xsd_MaterielStatusBodyColourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusBodyColourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusBodyColourCode >
  _xsd_MaterielStatusBodyColourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusBuoyMalfunctionCode::value i)
  {
    return o << MaterielStatusBuoyMalfunctionCode::_xsd_MaterielStatusBuoyMalfunctionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusBuoyMalfunctionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusBuoyMalfunctionCode >
  _xsd_MaterielStatusBuoyMalfunctionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusCategoryCode::value i)
  {
    return o << MaterielStatusCategoryCode::_xsd_MaterielStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusCategoryCode >
  _xsd_MaterielStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusImoCompliantIndicatorCode::value i)
  {
    return o << MaterielStatusImoCompliantIndicatorCode::_xsd_MaterielStatusImoCompliantIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusImoCompliantIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusImoCompliantIndicatorCode >
  _xsd_MaterielStatusImoCompliantIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusMarkingCode::value i)
  {
    return o << MaterielStatusMarkingCode::_xsd_MaterielStatusMarkingCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusMarkingCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusMarkingCode >
  _xsd_MaterielStatusMarkingCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusMarkingColourCode::value i)
  {
    return o << MaterielStatusMarkingColourCode::_xsd_MaterielStatusMarkingColourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusMarkingColourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusMarkingColourCode >
  _xsd_MaterielStatusMarkingColourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusOperationalStatusCode::value i)
  {
    return o << MaterielStatusOperationalStatusCode::_xsd_MaterielStatusOperationalStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusOperationalStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusOperationalStatusCode >
  _xsd_MaterielStatusOperationalStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusOperationalStatusModeCode::value i)
  {
    return o << MaterielStatusOperationalStatusModeCode::_xsd_MaterielStatusOperationalStatusModeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusOperationalStatusModeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusOperationalStatusModeCode >
  _xsd_MaterielStatusOperationalStatusModeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusOperationalStatusQualifierCode::value i)
  {
    return o << MaterielStatusOperationalStatusQualifierCode::_xsd_MaterielStatusOperationalStatusQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusOperationalStatusQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusOperationalStatusQualifierCode >
  _xsd_MaterielStatusOperationalStatusQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusReserveIndicatorCode::value i)
  {
    return o << MaterielStatusReserveIndicatorCode::_xsd_MaterielStatusReserveIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusReserveIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusReserveIndicatorCode >
  _xsd_MaterielStatusReserveIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielStatusSafetyStatusCode::value i)
  {
    return o << MaterielStatusSafetyStatusCode::_xsd_MaterielStatusSafetyStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielStatusSafetyStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielStatusSafetyStatusCode >
  _xsd_MaterielStatusSafetyStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielTypeCategoryCode::value i)
  {
    return o << MaterielTypeCategoryCode::_xsd_MaterielTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielTypeCategoryCode >
  _xsd_MaterielTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MaterielTypeSupplyClassCode::value i)
  {
    return o << MaterielTypeSupplyClassCode::_xsd_MaterielTypeSupplyClassCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MaterielTypeSupplyClassCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaterielTypeSupplyClassCode >
  _xsd_MaterielTypeSupplyClassCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MedicalFacilityStatusIntervalCasualtyTypeCode::value i)
  {
    return o << MedicalFacilityStatusIntervalCasualtyTypeCode::_xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MedicalFacilityStatusIntervalCasualtyTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MedicalFacilityStatusIntervalCasualtyTypeCode >
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MedicalFacilityStatusPendingSurgeryTriageCode::value i)
  {
    return o << MedicalFacilityStatusPendingSurgeryTriageCode::_xsd_MedicalFacilityStatusPendingSurgeryTriageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MedicalFacilityStatusPendingSurgeryTriageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MedicalFacilityStatusPendingSurgeryTriageCode >
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MeteorologicFeatureCategoryCode::value i)
  {
    return o << MeteorologicFeatureCategoryCode::_xsd_MeteorologicFeatureCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MeteorologicFeatureCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MeteorologicFeatureCategoryCode >
  _xsd_MeteorologicFeatureCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MeteorologicFeatureInterpretationCode::value i)
  {
    return o << MeteorologicFeatureInterpretationCode::_xsd_MeteorologicFeatureInterpretationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MeteorologicFeatureInterpretationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MeteorologicFeatureInterpretationCode >
  _xsd_MeteorologicFeatureInterpretationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MeteorologicFeatureSourceCode::value i)
  {
    return o << MeteorologicFeatureSourceCode::_xsd_MeteorologicFeatureSourceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MeteorologicFeatureSourceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MeteorologicFeatureSourceCode >
  _xsd_MeteorologicFeatureSourceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryObstacleCategoryCode::value i)
  {
    return o << MilitaryObstacleCategoryCode::_xsd_MilitaryObstacleCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryObstacleCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryObstacleCategoryCode >
  _xsd_MilitaryObstacleCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryObstacleTypeCategoryCode::value i)
  {
    return o << MilitaryObstacleTypeCategoryCode::_xsd_MilitaryObstacleTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryObstacleTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryObstacleTypeCategoryCode >
  _xsd_MilitaryObstacleTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryObstacleTypeSubcategoryCode::value i)
  {
    return o << MilitaryObstacleTypeSubcategoryCode::_xsd_MilitaryObstacleTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryObstacleTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryObstacleTypeSubcategoryCode >
  _xsd_MilitaryObstacleTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryOrganisationTypeCategoryCode::value i)
  {
    return o << MilitaryOrganisationTypeCategoryCode::_xsd_MilitaryOrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryOrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryOrganisationTypeCategoryCode >
  _xsd_MilitaryOrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryOrganisationTypeServiceCode::value i)
  {
    return o << MilitaryOrganisationTypeServiceCode::_xsd_MilitaryOrganisationTypeServiceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryOrganisationTypeServiceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryOrganisationTypeServiceCode >
  _xsd_MilitaryOrganisationTypeServiceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryPostTypeCategoryCode::value i)
  {
    return o << MilitaryPostTypeCategoryCode::_xsd_MilitaryPostTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryPostTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryPostTypeCategoryCode >
  _xsd_MilitaryPostTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MilitaryPostTypeRankCode::value i)
  {
    return o << MilitaryPostTypeRankCode::_xsd_MilitaryPostTypeRankCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MilitaryPostTypeRankCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MilitaryPostTypeRankCode >
  _xsd_MilitaryPostTypeRankCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinePresenceCode::value i)
  {
    return o << MinePresenceCode::_xsd_MinePresenceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinePresenceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinePresenceCode >
  _xsd_MinePresenceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MineStatusAirDropEffectCode::value i)
  {
    return o << MineStatusAirDropEffectCode::_xsd_MineStatusAirDropEffectCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MineStatusAirDropEffectCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MineStatusAirDropEffectCode >
  _xsd_MineStatusAirDropEffectCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MineStatusCode::value i)
  {
    return o << MineStatusCode::_xsd_MineStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MineStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MineStatusCode >
  _xsd_MineStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MineStatusMaritimeMineQualifierCode::value i)
  {
    return o << MineStatusMaritimeMineQualifierCode::_xsd_MineStatusMaritimeMineQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MineStatusMaritimeMineQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MineStatusMaritimeMineQualifierCode >
  _xsd_MineStatusMaritimeMineQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldCategoryCode::value i)
  {
    return o << MinefieldCategoryCode::_xsd_MinefieldCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldCategoryCode >
  _xsd_MinefieldCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldLandDepthPlacementCode::value i)
  {
    return o << MinefieldLandDepthPlacementCode::_xsd_MinefieldLandDepthPlacementCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldLandDepthPlacementCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldLandDepthPlacementCode >
  _xsd_MinefieldLandDepthPlacementCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldLandFunctionCode::value i)
  {
    return o << MinefieldLandFunctionCode::_xsd_MinefieldLandFunctionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldLandFunctionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldLandFunctionCode >
  _xsd_MinefieldLandFunctionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldLandPatternCode::value i)
  {
    return o << MinefieldLandPatternCode::_xsd_MinefieldLandPatternCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldLandPatternCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldLandPatternCode >
  _xsd_MinefieldLandPatternCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldLandPersistenceCode::value i)
  {
    return o << MinefieldLandPersistenceCode::_xsd_MinefieldLandPersistenceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldLandPersistenceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldLandPersistenceCode >
  _xsd_MinefieldLandPersistenceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldLandStoppingPowerCode::value i)
  {
    return o << MinefieldLandStoppingPowerCode::_xsd_MinefieldLandStoppingPowerCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldLandStoppingPowerCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldLandStoppingPowerCode >
  _xsd_MinefieldLandStoppingPowerCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeBottomNaturalCamouflageCode::value i)
  {
    return o << MinefieldMaritimeBottomNaturalCamouflageCode::_xsd_MinefieldMaritimeBottomNaturalCamouflageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeBottomNaturalCamouflageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeBottomNaturalCamouflageCode >
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeDepthPlacementCode::value i)
  {
    return o << MinefieldMaritimeDepthPlacementCode::_xsd_MinefieldMaritimeDepthPlacementCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeDepthPlacementCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeDepthPlacementCode >
  _xsd_MinefieldMaritimeDepthPlacementCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeFunctionCode::value i)
  {
    return o << MinefieldMaritimeFunctionCode::_xsd_MinefieldMaritimeFunctionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeFunctionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeFunctionCode >
  _xsd_MinefieldMaritimeFunctionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusCode::value i)
  {
    return o << MinefieldMaritimeStatusCode::_xsd_MinefieldMaritimeStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusCode >
  _xsd_MinefieldMaritimeStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusColourCode::value i)
  {
    return o << MinefieldMaritimeStatusColourCode::_xsd_MinefieldMaritimeStatusColourCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusColourCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusColourCode >
  _xsd_MinefieldMaritimeStatusColourCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusExpectedLevelMcmCode::value i)
  {
    return o << MinefieldMaritimeStatusExpectedLevelMcmCode::_xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusExpectedLevelMcmCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusExpectedLevelMcmCode >
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusMineDetectionCode::value i)
  {
    return o << MinefieldMaritimeStatusMineDetectionCode::_xsd_MinefieldMaritimeStatusMineDetectionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusMineDetectionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusMineDetectionCode >
  _xsd_MinefieldMaritimeStatusMineDetectionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusMineZoneRiskCode::value i)
  {
    return o << MinefieldMaritimeStatusMineZoneRiskCode::_xsd_MinefieldMaritimeStatusMineZoneRiskCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusMineZoneRiskCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusMineZoneRiskCode >
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeStatusSeedingCode::value i)
  {
    return o << MinefieldMaritimeStatusSeedingCode::_xsd_MinefieldMaritimeStatusSeedingCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeStatusSeedingCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeStatusSeedingCode >
  _xsd_MinefieldMaritimeStatusSeedingCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MinefieldMaritimeSubfunctionCode::value i)
  {
    return o << MinefieldMaritimeSubfunctionCode::_xsd_MinefieldMaritimeSubfunctionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MinefieldMaritimeSubfunctionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MinefieldMaritimeSubfunctionCode >
  _xsd_MinefieldMaritimeSubfunctionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MiscellaneousEquipmentTypeCategoryCode::value i)
  {
    return o << MiscellaneousEquipmentTypeCategoryCode::_xsd_MiscellaneousEquipmentTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MiscellaneousEquipmentTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MiscellaneousEquipmentTypeCategoryCode >
  _xsd_MiscellaneousEquipmentTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MiscellaneousEquipmentTypeSubcategoryCode::value i)
  {
    return o << MiscellaneousEquipmentTypeSubcategoryCode::_xsd_MiscellaneousEquipmentTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MiscellaneousEquipmentTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MiscellaneousEquipmentTypeSubcategoryCode >
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MissionPrimacyCode::value i)
  {
    return o << MissionPrimacyCode::_xsd_MissionPrimacyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MissionPrimacyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MissionPrimacyCode >
  _xsd_MissionPrimacyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MobilityCapabilityCategoryCode::value i)
  {
    return o << MobilityCapabilityCategoryCode::_xsd_MobilityCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MobilityCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MobilityCapabilityCategoryCode >
  _xsd_MobilityCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MobilityCapabilityDescriptorCode::value i)
  {
    return o << MobilityCapabilityDescriptorCode::_xsd_MobilityCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MobilityCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MobilityCapabilityDescriptorCode >
  _xsd_MobilityCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MobilityCapabilityTerrainTypeCode::value i)
  {
    return o << MobilityCapabilityTerrainTypeCode::_xsd_MobilityCapabilityTerrainTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MobilityCapabilityTerrainTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MobilityCapabilityTerrainTypeCode >
  _xsd_MobilityCapabilityTerrainTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, MobilityCode::value i)
  {
    return o << MobilityCode::_xsd_MobilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MobilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MobilityCode >
  _xsd_MobilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ModeOfTransportationCode::value i)
  {
    return o << ModeOfTransportationCode::_xsd_ModeOfTransportationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ModeOfTransportationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ModeOfTransportationCode >
  _xsd_ModeOfTransportationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkArchitectureCode::value i)
  {
    return o << NetworkArchitectureCode::_xsd_NetworkArchitectureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkArchitectureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkArchitectureCode >
  _xsd_NetworkArchitectureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkCapacityBandwidthCode::value i)
  {
    return o << NetworkCapacityBandwidthCode::_xsd_NetworkCapacityBandwidthCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkCapacityBandwidthCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkCapacityBandwidthCode >
  _xsd_NetworkCapacityBandwidthCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkCapacityProtocolCode::value i)
  {
    return o << NetworkCapacityProtocolCode::_xsd_NetworkCapacityProtocolCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkCapacityProtocolCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkCapacityProtocolCode >
  _xsd_NetworkCapacityProtocolCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkCategoryCode::value i)
  {
    return o << NetworkCategoryCode::_xsd_NetworkCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkCategoryCode >
  _xsd_NetworkCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkFrequencyBandCode::value i)
  {
    return o << NetworkFrequencyBandCode::_xsd_NetworkFrequencyBandCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkFrequencyBandCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkFrequencyBandCode >
  _xsd_NetworkFrequencyBandCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkFrequencyModulationCode::value i)
  {
    return o << NetworkFrequencyModulationCode::_xsd_NetworkFrequencyModulationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkFrequencyModulationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkFrequencyModulationCode >
  _xsd_NetworkFrequencyModulationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkMeansCode::value i)
  {
    return o << NetworkMeansCode::_xsd_NetworkMeansCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkMeansCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkMeansCode >
  _xsd_NetworkMeansCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkServiceCategoryCode::value i)
  {
    return o << NetworkServiceCategoryCode::_xsd_NetworkServiceCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkServiceCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkServiceCategoryCode >
  _xsd_NetworkServiceCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkServiceCryptographicIndicatorCode::value i)
  {
    return o << NetworkServiceCryptographicIndicatorCode::_xsd_NetworkServiceCryptographicIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkServiceCryptographicIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkServiceCryptographicIndicatorCode >
  _xsd_NetworkServiceCryptographicIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkServiceStatusIndicatorCode::value i)
  {
    return o << NetworkServiceStatusIndicatorCode::_xsd_NetworkServiceStatusIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkServiceStatusIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkServiceStatusIndicatorCode >
  _xsd_NetworkServiceStatusIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkServiceSubcategoryCode::value i)
  {
    return o << NetworkServiceSubcategoryCode::_xsd_NetworkServiceSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkServiceSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkServiceSubcategoryCode >
  _xsd_NetworkServiceSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NetworkSubcategoryCode::value i)
  {
    return o << NetworkSubcategoryCode::_xsd_NetworkSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NetworkSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NetworkSubcategoryCode >
  _xsd_NetworkSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NuclearEventCategoryCode::value i)
  {
    return o << NuclearEventCategoryCode::_xsd_NuclearEventCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NuclearEventCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NuclearEventCategoryCode >
  _xsd_NuclearEventCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NuclearWeaponEventCraterPresenceCode::value i)
  {
    return o << NuclearWeaponEventCraterPresenceCode::_xsd_NuclearWeaponEventCraterPresenceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NuclearWeaponEventCraterPresenceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NuclearWeaponEventCraterPresenceCode >
  _xsd_NuclearWeaponEventCraterPresenceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, NuclearYieldGroupCode::value i)
  {
    return o << NuclearYieldGroupCode::_xsd_NuclearYieldGroupCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const NuclearYieldGroupCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NuclearYieldGroupCode >
  _xsd_NuclearYieldGroupCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAddressAuthorisationIndicatorCode::value i)
  {
    return o << ObjectItemAddressAuthorisationIndicatorCode::_xsd_ObjectItemAddressAuthorisationIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAddressAuthorisationIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAddressAuthorisationIndicatorCode >
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAddressPrimacyCode::value i)
  {
    return o << ObjectItemAddressPrimacyCode::_xsd_ObjectItemAddressPrimacyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAddressPrimacyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAddressPrimacyCode >
  _xsd_ObjectItemAddressPrimacyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAddressTransmitReceiveCode::value i)
  {
    return o << ObjectItemAddressTransmitReceiveCode::_xsd_ObjectItemAddressTransmitReceiveCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAddressTransmitReceiveCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAddressTransmitReceiveCode >
  _xsd_ObjectItemAddressTransmitReceiveCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAliasCategoryCode::value i)
  {
    return o << ObjectItemAliasCategoryCode::_xsd_ObjectItemAliasCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAliasCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAliasCategoryCode >
  _xsd_ObjectItemAliasCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAssociationCategoryCode::value i)
  {
    return o << ObjectItemAssociationCategoryCode::_xsd_ObjectItemAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAssociationCategoryCode >
  _xsd_ObjectItemAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemAssociationSubcategoryCode::value i)
  {
    return o << ObjectItemAssociationSubcategoryCode::_xsd_ObjectItemAssociationSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemAssociationSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemAssociationSubcategoryCode >
  _xsd_ObjectItemAssociationSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemCategoryCode::value i)
  {
    return o << ObjectItemCategoryCode::_xsd_ObjectItemCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemCategoryCode >
  _xsd_ObjectItemCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemGroupAccountDetailQualifierCode::value i)
  {
    return o << ObjectItemGroupAccountDetailQualifierCode::_xsd_ObjectItemGroupAccountDetailQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemGroupAccountDetailQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemGroupAccountDetailQualifierCode >
  _xsd_ObjectItemGroupAccountDetailQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemHostilityStatusCode::value i)
  {
    return o << ObjectItemHostilityStatusCode::_xsd_ObjectItemHostilityStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemHostilityStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemHostilityStatusCode >
  _xsd_ObjectItemHostilityStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemLocationMeaningCode::value i)
  {
    return o << ObjectItemLocationMeaningCode::_xsd_ObjectItemLocationMeaningCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemLocationMeaningCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemLocationMeaningCode >
  _xsd_ObjectItemLocationMeaningCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemLocationRelativeSpeedCode::value i)
  {
    return o << ObjectItemLocationRelativeSpeedCode::_xsd_ObjectItemLocationRelativeSpeedCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemLocationRelativeSpeedCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemLocationRelativeSpeedCode >
  _xsd_ObjectItemLocationRelativeSpeedCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemCitationAssociationCategoryCode::value i)
  {
    return o << ObjectItemCitationAssociationCategoryCode::_xsd_ObjectItemCitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemCitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemCitationAssociationCategoryCode >
  _xsd_ObjectItemCitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemStatusBoobyTrapPresenceCode::value i)
  {
    return o << ObjectItemStatusBoobyTrapPresenceCode::_xsd_ObjectItemStatusBoobyTrapPresenceCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemStatusBoobyTrapPresenceCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemStatusBoobyTrapPresenceCode >
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemStatusCategoryCode::value i)
  {
    return o << ObjectItemStatusCategoryCode::_xsd_ObjectItemStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemStatusCategoryCode >
  _xsd_ObjectItemStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectItemStatusEmissionControlCode::value i)
  {
    return o << ObjectItemStatusEmissionControlCode::_xsd_ObjectItemStatusEmissionControlCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectItemStatusEmissionControlCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectItemStatusEmissionControlCode >
  _xsd_ObjectItemStatusEmissionControlCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeCategoryCode::value i)
  {
    return o << ObjectTypeCategoryCode::_xsd_ObjectTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeCategoryCode >
  _xsd_ObjectTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeDecoyIndicatorCode::value i)
  {
    return o << ObjectTypeDecoyIndicatorCode::_xsd_ObjectTypeDecoyIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeDecoyIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeDecoyIndicatorCode >
  _xsd_ObjectTypeDecoyIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeEstablishmentCategoryCode::value i)
  {
    return o << ObjectTypeEstablishmentCategoryCode::_xsd_ObjectTypeEstablishmentCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeEstablishmentCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeEstablishmentCategoryCode >
  _xsd_ObjectTypeEstablishmentCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeEstablishmentEnvironmentConditionCode::value i)
  {
    return o << ObjectTypeEstablishmentEnvironmentConditionCode::_xsd_ObjectTypeEstablishmentEnvironmentConditionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeEstablishmentEnvironmentConditionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeEstablishmentEnvironmentConditionCode >
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::value i)
  {
    return o << ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode::_xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode >
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeEstablishmentOperationalModeCode::value i)
  {
    return o << ObjectTypeEstablishmentOperationalModeCode::_xsd_ObjectTypeEstablishmentOperationalModeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeEstablishmentOperationalModeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeEstablishmentOperationalModeCode >
  _xsd_ObjectTypeEstablishmentOperationalModeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ObjectTypeCitationAssociationCategoryCode::value i)
  {
    return o << ObjectTypeCitationAssociationCategoryCode::_xsd_ObjectTypeCitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ObjectTypeCitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ObjectTypeCitationAssociationCategoryCode >
  _xsd_ObjectTypeCitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OperationalCapabilityCategoryCode::value i)
  {
    return o << OperationalCapabilityCategoryCode::_xsd_OperationalCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OperationalCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OperationalCapabilityCategoryCode >
  _xsd_OperationalCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OperationalCapabilityLevelCode::value i)
  {
    return o << OperationalCapabilityLevelCode::_xsd_OperationalCapabilityLevelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OperationalCapabilityLevelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OperationalCapabilityLevelCode >
  _xsd_OperationalCapabilityLevelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OperationalCapabilityQualifierCode::value i)
  {
    return o << OperationalCapabilityQualifierCode::_xsd_OperationalCapabilityQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OperationalCapabilityQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OperationalCapabilityQualifierCode >
  _xsd_OperationalCapabilityQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OperationalInformationGroupCategoryCode::value i)
  {
    return o << OperationalInformationGroupCategoryCode::_xsd_OperationalInformationGroupCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OperationalInformationGroupCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OperationalInformationGroupCategoryCode >
  _xsd_OperationalInformationGroupCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OperationalInformationGroupOrganisationAssociationCategoryCode::value i)
  {
    return o << OperationalInformationGroupOrganisationAssociationCategoryCode::_xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OperationalInformationGroupOrganisationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OperationalInformationGroupOrganisationAssociationCategoryCode >
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrbitAreaAlignmentCode::value i)
  {
    return o << OrbitAreaAlignmentCode::_xsd_OrbitAreaAlignmentCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrbitAreaAlignmentCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrbitAreaAlignmentCode >
  _xsd_OrbitAreaAlignmentCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrderCategoryCode::value i)
  {
    return o << OrderCategoryCode::_xsd_OrderCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrderCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrderCategoryCode >
  _xsd_OrderCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrderStatusExecutionStateCode::value i)
  {
    return o << OrderStatusExecutionStateCode::_xsd_OrderStatusExecutionStateCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrderStatusExecutionStateCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrderStatusExecutionStateCode >
  _xsd_OrderStatusExecutionStateCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationActionAssociationCategoryCode::value i)
  {
    return o << OrganisationActionAssociationCategoryCode::_xsd_OrganisationActionAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationActionAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationActionAssociationCategoryCode >
  _xsd_OrganisationActionAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationActionTaskRuleOfEngagementStatusCategoryCode::value i)
  {
    return o << OrganisationActionTaskRuleOfEngagementStatusCategoryCode::_xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationActionTaskRuleOfEngagementStatusCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationActionTaskRuleOfEngagementStatusCategoryCode >
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationCategoryCode::value i)
  {
    return o << OrganisationCategoryCode::_xsd_OrganisationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationCategoryCode >
  _xsd_OrganisationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationMaterielTypeAssociationReportableTypeCode::value i)
  {
    return o << OrganisationMaterielTypeAssociationReportableTypeCode::_xsd_OrganisationMaterielTypeAssociationReportableTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationMaterielTypeAssociationReportableTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationMaterielTypeAssociationReportableTypeCode >
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationPlanOrderAssociationCategoryCode::value i)
  {
    return o << OrganisationPlanOrderAssociationCategoryCode::_xsd_OrganisationPlanOrderAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationPlanOrderAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationPlanOrderAssociationCategoryCode >
  _xsd_OrganisationPlanOrderAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationCitationAssociationCategoryCode::value i)
  {
    return o << OrganisationCitationAssociationCategoryCode::_xsd_OrganisationCitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationCitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationCitationAssociationCategoryCode >
  _xsd_OrganisationCitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusAvailabilityCode::value i)
  {
    return o << OrganisationStatusAvailabilityCode::_xsd_OrganisationStatusAvailabilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusAvailabilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusAvailabilityCode >
  _xsd_OrganisationStatusAvailabilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusCbrnDressStateCode::value i)
  {
    return o << OrganisationStatusCbrnDressStateCode::_xsd_OrganisationStatusCbrnDressStateCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusCbrnDressStateCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusCbrnDressStateCode >
  _xsd_OrganisationStatusCbrnDressStateCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusCommandAndControlRoleCode::value i)
  {
    return o << OrganisationStatusCommandAndControlRoleCode::_xsd_OrganisationStatusCommandAndControlRoleCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusCommandAndControlRoleCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusCommandAndControlRoleCode >
  _xsd_OrganisationStatusCommandAndControlRoleCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusCommitmentStatusCode::value i)
  {
    return o << OrganisationStatusCommitmentStatusCode::_xsd_OrganisationStatusCommitmentStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusCommitmentStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusCommitmentStatusCode >
  _xsd_OrganisationStatusCommitmentStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusFireModeCode::value i)
  {
    return o << OrganisationStatusFireModeCode::_xsd_OrganisationStatusFireModeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusFireModeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusFireModeCode >
  _xsd_OrganisationStatusFireModeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusOperationalStatusCode::value i)
  {
    return o << OrganisationStatusOperationalStatusCode::_xsd_OrganisationStatusOperationalStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusOperationalStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusOperationalStatusCode >
  _xsd_OrganisationStatusOperationalStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusOperationalStatusQualifierCode::value i)
  {
    return o << OrganisationStatusOperationalStatusQualifierCode::_xsd_OrganisationStatusOperationalStatusQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusOperationalStatusQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusOperationalStatusQualifierCode >
  _xsd_OrganisationStatusOperationalStatusQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusReadinessCode::value i)
  {
    return o << OrganisationStatusReadinessCode::_xsd_OrganisationStatusReadinessCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusReadinessCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusReadinessCode >
  _xsd_OrganisationStatusReadinessCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusReinforcementCode::value i)
  {
    return o << OrganisationStatusReinforcementCode::_xsd_OrganisationStatusReinforcementCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusReinforcementCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusReinforcementCode >
  _xsd_OrganisationStatusReinforcementCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusReserveIndicatorCode::value i)
  {
    return o << OrganisationStatusReserveIndicatorCode::_xsd_OrganisationStatusReserveIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusReserveIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusReserveIndicatorCode >
  _xsd_OrganisationStatusReserveIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusTrainingCode::value i)
  {
    return o << OrganisationStatusTrainingCode::_xsd_OrganisationStatusTrainingCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusTrainingCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusTrainingCode >
  _xsd_OrganisationStatusTrainingCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationStatusUsageStatusCode::value i)
  {
    return o << OrganisationStatusUsageStatusCode::_xsd_OrganisationStatusUsageStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationStatusUsageStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationStatusUsageStatusCode >
  _xsd_OrganisationStatusUsageStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationTypeCategoryCode::value i)
  {
    return o << OrganisationTypeCategoryCode::_xsd_OrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationTypeCategoryCode >
  _xsd_OrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationTypeCommandAndControlCategoryCode::value i)
  {
    return o << OrganisationTypeCommandAndControlCategoryCode::_xsd_OrganisationTypeCommandAndControlCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationTypeCommandAndControlCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationTypeCommandAndControlCategoryCode >
  _xsd_OrganisationTypeCommandAndControlCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, OrganisationTypeCommandFunctionIndicatorCode::value i)
  {
    return o << OrganisationTypeCommandFunctionIndicatorCode::_xsd_OrganisationTypeCommandFunctionIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OrganisationTypeCommandFunctionIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OrganisationTypeCommandFunctionIndicatorCode >
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersistencyCode::value i)
  {
    return o << PersistencyCode::_xsd_PersistencyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersistencyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersistencyCode >
  _xsd_PersistencyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonBloodTypeCode::value i)
  {
    return o << PersonBloodTypeCode::_xsd_PersonBloodTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonBloodTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonBloodTypeCode >
  _xsd_PersonBloodTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonIdentificationDocumentCode::value i)
  {
    return o << PersonIdentificationDocumentCode::_xsd_PersonIdentificationDocumentCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonIdentificationDocumentCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonIdentificationDocumentCode >
  _xsd_PersonIdentificationDocumentCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonLanguageSkillGeneralProficiencyCode::value i)
  {
    return o << PersonLanguageSkillGeneralProficiencyCode::_xsd_PersonLanguageSkillGeneralProficiencyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonLanguageSkillGeneralProficiencyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonLanguageSkillGeneralProficiencyCode >
  _xsd_PersonLanguageSkillGeneralProficiencyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonProfessingIndicatorCode::value i)
  {
    return o << PersonProfessingIndicatorCode::_xsd_PersonProfessingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonProfessingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonProfessingIndicatorCode >
  _xsd_PersonProfessingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonStatusDutyStatusCode::value i)
  {
    return o << PersonStatusDutyStatusCode::_xsd_PersonStatusDutyStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonStatusDutyStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonStatusDutyStatusCode >
  _xsd_PersonStatusDutyStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonStatusPhysicalStatusCode::value i)
  {
    return o << PersonStatusPhysicalStatusCode::_xsd_PersonStatusPhysicalStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonStatusPhysicalStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonStatusPhysicalStatusCode >
  _xsd_PersonStatusPhysicalStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonStatusPhysicalStatusQualifierCode::value i)
  {
    return o << PersonStatusPhysicalStatusQualifierCode::_xsd_PersonStatusPhysicalStatusQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonStatusPhysicalStatusQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonStatusPhysicalStatusQualifierCode >
  _xsd_PersonStatusPhysicalStatusQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonStatusReserveIndicatorCode::value i)
  {
    return o << PersonStatusReserveIndicatorCode::_xsd_PersonStatusReserveIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonStatusReserveIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonStatusReserveIndicatorCode >
  _xsd_PersonStatusReserveIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonTypeCategoryCode::value i)
  {
    return o << PersonTypeCategoryCode::_xsd_PersonTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonTypeCategoryCode >
  _xsd_PersonTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonTypeRankCode::value i)
  {
    return o << PersonTypeRankCode::_xsd_PersonTypeRankCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonTypeRankCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonTypeRankCode >
  _xsd_PersonTypeRankCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PersonTypeSubcategoryCode::value i)
  {
    return o << PersonTypeSubcategoryCode::_xsd_PersonTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PersonTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PersonTypeSubcategoryCode >
  _xsd_PersonTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PhysicalAddressCategoryCode::value i)
  {
    return o << PhysicalAddressCategoryCode::_xsd_PhysicalAddressCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PhysicalAddressCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PhysicalAddressCategoryCode >
  _xsd_PhysicalAddressCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanCategoryCode::value i)
  {
    return o << PlanCategoryCode::_xsd_PlanCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanCategoryCode >
  _xsd_PlanCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderAssociationCategoryCode::value i)
  {
    return o << PlanOrderAssociationCategoryCode::_xsd_PlanOrderAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderAssociationCategoryCode >
  _xsd_PlanOrderAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderCategoryCode::value i)
  {
    return o << PlanOrderCategoryCode::_xsd_PlanOrderCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderCategoryCode >
  _xsd_PlanOrderCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderComponentContentCitationCategoryCode::value i)
  {
    return o << PlanOrderComponentContentCitationCategoryCode::_xsd_PlanOrderComponentContentCitationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderComponentContentCitationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderComponentContentCitationCategoryCode >
  _xsd_PlanOrderComponentContentCitationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderComponentStructureCategoryCode::value i)
  {
    return o << PlanOrderComponentStructureCategoryCode::_xsd_PlanOrderComponentStructureCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderComponentStructureCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderComponentStructureCategoryCode >
  _xsd_PlanOrderComponentStructureCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderDistributionAcknowledgementCode::value i)
  {
    return o << PlanOrderDistributionAcknowledgementCode::_xsd_PlanOrderDistributionAcknowledgementCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderDistributionAcknowledgementCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderDistributionAcknowledgementCode >
  _xsd_PlanOrderDistributionAcknowledgementCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderDistributionCategoryCode::value i)
  {
    return o << PlanOrderDistributionCategoryCode::_xsd_PlanOrderDistributionCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderDistributionCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderDistributionCategoryCode >
  _xsd_PlanOrderDistributionCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanOrderHeaderContentTimeZoneCode::value i)
  {
    return o << PlanOrderHeaderContentTimeZoneCode::_xsd_PlanOrderHeaderContentTimeZoneCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanOrderHeaderContentTimeZoneCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanOrderHeaderContentTimeZoneCode >
  _xsd_PlanOrderHeaderContentTimeZoneCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanStatusDevelopmentStatusCode::value i)
  {
    return o << PlanStatusDevelopmentStatusCode::_xsd_PlanStatusDevelopmentStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanStatusDevelopmentStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanStatusDevelopmentStatusCode >
  _xsd_PlanStatusDevelopmentStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PlanStatusStateCode::value i)
  {
    return o << PlanStatusStateCode::_xsd_PlanStatusStateCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PlanStatusStateCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PlanStatusStateCode >
  _xsd_PlanStatusStateCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PointCategoryCode::value i)
  {
    return o << PointCategoryCode::_xsd_PointCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PointCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PointCategoryCode >
  _xsd_PointCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PrecipitationCategoryCode::value i)
  {
    return o << PrecipitationCategoryCode::_xsd_PrecipitationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PrecipitationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PrecipitationCategoryCode >
  _xsd_PrecipitationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, PrivateSectorOrganisationTypeCategoryCode::value i)
  {
    return o << PrivateSectorOrganisationTypeCategoryCode::_xsd_PrivateSectorOrganisationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PrivateSectorOrganisationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PrivateSectorOrganisationTypeCategoryCode >
  _xsd_PrivateSectorOrganisationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, QuayContainerHandlingTypeCode::value i)
  {
    return o << QuayContainerHandlingTypeCode::_xsd_QuayContainerHandlingTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const QuayContainerHandlingTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, QuayContainerHandlingTypeCode >
  _xsd_QuayContainerHandlingTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, QuayCraneOffloadingTypeCode::value i)
  {
    return o << QuayCraneOffloadingTypeCode::_xsd_QuayCraneOffloadingTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const QuayCraneOffloadingTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, QuayCraneOffloadingTypeCode >
  _xsd_QuayCraneOffloadingTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, QuayRailServedIndicatorCode::value i)
  {
    return o << QuayRailServedIndicatorCode::_xsd_QuayRailServedIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const QuayRailServedIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, QuayRailServedIndicatorCode >
  _xsd_QuayRailServedIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, QuayStorageCode::value i)
  {
    return o << QuayStorageCode::_xsd_QuayStorageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const QuayStorageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, QuayStorageCode >
  _xsd_QuayStorageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RadioactiveEventCategoryCode::value i)
  {
    return o << RadioactiveEventCategoryCode::_xsd_RadioactiveEventCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RadioactiveEventCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RadioactiveEventCategoryCode >
  _xsd_RadioactiveEventCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RadioactiveEventDoseRateTrendCode::value i)
  {
    return o << RadioactiveEventDoseRateTrendCode::_xsd_RadioactiveEventDoseRateTrendCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RadioactiveEventDoseRateTrendCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RadioactiveEventDoseRateTrendCode >
  _xsd_RadioactiveEventDoseRateTrendCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RadioactiveEventRelativeDecayRateCode::value i)
  {
    return o << RadioactiveEventRelativeDecayRateCode::_xsd_RadioactiveEventRelativeDecayRateCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RadioactiveEventRelativeDecayRateCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RadioactiveEventRelativeDecayRateCode >
  _xsd_RadioactiveEventRelativeDecayRateCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RadioactiveMaterielTypeCategoryCode::value i)
  {
    return o << RadioactiveMaterielTypeCategoryCode::_xsd_RadioactiveMaterielTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RadioactiveMaterielTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RadioactiveMaterielTypeCategoryCode >
  _xsd_RadioactiveMaterielTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RadioactiveMaterielTypePrimaryRadiationCode::value i)
  {
    return o << RadioactiveMaterielTypePrimaryRadiationCode::_xsd_RadioactiveMaterielTypePrimaryRadiationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RadioactiveMaterielTypePrimaryRadiationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RadioactiveMaterielTypePrimaryRadiationCode >
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailcarTypeCategoryCode::value i)
  {
    return o << RailcarTypeCategoryCode::_xsd_RailcarTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailcarTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailcarTypeCategoryCode >
  _xsd_RailcarTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailcarTypeSubcategoryCode::value i)
  {
    return o << RailcarTypeSubcategoryCode::_xsd_RailcarTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailcarTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailcarTypeSubcategoryCode >
  _xsd_RailcarTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailwaySignalSystemCode::value i)
  {
    return o << RailwaySignalSystemCode::_xsd_RailwaySignalSystemCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailwaySignalSystemCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailwaySignalSystemCode >
  _xsd_RailwaySignalSystemCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailwaySignalSystemEfficiencyCode::value i)
  {
    return o << RailwaySignalSystemEfficiencyCode::_xsd_RailwaySignalSystemEfficiencyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailwaySignalSystemEfficiencyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailwaySignalSystemEfficiencyCode >
  _xsd_RailwaySignalSystemEfficiencyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailwayTrackGaugeCode::value i)
  {
    return o << RailwayTrackGaugeCode::_xsd_RailwayTrackGaugeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailwayTrackGaugeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailwayTrackGaugeCode >
  _xsd_RailwayTrackGaugeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RailwayTractionSystemCode::value i)
  {
    return o << RailwayTractionSystemCode::_xsd_RailwayTractionSystemCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RailwayTractionSystemCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RailwayTractionSystemCode >
  _xsd_RailwayTractionSystemCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationAssociationCategoryCode::value i)
  {
    return o << CitationAssociationCategoryCode::_xsd_CitationAssociationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationAssociationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationAssociationCategoryCode >
  _xsd_CitationAssociationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationContentCategoryCode::value i)
  {
    return o << CitationContentCategoryCode::_xsd_CitationContentCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationContentCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationContentCategoryCode >
  _xsd_CitationContentCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationLifecycleCode::value i)
  {
    return o << CitationLifecycleCode::_xsd_CitationLifecycleCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationLifecycleCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationLifecycleCode >
  _xsd_CitationLifecycleCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationMediumTypeCode::value i)
  {
    return o << CitationMediumTypeCode::_xsd_CitationMediumTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationMediumTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationMediumTypeCode >
  _xsd_CitationMediumTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationTransmittalTypeCode::value i)
  {
    return o << CitationTransmittalTypeCode::_xsd_CitationTransmittalTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationTransmittalTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationTransmittalTypeCode >
  _xsd_CitationTransmittalTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, CitationVerificationCode::value i)
  {
    return o << CitationVerificationCode::_xsd_CitationVerificationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CitationVerificationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CitationVerificationCode >
  _xsd_CitationVerificationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RelativeCoordinateSystemCitationCategoryCode::value i)
  {
    return o << RelativeCoordinateSystemCitationCategoryCode::_xsd_RelativeCoordinateSystemCitationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RelativeCoordinateSystemCitationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RelativeCoordinateSystemCitationCategoryCode >
  _xsd_RelativeCoordinateSystemCitationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReleaseCategoryCode::value i)
  {
    return o << ReleaseCategoryCode::_xsd_ReleaseCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReleaseCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReleaseCategoryCode >
  _xsd_ReleaseCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataAccuracyCode::value i)
  {
    return o << ReportingDataAccuracyCode::_xsd_ReportingDataAccuracyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataAccuracyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataAccuracyCode >
  _xsd_ReportingDataAccuracyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataCategoryCode::value i)
  {
    return o << ReportingDataCategoryCode::_xsd_ReportingDataCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataCategoryCode >
  _xsd_ReportingDataCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataCountingIndicatorCode::value i)
  {
    return o << ReportingDataCountingIndicatorCode::_xsd_ReportingDataCountingIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataCountingIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataCountingIndicatorCode >
  _xsd_ReportingDataCountingIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataCredibilityCode::value i)
  {
    return o << ReportingDataCredibilityCode::_xsd_ReportingDataCredibilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataCredibilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataCredibilityCode >
  _xsd_ReportingDataCredibilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataEntityCategoryCode::value i)
  {
    return o << ReportingDataEntityCategoryCode::_xsd_ReportingDataEntityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataEntityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataEntityCategoryCode >
  _xsd_ReportingDataEntityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataRealDataExerciseUseOnlyCode::value i)
  {
    return o << ReportingDataRealDataExerciseUseOnlyCode::_xsd_ReportingDataRealDataExerciseUseOnlyCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataRealDataExerciseUseOnlyCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataRealDataExerciseUseOnlyCode >
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataReliabilityCode::value i)
  {
    return o << ReportingDataReliabilityCode::_xsd_ReportingDataReliabilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataReliabilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataReliabilityCode >
  _xsd_ReportingDataReliabilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataSourceTypeCode::value i)
  {
    return o << ReportingDataSourceTypeCode::_xsd_ReportingDataSourceTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataSourceTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataSourceTypeCode >
  _xsd_ReportingDataSourceTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, ReportingDataTimingCategoryCode::value i)
  {
    return o << ReportingDataTimingCategoryCode::_xsd_ReportingDataTimingCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ReportingDataTimingCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ReportingDataTimingCategoryCode >
  _xsd_ReportingDataTimingCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RequestAnswerCategoryCode::value i)
  {
    return o << RequestAnswerCategoryCode::_xsd_RequestAnswerCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RequestAnswerCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RequestAnswerCategoryCode >
  _xsd_RequestAnswerCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RequestCategoryCode::value i)
  {
    return o << RequestCategoryCode::_xsd_RequestCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RequestCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RequestCategoryCode >
  _xsd_RequestCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RequestImmediateInterestIndicatorCode::value i)
  {
    return o << RequestImmediateInterestIndicatorCode::_xsd_RequestImmediateInterestIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RequestImmediateInterestIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RequestImmediateInterestIndicatorCode >
  _xsd_RequestImmediateInterestIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RoadCategoryCode::value i)
  {
    return o << RoadCategoryCode::_xsd_RoadCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RoadCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RoadCategoryCode >
  _xsd_RoadCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RoadQualityCode::value i)
  {
    return o << RoadQualityCode::_xsd_RoadQualityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RoadQualityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RoadQualityCode >
  _xsd_RoadQualityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RoadShoulderWidthCode::value i)
  {
    return o << RoadShoulderWidthCode::_xsd_RoadShoulderWidthCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RoadShoulderWidthCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RoadShoulderWidthCode >
  _xsd_RoadShoulderWidthCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RoadWeatherConditionCategoryCode::value i)
  {
    return o << RoadWeatherConditionCategoryCode::_xsd_RoadWeatherConditionCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RoadWeatherConditionCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RoadWeatherConditionCategoryCode >
  _xsd_RoadWeatherConditionCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RouteDirectionUsageCode::value i)
  {
    return o << RouteDirectionUsageCode::_xsd_RouteDirectionUsageCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RouteDirectionUsageCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RouteDirectionUsageCode >
  _xsd_RouteDirectionUsageCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RouteSegmentCategoryCode::value i)
  {
    return o << RouteSegmentCategoryCode::_xsd_RouteSegmentCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RouteSegmentCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RouteSegmentCategoryCode >
  _xsd_RouteSegmentCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RouteTypeCategoryCode::value i)
  {
    return o << RouteTypeCategoryCode::_xsd_RouteTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RouteTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RouteTypeCategoryCode >
  _xsd_RouteTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RunwayLightingPresenceIndicatorCode::value i)
  {
    return o << RunwayLightingPresenceIndicatorCode::_xsd_RunwayLightingPresenceIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RunwayLightingPresenceIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunwayLightingPresenceIndicatorCode >
  _xsd_RunwayLightingPresenceIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RunwayPavementEvaluationMethodCode::value i)
  {
    return o << RunwayPavementEvaluationMethodCode::_xsd_RunwayPavementEvaluationMethodCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RunwayPavementEvaluationMethodCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunwayPavementEvaluationMethodCode >
  _xsd_RunwayPavementEvaluationMethodCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RunwayPavementMaximumTyrePressureCode::value i)
  {
    return o << RunwayPavementMaximumTyrePressureCode::_xsd_RunwayPavementMaximumTyrePressureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RunwayPavementMaximumTyrePressureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunwayPavementMaximumTyrePressureCode >
  _xsd_RunwayPavementMaximumTyrePressureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RunwayPavementSubgradeCategoryCode::value i)
  {
    return o << RunwayPavementSubgradeCategoryCode::_xsd_RunwayPavementSubgradeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RunwayPavementSubgradeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunwayPavementSubgradeCategoryCode >
  _xsd_RunwayPavementSubgradeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, RunwayPavementTypeCode::value i)
  {
    return o << RunwayPavementTypeCode::_xsd_RunwayPavementTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const RunwayPavementTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunwayPavementTypeCode >
  _xsd_RunwayPavementTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SecurityClassificationLevelCode::value i)
  {
    return o << SecurityClassificationLevelCode::_xsd_SecurityClassificationLevelCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SecurityClassificationLevelCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SecurityClassificationLevelCode >
  _xsd_SecurityClassificationLevelCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SolidSurfaceStatusCode::value i)
  {
    return o << SolidSurfaceStatusCode::_xsd_SolidSurfaceStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SolidSurfaceStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SolidSurfaceStatusCode >
  _xsd_SolidSurfaceStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SolidSurfaceStatusSurfaceConditionCode::value i)
  {
    return o << SolidSurfaceStatusSurfaceConditionCode::_xsd_SolidSurfaceStatusSurfaceConditionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SolidSurfaceStatusSurfaceConditionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SolidSurfaceStatusSurfaceConditionCode >
  _xsd_SolidSurfaceStatusSurfaceConditionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SolidSurfaceStatusSurfaceFirmnessCode::value i)
  {
    return o << SolidSurfaceStatusSurfaceFirmnessCode::_xsd_SolidSurfaceStatusSurfaceFirmnessCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SolidSurfaceStatusSurfaceFirmnessCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SolidSurfaceStatusSurfaceFirmnessCode >
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SpeedPrecisionCode::value i)
  {
    return o << SpeedPrecisionCode::_xsd_SpeedPrecisionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SpeedPrecisionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SpeedPrecisionCode >
  _xsd_SpeedPrecisionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, StorageCapabilityConditionCode::value i)
  {
    return o << StorageCapabilityConditionCode::_xsd_StorageCapabilityConditionCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const StorageCapabilityConditionCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StorageCapabilityConditionCode >
  _xsd_StorageCapabilityConditionCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, StorageCapabilityDescriptorCode::value i)
  {
    return o << StorageCapabilityDescriptorCode::_xsd_StorageCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const StorageCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StorageCapabilityDescriptorCode >
  _xsd_StorageCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SubsurfaceVesselTypeCategoryCode::value i)
  {
    return o << SubsurfaceVesselTypeCategoryCode::_xsd_SubsurfaceVesselTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SubsurfaceVesselTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubsurfaceVesselTypeCategoryCode >
  _xsd_SubsurfaceVesselTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::value i)
  {
    return o << SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode::_xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode >
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SupportCapabilityCategoryCode::value i)
  {
    return o << SupportCapabilityCategoryCode::_xsd_SupportCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SupportCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SupportCapabilityCategoryCode >
  _xsd_SupportCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SupportCapabilityDescriptorCode::value i)
  {
    return o << SupportCapabilityDescriptorCode::_xsd_SupportCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SupportCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SupportCapabilityDescriptorCode >
  _xsd_SupportCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SurfaceCategoryCode::value i)
  {
    return o << SurfaceCategoryCode::_xsd_SurfaceCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SurfaceCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SurfaceCategoryCode >
  _xsd_SurfaceCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SurfaceVesselTypeCategoryCode::value i)
  {
    return o << SurfaceVesselTypeCategoryCode::_xsd_SurfaceVesselTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SurfaceVesselTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SurfaceVesselTypeCategoryCode >
  _xsd_SurfaceVesselTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SurveillanceCapabilityCategoryCode::value i)
  {
    return o << SurveillanceCapabilityCategoryCode::_xsd_SurveillanceCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SurveillanceCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SurveillanceCapabilityCategoryCode >
  _xsd_SurveillanceCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, SurveillanceCapabilityDescriptorCode::value i)
  {
    return o << SurveillanceCapabilityDescriptorCode::_xsd_SurveillanceCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SurveillanceCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SurveillanceCapabilityDescriptorCode >
  _xsd_SurveillanceCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, TargetEngagementAuthorityCode::value i)
  {
    return o << TargetEngagementAuthorityCode::_xsd_TargetEngagementAuthorityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const TargetEngagementAuthorityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TargetEngagementAuthorityCode >
  _xsd_TargetEngagementAuthorityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, TargetPersonnelProtectionCategoryCode::value i)
  {
    return o << TargetPersonnelProtectionCategoryCode::_xsd_TargetPersonnelProtectionCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const TargetPersonnelProtectionCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TargetPersonnelProtectionCategoryCode >
  _xsd_TargetPersonnelProtectionCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, TaskFormationTypeCategoryCode::value i)
  {
    return o << TaskFormationTypeCategoryCode::_xsd_TaskFormationTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const TaskFormationTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TaskFormationTypeCategoryCode >
  _xsd_TaskFormationTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, TransmissionCapabilityCategoryCode::value i)
  {
    return o << TransmissionCapabilityCategoryCode::_xsd_TransmissionCapabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const TransmissionCapabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TransmissionCapabilityCategoryCode >
  _xsd_TransmissionCapabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, TransmissionCapabilityDescriptorCode::value i)
  {
    return o << TransmissionCapabilityDescriptorCode::_xsd_TransmissionCapabilityDescriptorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const TransmissionCapabilityDescriptorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TransmissionCapabilityDescriptorCode >
  _xsd_TransmissionCapabilityDescriptorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeArmCategoryCode::value i)
  {
    return o << UnitTypeArmCategoryCode::_xsd_UnitTypeArmCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeArmCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeArmCategoryCode >
  _xsd_UnitTypeArmCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeArmSpecialisationCode::value i)
  {
    return o << UnitTypeArmSpecialisationCode::_xsd_UnitTypeArmSpecialisationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeArmSpecialisationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeArmSpecialisationCode >
  _xsd_UnitTypeArmSpecialisationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeCategoryCode::value i)
  {
    return o << UnitTypeCategoryCode::_xsd_UnitTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeCategoryCode >
  _xsd_UnitTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeGeneralMobilityCode::value i)
  {
    return o << UnitTypeGeneralMobilityCode::_xsd_UnitTypeGeneralMobilityCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeGeneralMobilityCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeGeneralMobilityCode >
  _xsd_UnitTypeGeneralMobilityCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeQualifierCode::value i)
  {
    return o << UnitTypeQualifierCode::_xsd_UnitTypeQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeQualifierCode >
  _xsd_UnitTypeQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeSizeCode::value i)
  {
    return o << UnitTypeSizeCode::_xsd_UnitTypeSizeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeSizeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeSizeCode >
  _xsd_UnitTypeSizeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UnitTypeSupplementarySpecialisationCode::value i)
  {
    return o << UnitTypeSupplementarySpecialisationCode::_xsd_UnitTypeSupplementarySpecialisationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UnitTypeSupplementarySpecialisationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UnitTypeSupplementarySpecialisationCode >
  _xsd_UnitTypeSupplementarySpecialisationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UsageStatusCode::value i)
  {
    return o << UsageStatusCode::_xsd_UsageStatusCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UsageStatusCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UsageStatusCode >
  _xsd_UsageStatusCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UxoStatusExposureCode::value i)
  {
    return o << UxoStatusExposureCode::_xsd_UxoStatusExposureCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UxoStatusExposureCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UxoStatusExposureCode >
  _xsd_UxoStatusExposureCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, UxoStatusQualifierCode::value i)
  {
    return o << UxoStatusQualifierCode::_xsd_UxoStatusQualifierCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UxoStatusQualifierCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UxoStatusQualifierCode >
  _xsd_UxoStatusQualifierCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VegetationCategoryCode::value i)
  {
    return o << VegetationCategoryCode::_xsd_VegetationCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VegetationCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VegetationCategoryCode >
  _xsd_VegetationCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VegetationSubcategoryCode::value i)
  {
    return o << VegetationSubcategoryCode::_xsd_VegetationSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VegetationSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VegetationSubcategoryCode >
  _xsd_VegetationSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VehicleTypeCategoryCode::value i)
  {
    return o << VehicleTypeCategoryCode::_xsd_VehicleTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VehicleTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VehicleTypeCategoryCode >
  _xsd_VehicleTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VerticalDistanceCitationCode::value i)
  {
    return o << VerticalDistanceCitationCode::_xsd_VerticalDistanceCitationCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VerticalDistanceCitationCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VerticalDistanceCitationCode >
  _xsd_VerticalDistanceCitationCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VesselTypeCategoryCode::value i)
  {
    return o << VesselTypeCategoryCode::_xsd_VesselTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VesselTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VesselTypeCategoryCode >
  _xsd_VesselTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VesselTypePropulsionTypeCode::value i)
  {
    return o << VesselTypePropulsionTypeCode::_xsd_VesselTypePropulsionTypeCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VesselTypePropulsionTypeCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VesselTypePropulsionTypeCode >
  _xsd_VesselTypePropulsionTypeCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, VisibilityCategoryCode::value i)
  {
    return o << VisibilityCategoryCode::_xsd_VisibilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VisibilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VisibilityCategoryCode >
  _xsd_VisibilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WeaponTypeCategoryCode::value i)
  {
    return o << WeaponTypeCategoryCode::_xsd_WeaponTypeCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WeaponTypeCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WeaponTypeCategoryCode >
  _xsd_WeaponTypeCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WeaponTypeFireGuidanceIndicatorCode::value i)
  {
    return o << WeaponTypeFireGuidanceIndicatorCode::_xsd_WeaponTypeFireGuidanceIndicatorCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WeaponTypeFireGuidanceIndicatorCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WeaponTypeFireGuidanceIndicatorCode >
  _xsd_WeaponTypeFireGuidanceIndicatorCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WeaponTypeSubcategoryCode::value i)
  {
    return o << WeaponTypeSubcategoryCode::_xsd_WeaponTypeSubcategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WeaponTypeSubcategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WeaponTypeSubcategoryCode >
  _xsd_WeaponTypeSubcategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WindAirStabilityCategoryCode::value i)
  {
    return o << WindAirStabilityCategoryCode::_xsd_WindAirStabilityCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WindAirStabilityCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WindAirStabilityCategoryCode >
  _xsd_WindAirStabilityCategoryCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WindAltitudeLayerCode::value i)
  {
    return o << WindAltitudeLayerCode::_xsd_WindAltitudeLayerCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WindAltitudeLayerCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WindAltitudeLayerCode >
  _xsd_WindAltitudeLayerCode_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, WindCategoryCode::value i)
  {
    return o << WindCategoryCode::_xsd_WindCategoryCode_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const WindCategoryCode& i)
  {
    return o << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, WindCategoryCode >
  _xsd_WindCategoryCode_std_ostream_init;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oo_2_0
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oo_2_0
{
  void
  operator<< (::xercesc::DOMElement& e, const AbsolutePointCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AbsolutePointCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AbsolutePointCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbsolutePointCategoryCode >
  _xsd_AbsolutePointCategoryCode_type_serializer_init (
    "AbsolutePointCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionAircraftEmploymentApproachOffsetCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionAircraftEmploymentApproachOffsetCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionAircraftEmploymentApproachOffsetCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionAircraftEmploymentApproachOffsetCode >
  _xsd_ActionAircraftEmploymentApproachOffsetCode_type_serializer_init (
    "ActionAircraftEmploymentApproachOffsetCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionAircraftEmploymentCrewCompositionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionAircraftEmploymentCrewCompositionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionAircraftEmploymentCrewCompositionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionAircraftEmploymentCrewCompositionCode >
  _xsd_ActionAircraftEmploymentCrewCompositionCode_type_serializer_init (
    "ActionAircraftEmploymentCrewCompositionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionAircraftEmploymentDeplanementMethodCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionAircraftEmploymentDeplanementMethodCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionAircraftEmploymentDeplanementMethodCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionAircraftEmploymentDeplanementMethodCode >
  _xsd_ActionAircraftEmploymentDeplanementMethodCode_type_serializer_init (
    "ActionAircraftEmploymentDeplanementMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionAircraftEmploymentGeneralRoleCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionAircraftEmploymentGeneralRoleCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionAircraftEmploymentGeneralRoleCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionAircraftEmploymentGeneralRoleCode >
  _xsd_ActionAircraftEmploymentGeneralRoleCode_type_serializer_init (
    "ActionAircraftEmploymentGeneralRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionAircraftEmploymentInflightReportRequirementIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionAircraftEmploymentInflightReportRequirementIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionAircraftEmploymentInflightReportRequirementIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionAircraftEmploymentInflightReportRequirementIndicatorCode >
  _xsd_ActionAircraftEmploymentInflightReportRequirementIndicatorCode_type_serializer_init (
    "ActionAircraftEmploymentInflightReportRequirementIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionCategoryCode >
  _xsd_ActionCategoryCode_type_serializer_init (
    "ActionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionContextCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionContextCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionContextCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionContextCategoryCode >
  _xsd_ActionContextCategoryCode_type_serializer_init (
    "ActionContextCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEffectCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEffectCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEffectCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEffectCategoryCode >
  _xsd_ActionEffectCategoryCode_type_serializer_init (
    "ActionEffectCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEffectDescriptionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEffectDescriptionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEffectDescriptionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEffectDescriptionCode >
  _xsd_ActionEffectDescriptionCode_type_serializer_init (
    "ActionEffectDescriptionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEffectSeverityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEffectSeverityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEffectSeverityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEffectSeverityCode >
  _xsd_ActionEffectSeverityCode_type_serializer_init (
    "ActionEffectSeverityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionElectronicWarfareEmploymentCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionElectronicWarfareEmploymentCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionElectronicWarfareEmploymentCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionElectronicWarfareEmploymentCategoryCode >
  _xsd_ActionElectronicWarfareEmploymentCategoryCode_type_serializer_init (
    "ActionElectronicWarfareEmploymentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEventCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEventCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEventCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEventCategoryCode >
  _xsd_ActionEventCategoryCode_type_serializer_init (
    "ActionEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEventDetailClassificationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEventDetailClassificationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEventDetailClassificationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEventDetailClassificationCode >
  _xsd_ActionEventDetailClassificationCode_type_serializer_init (
    "ActionEventDetailClassificationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionEventDetailCrimeIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionEventDetailCrimeIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionEventDetailCrimeIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionEventDetailCrimeIndicatorCode >
  _xsd_ActionEventDetailCrimeIndicatorCode_type_serializer_init (
    "ActionEventDetailCrimeIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionFunctionalAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionFunctionalAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionFunctionalAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionFunctionalAssociationCategoryCode >
  _xsd_ActionFunctionalAssociationCategoryCode_type_serializer_init (
    "ActionFunctionalAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode >
  _xsd_ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode_type_serializer_init (
    "ActionMaritimeEmploymentCoordinatedAirSeaProcedureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionMaritimeEmploymentVesselTransitInstructionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionMaritimeEmploymentVesselTransitInstructionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionMaritimeEmploymentVesselTransitInstructionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionMaritimeEmploymentVesselTransitInstructionCode >
  _xsd_ActionMaritimeEmploymentVesselTransitInstructionCode_type_serializer_init (
    "ActionMaritimeEmploymentVesselTransitInstructionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveCategoryCode >
  _xsd_ActionObjectiveCategoryCode_type_serializer_init (
    "ActionObjectiveCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveItemCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveItemCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveItemCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveItemCategoryCode >
  _xsd_ActionObjectiveItemCategoryCode_type_serializer_init (
    "ActionObjectiveItemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveItemMarkingMethodCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveItemMarkingMethodCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveItemMarkingMethodCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveItemMarkingMethodCode >
  _xsd_ActionObjectiveItemMarkingMethodCode_type_serializer_init (
    "ActionObjectiveItemMarkingMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveItemMarkingPanelShapeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveItemMarkingPanelShapeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveItemMarkingPanelShapeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveItemMarkingPanelShapeCode >
  _xsd_ActionObjectiveItemMarkingPanelShapeCode_type_serializer_init (
    "ActionObjectiveItemMarkingPanelShapeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveItemMarkingRecognitionSignalColourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveItemMarkingRecognitionSignalColourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveItemMarkingRecognitionSignalColourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveItemMarkingRecognitionSignalColourCode >
  _xsd_ActionObjectiveItemMarkingRecognitionSignalColourCode_type_serializer_init (
    "ActionObjectiveItemMarkingRecognitionSignalColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveItemPrimacyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveItemPrimacyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveItemPrimacyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveItemPrimacyCode >
  _xsd_ActionObjectiveItemPrimacyCode_type_serializer_init (
    "ActionObjectiveItemPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveQualifierCode >
  _xsd_ActionObjectiveQualifierCode_type_serializer_init (
    "ActionObjectiveQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveTypeCategoryCode >
  _xsd_ActionObjectiveTypeCategoryCode_type_serializer_init (
    "ActionObjectiveTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionObjectiveTypeImageryProductImageTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionObjectiveTypeImageryProductImageTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionObjectiveTypeImageryProductImageTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionObjectiveTypeImageryProductImageTypeCode >
  _xsd_ActionObjectiveTypeImageryProductImageTypeCode_type_serializer_init (
    "ActionObjectiveTypeImageryProductImageTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionReconnaissanceEmploymentImageCoverageModeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionReconnaissanceEmploymentImageCoverageModeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionReconnaissanceEmploymentImageCoverageModeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionReconnaissanceEmploymentImageCoverageModeCode >
  _xsd_ActionReconnaissanceEmploymentImageCoverageModeCode_type_serializer_init (
    "ActionReconnaissanceEmploymentImageCoverageModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionReconnaissanceEmploymentImageViewQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionReconnaissanceEmploymentImageViewQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionReconnaissanceEmploymentImageViewQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionReconnaissanceEmploymentImageViewQualifierCode >
  _xsd_ActionReconnaissanceEmploymentImageViewQualifierCode_type_serializer_init (
    "ActionReconnaissanceEmploymentImageViewQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionReconnaissanceEmploymentTypeOfCoverageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionReconnaissanceEmploymentTypeOfCoverageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionReconnaissanceEmploymentTypeOfCoverageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionReconnaissanceEmploymentTypeOfCoverageCode >
  _xsd_ActionReconnaissanceEmploymentTypeOfCoverageCode_type_serializer_init (
    "ActionReconnaissanceEmploymentTypeOfCoverageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionCitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionCitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionCitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionCitationAssociationCategoryCode >
  _xsd_ActionCitationAssociationCategoryCode_type_serializer_init (
    "ActionCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceCategoryCode >
  _xsd_ActionResourceCategoryCode_type_serializer_init (
    "ActionResourceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceCriticalityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceCriticalityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceCriticalityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceCriticalityIndicatorCode >
  _xsd_ActionResourceCriticalityIndicatorCode_type_serializer_init (
    "ActionResourceCriticalityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceEmploymentCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceEmploymentCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceEmploymentCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceEmploymentCategoryCode >
  _xsd_ActionResourceEmploymentCategoryCode_type_serializer_init (
    "ActionResourceEmploymentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceEmploymentMethodOfControlCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceEmploymentMethodOfControlCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceEmploymentMethodOfControlCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceEmploymentMethodOfControlCode >
  _xsd_ActionResourceEmploymentMethodOfControlCode_type_serializer_init (
    "ActionResourceEmploymentMethodOfControlCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceEmploymentTrajectoryFireCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceEmploymentTrajectoryFireCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceEmploymentTrajectoryFireCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceEmploymentTrajectoryFireCode >
  _xsd_ActionResourceEmploymentTrajectoryFireCode_type_serializer_init (
    "ActionResourceEmploymentTrajectoryFireCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionResourceQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionResourceQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionResourceQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionResourceQualifierCode >
  _xsd_ActionResourceQualifierCode_type_serializer_init (
    "ActionResourceQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskActivityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskActivityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskActivityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskActivityCode >
  _xsd_ActionTaskActivityCode_type_serializer_init (
    "ActionTaskActivityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskCategoryCode >
  _xsd_ActionTaskCategoryCode_type_serializer_init (
    "ActionTaskCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskEndQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskEndQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskEndQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskEndQualifierCode >
  _xsd_ActionTaskEndQualifierCode_type_serializer_init (
    "ActionTaskEndQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskEntailedSafetyDegreeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskEntailedSafetyDegreeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskEntailedSafetyDegreeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskEntailedSafetyDegreeCode >
  _xsd_ActionTaskEntailedSafetyDegreeCode_type_serializer_init (
    "ActionTaskEntailedSafetyDegreeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskMeteorologicalImpactCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskMeteorologicalImpactCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskMeteorologicalImpactCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskMeteorologicalImpactCode >
  _xsd_ActionTaskMeteorologicalImpactCode_type_serializer_init (
    "ActionTaskMeteorologicalImpactCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskOperationalLevelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskOperationalLevelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskOperationalLevelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskOperationalLevelCode >
  _xsd_ActionTaskOperationalLevelCode_type_serializer_init (
    "ActionTaskOperationalLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskOvertCovertCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskOvertCovertCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskOvertCovertCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskOvertCovertCode >
  _xsd_ActionTaskOvertCovertCode_type_serializer_init (
    "ActionTaskOvertCovertCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskPriorityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskPriorityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskPriorityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskPriorityCode >
  _xsd_ActionTaskPriorityCode_type_serializer_init (
    "ActionTaskPriorityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStartQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStartQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStartQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStartQualifierCode >
  _xsd_ActionTaskStartQualifierCode_type_serializer_init (
    "ActionTaskStartQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStatusAmendTimingCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStatusAmendTimingCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStatusAmendTimingCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStatusAmendTimingCode >
  _xsd_ActionTaskStatusAmendTimingCode_type_serializer_init (
    "ActionTaskStatusAmendTimingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStatusApprovalIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStatusApprovalIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStatusApprovalIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStatusApprovalIndicatorCode >
  _xsd_ActionTaskStatusApprovalIndicatorCode_type_serializer_init (
    "ActionTaskStatusApprovalIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStatusCategoryCode >
  _xsd_ActionTaskStatusCategoryCode_type_serializer_init (
    "ActionTaskStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStatusPlanningIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStatusPlanningIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStatusPlanningIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStatusPlanningIndicatorCode >
  _xsd_ActionTaskStatusPlanningIndicatorCode_type_serializer_init (
    "ActionTaskStatusPlanningIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskStatusProgressCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskStatusProgressCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskStatusProgressCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskStatusProgressCode >
  _xsd_ActionTaskStatusProgressCode_type_serializer_init (
    "ActionTaskStatusProgressCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskTimingDayCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskTimingDayCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskTimingDayCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskTimingDayCode >
  _xsd_ActionTaskTimingDayCode_type_serializer_init (
    "ActionTaskTimingDayCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTaskTimingHourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTaskTimingHourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTaskTimingHourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTaskTimingHourCode >
  _xsd_ActionTaskTimingHourCode_type_serializer_init (
    "ActionTaskTimingHourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ActionTemporalAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ActionTemporalAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ActionTemporalAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionTemporalAssociationCategoryCode >
  _xsd_ActionTemporalAssociationCategoryCode_type_serializer_init (
    "ActionTemporalAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AddressCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AddressCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AddressCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AddressCategoryCode >
  _xsd_AddressCategoryCode_type_serializer_init (
    "AddressCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AffiliationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AffiliationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AffiliationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AffiliationCategoryCode >
  _xsd_AffiliationCategoryCode_type_serializer_init (
    "AffiliationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AffiliationEthnicGroupCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AffiliationEthnicGroupCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AffiliationEthnicGroupCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AffiliationEthnicGroupCode >
  _xsd_AffiliationEthnicGroupCode_type_serializer_init (
    "AffiliationEthnicGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AffiliationFunctionalGroupCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AffiliationFunctionalGroupCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AffiliationFunctionalGroupCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AffiliationFunctionalGroupCode >
  _xsd_AffiliationFunctionalGroupCode_type_serializer_init (
    "AffiliationFunctionalGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AffiliationGeopoliticalCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AffiliationGeopoliticalCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AffiliationGeopoliticalCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AffiliationGeopoliticalCode >
  _xsd_AffiliationGeopoliticalCode_type_serializer_init (
    "AffiliationGeopoliticalCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AffiliationReligionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AffiliationReligionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AffiliationReligionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AffiliationReligionCode >
  _xsd_AffiliationReligionCode_type_serializer_init (
    "AffiliationReligionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirRouteSegmentCivilMilitaryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirRouteSegmentCivilMilitaryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirRouteSegmentCivilMilitaryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirRouteSegmentCivilMilitaryCode >
  _xsd_AirRouteSegmentCivilMilitaryCode_type_serializer_init (
    "AirRouteSegmentCivilMilitaryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirRouteSegmentInternationalRouteCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirRouteSegmentInternationalRouteCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirRouteSegmentInternationalRouteCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirRouteSegmentInternationalRouteCode >
  _xsd_AirRouteSegmentInternationalRouteCode_type_serializer_init (
    "AirRouteSegmentInternationalRouteCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirRouteSegmentRequiredNavigationPerformanceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirRouteSegmentRequiredNavigationPerformanceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirRouteSegmentRequiredNavigationPerformanceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirRouteSegmentRequiredNavigationPerformanceCode >
  _xsd_AirRouteSegmentRequiredNavigationPerformanceCode_type_serializer_init (
    "AirRouteSegmentRequiredNavigationPerformanceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeAirframeDesignCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeAirframeDesignCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeAirframeDesignCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeAirframeDesignCode >
  _xsd_AircraftTypeAirframeDesignCode_type_serializer_init (
    "AircraftTypeAirframeDesignCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeCategoryCode >
  _xsd_AircraftTypeCategoryCode_type_serializer_init (
    "AircraftTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeDesignRangeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeDesignRangeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeDesignRangeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeDesignRangeCode >
  _xsd_AircraftTypeDesignRangeCode_type_serializer_init (
    "AircraftTypeDesignRangeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeDesignRoleCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeDesignRoleCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeDesignRoleCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeDesignRoleCode >
  _xsd_AircraftTypeDesignRoleCode_type_serializer_init (
    "AircraftTypeDesignRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeLoadCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeLoadCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeLoadCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeLoadCategoryCode >
  _xsd_AircraftTypeLoadCategoryCode_type_serializer_init (
    "AircraftTypeLoadCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeMainPurposeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeMainPurposeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeMainPurposeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeMainPurposeCode >
  _xsd_AircraftTypeMainPurposeCode_type_serializer_init (
    "AircraftTypeMainPurposeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeManningCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeManningCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeManningCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeManningCode >
  _xsd_AircraftTypeManningCode_type_serializer_init (
    "AircraftTypeManningCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeMilitaryCivilianCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeMilitaryCivilianCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeMilitaryCivilianCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeMilitaryCivilianCode >
  _xsd_AircraftTypeMilitaryCivilianCode_type_serializer_init (
    "AircraftTypeMilitaryCivilianCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeModelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeModelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeModelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeModelCode >
  _xsd_AircraftTypeModelCode_type_serializer_init (
    "AircraftTypeModelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeTakeoffAndLandingCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeTakeoffAndLandingCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeTakeoffAndLandingCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeTakeoffAndLandingCode >
  _xsd_AircraftTypeTakeoffAndLandingCode_type_serializer_init (
    "AircraftTypeTakeoffAndLandingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeTrainingCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeTrainingCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeTrainingCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeTrainingCategoryCode >
  _xsd_AircraftTypeTrainingCategoryCode_type_serializer_init (
    "AircraftTypeTrainingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AircraftTypeWeatherQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AircraftTypeWeatherQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AircraftTypeWeatherQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AircraftTypeWeatherQualifierCode >
  _xsd_AircraftTypeWeatherQualifierCode_type_serializer_init (
    "AircraftTypeWeatherQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldAirTrafficControlPresenceIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldAirTrafficControlPresenceIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldAirTrafficControlPresenceIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldAirTrafficControlPresenceIndicatorCode >
  _xsd_AirfieldAirTrafficControlPresenceIndicatorCode_type_serializer_init (
    "AirfieldAirTrafficControlPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldInstrumentLandingSystemPresenceIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldInstrumentLandingSystemPresenceIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldInstrumentLandingSystemPresenceIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldInstrumentLandingSystemPresenceIndicatorCode >
  _xsd_AirfieldInstrumentLandingSystemPresenceIndicatorCode_type_serializer_init (
    "AirfieldInstrumentLandingSystemPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldStatusDayOperationsCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldStatusDayOperationsCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldStatusDayOperationsCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldStatusDayOperationsCode >
  _xsd_AirfieldStatusDayOperationsCode_type_serializer_init (
    "AirfieldStatusDayOperationsCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldStatusEvaluationIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldStatusEvaluationIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldStatusEvaluationIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldStatusEvaluationIndicatorCode >
  _xsd_AirfieldStatusEvaluationIndicatorCode_type_serializer_init (
    "AirfieldStatusEvaluationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldStatusFlightSupportCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldStatusFlightSupportCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldStatusFlightSupportCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldStatusFlightSupportCategoryCode >
  _xsd_AirfieldStatusFlightSupportCategoryCode_type_serializer_init (
    "AirfieldStatusFlightSupportCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldTypeUseCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldTypeUseCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldTypeUseCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldTypeUseCategoryCode >
  _xsd_AirfieldTypeUseCategoryCode_type_serializer_init (
    "AirfieldTypeUseCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AirfieldVisualNavigationalAidIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AirfieldVisualNavigationalAidIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AirfieldVisualNavigationalAidIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirfieldVisualNavigationalAidIndicatorCode >
  _xsd_AirfieldVisualNavigationalAidIndicatorCode_type_serializer_init (
    "AirfieldVisualNavigationalAidIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AmmunitionTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AmmunitionTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AmmunitionTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AmmunitionTypeCategoryCode >
  _xsd_AmmunitionTypeCategoryCode_type_serializer_init (
    "AmmunitionTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AmmunitionTypeExerciseMineFlareColourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AmmunitionTypeExerciseMineFlareColourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AmmunitionTypeExerciseMineFlareColourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AmmunitionTypeExerciseMineFlareColourCode >
  _xsd_AmmunitionTypeExerciseMineFlareColourCode_type_serializer_init (
    "AmmunitionTypeExerciseMineFlareColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AmmunitionTypeMineMaritimeFiringCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AmmunitionTypeMineMaritimeFiringCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AmmunitionTypeMineMaritimeFiringCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AmmunitionTypeMineMaritimeFiringCode >
  _xsd_AmmunitionTypeMineMaritimeFiringCode_type_serializer_init (
    "AmmunitionTypeMineMaritimeFiringCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AnchorageBottomTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AnchorageBottomTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AnchorageBottomTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnchorageBottomTypeCode >
  _xsd_AnchorageBottomTypeCode_type_serializer_init (
    "AnchorageBottomTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AnchorageMooringsTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AnchorageMooringsTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AnchorageMooringsTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnchorageMooringsTypeCode >
  _xsd_AnchorageMooringsTypeCode_type_serializer_init (
    "AnchorageMooringsTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AnglePrecisionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AnglePrecisionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AnglePrecisionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnglePrecisionCode >
  _xsd_AnglePrecisionCode_type_serializer_init (
    "AnglePrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ApproachDirectionCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ApproachDirectionCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ApproachDirectionCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ApproachDirectionCategoryCode >
  _xsd_ApproachDirectionCategoryCode_type_serializer_init (
    "ApproachDirectionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AssociationStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AssociationStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AssociationStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AssociationStatusCategoryCode >
  _xsd_AssociationStatusCategoryCode_type_serializer_init (
    "AssociationStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AtmosphereInversionLayerCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AtmosphereInversionLayerCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AtmosphereInversionLayerCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AtmosphereInversionLayerCode >
  _xsd_AtmosphereInversionLayerCode_type_serializer_init (
    "AtmosphereInversionLayerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AtmospherePressureSystemCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AtmospherePressureSystemCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AtmospherePressureSystemCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AtmospherePressureSystemCategoryCode >
  _xsd_AtmospherePressureSystemCategoryCode_type_serializer_init (
    "AtmospherePressureSystemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const AtmosphereTemperatureGradientCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const AtmosphereTemperatureGradientCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const AtmosphereTemperatureGradientCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AtmosphereTemperatureGradientCode >
  _xsd_AtmosphereTemperatureGradientCode_type_serializer_init (
    "AtmosphereTemperatureGradientCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BerthMajorVesselClassCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BerthMajorVesselClassCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BerthMajorVesselClassCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BerthMajorVesselClassCode >
  _xsd_BerthMajorVesselClassCode_type_serializer_init (
    "BerthMajorVesselClassCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BerthRailAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BerthRailAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BerthRailAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BerthRailAvailabilityIndicatorCode >
  _xsd_BerthRailAvailabilityIndicatorCode_type_serializer_init (
    "BerthRailAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BerthRollOnRollOffIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BerthRollOnRollOffIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BerthRollOnRollOffIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BerthRollOnRollOffIndicatorCode >
  _xsd_BerthRollOnRollOffIndicatorCode_type_serializer_init (
    "BerthRollOnRollOffIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BiologicalMaterielTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BiologicalMaterielTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BiologicalMaterielTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BiologicalMaterielTypeCategoryCode >
  _xsd_BiologicalMaterielTypeCategoryCode_type_serializer_init (
    "BiologicalMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BiologicalMaterielTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BiologicalMaterielTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BiologicalMaterielTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BiologicalMaterielTypeSubcategoryCode >
  _xsd_BiologicalMaterielTypeSubcategoryCode_type_serializer_init (
    "BiologicalMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BridgeTypeDesignTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BridgeTypeDesignTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BridgeTypeDesignTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BridgeTypeDesignTypeCode >
  _xsd_BridgeTypeDesignTypeCode_type_serializer_init (
    "BridgeTypeDesignTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const BridgeUsageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const BridgeUsageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const BridgeUsageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BridgeUsageCode >
  _xsd_BridgeUsageCode_type_serializer_init (
    "BridgeUsageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetDetailAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetDetailAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetDetailAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetDetailAssociationCategoryCode >
  _xsd_CandidateTargetDetailAssociationCategoryCode_type_serializer_init (
    "CandidateTargetDetailAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetDetailAuthorisationApprovalCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetDetailAuthorisationApprovalCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetDetailAuthorisationApprovalCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetDetailAuthorisationApprovalCode >
  _xsd_CandidateTargetDetailAuthorisationApprovalCode_type_serializer_init (
    "CandidateTargetDetailAuthorisationApprovalCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetDetailCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetDetailCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetDetailCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetDetailCategoryCode >
  _xsd_CandidateTargetDetailCategoryCode_type_serializer_init (
    "CandidateTargetDetailCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetDetailFocusTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetDetailFocusTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetDetailFocusTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetDetailFocusTypeCode >
  _xsd_CandidateTargetDetailFocusTypeCode_type_serializer_init (
    "CandidateTargetDetailFocusTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetDetailSchemeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetDetailSchemeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetDetailSchemeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetDetailSchemeCode >
  _xsd_CandidateTargetDetailSchemeCode_type_serializer_init (
    "CandidateTargetDetailSchemeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetListAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetListAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetListAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetListAssociationCategoryCode >
  _xsd_CandidateTargetListAssociationCategoryCode_type_serializer_init (
    "CandidateTargetListAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CandidateTargetListAuthorisationIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CandidateTargetListAuthorisationIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CandidateTargetListAuthorisationIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CandidateTargetListAuthorisationIndicatorCode >
  _xsd_CandidateTargetListAuthorisationIndicatorCode_type_serializer_init (
    "CandidateTargetListAuthorisationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityCategoryCode >
  _xsd_CapabilityCategoryCode_type_serializer_init (
    "CapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CapabilityDayNightCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CapabilityDayNightCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CapabilityDayNightCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityDayNightCode >
  _xsd_CapabilityDayNightCode_type_serializer_init (
    "CapabilityDayNightCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CapabilityCitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CapabilityCitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CapabilityCitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityCitationAssociationCategoryCode >
  _xsd_CapabilityCitationAssociationCategoryCode_type_serializer_init (
    "CapabilityCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CapabilityUnitOfMeasureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CapabilityUnitOfMeasureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CapabilityUnitOfMeasureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityUnitOfMeasureCode >
  _xsd_CapabilityUnitOfMeasureCode_type_serializer_init (
    "CapabilityUnitOfMeasureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CargoCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CargoCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CargoCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CargoCategoryCode >
  _xsd_CargoCategoryCode_type_serializer_init (
    "CargoCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CasualtyGroupCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CasualtyGroupCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CasualtyGroupCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CasualtyGroupCode >
  _xsd_CasualtyGroupCode_type_serializer_init (
    "CasualtyGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEquipmentTypeCategoryCode >
  _xsd_CbrnEquipmentTypeCategoryCode_type_serializer_init (
    "CbrnEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEventAlarmResultIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEventAlarmResultIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEventAlarmResultIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEventAlarmResultIndicatorCode >
  _xsd_CbrnEventAlarmResultIndicatorCode_type_serializer_init (
    "CbrnEventAlarmResultIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEventCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEventCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEventCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEventCategoryCode >
  _xsd_CbrnEventCategoryCode_type_serializer_init (
    "CbrnEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEventConfirmationTestIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEventConfirmationTestIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEventConfirmationTestIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEventConfirmationTestIndicatorCode >
  _xsd_CbrnEventConfirmationTestIndicatorCode_type_serializer_init (
    "CbrnEventConfirmationTestIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEventMaterielContainerTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEventMaterielContainerTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEventMaterielContainerTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEventMaterielContainerTypeCode >
  _xsd_CbrnEventMaterielContainerTypeCode_type_serializer_init (
    "CbrnEventMaterielContainerTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CbrnEventSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CbrnEventSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CbrnEventSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CbrnEventSubcategoryCode >
  _xsd_CbrnEventSubcategoryCode_type_serializer_init (
    "CbrnEventSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ChemicalBiologicalEventCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ChemicalBiologicalEventCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ChemicalBiologicalEventCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChemicalBiologicalEventCategoryCode >
  _xsd_ChemicalBiologicalEventCategoryCode_type_serializer_init (
    "ChemicalBiologicalEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ChemicalBiologicalEventSpillSizeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ChemicalBiologicalEventSpillSizeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ChemicalBiologicalEventSpillSizeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChemicalBiologicalEventSpillSizeCode >
  _xsd_ChemicalBiologicalEventSpillSizeCode_type_serializer_init (
    "ChemicalBiologicalEventSpillSizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ChemicalMaterielTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ChemicalMaterielTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ChemicalMaterielTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChemicalMaterielTypeCategoryCode >
  _xsd_ChemicalMaterielTypeCategoryCode_type_serializer_init (
    "ChemicalMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ChemicalMaterielTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ChemicalMaterielTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ChemicalMaterielTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChemicalMaterielTypeSubcategoryCode >
  _xsd_ChemicalMaterielTypeSubcategoryCode_type_serializer_init (
    "ChemicalMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CivilianPostTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CivilianPostTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CivilianPostTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CivilianPostTypeCategoryCode >
  _xsd_CivilianPostTypeCategoryCode_type_serializer_init (
    "CivilianPostTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CloudCoverAverageCoverageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CloudCoverAverageCoverageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CloudCoverAverageCoverageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CloudCoverAverageCoverageCode >
  _xsd_CloudCoverAverageCoverageCode_type_serializer_init (
    "CloudCoverAverageCoverageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CloudCoverCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CloudCoverCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CloudCoverCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CloudCoverCategoryCode >
  _xsd_CloudCoverCategoryCode_type_serializer_init (
    "CloudCoverCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeCategoryCode >
  _xsd_ConsumableMaterielTypeCategoryCode_type_serializer_init (
    "ConsumableMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeHazardCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeHazardCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeHazardCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeHazardCode >
  _xsd_ConsumableMaterielTypeHazardCode_type_serializer_init (
    "ConsumableMaterielTypeHazardCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeIssuingElementCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeIssuingElementCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeIssuingElementCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeIssuingElementCode >
  _xsd_ConsumableMaterielTypeIssuingElementCode_type_serializer_init (
    "ConsumableMaterielTypeIssuingElementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeIssuingUnitOfMeasureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeIssuingUnitOfMeasureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeIssuingUnitOfMeasureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeIssuingUnitOfMeasureCode >
  _xsd_ConsumableMaterielTypeIssuingUnitOfMeasureCode_type_serializer_init (
    "ConsumableMaterielTypeIssuingUnitOfMeasureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypePerishabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypePerishabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypePerishabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypePerishabilityIndicatorCode >
  _xsd_ConsumableMaterielTypePerishabilityIndicatorCode_type_serializer_init (
    "ConsumableMaterielTypePerishabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeSubcategoryCode >
  _xsd_ConsumableMaterielTypeSubcategoryCode_type_serializer_init (
    "ConsumableMaterielTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ConsumableMaterielTypeUnitedNationsNumberCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ConsumableMaterielTypeUnitedNationsNumberCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ConsumableMaterielTypeUnitedNationsNumberCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumableMaterielTypeUnitedNationsNumberCode >
  _xsd_ConsumableMaterielTypeUnitedNationsNumberCode_type_serializer_init (
    "ConsumableMaterielTypeUnitedNationsNumberCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextAssessmentLimitingFactorsCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextAssessmentLimitingFactorsCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextAssessmentLimitingFactorsCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextAssessmentLimitingFactorsCode >
  _xsd_ContextAssessmentLimitingFactorsCode_type_serializer_init (
    "ContextAssessmentLimitingFactorsCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextAssociationCategoryCode >
  _xsd_ContextAssociationCategoryCode_type_serializer_init (
    "ContextAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextCategoryCode >
  _xsd_ContextCategoryCode_type_serializer_init (
    "ContextCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextElementStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextElementStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextElementStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextElementStatusCategoryCode >
  _xsd_ContextElementStatusCategoryCode_type_serializer_init (
    "ContextElementStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextObjectItemAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextObjectItemAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextObjectItemAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextObjectItemAssociationCategoryCode >
  _xsd_ContextObjectItemAssociationCategoryCode_type_serializer_init (
    "ContextObjectItemAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ContextReportingDataAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ContextReportingDataAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ContextReportingDataAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextReportingDataAssociationCategoryCode >
  _xsd_ContextReportingDataAssociationCategoryCode_type_serializer_init (
    "ContextReportingDataAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ControlFeatureCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ControlFeatureCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ControlFeatureCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ControlFeatureCategoryCode >
  _xsd_ControlFeatureCategoryCode_type_serializer_init (
    "ControlFeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ControlFeatureStatusCbrnThreatLevelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ControlFeatureStatusCbrnThreatLevelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ControlFeatureStatusCbrnThreatLevelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ControlFeatureStatusCbrnThreatLevelCode >
  _xsd_ControlFeatureStatusCbrnThreatLevelCode_type_serializer_init (
    "ControlFeatureStatusCbrnThreatLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ControlFeatureStatusInvestigationStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ControlFeatureStatusInvestigationStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ControlFeatureStatusInvestigationStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ControlFeatureStatusInvestigationStatusCode >
  _xsd_ControlFeatureStatusInvestigationStatusCode_type_serializer_init (
    "ControlFeatureStatusInvestigationStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ControlFeatureStatusSecurityStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ControlFeatureStatusSecurityStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ControlFeatureStatusSecurityStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ControlFeatureStatusSecurityStatusCode >
  _xsd_ControlFeatureStatusSecurityStatusCode_type_serializer_init (
    "ControlFeatureStatusSecurityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ControlFeatureTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ControlFeatureTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ControlFeatureTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ControlFeatureTypeCategoryCode >
  _xsd_ControlFeatureTypeCategoryCode_type_serializer_init (
    "ControlFeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const DemolitionStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DemolitionStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const DemolitionStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DemolitionStatusCode >
  _xsd_DemolitionStatusCode_type_serializer_init (
    "DemolitionStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const DirectionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DirectionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const DirectionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DirectionCode >
  _xsd_DirectionCode_type_serializer_init (
    "DirectionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const DistancePrecisionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DistancePrecisionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const DistancePrecisionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DistancePrecisionCode >
  _xsd_DistancePrecisionCode_type_serializer_init (
    "DistancePrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const DryDockMarineRailwaySizeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DryDockMarineRailwaySizeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const DryDockMarineRailwaySizeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DryDockMarineRailwaySizeCode >
  _xsd_DryDockMarineRailwaySizeCode_type_serializer_init (
    "DryDockMarineRailwaySizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ElectronicEquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ElectronicEquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ElectronicEquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectronicEquipmentTypeCategoryCode >
  _xsd_ElectronicEquipmentTypeCategoryCode_type_serializer_init (
    "ElectronicEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ElectronicEquipmentTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ElectronicEquipmentTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ElectronicEquipmentTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectronicEquipmentTypeSubcategoryCode >
  _xsd_ElectronicEquipmentTypeSubcategoryCode_type_serializer_init (
    "ElectronicEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const EngineeringCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const EngineeringCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const EngineeringCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EngineeringCapabilityCategoryCode >
  _xsd_EngineeringCapabilityCategoryCode_type_serializer_init (
    "EngineeringCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const EngineeringCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const EngineeringCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const EngineeringCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EngineeringCapabilityDescriptorCode >
  _xsd_EngineeringCapabilityDescriptorCode_type_serializer_init (
    "EngineeringCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const EngineeringEquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const EngineeringEquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const EngineeringEquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EngineeringEquipmentTypeCategoryCode >
  _xsd_EngineeringEquipmentTypeCategoryCode_type_serializer_init (
    "EngineeringEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const EquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const EquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const EquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EquipmentTypeCategoryCode >
  _xsd_EquipmentTypeCategoryCode_type_serializer_init (
    "EquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const EvacuationDestinationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const EvacuationDestinationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const EvacuationDestinationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EvacuationDestinationCode >
  _xsd_EvacuationDestinationCode_type_serializer_init (
    "EvacuationDestinationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ExecutiveMilitaryOrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ExecutiveMilitaryOrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ExecutiveMilitaryOrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ExecutiveMilitaryOrganisationTypeCategoryCode >
  _xsd_ExecutiveMilitaryOrganisationTypeCategoryCode_type_serializer_init (
    "ExecutiveMilitaryOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityCategoryCode >
  _xsd_FacilityCategoryCode_type_serializer_init (
    "FacilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityPrimaryConstructionMaterialCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityPrimaryConstructionMaterialCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityPrimaryConstructionMaterialCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityPrimaryConstructionMaterialCode >
  _xsd_FacilityPrimaryConstructionMaterialCode_type_serializer_init (
    "FacilityPrimaryConstructionMaterialCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusCategoryCode >
  _xsd_FacilityStatusCategoryCode_type_serializer_init (
    "FacilityStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusEnemyActivityConditionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusEnemyActivityConditionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusEnemyActivityConditionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusEnemyActivityConditionCode >
  _xsd_FacilityStatusEnemyActivityConditionCode_type_serializer_init (
    "FacilityStatusEnemyActivityConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusOccupationProgramIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusOccupationProgramIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusOccupationProgramIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusOccupationProgramIndicatorCode >
  _xsd_FacilityStatusOccupationProgramIndicatorCode_type_serializer_init (
    "FacilityStatusOccupationProgramIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusOperationalStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusOperationalStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusOperationalStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusOperationalStatusCode >
  _xsd_FacilityStatusOperationalStatusCode_type_serializer_init (
    "FacilityStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusOperationalStatusQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusOperationalStatusQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusOperationalStatusQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusOperationalStatusQualifierCode >
  _xsd_FacilityStatusOperationalStatusQualifierCode_type_serializer_init (
    "FacilityStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusReserveIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusReserveIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusReserveIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusReserveIndicatorCode >
  _xsd_FacilityStatusReserveIndicatorCode_type_serializer_init (
    "FacilityStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityStatusSecurityStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityStatusSecurityStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityStatusSecurityStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityStatusSecurityStatusCode >
  _xsd_FacilityStatusSecurityStatusCode_type_serializer_init (
    "FacilityStatusSecurityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FacilityTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FacilityTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FacilityTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FacilityTypeCategoryCode >
  _xsd_FacilityTypeCategoryCode_type_serializer_init (
    "FacilityTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FeatureCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FeatureCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FeatureCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureCategoryCode >
  _xsd_FeatureCategoryCode_type_serializer_init (
    "FeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FeatureTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FeatureTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FeatureTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureTypeCategoryCode >
  _xsd_FeatureTypeCategoryCode_type_serializer_init (
    "FeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FeintIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FeintIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FeintIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeintIndicatorCode >
  _xsd_FeintIndicatorCode_type_serializer_init (
    "FeintIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FireCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FireCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FireCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FireCapabilityCategoryCode >
  _xsd_FireCapabilityCategoryCode_type_serializer_init (
    "FireCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FireCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FireCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FireCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FireCapabilityDescriptorCode >
  _xsd_FireCapabilityDescriptorCode_type_serializer_init (
    "FireCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const FireCapabilityWeaponTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FireCapabilityWeaponTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FireCapabilityWeaponTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FireCapabilityWeaponTypeCode >
  _xsd_FireCapabilityWeaponTypeCode_type_serializer_init (
    "FireCapabilityWeaponTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GenderCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GenderCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GenderCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GenderCode >
  _xsd_GenderCode_type_serializer_init (
    "GenderCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureBottomHardnessCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureBottomHardnessCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureBottomHardnessCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureBottomHardnessCode >
  _xsd_GeographicFeatureBottomHardnessCode_type_serializer_init (
    "GeographicFeatureBottomHardnessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureSolidSurfaceCompositionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureSolidSurfaceCompositionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureSolidSurfaceCompositionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureSolidSurfaceCompositionCode >
  _xsd_GeographicFeatureSolidSurfaceCompositionCode_type_serializer_init (
    "GeographicFeatureSolidSurfaceCompositionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureStatusCategoryCode >
  _xsd_GeographicFeatureStatusCategoryCode_type_serializer_init (
    "GeographicFeatureStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureStatusSurfaceRecirculationIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureStatusSurfaceRecirculationIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureStatusSurfaceRecirculationIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureStatusSurfaceRecirculationIndicatorCode >
  _xsd_GeographicFeatureStatusSurfaceRecirculationIndicatorCode_type_serializer_init (
    "GeographicFeatureStatusSurfaceRecirculationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureSurfaceCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureSurfaceCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureSurfaceCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureSurfaceCategoryCode >
  _xsd_GeographicFeatureSurfaceCategoryCode_type_serializer_init (
    "GeographicFeatureSurfaceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureTerrainCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureTerrainCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureTerrainCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureTerrainCode >
  _xsd_GeographicFeatureTerrainCode_type_serializer_init (
    "GeographicFeatureTerrainCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureTypeCategoryCode >
  _xsd_GeographicFeatureTypeCategoryCode_type_serializer_init (
    "GeographicFeatureTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeographicFeatureTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeographicFeatureTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeographicFeatureTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeographicFeatureTypeSubcategoryCode >
  _xsd_GeographicFeatureTypeSubcategoryCode_type_serializer_init (
    "GeographicFeatureTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GeometricVolumeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GeometricVolumeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GeometricVolumeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GeometricVolumeCategoryCode >
  _xsd_GeometricVolumeCategoryCode_type_serializer_init (
    "GeometricVolumeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GovernmentOrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GovernmentOrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GovernmentOrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GovernmentOrganisationTypeCategoryCode >
  _xsd_GovernmentOrganisationTypeCategoryCode_type_serializer_init (
    "GovernmentOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GroupCharacteristicAgeGroupCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GroupCharacteristicAgeGroupCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GroupCharacteristicAgeGroupCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupCharacteristicAgeGroupCode >
  _xsd_GroupCharacteristicAgeGroupCode_type_serializer_init (
    "GroupCharacteristicAgeGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GroupCharacteristicMaladyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GroupCharacteristicMaladyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GroupCharacteristicMaladyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupCharacteristicMaladyCode >
  _xsd_GroupCharacteristicMaladyCode_type_serializer_init (
    "GroupCharacteristicMaladyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GroupCharacteristicMaladyTransmissibilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GroupCharacteristicMaladyTransmissibilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GroupCharacteristicMaladyTransmissibilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupCharacteristicMaladyTransmissibilityIndicatorCode >
  _xsd_GroupCharacteristicMaladyTransmissibilityIndicatorCode_type_serializer_init (
    "GroupCharacteristicMaladyTransmissibilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GroupCharacteristicTriageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GroupCharacteristicTriageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GroupCharacteristicTriageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupCharacteristicTriageCode >
  _xsd_GroupCharacteristicTriageCode_type_serializer_init (
    "GroupCharacteristicTriageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const GroupOrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const GroupOrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const GroupOrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupOrganisationTypeCategoryCode >
  _xsd_GroupOrganisationTypeCategoryCode_type_serializer_init (
    "GroupOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HandlingCapabilityActionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HandlingCapabilityActionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HandlingCapabilityActionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HandlingCapabilityActionCode >
  _xsd_HandlingCapabilityActionCode_type_serializer_init (
    "HandlingCapabilityActionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HandlingCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HandlingCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HandlingCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HandlingCapabilityDescriptorCode >
  _xsd_HandlingCapabilityDescriptorCode_type_serializer_init (
    "HandlingCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourAirportNearIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourAirportNearIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourAirportNearIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourAirportNearIndicatorCode >
  _xsd_HarbourAirportNearIndicatorCode_type_serializer_init (
    "HarbourAirportNearIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourBiologicallySecureAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourBiologicallySecureAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourBiologicallySecureAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourBiologicallySecureAvailabilityIndicatorCode >
  _xsd_HarbourBiologicallySecureAvailabilityIndicatorCode_type_serializer_init (
    "HarbourBiologicallySecureAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourConvoyMarshallingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourConvoyMarshallingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourConvoyMarshallingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourConvoyMarshallingIndicatorCode >
  _xsd_HarbourConvoyMarshallingIndicatorCode_type_serializer_init (
    "HarbourConvoyMarshallingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourDegaussingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourDegaussingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourDegaussingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourDegaussingIndicatorCode >
  _xsd_HarbourDegaussingIndicatorCode_type_serializer_init (
    "HarbourDegaussingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourDirtyBallastIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourDirtyBallastIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourDirtyBallastIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourDirtyBallastIndicatorCode >
  _xsd_HarbourDirtyBallastIndicatorCode_type_serializer_init (
    "HarbourDirtyBallastIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourEntranceRestrictionsIceIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourEntranceRestrictionsIceIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourEntranceRestrictionsIceIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourEntranceRestrictionsIceIndicatorCode >
  _xsd_HarbourEntranceRestrictionsIceIndicatorCode_type_serializer_init (
    "HarbourEntranceRestrictionsIceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourEntranceRestrictionsSwellIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourEntranceRestrictionsSwellIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourEntranceRestrictionsSwellIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourEntranceRestrictionsSwellIndicatorCode >
  _xsd_HarbourEntranceRestrictionsSwellIndicatorCode_type_serializer_init (
    "HarbourEntranceRestrictionsSwellIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourEstimatedTimeOfArrivalIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourEstimatedTimeOfArrivalIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourEstimatedTimeOfArrivalIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourEstimatedTimeOfArrivalIndicatorCode >
  _xsd_HarbourEstimatedTimeOfArrivalIndicatorCode_type_serializer_init (
    "HarbourEstimatedTimeOfArrivalIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourFireFightingCapabilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourFireFightingCapabilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourFireFightingCapabilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourFireFightingCapabilityCode >
  _xsd_HarbourFireFightingCapabilityCode_type_serializer_init (
    "HarbourFireFightingCapabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourFireFightingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourFireFightingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourFireFightingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourFireFightingIndicatorCode >
  _xsd_HarbourFireFightingIndicatorCode_type_serializer_init (
    "HarbourFireFightingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourFirstPortOfEntryIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourFirstPortOfEntryIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourFirstPortOfEntryIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourFirstPortOfEntryIndicatorCode >
  _xsd_HarbourFirstPortOfEntryIndicatorCode_type_serializer_init (
    "HarbourFirstPortOfEntryIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourFreshWaterAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourFreshWaterAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourFreshWaterAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourFreshWaterAvailabilityIndicatorCode >
  _xsd_HarbourFreshWaterAvailabilityIndicatorCode_type_serializer_init (
    "HarbourFreshWaterAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourLashIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourLashIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourLashIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourLashIndicatorCode >
  _xsd_HarbourLashIndicatorCode_type_serializer_init (
    "HarbourLashIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourLighterageAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourLighterageAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourLighterageAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourLighterageAvailabilityIndicatorCode >
  _xsd_HarbourLighterageAvailabilityIndicatorCode_type_serializer_init (
    "HarbourLighterageAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourOverheadLimitsIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourOverheadLimitsIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourOverheadLimitsIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourOverheadLimitsIndicatorCode >
  _xsd_HarbourOverheadLimitsIndicatorCode_type_serializer_init (
    "HarbourOverheadLimitsIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourPassengerHandlingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourPassengerHandlingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourPassengerHandlingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourPassengerHandlingIndicatorCode >
  _xsd_HarbourPassengerHandlingIndicatorCode_type_serializer_init (
    "HarbourPassengerHandlingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourPersistenceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourPersistenceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourPersistenceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourPersistenceCode >
  _xsd_HarbourPersistenceCode_type_serializer_init (
    "HarbourPersistenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourPilotageAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourPilotageAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourPilotageAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourPilotageAvailabilityIndicatorCode >
  _xsd_HarbourPilotageAvailabilityIndicatorCode_type_serializer_init (
    "HarbourPilotageAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourPilotageRequirementIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourPilotageRequirementIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourPilotageRequirementIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourPilotageRequirementIndicatorCode >
  _xsd_HarbourPilotageRequirementIndicatorCode_type_serializer_init (
    "HarbourPilotageRequirementIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourRefuellingAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourRefuellingAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourRefuellingAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourRefuellingAvailabilityIndicatorCode >
  _xsd_HarbourRefuellingAvailabilityIndicatorCode_type_serializer_init (
    "HarbourRefuellingAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourRefuellingTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourRefuellingTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourRefuellingTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourRefuellingTypeCode >
  _xsd_HarbourRefuellingTypeCode_type_serializer_init (
    "HarbourRefuellingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourShelterQualityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourShelterQualityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourShelterQualityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourShelterQualityCode >
  _xsd_HarbourShelterQualityCode_type_serializer_init (
    "HarbourShelterQualityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourTankerFacilitiesIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourTankerFacilitiesIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourTankerFacilitiesIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourTankerFacilitiesIndicatorCode >
  _xsd_HarbourTankerFacilitiesIndicatorCode_type_serializer_init (
    "HarbourTankerFacilitiesIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourTransitAccommodationIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourTransitAccommodationIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourTransitAccommodationIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourTransitAccommodationIndicatorCode >
  _xsd_HarbourTransitAccommodationIndicatorCode_type_serializer_init (
    "HarbourTransitAccommodationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourTugAvailabilityIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourTugAvailabilityIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourTugAvailabilityIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourTugAvailabilityIndicatorCode >
  _xsd_HarbourTugAvailabilityIndicatorCode_type_serializer_init (
    "HarbourTugAvailabilityIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourTurningAreaIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourTurningAreaIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourTurningAreaIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourTurningAreaIndicatorCode >
  _xsd_HarbourTurningAreaIndicatorCode_type_serializer_init (
    "HarbourTurningAreaIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourTypeCategoryCode >
  _xsd_HarbourTypeCategoryCode_type_serializer_init (
    "HarbourTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HarbourVehicleHandlingTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HarbourVehicleHandlingTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HarbourVehicleHandlingTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HarbourVehicleHandlingTypeCode >
  _xsd_HarbourVehicleHandlingTypeCode_type_serializer_init (
    "HarbourVehicleHandlingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HoldingRequiredCalculationMethodCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HoldingRequiredCalculationMethodCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HoldingRequiredCalculationMethodCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HoldingRequiredCalculationMethodCode >
  _xsd_HoldingRequiredCalculationMethodCode_type_serializer_init (
    "HoldingRequiredCalculationMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const HoldingTransferReasonCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HoldingTransferReasonCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HoldingTransferReasonCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HoldingTransferReasonCode >
  _xsd_HoldingTransferReasonCode_type_serializer_init (
    "HoldingTransferReasonCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const IcingCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const IcingCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const IcingCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, IcingCategoryCode >
  _xsd_IcingCategoryCode_type_serializer_init (
    "IcingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const IcingSeverityQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const IcingSeverityQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const IcingSeverityQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, IcingSeverityQualifierCode >
  _xsd_IcingSeverityQualifierCode_type_serializer_init (
    "IcingSeverityQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const JettyRailServedIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const JettyRailServedIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const JettyRailServedIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, JettyRailServedIndicatorCode >
  _xsd_JettyRailServedIndicatorCode_type_serializer_init (
    "JettyRailServedIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LanguageCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LanguageCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LanguageCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LanguageCategoryCode >
  _xsd_LanguageCategoryCode_type_serializer_init (
    "LanguageCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LanguageSkillProficiencyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LanguageSkillProficiencyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LanguageSkillProficiencyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LanguageSkillProficiencyCode >
  _xsd_LanguageSkillProficiencyCode_type_serializer_init (
    "LanguageSkillProficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LightCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LightCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LightCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LightCategoryCode >
  _xsd_LightCategoryCode_type_serializer_init (
    "LightCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LightMoonPhaseCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LightMoonPhaseCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LightMoonPhaseCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LightMoonPhaseCode >
  _xsd_LightMoonPhaseCode_type_serializer_init (
    "LightMoonPhaseCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LiquidSurfaceStatusSeaStateCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LiquidSurfaceStatusSeaStateCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LiquidSurfaceStatusSeaStateCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidSurfaceStatusSeaStateCode >
  _xsd_LiquidSurfaceStatusSeaStateCode_type_serializer_init (
    "LiquidSurfaceStatusSeaStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LiquidSurfaceStatusSurfaceConditionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LiquidSurfaceStatusSurfaceConditionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LiquidSurfaceStatusSurfaceConditionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidSurfaceStatusSurfaceConditionCode >
  _xsd_LiquidSurfaceStatusSurfaceConditionCode_type_serializer_init (
    "LiquidSurfaceStatusSurfaceConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const LocationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LocationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const LocationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LocationCategoryCode >
  _xsd_LocationCategoryCode_type_serializer_init (
    "LocationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MainActivityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MainActivityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MainActivityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MainActivityCode >
  _xsd_MainActivityCode_type_serializer_init (
    "MainActivityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaintenanceCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaintenanceCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaintenanceCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaintenanceCapabilityCategoryCode >
  _xsd_MaintenanceCapabilityCategoryCode_type_serializer_init (
    "MaintenanceCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaintenanceCapabilityLevelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaintenanceCapabilityLevelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaintenanceCapabilityLevelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaintenanceCapabilityLevelCode >
  _xsd_MaintenanceCapabilityLevelCode_type_serializer_init (
    "MaintenanceCapabilityLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaritimeEquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaritimeEquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaritimeEquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaritimeEquipmentTypeCategoryCode >
  _xsd_MaritimeEquipmentTypeCategoryCode_type_serializer_init (
    "MaritimeEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaritimeEquipmentTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaritimeEquipmentTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaritimeEquipmentTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaritimeEquipmentTypeSubcategoryCode >
  _xsd_MaritimeEquipmentTypeSubcategoryCode_type_serializer_init (
    "MaritimeEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielCategoryCode >
  _xsd_MaterielCategoryCode_type_serializer_init (
    "MaterielCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusBodyColourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusBodyColourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusBodyColourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusBodyColourCode >
  _xsd_MaterielStatusBodyColourCode_type_serializer_init (
    "MaterielStatusBodyColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusBuoyMalfunctionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusBuoyMalfunctionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusBuoyMalfunctionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusBuoyMalfunctionCode >
  _xsd_MaterielStatusBuoyMalfunctionCode_type_serializer_init (
    "MaterielStatusBuoyMalfunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusCategoryCode >
  _xsd_MaterielStatusCategoryCode_type_serializer_init (
    "MaterielStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusImoCompliantIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusImoCompliantIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusImoCompliantIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusImoCompliantIndicatorCode >
  _xsd_MaterielStatusImoCompliantIndicatorCode_type_serializer_init (
    "MaterielStatusImoCompliantIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusMarkingCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusMarkingCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusMarkingCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusMarkingCode >
  _xsd_MaterielStatusMarkingCode_type_serializer_init (
    "MaterielStatusMarkingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusMarkingColourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusMarkingColourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusMarkingColourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusMarkingColourCode >
  _xsd_MaterielStatusMarkingColourCode_type_serializer_init (
    "MaterielStatusMarkingColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusOperationalStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusOperationalStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusOperationalStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusOperationalStatusCode >
  _xsd_MaterielStatusOperationalStatusCode_type_serializer_init (
    "MaterielStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusOperationalStatusModeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusOperationalStatusModeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusOperationalStatusModeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusOperationalStatusModeCode >
  _xsd_MaterielStatusOperationalStatusModeCode_type_serializer_init (
    "MaterielStatusOperationalStatusModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusOperationalStatusQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusOperationalStatusQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusOperationalStatusQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusOperationalStatusQualifierCode >
  _xsd_MaterielStatusOperationalStatusQualifierCode_type_serializer_init (
    "MaterielStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusReserveIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusReserveIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusReserveIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusReserveIndicatorCode >
  _xsd_MaterielStatusReserveIndicatorCode_type_serializer_init (
    "MaterielStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielStatusSafetyStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielStatusSafetyStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielStatusSafetyStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielStatusSafetyStatusCode >
  _xsd_MaterielStatusSafetyStatusCode_type_serializer_init (
    "MaterielStatusSafetyStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielTypeCategoryCode >
  _xsd_MaterielTypeCategoryCode_type_serializer_init (
    "MaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MaterielTypeSupplyClassCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MaterielTypeSupplyClassCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MaterielTypeSupplyClassCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaterielTypeSupplyClassCode >
  _xsd_MaterielTypeSupplyClassCode_type_serializer_init (
    "MaterielTypeSupplyClassCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MedicalFacilityStatusIntervalCasualtyTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MedicalFacilityStatusIntervalCasualtyTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MedicalFacilityStatusIntervalCasualtyTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MedicalFacilityStatusIntervalCasualtyTypeCode >
  _xsd_MedicalFacilityStatusIntervalCasualtyTypeCode_type_serializer_init (
    "MedicalFacilityStatusIntervalCasualtyTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MedicalFacilityStatusPendingSurgeryTriageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MedicalFacilityStatusPendingSurgeryTriageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MedicalFacilityStatusPendingSurgeryTriageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MedicalFacilityStatusPendingSurgeryTriageCode >
  _xsd_MedicalFacilityStatusPendingSurgeryTriageCode_type_serializer_init (
    "MedicalFacilityStatusPendingSurgeryTriageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MeteorologicFeatureCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MeteorologicFeatureCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MeteorologicFeatureCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MeteorologicFeatureCategoryCode >
  _xsd_MeteorologicFeatureCategoryCode_type_serializer_init (
    "MeteorologicFeatureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MeteorologicFeatureInterpretationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MeteorologicFeatureInterpretationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MeteorologicFeatureInterpretationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MeteorologicFeatureInterpretationCode >
  _xsd_MeteorologicFeatureInterpretationCode_type_serializer_init (
    "MeteorologicFeatureInterpretationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MeteorologicFeatureSourceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MeteorologicFeatureSourceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MeteorologicFeatureSourceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MeteorologicFeatureSourceCode >
  _xsd_MeteorologicFeatureSourceCode_type_serializer_init (
    "MeteorologicFeatureSourceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryObstacleCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryObstacleCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryObstacleCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryObstacleCategoryCode >
  _xsd_MilitaryObstacleCategoryCode_type_serializer_init (
    "MilitaryObstacleCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryObstacleTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryObstacleTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryObstacleTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryObstacleTypeCategoryCode >
  _xsd_MilitaryObstacleTypeCategoryCode_type_serializer_init (
    "MilitaryObstacleTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryObstacleTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryObstacleTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryObstacleTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryObstacleTypeSubcategoryCode >
  _xsd_MilitaryObstacleTypeSubcategoryCode_type_serializer_init (
    "MilitaryObstacleTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryOrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryOrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryOrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryOrganisationTypeCategoryCode >
  _xsd_MilitaryOrganisationTypeCategoryCode_type_serializer_init (
    "MilitaryOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryOrganisationTypeServiceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryOrganisationTypeServiceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryOrganisationTypeServiceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryOrganisationTypeServiceCode >
  _xsd_MilitaryOrganisationTypeServiceCode_type_serializer_init (
    "MilitaryOrganisationTypeServiceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryPostTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryPostTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryPostTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryPostTypeCategoryCode >
  _xsd_MilitaryPostTypeCategoryCode_type_serializer_init (
    "MilitaryPostTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MilitaryPostTypeRankCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MilitaryPostTypeRankCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MilitaryPostTypeRankCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MilitaryPostTypeRankCode >
  _xsd_MilitaryPostTypeRankCode_type_serializer_init (
    "MilitaryPostTypeRankCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinePresenceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinePresenceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinePresenceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinePresenceCode >
  _xsd_MinePresenceCode_type_serializer_init (
    "MinePresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MineStatusAirDropEffectCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MineStatusAirDropEffectCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MineStatusAirDropEffectCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MineStatusAirDropEffectCode >
  _xsd_MineStatusAirDropEffectCode_type_serializer_init (
    "MineStatusAirDropEffectCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MineStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MineStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MineStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MineStatusCode >
  _xsd_MineStatusCode_type_serializer_init (
    "MineStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MineStatusMaritimeMineQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MineStatusMaritimeMineQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MineStatusMaritimeMineQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MineStatusMaritimeMineQualifierCode >
  _xsd_MineStatusMaritimeMineQualifierCode_type_serializer_init (
    "MineStatusMaritimeMineQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldCategoryCode >
  _xsd_MinefieldCategoryCode_type_serializer_init (
    "MinefieldCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldLandDepthPlacementCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldLandDepthPlacementCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldLandDepthPlacementCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldLandDepthPlacementCode >
  _xsd_MinefieldLandDepthPlacementCode_type_serializer_init (
    "MinefieldLandDepthPlacementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldLandFunctionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldLandFunctionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldLandFunctionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldLandFunctionCode >
  _xsd_MinefieldLandFunctionCode_type_serializer_init (
    "MinefieldLandFunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldLandPatternCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldLandPatternCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldLandPatternCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldLandPatternCode >
  _xsd_MinefieldLandPatternCode_type_serializer_init (
    "MinefieldLandPatternCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldLandPersistenceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldLandPersistenceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldLandPersistenceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldLandPersistenceCode >
  _xsd_MinefieldLandPersistenceCode_type_serializer_init (
    "MinefieldLandPersistenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldLandStoppingPowerCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldLandStoppingPowerCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldLandStoppingPowerCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldLandStoppingPowerCode >
  _xsd_MinefieldLandStoppingPowerCode_type_serializer_init (
    "MinefieldLandStoppingPowerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeBottomNaturalCamouflageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeBottomNaturalCamouflageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeBottomNaturalCamouflageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeBottomNaturalCamouflageCode >
  _xsd_MinefieldMaritimeBottomNaturalCamouflageCode_type_serializer_init (
    "MinefieldMaritimeBottomNaturalCamouflageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeDepthPlacementCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeDepthPlacementCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeDepthPlacementCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeDepthPlacementCode >
  _xsd_MinefieldMaritimeDepthPlacementCode_type_serializer_init (
    "MinefieldMaritimeDepthPlacementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeFunctionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeFunctionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeFunctionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeFunctionCode >
  _xsd_MinefieldMaritimeFunctionCode_type_serializer_init (
    "MinefieldMaritimeFunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusCode >
  _xsd_MinefieldMaritimeStatusCode_type_serializer_init (
    "MinefieldMaritimeStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusColourCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusColourCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusColourCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusColourCode >
  _xsd_MinefieldMaritimeStatusColourCode_type_serializer_init (
    "MinefieldMaritimeStatusColourCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusExpectedLevelMcmCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusExpectedLevelMcmCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusExpectedLevelMcmCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusExpectedLevelMcmCode >
  _xsd_MinefieldMaritimeStatusExpectedLevelMcmCode_type_serializer_init (
    "MinefieldMaritimeStatusExpectedLevelMcmCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusMineDetectionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusMineDetectionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusMineDetectionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusMineDetectionCode >
  _xsd_MinefieldMaritimeStatusMineDetectionCode_type_serializer_init (
    "MinefieldMaritimeStatusMineDetectionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusMineZoneRiskCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusMineZoneRiskCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusMineZoneRiskCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusMineZoneRiskCode >
  _xsd_MinefieldMaritimeStatusMineZoneRiskCode_type_serializer_init (
    "MinefieldMaritimeStatusMineZoneRiskCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeStatusSeedingCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeStatusSeedingCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeStatusSeedingCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeStatusSeedingCode >
  _xsd_MinefieldMaritimeStatusSeedingCode_type_serializer_init (
    "MinefieldMaritimeStatusSeedingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MinefieldMaritimeSubfunctionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MinefieldMaritimeSubfunctionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MinefieldMaritimeSubfunctionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MinefieldMaritimeSubfunctionCode >
  _xsd_MinefieldMaritimeSubfunctionCode_type_serializer_init (
    "MinefieldMaritimeSubfunctionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MiscellaneousEquipmentTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MiscellaneousEquipmentTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MiscellaneousEquipmentTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MiscellaneousEquipmentTypeCategoryCode >
  _xsd_MiscellaneousEquipmentTypeCategoryCode_type_serializer_init (
    "MiscellaneousEquipmentTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MiscellaneousEquipmentTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MiscellaneousEquipmentTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MiscellaneousEquipmentTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MiscellaneousEquipmentTypeSubcategoryCode >
  _xsd_MiscellaneousEquipmentTypeSubcategoryCode_type_serializer_init (
    "MiscellaneousEquipmentTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MissionPrimacyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MissionPrimacyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MissionPrimacyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MissionPrimacyCode >
  _xsd_MissionPrimacyCode_type_serializer_init (
    "MissionPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MobilityCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MobilityCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MobilityCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MobilityCapabilityCategoryCode >
  _xsd_MobilityCapabilityCategoryCode_type_serializer_init (
    "MobilityCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MobilityCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MobilityCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MobilityCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MobilityCapabilityDescriptorCode >
  _xsd_MobilityCapabilityDescriptorCode_type_serializer_init (
    "MobilityCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MobilityCapabilityTerrainTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MobilityCapabilityTerrainTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MobilityCapabilityTerrainTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MobilityCapabilityTerrainTypeCode >
  _xsd_MobilityCapabilityTerrainTypeCode_type_serializer_init (
    "MobilityCapabilityTerrainTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const MobilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MobilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const MobilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MobilityCode >
  _xsd_MobilityCode_type_serializer_init (
    "MobilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ModeOfTransportationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ModeOfTransportationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ModeOfTransportationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ModeOfTransportationCode >
  _xsd_ModeOfTransportationCode_type_serializer_init (
    "ModeOfTransportationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkArchitectureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkArchitectureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkArchitectureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkArchitectureCode >
  _xsd_NetworkArchitectureCode_type_serializer_init (
    "NetworkArchitectureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkCapacityBandwidthCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkCapacityBandwidthCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkCapacityBandwidthCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkCapacityBandwidthCode >
  _xsd_NetworkCapacityBandwidthCode_type_serializer_init (
    "NetworkCapacityBandwidthCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkCapacityProtocolCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkCapacityProtocolCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkCapacityProtocolCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkCapacityProtocolCode >
  _xsd_NetworkCapacityProtocolCode_type_serializer_init (
    "NetworkCapacityProtocolCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkCategoryCode >
  _xsd_NetworkCategoryCode_type_serializer_init (
    "NetworkCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkFrequencyBandCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkFrequencyBandCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkFrequencyBandCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkFrequencyBandCode >
  _xsd_NetworkFrequencyBandCode_type_serializer_init (
    "NetworkFrequencyBandCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkFrequencyModulationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkFrequencyModulationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkFrequencyModulationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkFrequencyModulationCode >
  _xsd_NetworkFrequencyModulationCode_type_serializer_init (
    "NetworkFrequencyModulationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkMeansCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkMeansCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkMeansCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkMeansCode >
  _xsd_NetworkMeansCode_type_serializer_init (
    "NetworkMeansCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkServiceCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkServiceCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkServiceCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkServiceCategoryCode >
  _xsd_NetworkServiceCategoryCode_type_serializer_init (
    "NetworkServiceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkServiceCryptographicIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkServiceCryptographicIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkServiceCryptographicIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkServiceCryptographicIndicatorCode >
  _xsd_NetworkServiceCryptographicIndicatorCode_type_serializer_init (
    "NetworkServiceCryptographicIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkServiceStatusIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkServiceStatusIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkServiceStatusIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkServiceStatusIndicatorCode >
  _xsd_NetworkServiceStatusIndicatorCode_type_serializer_init (
    "NetworkServiceStatusIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkServiceSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkServiceSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkServiceSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkServiceSubcategoryCode >
  _xsd_NetworkServiceSubcategoryCode_type_serializer_init (
    "NetworkServiceSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NetworkSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NetworkSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NetworkSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NetworkSubcategoryCode >
  _xsd_NetworkSubcategoryCode_type_serializer_init (
    "NetworkSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NuclearEventCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NuclearEventCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NuclearEventCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NuclearEventCategoryCode >
  _xsd_NuclearEventCategoryCode_type_serializer_init (
    "NuclearEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NuclearWeaponEventCraterPresenceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NuclearWeaponEventCraterPresenceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NuclearWeaponEventCraterPresenceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NuclearWeaponEventCraterPresenceCode >
  _xsd_NuclearWeaponEventCraterPresenceCode_type_serializer_init (
    "NuclearWeaponEventCraterPresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const NuclearYieldGroupCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const NuclearYieldGroupCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const NuclearYieldGroupCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NuclearYieldGroupCode >
  _xsd_NuclearYieldGroupCode_type_serializer_init (
    "NuclearYieldGroupCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAddressAuthorisationIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAddressAuthorisationIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAddressAuthorisationIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAddressAuthorisationIndicatorCode >
  _xsd_ObjectItemAddressAuthorisationIndicatorCode_type_serializer_init (
    "ObjectItemAddressAuthorisationIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAddressPrimacyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAddressPrimacyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAddressPrimacyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAddressPrimacyCode >
  _xsd_ObjectItemAddressPrimacyCode_type_serializer_init (
    "ObjectItemAddressPrimacyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAddressTransmitReceiveCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAddressTransmitReceiveCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAddressTransmitReceiveCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAddressTransmitReceiveCode >
  _xsd_ObjectItemAddressTransmitReceiveCode_type_serializer_init (
    "ObjectItemAddressTransmitReceiveCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAliasCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAliasCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAliasCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAliasCategoryCode >
  _xsd_ObjectItemAliasCategoryCode_type_serializer_init (
    "ObjectItemAliasCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAssociationCategoryCode >
  _xsd_ObjectItemAssociationCategoryCode_type_serializer_init (
    "ObjectItemAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemAssociationSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemAssociationSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemAssociationSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemAssociationSubcategoryCode >
  _xsd_ObjectItemAssociationSubcategoryCode_type_serializer_init (
    "ObjectItemAssociationSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemCategoryCode >
  _xsd_ObjectItemCategoryCode_type_serializer_init (
    "ObjectItemCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemGroupAccountDetailQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemGroupAccountDetailQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemGroupAccountDetailQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemGroupAccountDetailQualifierCode >
  _xsd_ObjectItemGroupAccountDetailQualifierCode_type_serializer_init (
    "ObjectItemGroupAccountDetailQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemHostilityStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemHostilityStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemHostilityStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemHostilityStatusCode >
  _xsd_ObjectItemHostilityStatusCode_type_serializer_init (
    "ObjectItemHostilityStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemLocationMeaningCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemLocationMeaningCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemLocationMeaningCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemLocationMeaningCode >
  _xsd_ObjectItemLocationMeaningCode_type_serializer_init (
    "ObjectItemLocationMeaningCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemLocationRelativeSpeedCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemLocationRelativeSpeedCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemLocationRelativeSpeedCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemLocationRelativeSpeedCode >
  _xsd_ObjectItemLocationRelativeSpeedCode_type_serializer_init (
    "ObjectItemLocationRelativeSpeedCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemCitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemCitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemCitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemCitationAssociationCategoryCode >
  _xsd_ObjectItemCitationAssociationCategoryCode_type_serializer_init (
    "ObjectItemCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemStatusBoobyTrapPresenceCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemStatusBoobyTrapPresenceCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemStatusBoobyTrapPresenceCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemStatusBoobyTrapPresenceCode >
  _xsd_ObjectItemStatusBoobyTrapPresenceCode_type_serializer_init (
    "ObjectItemStatusBoobyTrapPresenceCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemStatusCategoryCode >
  _xsd_ObjectItemStatusCategoryCode_type_serializer_init (
    "ObjectItemStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectItemStatusEmissionControlCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectItemStatusEmissionControlCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectItemStatusEmissionControlCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectItemStatusEmissionControlCode >
  _xsd_ObjectItemStatusEmissionControlCode_type_serializer_init (
    "ObjectItemStatusEmissionControlCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeCategoryCode >
  _xsd_ObjectTypeCategoryCode_type_serializer_init (
    "ObjectTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeDecoyIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeDecoyIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeDecoyIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeDecoyIndicatorCode >
  _xsd_ObjectTypeDecoyIndicatorCode_type_serializer_init (
    "ObjectTypeDecoyIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeEstablishmentCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeEstablishmentCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeEstablishmentCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeEstablishmentCategoryCode >
  _xsd_ObjectTypeEstablishmentCategoryCode_type_serializer_init (
    "ObjectTypeEstablishmentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeEstablishmentEnvironmentConditionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeEstablishmentEnvironmentConditionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeEstablishmentEnvironmentConditionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeEstablishmentEnvironmentConditionCode >
  _xsd_ObjectTypeEstablishmentEnvironmentConditionCode_type_serializer_init (
    "ObjectTypeEstablishmentEnvironmentConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode >
  _xsd_ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode_type_serializer_init (
    "ObjectTypeEstablishmentObjectTypeDetailMajorPartIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeEstablishmentOperationalModeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeEstablishmentOperationalModeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeEstablishmentOperationalModeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeEstablishmentOperationalModeCode >
  _xsd_ObjectTypeEstablishmentOperationalModeCode_type_serializer_init (
    "ObjectTypeEstablishmentOperationalModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ObjectTypeCitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ObjectTypeCitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ObjectTypeCitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ObjectTypeCitationAssociationCategoryCode >
  _xsd_ObjectTypeCitationAssociationCategoryCode_type_serializer_init (
    "ObjectTypeCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OperationalCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperationalCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperationalCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalCapabilityCategoryCode >
  _xsd_OperationalCapabilityCategoryCode_type_serializer_init (
    "OperationalCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OperationalCapabilityLevelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperationalCapabilityLevelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperationalCapabilityLevelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalCapabilityLevelCode >
  _xsd_OperationalCapabilityLevelCode_type_serializer_init (
    "OperationalCapabilityLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OperationalCapabilityQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperationalCapabilityQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperationalCapabilityQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalCapabilityQualifierCode >
  _xsd_OperationalCapabilityQualifierCode_type_serializer_init (
    "OperationalCapabilityQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OperationalInformationGroupCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperationalInformationGroupCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperationalInformationGroupCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalInformationGroupCategoryCode >
  _xsd_OperationalInformationGroupCategoryCode_type_serializer_init (
    "OperationalInformationGroupCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OperationalInformationGroupOrganisationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperationalInformationGroupOrganisationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperationalInformationGroupOrganisationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalInformationGroupOrganisationAssociationCategoryCode >
  _xsd_OperationalInformationGroupOrganisationAssociationCategoryCode_type_serializer_init (
    "OperationalInformationGroupOrganisationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrbitAreaAlignmentCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrbitAreaAlignmentCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrbitAreaAlignmentCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrbitAreaAlignmentCode >
  _xsd_OrbitAreaAlignmentCode_type_serializer_init (
    "OrbitAreaAlignmentCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrderCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrderCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrderCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrderCategoryCode >
  _xsd_OrderCategoryCode_type_serializer_init (
    "OrderCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrderStatusExecutionStateCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrderStatusExecutionStateCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrderStatusExecutionStateCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrderStatusExecutionStateCode >
  _xsd_OrderStatusExecutionStateCode_type_serializer_init (
    "OrderStatusExecutionStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationActionAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationActionAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationActionAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationActionAssociationCategoryCode >
  _xsd_OrganisationActionAssociationCategoryCode_type_serializer_init (
    "OrganisationActionAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationActionTaskRuleOfEngagementStatusCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationActionTaskRuleOfEngagementStatusCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationActionTaskRuleOfEngagementStatusCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationActionTaskRuleOfEngagementStatusCategoryCode >
  _xsd_OrganisationActionTaskRuleOfEngagementStatusCategoryCode_type_serializer_init (
    "OrganisationActionTaskRuleOfEngagementStatusCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationCategoryCode >
  _xsd_OrganisationCategoryCode_type_serializer_init (
    "OrganisationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationMaterielTypeAssociationReportableTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationMaterielTypeAssociationReportableTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationMaterielTypeAssociationReportableTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationMaterielTypeAssociationReportableTypeCode >
  _xsd_OrganisationMaterielTypeAssociationReportableTypeCode_type_serializer_init (
    "OrganisationMaterielTypeAssociationReportableTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationPlanOrderAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationPlanOrderAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationPlanOrderAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationPlanOrderAssociationCategoryCode >
  _xsd_OrganisationPlanOrderAssociationCategoryCode_type_serializer_init (
    "OrganisationPlanOrderAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationCitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationCitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationCitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationCitationAssociationCategoryCode >
  _xsd_OrganisationCitationAssociationCategoryCode_type_serializer_init (
    "OrganisationCitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusAvailabilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusAvailabilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusAvailabilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusAvailabilityCode >
  _xsd_OrganisationStatusAvailabilityCode_type_serializer_init (
    "OrganisationStatusAvailabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusCbrnDressStateCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusCbrnDressStateCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusCbrnDressStateCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusCbrnDressStateCode >
  _xsd_OrganisationStatusCbrnDressStateCode_type_serializer_init (
    "OrganisationStatusCbrnDressStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusCommandAndControlRoleCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusCommandAndControlRoleCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusCommandAndControlRoleCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusCommandAndControlRoleCode >
  _xsd_OrganisationStatusCommandAndControlRoleCode_type_serializer_init (
    "OrganisationStatusCommandAndControlRoleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusCommitmentStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusCommitmentStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusCommitmentStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusCommitmentStatusCode >
  _xsd_OrganisationStatusCommitmentStatusCode_type_serializer_init (
    "OrganisationStatusCommitmentStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusFireModeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusFireModeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusFireModeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusFireModeCode >
  _xsd_OrganisationStatusFireModeCode_type_serializer_init (
    "OrganisationStatusFireModeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusOperationalStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusOperationalStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusOperationalStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusOperationalStatusCode >
  _xsd_OrganisationStatusOperationalStatusCode_type_serializer_init (
    "OrganisationStatusOperationalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusOperationalStatusQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusOperationalStatusQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusOperationalStatusQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusOperationalStatusQualifierCode >
  _xsd_OrganisationStatusOperationalStatusQualifierCode_type_serializer_init (
    "OrganisationStatusOperationalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusReadinessCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusReadinessCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusReadinessCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusReadinessCode >
  _xsd_OrganisationStatusReadinessCode_type_serializer_init (
    "OrganisationStatusReadinessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusReinforcementCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusReinforcementCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusReinforcementCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusReinforcementCode >
  _xsd_OrganisationStatusReinforcementCode_type_serializer_init (
    "OrganisationStatusReinforcementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusReserveIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusReserveIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusReserveIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusReserveIndicatorCode >
  _xsd_OrganisationStatusReserveIndicatorCode_type_serializer_init (
    "OrganisationStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusTrainingCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusTrainingCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusTrainingCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusTrainingCode >
  _xsd_OrganisationStatusTrainingCode_type_serializer_init (
    "OrganisationStatusTrainingCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationStatusUsageStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationStatusUsageStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationStatusUsageStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationStatusUsageStatusCode >
  _xsd_OrganisationStatusUsageStatusCode_type_serializer_init (
    "OrganisationStatusUsageStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationTypeCategoryCode >
  _xsd_OrganisationTypeCategoryCode_type_serializer_init (
    "OrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationTypeCommandAndControlCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationTypeCommandAndControlCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationTypeCommandAndControlCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationTypeCommandAndControlCategoryCode >
  _xsd_OrganisationTypeCommandAndControlCategoryCode_type_serializer_init (
    "OrganisationTypeCommandAndControlCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const OrganisationTypeCommandFunctionIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OrganisationTypeCommandFunctionIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OrganisationTypeCommandFunctionIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OrganisationTypeCommandFunctionIndicatorCode >
  _xsd_OrganisationTypeCommandFunctionIndicatorCode_type_serializer_init (
    "OrganisationTypeCommandFunctionIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersistencyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersistencyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersistencyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersistencyCode >
  _xsd_PersistencyCode_type_serializer_init (
    "PersistencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonBloodTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonBloodTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonBloodTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonBloodTypeCode >
  _xsd_PersonBloodTypeCode_type_serializer_init (
    "PersonBloodTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonIdentificationDocumentCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonIdentificationDocumentCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonIdentificationDocumentCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonIdentificationDocumentCode >
  _xsd_PersonIdentificationDocumentCode_type_serializer_init (
    "PersonIdentificationDocumentCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonLanguageSkillGeneralProficiencyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonLanguageSkillGeneralProficiencyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonLanguageSkillGeneralProficiencyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonLanguageSkillGeneralProficiencyCode >
  _xsd_PersonLanguageSkillGeneralProficiencyCode_type_serializer_init (
    "PersonLanguageSkillGeneralProficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonProfessingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonProfessingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonProfessingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonProfessingIndicatorCode >
  _xsd_PersonProfessingIndicatorCode_type_serializer_init (
    "PersonProfessingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonStatusDutyStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonStatusDutyStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonStatusDutyStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonStatusDutyStatusCode >
  _xsd_PersonStatusDutyStatusCode_type_serializer_init (
    "PersonStatusDutyStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonStatusPhysicalStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonStatusPhysicalStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonStatusPhysicalStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonStatusPhysicalStatusCode >
  _xsd_PersonStatusPhysicalStatusCode_type_serializer_init (
    "PersonStatusPhysicalStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonStatusPhysicalStatusQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonStatusPhysicalStatusQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonStatusPhysicalStatusQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonStatusPhysicalStatusQualifierCode >
  _xsd_PersonStatusPhysicalStatusQualifierCode_type_serializer_init (
    "PersonStatusPhysicalStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonStatusReserveIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonStatusReserveIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonStatusReserveIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonStatusReserveIndicatorCode >
  _xsd_PersonStatusReserveIndicatorCode_type_serializer_init (
    "PersonStatusReserveIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonTypeCategoryCode >
  _xsd_PersonTypeCategoryCode_type_serializer_init (
    "PersonTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonTypeRankCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonTypeRankCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonTypeRankCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonTypeRankCode >
  _xsd_PersonTypeRankCode_type_serializer_init (
    "PersonTypeRankCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PersonTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PersonTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PersonTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PersonTypeSubcategoryCode >
  _xsd_PersonTypeSubcategoryCode_type_serializer_init (
    "PersonTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PhysicalAddressCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PhysicalAddressCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PhysicalAddressCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PhysicalAddressCategoryCode >
  _xsd_PhysicalAddressCategoryCode_type_serializer_init (
    "PhysicalAddressCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanCategoryCode >
  _xsd_PlanCategoryCode_type_serializer_init (
    "PlanCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderAssociationCategoryCode >
  _xsd_PlanOrderAssociationCategoryCode_type_serializer_init (
    "PlanOrderAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderCategoryCode >
  _xsd_PlanOrderCategoryCode_type_serializer_init (
    "PlanOrderCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderComponentContentCitationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderComponentContentCitationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderComponentContentCitationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderComponentContentCitationCategoryCode >
  _xsd_PlanOrderComponentContentCitationCategoryCode_type_serializer_init (
    "PlanOrderComponentContentCitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderComponentStructureCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderComponentStructureCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderComponentStructureCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderComponentStructureCategoryCode >
  _xsd_PlanOrderComponentStructureCategoryCode_type_serializer_init (
    "PlanOrderComponentStructureCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderDistributionAcknowledgementCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderDistributionAcknowledgementCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderDistributionAcknowledgementCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderDistributionAcknowledgementCode >
  _xsd_PlanOrderDistributionAcknowledgementCode_type_serializer_init (
    "PlanOrderDistributionAcknowledgementCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderDistributionCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderDistributionCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderDistributionCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderDistributionCategoryCode >
  _xsd_PlanOrderDistributionCategoryCode_type_serializer_init (
    "PlanOrderDistributionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanOrderHeaderContentTimeZoneCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanOrderHeaderContentTimeZoneCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanOrderHeaderContentTimeZoneCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanOrderHeaderContentTimeZoneCode >
  _xsd_PlanOrderHeaderContentTimeZoneCode_type_serializer_init (
    "PlanOrderHeaderContentTimeZoneCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanStatusDevelopmentStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanStatusDevelopmentStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanStatusDevelopmentStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanStatusDevelopmentStatusCode >
  _xsd_PlanStatusDevelopmentStatusCode_type_serializer_init (
    "PlanStatusDevelopmentStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PlanStatusStateCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PlanStatusStateCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PlanStatusStateCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlanStatusStateCode >
  _xsd_PlanStatusStateCode_type_serializer_init (
    "PlanStatusStateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PointCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PointCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PointCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PointCategoryCode >
  _xsd_PointCategoryCode_type_serializer_init (
    "PointCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PrecipitationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PrecipitationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PrecipitationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PrecipitationCategoryCode >
  _xsd_PrecipitationCategoryCode_type_serializer_init (
    "PrecipitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const PrivateSectorOrganisationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const PrivateSectorOrganisationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const PrivateSectorOrganisationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PrivateSectorOrganisationTypeCategoryCode >
  _xsd_PrivateSectorOrganisationTypeCategoryCode_type_serializer_init (
    "PrivateSectorOrganisationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const QuayContainerHandlingTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const QuayContainerHandlingTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const QuayContainerHandlingTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, QuayContainerHandlingTypeCode >
  _xsd_QuayContainerHandlingTypeCode_type_serializer_init (
    "QuayContainerHandlingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const QuayCraneOffloadingTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const QuayCraneOffloadingTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const QuayCraneOffloadingTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, QuayCraneOffloadingTypeCode >
  _xsd_QuayCraneOffloadingTypeCode_type_serializer_init (
    "QuayCraneOffloadingTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const QuayRailServedIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const QuayRailServedIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const QuayRailServedIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, QuayRailServedIndicatorCode >
  _xsd_QuayRailServedIndicatorCode_type_serializer_init (
    "QuayRailServedIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const QuayStorageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const QuayStorageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const QuayStorageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, QuayStorageCode >
  _xsd_QuayStorageCode_type_serializer_init (
    "QuayStorageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RadioactiveEventCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RadioactiveEventCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RadioactiveEventCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RadioactiveEventCategoryCode >
  _xsd_RadioactiveEventCategoryCode_type_serializer_init (
    "RadioactiveEventCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RadioactiveEventDoseRateTrendCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RadioactiveEventDoseRateTrendCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RadioactiveEventDoseRateTrendCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RadioactiveEventDoseRateTrendCode >
  _xsd_RadioactiveEventDoseRateTrendCode_type_serializer_init (
    "RadioactiveEventDoseRateTrendCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RadioactiveEventRelativeDecayRateCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RadioactiveEventRelativeDecayRateCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RadioactiveEventRelativeDecayRateCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RadioactiveEventRelativeDecayRateCode >
  _xsd_RadioactiveEventRelativeDecayRateCode_type_serializer_init (
    "RadioactiveEventRelativeDecayRateCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RadioactiveMaterielTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RadioactiveMaterielTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RadioactiveMaterielTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RadioactiveMaterielTypeCategoryCode >
  _xsd_RadioactiveMaterielTypeCategoryCode_type_serializer_init (
    "RadioactiveMaterielTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RadioactiveMaterielTypePrimaryRadiationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RadioactiveMaterielTypePrimaryRadiationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RadioactiveMaterielTypePrimaryRadiationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RadioactiveMaterielTypePrimaryRadiationCode >
  _xsd_RadioactiveMaterielTypePrimaryRadiationCode_type_serializer_init (
    "RadioactiveMaterielTypePrimaryRadiationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailcarTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailcarTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailcarTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailcarTypeCategoryCode >
  _xsd_RailcarTypeCategoryCode_type_serializer_init (
    "RailcarTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailcarTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailcarTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailcarTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailcarTypeSubcategoryCode >
  _xsd_RailcarTypeSubcategoryCode_type_serializer_init (
    "RailcarTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailwaySignalSystemCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailwaySignalSystemCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailwaySignalSystemCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailwaySignalSystemCode >
  _xsd_RailwaySignalSystemCode_type_serializer_init (
    "RailwaySignalSystemCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailwaySignalSystemEfficiencyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailwaySignalSystemEfficiencyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailwaySignalSystemEfficiencyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailwaySignalSystemEfficiencyCode >
  _xsd_RailwaySignalSystemEfficiencyCode_type_serializer_init (
    "RailwaySignalSystemEfficiencyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailwayTrackGaugeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailwayTrackGaugeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailwayTrackGaugeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailwayTrackGaugeCode >
  _xsd_RailwayTrackGaugeCode_type_serializer_init (
    "RailwayTrackGaugeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RailwayTractionSystemCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RailwayTractionSystemCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RailwayTractionSystemCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RailwayTractionSystemCode >
  _xsd_RailwayTractionSystemCode_type_serializer_init (
    "RailwayTractionSystemCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationAssociationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationAssociationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationAssociationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationAssociationCategoryCode >
  _xsd_CitationAssociationCategoryCode_type_serializer_init (
    "CitationAssociationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationContentCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationContentCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationContentCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationContentCategoryCode >
  _xsd_CitationContentCategoryCode_type_serializer_init (
    "CitationContentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationLifecycleCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationLifecycleCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationLifecycleCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationLifecycleCode >
  _xsd_CitationLifecycleCode_type_serializer_init (
    "CitationLifecycleCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationMediumTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationMediumTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationMediumTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationMediumTypeCode >
  _xsd_CitationMediumTypeCode_type_serializer_init (
    "CitationMediumTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationTransmittalTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationTransmittalTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationTransmittalTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationTransmittalTypeCode >
  _xsd_CitationTransmittalTypeCode_type_serializer_init (
    "CitationTransmittalTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const CitationVerificationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CitationVerificationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CitationVerificationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CitationVerificationCode >
  _xsd_CitationVerificationCode_type_serializer_init (
    "CitationVerificationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RelativeCoordinateSystemCitationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RelativeCoordinateSystemCitationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RelativeCoordinateSystemCitationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RelativeCoordinateSystemCitationCategoryCode >
  _xsd_RelativeCoordinateSystemCitationCategoryCode_type_serializer_init (
    "RelativeCoordinateSystemCitationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReleaseCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReleaseCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReleaseCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReleaseCategoryCode >
  _xsd_ReleaseCategoryCode_type_serializer_init (
    "ReleaseCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataAccuracyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataAccuracyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataAccuracyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataAccuracyCode >
  _xsd_ReportingDataAccuracyCode_type_serializer_init (
    "ReportingDataAccuracyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataCategoryCode >
  _xsd_ReportingDataCategoryCode_type_serializer_init (
    "ReportingDataCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataCountingIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataCountingIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataCountingIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataCountingIndicatorCode >
  _xsd_ReportingDataCountingIndicatorCode_type_serializer_init (
    "ReportingDataCountingIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataCredibilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataCredibilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataCredibilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataCredibilityCode >
  _xsd_ReportingDataCredibilityCode_type_serializer_init (
    "ReportingDataCredibilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataEntityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataEntityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataEntityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataEntityCategoryCode >
  _xsd_ReportingDataEntityCategoryCode_type_serializer_init (
    "ReportingDataEntityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataRealDataExerciseUseOnlyCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataRealDataExerciseUseOnlyCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataRealDataExerciseUseOnlyCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataRealDataExerciseUseOnlyCode >
  _xsd_ReportingDataRealDataExerciseUseOnlyCode_type_serializer_init (
    "ReportingDataRealDataExerciseUseOnlyCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataReliabilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataReliabilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataReliabilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataReliabilityCode >
  _xsd_ReportingDataReliabilityCode_type_serializer_init (
    "ReportingDataReliabilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataSourceTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataSourceTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataSourceTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataSourceTypeCode >
  _xsd_ReportingDataSourceTypeCode_type_serializer_init (
    "ReportingDataSourceTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const ReportingDataTimingCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ReportingDataTimingCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ReportingDataTimingCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReportingDataTimingCategoryCode >
  _xsd_ReportingDataTimingCategoryCode_type_serializer_init (
    "ReportingDataTimingCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RequestAnswerCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RequestAnswerCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RequestAnswerCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RequestAnswerCategoryCode >
  _xsd_RequestAnswerCategoryCode_type_serializer_init (
    "RequestAnswerCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RequestCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RequestCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RequestCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RequestCategoryCode >
  _xsd_RequestCategoryCode_type_serializer_init (
    "RequestCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RequestImmediateInterestIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RequestImmediateInterestIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RequestImmediateInterestIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RequestImmediateInterestIndicatorCode >
  _xsd_RequestImmediateInterestIndicatorCode_type_serializer_init (
    "RequestImmediateInterestIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RoadCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RoadCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RoadCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RoadCategoryCode >
  _xsd_RoadCategoryCode_type_serializer_init (
    "RoadCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RoadQualityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RoadQualityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RoadQualityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RoadQualityCode >
  _xsd_RoadQualityCode_type_serializer_init (
    "RoadQualityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RoadShoulderWidthCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RoadShoulderWidthCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RoadShoulderWidthCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RoadShoulderWidthCode >
  _xsd_RoadShoulderWidthCode_type_serializer_init (
    "RoadShoulderWidthCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RoadWeatherConditionCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RoadWeatherConditionCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RoadWeatherConditionCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RoadWeatherConditionCategoryCode >
  _xsd_RoadWeatherConditionCategoryCode_type_serializer_init (
    "RoadWeatherConditionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RouteDirectionUsageCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RouteDirectionUsageCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RouteDirectionUsageCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RouteDirectionUsageCode >
  _xsd_RouteDirectionUsageCode_type_serializer_init (
    "RouteDirectionUsageCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RouteSegmentCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RouteSegmentCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RouteSegmentCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RouteSegmentCategoryCode >
  _xsd_RouteSegmentCategoryCode_type_serializer_init (
    "RouteSegmentCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RouteTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RouteTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RouteTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RouteTypeCategoryCode >
  _xsd_RouteTypeCategoryCode_type_serializer_init (
    "RouteTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RunwayLightingPresenceIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RunwayLightingPresenceIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RunwayLightingPresenceIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunwayLightingPresenceIndicatorCode >
  _xsd_RunwayLightingPresenceIndicatorCode_type_serializer_init (
    "RunwayLightingPresenceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RunwayPavementEvaluationMethodCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RunwayPavementEvaluationMethodCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RunwayPavementEvaluationMethodCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunwayPavementEvaluationMethodCode >
  _xsd_RunwayPavementEvaluationMethodCode_type_serializer_init (
    "RunwayPavementEvaluationMethodCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RunwayPavementMaximumTyrePressureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RunwayPavementMaximumTyrePressureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RunwayPavementMaximumTyrePressureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunwayPavementMaximumTyrePressureCode >
  _xsd_RunwayPavementMaximumTyrePressureCode_type_serializer_init (
    "RunwayPavementMaximumTyrePressureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RunwayPavementSubgradeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RunwayPavementSubgradeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RunwayPavementSubgradeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunwayPavementSubgradeCategoryCode >
  _xsd_RunwayPavementSubgradeCategoryCode_type_serializer_init (
    "RunwayPavementSubgradeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const RunwayPavementTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const RunwayPavementTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const RunwayPavementTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunwayPavementTypeCode >
  _xsd_RunwayPavementTypeCode_type_serializer_init (
    "RunwayPavementTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SecurityClassificationLevelCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SecurityClassificationLevelCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SecurityClassificationLevelCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SecurityClassificationLevelCode >
  _xsd_SecurityClassificationLevelCode_type_serializer_init (
    "SecurityClassificationLevelCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SolidSurfaceStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SolidSurfaceStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SolidSurfaceStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SolidSurfaceStatusCode >
  _xsd_SolidSurfaceStatusCode_type_serializer_init (
    "SolidSurfaceStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SolidSurfaceStatusSurfaceConditionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SolidSurfaceStatusSurfaceConditionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SolidSurfaceStatusSurfaceConditionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SolidSurfaceStatusSurfaceConditionCode >
  _xsd_SolidSurfaceStatusSurfaceConditionCode_type_serializer_init (
    "SolidSurfaceStatusSurfaceConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SolidSurfaceStatusSurfaceFirmnessCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SolidSurfaceStatusSurfaceFirmnessCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SolidSurfaceStatusSurfaceFirmnessCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SolidSurfaceStatusSurfaceFirmnessCode >
  _xsd_SolidSurfaceStatusSurfaceFirmnessCode_type_serializer_init (
    "SolidSurfaceStatusSurfaceFirmnessCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SpeedPrecisionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SpeedPrecisionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SpeedPrecisionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SpeedPrecisionCode >
  _xsd_SpeedPrecisionCode_type_serializer_init (
    "SpeedPrecisionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const StorageCapabilityConditionCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const StorageCapabilityConditionCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const StorageCapabilityConditionCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StorageCapabilityConditionCode >
  _xsd_StorageCapabilityConditionCode_type_serializer_init (
    "StorageCapabilityConditionCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const StorageCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const StorageCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const StorageCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StorageCapabilityDescriptorCode >
  _xsd_StorageCapabilityDescriptorCode_type_serializer_init (
    "StorageCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SubsurfaceVesselTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SubsurfaceVesselTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SubsurfaceVesselTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubsurfaceVesselTypeCategoryCode >
  _xsd_SubsurfaceVesselTypeCategoryCode_type_serializer_init (
    "SubsurfaceVesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode >
  _xsd_SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode_type_serializer_init (
    "SubsurfaceVesselTypeTorpedoLoadingGearIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SupportCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SupportCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SupportCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SupportCapabilityCategoryCode >
  _xsd_SupportCapabilityCategoryCode_type_serializer_init (
    "SupportCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SupportCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SupportCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SupportCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SupportCapabilityDescriptorCode >
  _xsd_SupportCapabilityDescriptorCode_type_serializer_init (
    "SupportCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SurfaceCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SurfaceCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SurfaceCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SurfaceCategoryCode >
  _xsd_SurfaceCategoryCode_type_serializer_init (
    "SurfaceCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SurfaceVesselTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SurfaceVesselTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SurfaceVesselTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SurfaceVesselTypeCategoryCode >
  _xsd_SurfaceVesselTypeCategoryCode_type_serializer_init (
    "SurfaceVesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SurveillanceCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SurveillanceCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SurveillanceCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SurveillanceCapabilityCategoryCode >
  _xsd_SurveillanceCapabilityCategoryCode_type_serializer_init (
    "SurveillanceCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const SurveillanceCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const SurveillanceCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const SurveillanceCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SurveillanceCapabilityDescriptorCode >
  _xsd_SurveillanceCapabilityDescriptorCode_type_serializer_init (
    "SurveillanceCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const TargetEngagementAuthorityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TargetEngagementAuthorityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const TargetEngagementAuthorityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TargetEngagementAuthorityCode >
  _xsd_TargetEngagementAuthorityCode_type_serializer_init (
    "TargetEngagementAuthorityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const TargetPersonnelProtectionCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TargetPersonnelProtectionCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const TargetPersonnelProtectionCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TargetPersonnelProtectionCategoryCode >
  _xsd_TargetPersonnelProtectionCategoryCode_type_serializer_init (
    "TargetPersonnelProtectionCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const TaskFormationTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TaskFormationTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const TaskFormationTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TaskFormationTypeCategoryCode >
  _xsd_TaskFormationTypeCategoryCode_type_serializer_init (
    "TaskFormationTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const TransmissionCapabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TransmissionCapabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const TransmissionCapabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransmissionCapabilityCategoryCode >
  _xsd_TransmissionCapabilityCategoryCode_type_serializer_init (
    "TransmissionCapabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const TransmissionCapabilityDescriptorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TransmissionCapabilityDescriptorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const TransmissionCapabilityDescriptorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransmissionCapabilityDescriptorCode >
  _xsd_TransmissionCapabilityDescriptorCode_type_serializer_init (
    "TransmissionCapabilityDescriptorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeArmCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeArmCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeArmCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeArmCategoryCode >
  _xsd_UnitTypeArmCategoryCode_type_serializer_init (
    "UnitTypeArmCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeArmSpecialisationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeArmSpecialisationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeArmSpecialisationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeArmSpecialisationCode >
  _xsd_UnitTypeArmSpecialisationCode_type_serializer_init (
    "UnitTypeArmSpecialisationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeCategoryCode >
  _xsd_UnitTypeCategoryCode_type_serializer_init (
    "UnitTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeGeneralMobilityCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeGeneralMobilityCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeGeneralMobilityCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeGeneralMobilityCode >
  _xsd_UnitTypeGeneralMobilityCode_type_serializer_init (
    "UnitTypeGeneralMobilityCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeQualifierCode >
  _xsd_UnitTypeQualifierCode_type_serializer_init (
    "UnitTypeQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeSizeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeSizeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeSizeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeSizeCode >
  _xsd_UnitTypeSizeCode_type_serializer_init (
    "UnitTypeSizeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UnitTypeSupplementarySpecialisationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UnitTypeSupplementarySpecialisationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UnitTypeSupplementarySpecialisationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnitTypeSupplementarySpecialisationCode >
  _xsd_UnitTypeSupplementarySpecialisationCode_type_serializer_init (
    "UnitTypeSupplementarySpecialisationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UsageStatusCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UsageStatusCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UsageStatusCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UsageStatusCode >
  _xsd_UsageStatusCode_type_serializer_init (
    "UsageStatusCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UxoStatusExposureCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UxoStatusExposureCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UxoStatusExposureCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UxoStatusExposureCode >
  _xsd_UxoStatusExposureCode_type_serializer_init (
    "UxoStatusExposureCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const UxoStatusQualifierCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UxoStatusQualifierCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const UxoStatusQualifierCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UxoStatusQualifierCode >
  _xsd_UxoStatusQualifierCode_type_serializer_init (
    "UxoStatusQualifierCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VegetationCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VegetationCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VegetationCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VegetationCategoryCode >
  _xsd_VegetationCategoryCode_type_serializer_init (
    "VegetationCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VegetationSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VegetationSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VegetationSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VegetationSubcategoryCode >
  _xsd_VegetationSubcategoryCode_type_serializer_init (
    "VegetationSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VehicleTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VehicleTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VehicleTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VehicleTypeCategoryCode >
  _xsd_VehicleTypeCategoryCode_type_serializer_init (
    "VehicleTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VerticalDistanceCitationCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VerticalDistanceCitationCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VerticalDistanceCitationCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VerticalDistanceCitationCode >
  _xsd_VerticalDistanceCitationCode_type_serializer_init (
    "VerticalDistanceCitationCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VesselTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VesselTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VesselTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VesselTypeCategoryCode >
  _xsd_VesselTypeCategoryCode_type_serializer_init (
    "VesselTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VesselTypePropulsionTypeCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VesselTypePropulsionTypeCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VesselTypePropulsionTypeCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VesselTypePropulsionTypeCode >
  _xsd_VesselTypePropulsionTypeCode_type_serializer_init (
    "VesselTypePropulsionTypeCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const VisibilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const VisibilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const VisibilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VisibilityCategoryCode >
  _xsd_VisibilityCategoryCode_type_serializer_init (
    "VisibilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WeaponTypeCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WeaponTypeCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WeaponTypeCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WeaponTypeCategoryCode >
  _xsd_WeaponTypeCategoryCode_type_serializer_init (
    "WeaponTypeCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WeaponTypeFireGuidanceIndicatorCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WeaponTypeFireGuidanceIndicatorCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WeaponTypeFireGuidanceIndicatorCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WeaponTypeFireGuidanceIndicatorCode >
  _xsd_WeaponTypeFireGuidanceIndicatorCode_type_serializer_init (
    "WeaponTypeFireGuidanceIndicatorCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WeaponTypeSubcategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WeaponTypeSubcategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WeaponTypeSubcategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WeaponTypeSubcategoryCode >
  _xsd_WeaponTypeSubcategoryCode_type_serializer_init (
    "WeaponTypeSubcategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WindAirStabilityCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WindAirStabilityCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WindAirStabilityCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WindAirStabilityCategoryCode >
  _xsd_WindAirStabilityCategoryCode_type_serializer_init (
    "WindAirStabilityCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WindAltitudeLayerCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WindAltitudeLayerCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WindAltitudeLayerCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WindAltitudeLayerCode >
  _xsd_WindAltitudeLayerCode_type_serializer_init (
    "WindAltitudeLayerCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");


  void
  operator<< (::xercesc::DOMElement& e, const WindCategoryCode& i)
  {
    e << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const WindCategoryCode& i)
  {
    a << static_cast< const ::xml_schema::token& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const WindCategoryCode& i)
  {
    l << static_cast< const ::xml_schema::token& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, WindCategoryCode >
  _xsd_WindCategoryCode_type_serializer_init (
    "WindCategoryCode",
    "urn:int:nato:standard:mip:jc3iedm:3.1:oo:2.0");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

