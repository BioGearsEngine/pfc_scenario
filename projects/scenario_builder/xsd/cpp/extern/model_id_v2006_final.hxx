// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VER_0_3_EXTERN_MODEL_ID_V2006_FINAL_HXX
#define VER_0_3_EXTERN_MODEL_ID_V2006_FINAL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#if defined(__clang__)
  #define SUSTAIN_XSD_API
#elif defined(__gnu_linux__) 
  #define SUSTAIN_XSD_API __attribute__ ((visibility ("default")))
#elif defined(_WIN32)
 // ifdef SUSTAIN_XSD_EXPORTS
    #define SUSTAIN_XSD_API __declspec(dllexport)
 // #else
 //   #define SUSTAIN_XSD_API __declspec(dllimport)
 // #endif
#else 
  #define SUSTAIN_XSD_API
#endif
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schemas
{
  namespace modelID
  {
    class String;
    class IdentifierType;
    class nonEmptyString;
    class NonEmptyString;
    class OMTypeEnumerations;
    class OMTypeUnion;
    class glyphTypeEnumerations;
    class glyphTypeUnion;
    class glyphType;
    class pocType;
    class SecurityClassificationEnumeration;
    class SecurityClassificationUnion;
    class modelType;
    class securityClassificationType;
    class ApplicationDomainEnumerations;
    class ApplicationDomainUnion;
    class applicationDomainType;
    class POCTypeEnumeration;
    class POCTypeUnion;
    class pocTypeType;
    class referenceTypeEnumerations;
    class referenceTypeUnion;
    class referenceType;
    class keywordType;
    class modelIdentificationType;
    class type;
    class identification;
    class modificationDate;
    class poc;
    class glyph;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace schemas
{
  namespace modelID
  {
    class SUSTAIN_XSD_API String: public ::xml_schema::string
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      String ();

      String (const char*);

      String (const ::std::string&);

      String (const ::xml_schema::string&);

      String (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      String (const String& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual String*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      String&
      operator= (const String& x);

      virtual 
      ~String ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API IdentifierType: public ::xml_schema::ncname
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      IdentifierType (const char*);

      IdentifierType (const ::std::string&);

      IdentifierType (const ::xml_schema::ncname&);

      IdentifierType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      IdentifierType (const IdentifierType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual IdentifierType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      IdentifierType&
      operator= (const IdentifierType& x);

      virtual 
      ~IdentifierType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API nonEmptyString: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      nonEmptyString ();

      nonEmptyString (const char*);

      nonEmptyString (const ::std::string&);

      nonEmptyString (const ::xml_schema::string&);

      nonEmptyString (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      nonEmptyString (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      nonEmptyString (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      nonEmptyString (const nonEmptyString& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual nonEmptyString*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~nonEmptyString ();
    };

    class SUSTAIN_XSD_API NonEmptyString: public ::schemas::modelID::nonEmptyString
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      NonEmptyString ();

      NonEmptyString (const char*);

      NonEmptyString (const ::std::string&);

      NonEmptyString (const ::xml_schema::string&);

      NonEmptyString (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      NonEmptyString (const NonEmptyString& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual NonEmptyString*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      NonEmptyString&
      operator= (const NonEmptyString& x);

      virtual 
      ~NonEmptyString ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API OMTypeEnumerations: public ::xml_schema::string
    {
      public:
      enum value
      {
        FOM,
        SOM,
        BOM
      };

      OMTypeEnumerations (value v);

      OMTypeEnumerations (const char* v);

      OMTypeEnumerations (const ::std::string& v);

      OMTypeEnumerations (const ::xml_schema::string& v);

      OMTypeEnumerations (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      OMTypeEnumerations (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      OMTypeEnumerations (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      OMTypeEnumerations (const OMTypeEnumerations& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual OMTypeEnumerations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OMTypeEnumerations&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_OMTypeEnumerations_convert ();
      }

      protected:
      value
      _xsd_OMTypeEnumerations_convert () const;

      public:
      static const char* const _xsd_OMTypeEnumerations_literals_[3];
      static const value _xsd_OMTypeEnumerations_indexes_[3];
    };

    class SUSTAIN_XSD_API OMTypeUnion: public ::xml_schema::string
    {
      public:

      OMTypeUnion (const char* v);

      OMTypeUnion (const ::std::string& v);

      OMTypeUnion (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      OMTypeUnion (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      OMTypeUnion (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      OMTypeUnion (const OMTypeUnion& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual OMTypeUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API glyphTypeEnumerations: public ::xml_schema::string
    {
      public:
      enum value
      {
        BITMAP,
        JPG,
        GIF,
        PNG,
        TIFF
      };

      glyphTypeEnumerations (value v);

      glyphTypeEnumerations (const char* v);

      glyphTypeEnumerations (const ::std::string& v);

      glyphTypeEnumerations (const ::xml_schema::string& v);

      glyphTypeEnumerations (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      glyphTypeEnumerations (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      glyphTypeEnumerations (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      glyphTypeEnumerations (const glyphTypeEnumerations& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual glyphTypeEnumerations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      glyphTypeEnumerations&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_glyphTypeEnumerations_convert ();
      }

      protected:
      value
      _xsd_glyphTypeEnumerations_convert () const;

      public:
      static const char* const _xsd_glyphTypeEnumerations_literals_[5];
      static const value _xsd_glyphTypeEnumerations_indexes_[5];
    };

    class SUSTAIN_XSD_API glyphTypeUnion: public ::xml_schema::string
    {
      public:

      glyphTypeUnion (const char* v);

      glyphTypeUnion (const ::std::string& v);

      glyphTypeUnion (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      glyphTypeUnion (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      glyphTypeUnion (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      glyphTypeUnion (const glyphTypeUnion& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual glyphTypeUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API glyphType: public ::xml_schema::base64_binary
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // type
      //
      typedef ::schemas::modelID::glyphTypeUnion type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::unique_ptr< type_type > p);

      // height
      //
      typedef ::xml_schema::short_ height_type;
      typedef ::xsd::cxx::tree::optional< height_type > height_optional;
      typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

      const height_optional&
      height () const;

      height_optional&
      height ();

      void
      height (const height_type& x);

      void
      height (const height_optional& x);

      // width
      //
      typedef ::xml_schema::short_ width_type;
      typedef ::xsd::cxx::tree::optional< width_type > width_optional;
      typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

      const width_optional&
      width () const;

      width_optional&
      width ();

      void
      width (const width_type& x);

      void
      width (const width_optional& x);

      // alt
      //
      typedef ::xml_schema::string alt_type;
      typedef ::xsd::cxx::tree::optional< alt_type > alt_optional;
      typedef ::xsd::cxx::tree::traits< alt_type, char > alt_traits;

      const alt_optional&
      alt () const;

      alt_optional&
      alt ();

      void
      alt (const alt_type& x);

      void
      alt (const alt_optional& x);

      void
      alt (::std::unique_ptr< alt_type > p);

      // Constructors.
      //
      glyphType (const type_type&);

      glyphType (const ::xml_schema::base64_binary&,
                 const type_type&);

      glyphType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      glyphType (const glyphType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual glyphType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      glyphType&
      operator= (const glyphType& x);

      virtual 
      ~glyphType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
      ::xsd::cxx::tree::one< type_type > type_;
      height_optional height_;
      width_optional width_;
      alt_optional alt_;
    };

    class SUSTAIN_XSD_API pocType: public ::xml_schema::type
    {
      public:
      // pocType
      //
      typedef ::schemas::modelID::pocTypeType pocType1_type;
      typedef ::xsd::cxx::tree::traits< pocType1_type, char > pocType1_traits;

      const pocType1_type&
      pocType1 () const;

      pocType1_type&
      pocType1 ();

      void
      pocType1 (const pocType1_type& x);

      void
      pocType1 (::std::unique_ptr< pocType1_type > p);

      // pocName
      //
      typedef ::schemas::modelID::String pocName_type;
      typedef ::xsd::cxx::tree::optional< pocName_type > pocName_optional;
      typedef ::xsd::cxx::tree::traits< pocName_type, char > pocName_traits;

      const pocName_optional&
      pocName () const;

      pocName_optional&
      pocName ();

      void
      pocName (const pocName_type& x);

      void
      pocName (const pocName_optional& x);

      void
      pocName (::std::unique_ptr< pocName_type > p);

      // pocOrg
      //
      typedef ::schemas::modelID::String pocOrg_type;
      typedef ::xsd::cxx::tree::optional< pocOrg_type > pocOrg_optional;
      typedef ::xsd::cxx::tree::traits< pocOrg_type, char > pocOrg_traits;

      const pocOrg_optional&
      pocOrg () const;

      pocOrg_optional&
      pocOrg ();

      void
      pocOrg (const pocOrg_type& x);

      void
      pocOrg (const pocOrg_optional& x);

      void
      pocOrg (::std::unique_ptr< pocOrg_type > p);

      // pocTelephone
      //
      typedef ::schemas::modelID::String pocTelephone_type;
      typedef ::xsd::cxx::tree::sequence< pocTelephone_type > pocTelephone_sequence;
      typedef pocTelephone_sequence::iterator pocTelephone_iterator;
      typedef pocTelephone_sequence::const_iterator pocTelephone_const_iterator;
      typedef ::xsd::cxx::tree::traits< pocTelephone_type, char > pocTelephone_traits;

      const pocTelephone_sequence&
      pocTelephone () const;

      pocTelephone_sequence&
      pocTelephone ();

      void
      pocTelephone (const pocTelephone_sequence& s);

      // pocEmail
      //
      typedef ::schemas::modelID::String pocEmail_type;
      typedef ::xsd::cxx::tree::sequence< pocEmail_type > pocEmail_sequence;
      typedef pocEmail_sequence::iterator pocEmail_iterator;
      typedef pocEmail_sequence::const_iterator pocEmail_const_iterator;
      typedef ::xsd::cxx::tree::traits< pocEmail_type, char > pocEmail_traits;

      const pocEmail_sequence&
      pocEmail () const;

      pocEmail_sequence&
      pocEmail ();

      void
      pocEmail (const pocEmail_sequence& s);

      // Constructors.
      //
      pocType (const pocType1_type&);

      pocType (::std::unique_ptr< pocType1_type >);

      pocType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      pocType (const pocType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual pocType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      pocType&
      operator= (const pocType& x);

      virtual 
      ~pocType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< pocType1_type > pocType1_;
      pocName_optional pocName_;
      pocOrg_optional pocOrg_;
      pocTelephone_sequence pocTelephone_;
      pocEmail_sequence pocEmail_;
    };

    class SUSTAIN_XSD_API SecurityClassificationEnumeration: public ::xml_schema::string
    {
      public:
      enum value
      {
        Unclassified,
        Confidential,
        Secret,
        Top_Secret
      };

      SecurityClassificationEnumeration (value v);

      SecurityClassificationEnumeration (const char* v);

      SecurityClassificationEnumeration (const ::std::string& v);

      SecurityClassificationEnumeration (const ::xml_schema::string& v);

      SecurityClassificationEnumeration (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SecurityClassificationEnumeration (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SecurityClassificationEnumeration (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SecurityClassificationEnumeration (const SecurityClassificationEnumeration& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual SecurityClassificationEnumeration*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SecurityClassificationEnumeration&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SecurityClassificationEnumeration_convert ();
      }

      protected:
      value
      _xsd_SecurityClassificationEnumeration_convert () const;

      public:
      static const char* const _xsd_SecurityClassificationEnumeration_literals_[4];
      static const value _xsd_SecurityClassificationEnumeration_indexes_[4];
    };

    class SUSTAIN_XSD_API SecurityClassificationUnion: public ::xml_schema::string
    {
      public:

      SecurityClassificationUnion (const char* v);

      SecurityClassificationUnion (const ::std::string& v);

      SecurityClassificationUnion (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SecurityClassificationUnion (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SecurityClassificationUnion (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SecurityClassificationUnion (const SecurityClassificationUnion& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SecurityClassificationUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API modelType: public ::schemas::modelID::OMTypeUnion
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      modelType (const char*);

      modelType (const ::std::string&);

      modelType (const ::schemas::modelID::OMTypeUnion&);

      modelType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      modelType (const modelType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual modelType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      modelType&
      operator= (const modelType& x);

      virtual 
      ~modelType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API securityClassificationType: public ::schemas::modelID::SecurityClassificationUnion
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      securityClassificationType (const char*);

      securityClassificationType (const ::std::string&);

      securityClassificationType (const ::schemas::modelID::SecurityClassificationUnion&);

      securityClassificationType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      securityClassificationType (const securityClassificationType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual securityClassificationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      securityClassificationType&
      operator= (const securityClassificationType& x);

      virtual 
      ~securityClassificationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API ApplicationDomainEnumerations: public ::xml_schema::string
    {
      public:
      enum value
      {
        Analysis,
        Training,
        Test_and_Evaluation,
        Engineering,
        Acquisition
      };

      ApplicationDomainEnumerations (value v);

      ApplicationDomainEnumerations (const char* v);

      ApplicationDomainEnumerations (const ::std::string& v);

      ApplicationDomainEnumerations (const ::xml_schema::string& v);

      ApplicationDomainEnumerations (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ApplicationDomainEnumerations (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ApplicationDomainEnumerations (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ApplicationDomainEnumerations (const ApplicationDomainEnumerations& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ApplicationDomainEnumerations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ApplicationDomainEnumerations&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ApplicationDomainEnumerations_convert ();
      }

      protected:
      value
      _xsd_ApplicationDomainEnumerations_convert () const;

      public:
      static const char* const _xsd_ApplicationDomainEnumerations_literals_[5];
      static const value _xsd_ApplicationDomainEnumerations_indexes_[5];
    };

    class SUSTAIN_XSD_API ApplicationDomainUnion: public ::xml_schema::string
    {
      public:

      ApplicationDomainUnion (const char* v);

      ApplicationDomainUnion (const ::std::string& v);

      ApplicationDomainUnion (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ApplicationDomainUnion (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ApplicationDomainUnion (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ApplicationDomainUnion (const ApplicationDomainUnion& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ApplicationDomainUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API applicationDomainType: public ::schemas::modelID::ApplicationDomainUnion
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      applicationDomainType (const char*);

      applicationDomainType (const ::std::string&);

      applicationDomainType (const ::schemas::modelID::ApplicationDomainUnion&);

      applicationDomainType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      applicationDomainType (const applicationDomainType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual applicationDomainType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      applicationDomainType&
      operator= (const applicationDomainType& x);

      virtual 
      ~applicationDomainType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API POCTypeEnumeration: public ::xml_schema::string
    {
      public:
      enum value
      {
        Primary_author,
        Contributor,
        Proponent,
        Sponsor,
        Release_authority,
        Technical_POC
      };

      POCTypeEnumeration (value v);

      POCTypeEnumeration (const char* v);

      POCTypeEnumeration (const ::std::string& v);

      POCTypeEnumeration (const ::xml_schema::string& v);

      POCTypeEnumeration (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      POCTypeEnumeration (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      POCTypeEnumeration (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      POCTypeEnumeration (const POCTypeEnumeration& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual POCTypeEnumeration*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      POCTypeEnumeration&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_POCTypeEnumeration_convert ();
      }

      protected:
      value
      _xsd_POCTypeEnumeration_convert () const;

      public:
      static const char* const _xsd_POCTypeEnumeration_literals_[6];
      static const value _xsd_POCTypeEnumeration_indexes_[6];
    };

    class SUSTAIN_XSD_API POCTypeUnion: public ::xml_schema::string
    {
      public:

      POCTypeUnion (const char* v);

      POCTypeUnion (const ::std::string& v);

      POCTypeUnion (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      POCTypeUnion (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      POCTypeUnion (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      POCTypeUnion (const POCTypeUnion& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual POCTypeUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API pocTypeType: public ::schemas::modelID::POCTypeUnion
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      pocTypeType (const char*);

      pocTypeType (const ::std::string&);

      pocTypeType (const ::schemas::modelID::POCTypeUnion&);

      pocTypeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      pocTypeType (const pocTypeType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual pocTypeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      pocTypeType&
      operator= (const pocTypeType& x);

      virtual 
      ~pocTypeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API referenceTypeEnumerations: public ::xml_schema::string
    {
      public:
      enum value
      {
        Source_Material,
        Conceptual_Model,
        Related_BOM
      };

      referenceTypeEnumerations (value v);

      referenceTypeEnumerations (const char* v);

      referenceTypeEnumerations (const ::std::string& v);

      referenceTypeEnumerations (const ::xml_schema::string& v);

      referenceTypeEnumerations (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      referenceTypeEnumerations (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      referenceTypeEnumerations (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      referenceTypeEnumerations (const referenceTypeEnumerations& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual referenceTypeEnumerations*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      referenceTypeEnumerations&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_referenceTypeEnumerations_convert ();
      }

      protected:
      value
      _xsd_referenceTypeEnumerations_convert () const;

      public:
      static const char* const _xsd_referenceTypeEnumerations_literals_[3];
      static const value _xsd_referenceTypeEnumerations_indexes_[3];
    };

    class SUSTAIN_XSD_API referenceTypeUnion: public ::xml_schema::string
    {
      public:

      referenceTypeUnion (const char* v);

      referenceTypeUnion (const ::std::string& v);

      referenceTypeUnion (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      referenceTypeUnion (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      referenceTypeUnion (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      referenceTypeUnion (const referenceTypeUnion& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual referenceTypeUnion*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class SUSTAIN_XSD_API referenceType: public ::xml_schema::type
    {
      public:
      // type
      //
      typedef ::schemas::modelID::type type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::unique_ptr< type_type > p);

      // identification
      //
      typedef ::schemas::modelID::identification identification_type;
      typedef ::xsd::cxx::tree::traits< identification_type, char > identification_traits;

      const identification_type&
      identification () const;

      identification_type&
      identification ();

      void
      identification (const identification_type& x);

      void
      identification (::std::unique_ptr< identification_type > p);

      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      referenceType (const type_type&,
                     const identification_type&);

      referenceType (::std::unique_ptr< type_type >,
                     ::std::unique_ptr< identification_type >);

      referenceType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      referenceType (const referenceType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual referenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      referenceType&
      operator= (const referenceType& x);

      virtual 
      ~referenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< identification_type > identification_;
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API keywordType: public ::xml_schema::type
    {
      public:
      // taxonomy
      //
      typedef ::schemas::modelID::String taxonomy_type;
      typedef ::xsd::cxx::tree::optional< taxonomy_type > taxonomy_optional;
      typedef ::xsd::cxx::tree::traits< taxonomy_type, char > taxonomy_traits;

      const taxonomy_optional&
      taxonomy () const;

      taxonomy_optional&
      taxonomy ();

      void
      taxonomy (const taxonomy_type& x);

      void
      taxonomy (const taxonomy_optional& x);

      void
      taxonomy (::std::unique_ptr< taxonomy_type > p);

      // keywordValue
      //
      typedef ::schemas::modelID::NonEmptyString keywordValue_type;
      typedef ::xsd::cxx::tree::traits< keywordValue_type, char > keywordValue_traits;

      const keywordValue_type&
      keywordValue () const;

      keywordValue_type&
      keywordValue ();

      void
      keywordValue (const keywordValue_type& x);

      void
      keywordValue (::std::unique_ptr< keywordValue_type > p);

      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      keywordType (const keywordValue_type&);

      keywordType (::std::unique_ptr< keywordValue_type >);

      keywordType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      keywordType (const keywordType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual keywordType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      keywordType&
      operator= (const keywordType& x);

      virtual 
      ~keywordType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      taxonomy_optional taxonomy_;
      ::xsd::cxx::tree::one< keywordValue_type > keywordValue_;
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API modelIdentificationType: public ::xml_schema::type
    {
      public:
      // name
      //
      typedef ::schemas::modelID::IdentifierType name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::unique_ptr< name_type > p);

      // type
      //
      typedef ::schemas::modelID::modelType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::unique_ptr< type_type > p);

      // version
      //
      typedef ::schemas::modelID::NonEmptyString version_type;
      typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

      const version_type&
      version () const;

      version_type&
      version ();

      void
      version (const version_type& x);

      void
      version (::std::unique_ptr< version_type > p);

      // modificationDate
      //
      typedef ::schemas::modelID::modificationDate modificationDate_type;
      typedef ::xsd::cxx::tree::traits< modificationDate_type, char > modificationDate_traits;

      const modificationDate_type&
      modificationDate () const;

      modificationDate_type&
      modificationDate ();

      void
      modificationDate (const modificationDate_type& x);

      void
      modificationDate (::std::unique_ptr< modificationDate_type > p);

      // securityClassification
      //
      typedef ::schemas::modelID::securityClassificationType securityClassification_type;
      typedef ::xsd::cxx::tree::traits< securityClassification_type, char > securityClassification_traits;

      const securityClassification_type&
      securityClassification () const;

      securityClassification_type&
      securityClassification ();

      void
      securityClassification (const securityClassification_type& x);

      void
      securityClassification (::std::unique_ptr< securityClassification_type > p);

      // releaseRestriction
      //
      typedef ::schemas::modelID::String releaseRestriction_type;
      typedef ::xsd::cxx::tree::sequence< releaseRestriction_type > releaseRestriction_sequence;
      typedef releaseRestriction_sequence::iterator releaseRestriction_iterator;
      typedef releaseRestriction_sequence::const_iterator releaseRestriction_const_iterator;
      typedef ::xsd::cxx::tree::traits< releaseRestriction_type, char > releaseRestriction_traits;

      const releaseRestriction_sequence&
      releaseRestriction () const;

      releaseRestriction_sequence&
      releaseRestriction ();

      void
      releaseRestriction (const releaseRestriction_sequence& s);

      // purpose
      //
      typedef ::schemas::modelID::String purpose_type;
      typedef ::xsd::cxx::tree::optional< purpose_type > purpose_optional;
      typedef ::xsd::cxx::tree::traits< purpose_type, char > purpose_traits;

      const purpose_optional&
      purpose () const;

      purpose_optional&
      purpose ();

      void
      purpose (const purpose_type& x);

      void
      purpose (const purpose_optional& x);

      void
      purpose (::std::unique_ptr< purpose_type > p);

      // applicationDomain
      //
      typedef ::schemas::modelID::applicationDomainType applicationDomain_type;
      typedef ::xsd::cxx::tree::optional< applicationDomain_type > applicationDomain_optional;
      typedef ::xsd::cxx::tree::traits< applicationDomain_type, char > applicationDomain_traits;

      const applicationDomain_optional&
      applicationDomain () const;

      applicationDomain_optional&
      applicationDomain ();

      void
      applicationDomain (const applicationDomain_type& x);

      void
      applicationDomain (const applicationDomain_optional& x);

      void
      applicationDomain (::std::unique_ptr< applicationDomain_type > p);

      // description
      //
      typedef ::schemas::modelID::NonEmptyString description_type;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_type&
      description () const;

      description_type&
      description ();

      void
      description (const description_type& x);

      void
      description (::std::unique_ptr< description_type > p);

      // useLimitation
      //
      typedef ::schemas::modelID::String useLimitation_type;
      typedef ::xsd::cxx::tree::optional< useLimitation_type > useLimitation_optional;
      typedef ::xsd::cxx::tree::traits< useLimitation_type, char > useLimitation_traits;

      const useLimitation_optional&
      useLimitation () const;

      useLimitation_optional&
      useLimitation ();

      void
      useLimitation (const useLimitation_type& x);

      void
      useLimitation (const useLimitation_optional& x);

      void
      useLimitation (::std::unique_ptr< useLimitation_type > p);

      // useHistory
      //
      typedef ::schemas::modelID::String useHistory_type;
      typedef ::xsd::cxx::tree::sequence< useHistory_type > useHistory_sequence;
      typedef useHistory_sequence::iterator useHistory_iterator;
      typedef useHistory_sequence::const_iterator useHistory_const_iterator;
      typedef ::xsd::cxx::tree::traits< useHistory_type, char > useHistory_traits;

      const useHistory_sequence&
      useHistory () const;

      useHistory_sequence&
      useHistory ();

      void
      useHistory (const useHistory_sequence& s);

      // keyword
      //
      typedef ::schemas::modelID::keywordType keyword_type;
      typedef ::xsd::cxx::tree::sequence< keyword_type > keyword_sequence;
      typedef keyword_sequence::iterator keyword_iterator;
      typedef keyword_sequence::const_iterator keyword_const_iterator;
      typedef ::xsd::cxx::tree::traits< keyword_type, char > keyword_traits;

      const keyword_sequence&
      keyword () const;

      keyword_sequence&
      keyword ();

      void
      keyword (const keyword_sequence& s);

      // poc
      //
      typedef ::schemas::modelID::poc poc_type;
      typedef ::xsd::cxx::tree::sequence< poc_type > poc_sequence;
      typedef poc_sequence::iterator poc_iterator;
      typedef poc_sequence::const_iterator poc_const_iterator;
      typedef ::xsd::cxx::tree::traits< poc_type, char > poc_traits;

      const poc_sequence&
      poc () const;

      poc_sequence&
      poc ();

      void
      poc (const poc_sequence& s);

      // reference
      //
      typedef ::schemas::modelID::referenceType reference_type;
      typedef ::xsd::cxx::tree::sequence< reference_type > reference_sequence;
      typedef reference_sequence::iterator reference_iterator;
      typedef reference_sequence::const_iterator reference_const_iterator;
      typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

      const reference_sequence&
      reference () const;

      reference_sequence&
      reference ();

      void
      reference (const reference_sequence& s);

      // other
      //
      typedef ::schemas::modelID::String other_type;
      typedef ::xsd::cxx::tree::optional< other_type > other_optional;
      typedef ::xsd::cxx::tree::traits< other_type, char > other_traits;

      const other_optional&
      other () const;

      other_optional&
      other ();

      void
      other (const other_type& x);

      void
      other (const other_optional& x);

      void
      other (::std::unique_ptr< other_type > p);

      // glyph
      //
      typedef ::schemas::modelID::glyph glyph_type;
      typedef ::xsd::cxx::tree::optional< glyph_type > glyph_optional;
      typedef ::xsd::cxx::tree::traits< glyph_type, char > glyph_traits;

      const glyph_optional&
      glyph () const;

      glyph_optional&
      glyph ();

      void
      glyph (const glyph_type& x);

      void
      glyph (const glyph_optional& x);

      void
      glyph (::std::unique_ptr< glyph_type > p);

      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      modelIdentificationType (const name_type&,
                               const type_type&,
                               const version_type&,
                               const modificationDate_type&,
                               const securityClassification_type&,
                               const description_type&);

      modelIdentificationType (::std::unique_ptr< name_type >,
                               ::std::unique_ptr< type_type >,
                               ::std::unique_ptr< version_type >,
                               ::std::unique_ptr< modificationDate_type >,
                               ::std::unique_ptr< securityClassification_type >,
                               ::std::unique_ptr< description_type >);

      modelIdentificationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      modelIdentificationType (const modelIdentificationType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual modelIdentificationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      modelIdentificationType&
      operator= (const modelIdentificationType& x);

      virtual 
      ~modelIdentificationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< version_type > version_;
      ::xsd::cxx::tree::one< modificationDate_type > modificationDate_;
      ::xsd::cxx::tree::one< securityClassification_type > securityClassification_;
      releaseRestriction_sequence releaseRestriction_;
      purpose_optional purpose_;
      applicationDomain_optional applicationDomain_;
      ::xsd::cxx::tree::one< description_type > description_;
      useLimitation_optional useLimitation_;
      useHistory_sequence useHistory_;
      keyword_sequence keyword_;
      poc_sequence poc_;
      reference_sequence reference_;
      other_optional other_;
      glyph_optional glyph_;
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API type: public ::schemas::modelID::referenceTypeUnion
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      type (const char*);

      type (const ::std::string&);

      type (const ::schemas::modelID::referenceTypeUnion&);

      type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      type (const type& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      type&
      operator= (const type& x);

      virtual 
      ~type ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API identification: public ::xml_schema::uri
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      identification (const ::xml_schema::uri&);

      identification (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      identification (const identification& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual identification*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      identification&
      operator= (const identification& x);

      virtual 
      ~identification ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API modificationDate: public ::xml_schema::date
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      modificationDate (const ::xml_schema::date&);

      modificationDate (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      modificationDate (const modificationDate& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual modificationDate*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      modificationDate&
      operator= (const modificationDate& x);

      virtual 
      ~modificationDate ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API poc: public ::schemas::modelID::pocType
    {
      public:
      // notes
      //
      typedef ::xml_schema::idrefs notes_type;
      typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
      typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

      const notes_optional&
      notes () const;

      notes_optional&
      notes ();

      void
      notes (const notes_type& x);

      void
      notes (const notes_optional& x);

      void
      notes (::std::unique_ptr< notes_type > p);

      // idtag
      //
      typedef ::xml_schema::id idtag_type;
      typedef ::xsd::cxx::tree::optional< idtag_type > idtag_optional;
      typedef ::xsd::cxx::tree::traits< idtag_type, char > idtag_traits;

      const idtag_optional&
      idtag () const;

      idtag_optional&
      idtag ();

      void
      idtag (const idtag_type& x);

      void
      idtag (const idtag_optional& x);

      void
      idtag (::std::unique_ptr< idtag_type > p);

      // Constructors.
      //
      poc (const pocType1_type&);

      poc (::std::unique_ptr< pocType1_type >);

      poc (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      poc (const poc& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual poc*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      poc&
      operator= (const poc& x);

      virtual 
      ~poc ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      notes_optional notes_;
      idtag_optional idtag_;
    };

    class SUSTAIN_XSD_API glyph: public ::schemas::modelID::glyphType
    {
      public:
      // Constructors.
      //
      glyph (const type_type&);

      glyph (const ::xml_schema::base64_binary&,
             const type_type&);

      glyph (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      glyph (const glyph& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual glyph*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~glyph ();
    };
  }
}

#include <iosfwd>

namespace schemas
{
  namespace modelID
  {
    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const String&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const IdentifierType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const nonEmptyString&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const NonEmptyString&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, OMTypeEnumerations::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const OMTypeEnumerations&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const OMTypeUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, glyphTypeEnumerations::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const glyphTypeEnumerations&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const glyphTypeUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const glyphType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const pocType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, SecurityClassificationEnumeration::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const SecurityClassificationEnumeration&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const SecurityClassificationUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const modelType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const securityClassificationType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, ApplicationDomainEnumerations::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const ApplicationDomainEnumerations&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const ApplicationDomainUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const applicationDomainType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, POCTypeEnumeration::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const POCTypeEnumeration&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const POCTypeUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const pocTypeType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, referenceTypeEnumerations::value);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const referenceTypeEnumerations&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const referenceTypeUnion&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const referenceType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const keywordType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const modelIdentificationType&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const type&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const identification&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const modificationDate&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const poc&);

    SUSTAIN_XSD_API
    ::std::ostream&
    operator<< (::std::ostream&, const glyph&);
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schemas
{
  namespace modelID
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace schemas
{
  namespace modelID
  {
    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const String&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const IdentifierType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const nonEmptyString&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const nonEmptyString&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const nonEmptyString&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const NonEmptyString&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const OMTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const OMTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const OMTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const OMTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const OMTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const OMTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const glyphTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const glyphTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const glyphTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const glyphTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const glyphTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const glyphTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const glyphType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const pocType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const SecurityClassificationEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const SecurityClassificationEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const SecurityClassificationEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const SecurityClassificationUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const SecurityClassificationUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const SecurityClassificationUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const modelType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const securityClassificationType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const ApplicationDomainEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const ApplicationDomainEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const ApplicationDomainEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const ApplicationDomainUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const ApplicationDomainUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const ApplicationDomainUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const applicationDomainType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const POCTypeEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const POCTypeEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const POCTypeEnumeration&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const POCTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const POCTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const POCTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const pocTypeType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const referenceTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const referenceTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const referenceTypeEnumerations&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const referenceTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMAttr&, const referenceTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xml_schema::list_stream&,
                const referenceTypeUnion&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const referenceType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const keywordType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const modelIdentificationType&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const type&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const identification&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const modificationDate&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const poc&);

    SUSTAIN_XSD_API
    void
    operator<< (::xercesc::DOMElement&, const glyph&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VER_0_3_EXTERN_MODEL_ID_V2006_FINAL_HXX
