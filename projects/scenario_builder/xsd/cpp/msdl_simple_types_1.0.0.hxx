// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VER_0_3_MSDL_SIMPLE_TYPES_1_0_0_HXX
#define VER_0_3_MSDL_SIMPLE_TYPES_1_0_0_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace msdl_1
{
  class boolean;
  class floatCartesianValue9_3;
  class floatCompassDegrees3_3;
  class floatElevationAGL6_2;
  class floatLatitudeLongitude3_3;
  class floatSpacing4_3;
  class floatSpeed6_2;
  class floatUTMEasting9_2;
  class floatUTMNorthing9_2;
  class integerMGRSEasting5;
  class integerMGRSNorthing5;
  class integerMGRSPrecision1;
  class integerPriorityToSupport1;
  class integerQuantity9;
  class integerSequence6;
  class patternForceSymbolID15;
  class patternInstallationSymbolID15;
  class patternMETOCSymbolID15;
  class patternMGRSGridSquare2;
  class patternMOOTWSymbolID15;
  class patternTacticalGraphicSymbolID15;
  class patternTimeDTG20;
  class patternTimeDTGRelative20;
  class patternUTMGridZone3;
  class patternUUID32;
  class patternUUIDRef32;
  class text20;
  class text21;
  class textDatum8;
  class textEquipmentType24;
  class textIdentifier64;
  class textIFF5;
  class textName255;
  class textSpecialC2HQ9;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace msdl_1
{
  class boolean: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    boolean (const ::xml_schema::boolean&);

    boolean (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    boolean (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    boolean (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    boolean (const boolean& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual boolean*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~boolean ();
  };

  class floatCartesianValue9_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // Constructors.
    //
    floatCartesianValue9_3 (const ::xml_schema::double_&);

    floatCartesianValue9_3 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCartesianValue9_3 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCartesianValue9_3 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCartesianValue9_3 (const floatCartesianValue9_3& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual floatCartesianValue9_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatCartesianValue9_3 ();
  };

  class floatCompassDegrees3_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatCompassDegrees3_3 (const ::xml_schema::float_&);

    floatCompassDegrees3_3 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCompassDegrees3_3 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCompassDegrees3_3 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    floatCompassDegrees3_3 (const floatCompassDegrees3_3& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual floatCompassDegrees3_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatCompassDegrees3_3 ();
  };

  class floatElevationAGL6_2: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatElevationAGL6_2 (const ::xml_schema::float_&);

    floatElevationAGL6_2 (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    floatElevationAGL6_2 (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    floatElevationAGL6_2 (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    floatElevationAGL6_2 (const floatElevationAGL6_2& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual floatElevationAGL6_2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatElevationAGL6_2 ();
  };

  class floatLatitudeLongitude3_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatLatitudeLongitude3_3 (const ::xml_schema::float_&);

    floatLatitudeLongitude3_3 (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    floatLatitudeLongitude3_3 (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    floatLatitudeLongitude3_3 (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    floatLatitudeLongitude3_3 (const floatLatitudeLongitude3_3& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual floatLatitudeLongitude3_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatLatitudeLongitude3_3 ();
  };

  class floatSpacing4_3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatSpacing4_3 (const ::xml_schema::float_&);

    floatSpacing4_3 (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    floatSpacing4_3 (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    floatSpacing4_3 (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    floatSpacing4_3 (const floatSpacing4_3& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual floatSpacing4_3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatSpacing4_3 ();
  };

  class floatSpeed6_2: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatSpeed6_2 (const ::xml_schema::float_&);

    floatSpeed6_2 (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    floatSpeed6_2 (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    floatSpeed6_2 (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    floatSpeed6_2 (const floatSpeed6_2& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual floatSpeed6_2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatSpeed6_2 ();
  };

  class floatUTMEasting9_2: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatUTMEasting9_2 (const ::xml_schema::float_&);

    floatUTMEasting9_2 (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    floatUTMEasting9_2 (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    floatUTMEasting9_2 (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    floatUTMEasting9_2 (const floatUTMEasting9_2& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual floatUTMEasting9_2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatUTMEasting9_2 ();
  };

  class floatUTMNorthing9_2: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    floatUTMNorthing9_2 (const ::xml_schema::float_&);

    floatUTMNorthing9_2 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    floatUTMNorthing9_2 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    floatUTMNorthing9_2 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    floatUTMNorthing9_2 (const floatUTMNorthing9_2& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual floatUTMNorthing9_2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~floatUTMNorthing9_2 ();
  };

  class integerMGRSEasting5: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerMGRSEasting5 (const ::xml_schema::long_&);

    integerMGRSEasting5 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    integerMGRSEasting5 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    integerMGRSEasting5 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    integerMGRSEasting5 (const integerMGRSEasting5& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual integerMGRSEasting5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerMGRSEasting5 ();
  };

  class integerMGRSNorthing5: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerMGRSNorthing5 (const ::xml_schema::long_&);

    integerMGRSNorthing5 (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    integerMGRSNorthing5 (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    integerMGRSNorthing5 (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    integerMGRSNorthing5 (const integerMGRSNorthing5& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual integerMGRSNorthing5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerMGRSNorthing5 ();
  };

  class integerMGRSPrecision1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerMGRSPrecision1 (const ::xml_schema::int_&);

    integerMGRSPrecision1 (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    integerMGRSPrecision1 (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    integerMGRSPrecision1 (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    integerMGRSPrecision1 (const integerMGRSPrecision1& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual integerMGRSPrecision1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerMGRSPrecision1 ();
  };

  class integerPriorityToSupport1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerPriorityToSupport1 (const ::xml_schema::integer&);

    integerPriorityToSupport1 (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    integerPriorityToSupport1 (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    integerPriorityToSupport1 (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    integerPriorityToSupport1 (const integerPriorityToSupport1& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual integerPriorityToSupport1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerPriorityToSupport1 ();
  };

  class integerQuantity9: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerQuantity9 (const ::xml_schema::int_&);

    integerQuantity9 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerQuantity9 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerQuantity9 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerQuantity9 (const integerQuantity9& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual integerQuantity9*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerQuantity9 ();
  };

  class integerSequence6: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    integerSequence6 (const ::xml_schema::integer&);

    integerSequence6 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerSequence6 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerSequence6 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    integerSequence6 (const integerSequence6& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual integerSequence6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~integerSequence6 ();
  };

  class patternForceSymbolID15: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternForceSymbolID15 ();

    patternForceSymbolID15 (const char*);

    patternForceSymbolID15 (const ::std::string&);

    patternForceSymbolID15 (const ::xml_schema::string&);

    patternForceSymbolID15 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternForceSymbolID15 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternForceSymbolID15 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternForceSymbolID15 (const patternForceSymbolID15& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual patternForceSymbolID15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternForceSymbolID15 ();
  };

  class patternInstallationSymbolID15: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternInstallationSymbolID15 ();

    patternInstallationSymbolID15 (const char*);

    patternInstallationSymbolID15 (const ::std::string&);

    patternInstallationSymbolID15 (const ::xml_schema::string&);

    patternInstallationSymbolID15 (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    patternInstallationSymbolID15 (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    patternInstallationSymbolID15 (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    patternInstallationSymbolID15 (const patternInstallationSymbolID15& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual patternInstallationSymbolID15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternInstallationSymbolID15 ();
  };

  class patternMETOCSymbolID15: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternMETOCSymbolID15 ();

    patternMETOCSymbolID15 (const char*);

    patternMETOCSymbolID15 (const ::std::string&);

    patternMETOCSymbolID15 (const ::xml_schema::string&);

    patternMETOCSymbolID15 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMETOCSymbolID15 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMETOCSymbolID15 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMETOCSymbolID15 (const patternMETOCSymbolID15& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual patternMETOCSymbolID15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternMETOCSymbolID15 ();
  };

  class patternMGRSGridSquare2: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternMGRSGridSquare2 ();

    patternMGRSGridSquare2 (const char*);

    patternMGRSGridSquare2 (const ::std::string&);

    patternMGRSGridSquare2 (const ::xml_schema::string&);

    patternMGRSGridSquare2 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMGRSGridSquare2 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMGRSGridSquare2 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMGRSGridSquare2 (const patternMGRSGridSquare2& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual patternMGRSGridSquare2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternMGRSGridSquare2 ();
  };

  class patternMOOTWSymbolID15: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternMOOTWSymbolID15 ();

    patternMOOTWSymbolID15 (const char*);

    patternMOOTWSymbolID15 (const ::std::string&);

    patternMOOTWSymbolID15 (const ::xml_schema::string&);

    patternMOOTWSymbolID15 (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMOOTWSymbolID15 (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMOOTWSymbolID15 (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    patternMOOTWSymbolID15 (const patternMOOTWSymbolID15& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual patternMOOTWSymbolID15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternMOOTWSymbolID15 ();
  };

  class patternTacticalGraphicSymbolID15: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternTacticalGraphicSymbolID15 ();

    patternTacticalGraphicSymbolID15 (const char*);

    patternTacticalGraphicSymbolID15 (const ::std::string&);

    patternTacticalGraphicSymbolID15 (const ::xml_schema::string&);

    patternTacticalGraphicSymbolID15 (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    patternTacticalGraphicSymbolID15 (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    patternTacticalGraphicSymbolID15 (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    patternTacticalGraphicSymbolID15 (const patternTacticalGraphicSymbolID15& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual patternTacticalGraphicSymbolID15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternTacticalGraphicSymbolID15 ();
  };

  class patternTimeDTG20: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternTimeDTG20 ();

    patternTimeDTG20 (const char*);

    patternTimeDTG20 (const ::std::string&);

    patternTimeDTG20 (const ::xml_schema::string&);

    patternTimeDTG20 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternTimeDTG20 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternTimeDTG20 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternTimeDTG20 (const patternTimeDTG20& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual patternTimeDTG20*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternTimeDTG20 ();
  };

  class patternTimeDTGRelative20: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternTimeDTGRelative20 ();

    patternTimeDTGRelative20 (const char*);

    patternTimeDTGRelative20 (const ::std::string&);

    patternTimeDTGRelative20 (const ::xml_schema::string&);

    patternTimeDTGRelative20 (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    patternTimeDTGRelative20 (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    patternTimeDTGRelative20 (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    patternTimeDTGRelative20 (const patternTimeDTGRelative20& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual patternTimeDTGRelative20*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternTimeDTGRelative20 ();
  };

  class patternUTMGridZone3: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternUTMGridZone3 ();

    patternUTMGridZone3 (const char*);

    patternUTMGridZone3 (const ::std::string&);

    patternUTMGridZone3 (const ::xml_schema::string&);

    patternUTMGridZone3 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    patternUTMGridZone3 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    patternUTMGridZone3 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    patternUTMGridZone3 (const patternUTMGridZone3& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual patternUTMGridZone3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternUTMGridZone3 ();
  };

  class patternUUID32: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternUUID32 ();

    patternUUID32 (const char*);

    patternUUID32 (const ::std::string&);

    patternUUID32 (const ::xml_schema::string&);

    patternUUID32 (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patternUUID32 (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patternUUID32 (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patternUUID32 (const patternUUID32& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual patternUUID32*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternUUID32 ();
  };

  class patternUUIDRef32: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patternUUIDRef32 ();

    patternUUIDRef32 (const char*);

    patternUUIDRef32 (const ::std::string&);

    patternUUIDRef32 (const ::xml_schema::string&);

    patternUUIDRef32 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternUUIDRef32 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternUUIDRef32 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    patternUUIDRef32 (const patternUUIDRef32& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual patternUUIDRef32*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patternUUIDRef32 ();
  };

  class text20: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    text20 ();

    text20 (const char*);

    text20 (const ::std::string&);

    text20 (const ::xml_schema::string&);

    text20 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text20 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text20 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text20 (const text20& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual text20*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~text20 ();
  };

  class text21: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    text21 ();

    text21 (const char*);

    text21 (const ::std::string&);

    text21 (const ::xml_schema::string&);

    text21 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text21 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text21 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    text21 (const text21& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual text21*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~text21 ();
  };

  class textDatum8: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textDatum8 ();

    textDatum8 (const char*);

    textDatum8 (const ::std::string&);

    textDatum8 (const ::xml_schema::string&);

    textDatum8 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    textDatum8 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    textDatum8 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    textDatum8 (const textDatum8& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual textDatum8*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textDatum8 ();
  };

  class textEquipmentType24: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textEquipmentType24 ();

    textEquipmentType24 (const char*);

    textEquipmentType24 (const ::std::string&);

    textEquipmentType24 (const ::xml_schema::string&);

    textEquipmentType24 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    textEquipmentType24 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    textEquipmentType24 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    textEquipmentType24 (const textEquipmentType24& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual textEquipmentType24*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textEquipmentType24 ();
  };

  class textIdentifier64: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textIdentifier64 ();

    textIdentifier64 (const char*);

    textIdentifier64 (const ::std::string&);

    textIdentifier64 (const ::xml_schema::string&);

    textIdentifier64 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textIdentifier64 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textIdentifier64 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textIdentifier64 (const textIdentifier64& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual textIdentifier64*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textIdentifier64 ();
  };

  class textIFF5: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textIFF5 ();

    textIFF5 (const char*);

    textIFF5 (const ::std::string&);

    textIFF5 (const ::xml_schema::string&);

    textIFF5 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    textIFF5 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    textIFF5 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    textIFF5 (const textIFF5& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual textIFF5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textIFF5 ();
  };

  class textName255: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textName255 ();

    textName255 (const char*);

    textName255 (const ::std::string&);

    textName255 (const ::xml_schema::string&);

    textName255 (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    textName255 (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    textName255 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    textName255 (const textName255& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual textName255*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textName255 ();
  };

  class textSpecialC2HQ9: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    textSpecialC2HQ9 ();

    textSpecialC2HQ9 (const char*);

    textSpecialC2HQ9 (const ::std::string&);

    textSpecialC2HQ9 (const ::xml_schema::string&);

    textSpecialC2HQ9 (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textSpecialC2HQ9 (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textSpecialC2HQ9 (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    textSpecialC2HQ9 (const textSpecialC2HQ9& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual textSpecialC2HQ9*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textSpecialC2HQ9 ();
  };
}

#include <iosfwd>

namespace msdl_1
{
  ::std::ostream&
  operator<< (::std::ostream&, const boolean&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatCartesianValue9_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatCompassDegrees3_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatElevationAGL6_2&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatLatitudeLongitude3_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatSpacing4_3&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatSpeed6_2&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatUTMEasting9_2&);

  ::std::ostream&
  operator<< (::std::ostream&, const floatUTMNorthing9_2&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerMGRSEasting5&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerMGRSNorthing5&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerMGRSPrecision1&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerPriorityToSupport1&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerQuantity9&);

  ::std::ostream&
  operator<< (::std::ostream&, const integerSequence6&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternForceSymbolID15&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternInstallationSymbolID15&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternMETOCSymbolID15&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternMGRSGridSquare2&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternMOOTWSymbolID15&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternTacticalGraphicSymbolID15&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternTimeDTG20&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternTimeDTGRelative20&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternUTMGridZone3&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternUUID32&);

  ::std::ostream&
  operator<< (::std::ostream&, const patternUUIDRef32&);

  ::std::ostream&
  operator<< (::std::ostream&, const text20&);

  ::std::ostream&
  operator<< (::std::ostream&, const text21&);

  ::std::ostream&
  operator<< (::std::ostream&, const textDatum8&);

  ::std::ostream&
  operator<< (::std::ostream&, const textEquipmentType24&);

  ::std::ostream&
  operator<< (::std::ostream&, const textIdentifier64&);

  ::std::ostream&
  operator<< (::std::ostream&, const textIFF5&);

  ::std::ostream&
  operator<< (::std::ostream&, const textName255&);

  ::std::ostream&
  operator<< (::std::ostream&, const textSpecialC2HQ9&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace msdl_1
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace msdl_1
{
  void
  operator<< (::xercesc::DOMElement&, const boolean&);

  void
  operator<< (::xercesc::DOMAttr&, const boolean&);

  void
  operator<< (::xml_schema::list_stream&,
              const boolean&);

  void
  operator<< (::xercesc::DOMElement&, const floatCartesianValue9_3&);

  void
  operator<< (::xercesc::DOMAttr&, const floatCartesianValue9_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatCartesianValue9_3&);

  void
  operator<< (::xercesc::DOMElement&, const floatCompassDegrees3_3&);

  void
  operator<< (::xercesc::DOMAttr&, const floatCompassDegrees3_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatCompassDegrees3_3&);

  void
  operator<< (::xercesc::DOMElement&, const floatElevationAGL6_2&);

  void
  operator<< (::xercesc::DOMAttr&, const floatElevationAGL6_2&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatElevationAGL6_2&);

  void
  operator<< (::xercesc::DOMElement&, const floatLatitudeLongitude3_3&);

  void
  operator<< (::xercesc::DOMAttr&, const floatLatitudeLongitude3_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatLatitudeLongitude3_3&);

  void
  operator<< (::xercesc::DOMElement&, const floatSpacing4_3&);

  void
  operator<< (::xercesc::DOMAttr&, const floatSpacing4_3&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatSpacing4_3&);

  void
  operator<< (::xercesc::DOMElement&, const floatSpeed6_2&);

  void
  operator<< (::xercesc::DOMAttr&, const floatSpeed6_2&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatSpeed6_2&);

  void
  operator<< (::xercesc::DOMElement&, const floatUTMEasting9_2&);

  void
  operator<< (::xercesc::DOMAttr&, const floatUTMEasting9_2&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatUTMEasting9_2&);

  void
  operator<< (::xercesc::DOMElement&, const floatUTMNorthing9_2&);

  void
  operator<< (::xercesc::DOMAttr&, const floatUTMNorthing9_2&);

  void
  operator<< (::xml_schema::list_stream&,
              const floatUTMNorthing9_2&);

  void
  operator<< (::xercesc::DOMElement&, const integerMGRSEasting5&);

  void
  operator<< (::xercesc::DOMAttr&, const integerMGRSEasting5&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerMGRSEasting5&);

  void
  operator<< (::xercesc::DOMElement&, const integerMGRSNorthing5&);

  void
  operator<< (::xercesc::DOMAttr&, const integerMGRSNorthing5&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerMGRSNorthing5&);

  void
  operator<< (::xercesc::DOMElement&, const integerMGRSPrecision1&);

  void
  operator<< (::xercesc::DOMAttr&, const integerMGRSPrecision1&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerMGRSPrecision1&);

  void
  operator<< (::xercesc::DOMElement&, const integerPriorityToSupport1&);

  void
  operator<< (::xercesc::DOMAttr&, const integerPriorityToSupport1&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerPriorityToSupport1&);

  void
  operator<< (::xercesc::DOMElement&, const integerQuantity9&);

  void
  operator<< (::xercesc::DOMAttr&, const integerQuantity9&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerQuantity9&);

  void
  operator<< (::xercesc::DOMElement&, const integerSequence6&);

  void
  operator<< (::xercesc::DOMAttr&, const integerSequence6&);

  void
  operator<< (::xml_schema::list_stream&,
              const integerSequence6&);

  void
  operator<< (::xercesc::DOMElement&, const patternForceSymbolID15&);

  void
  operator<< (::xercesc::DOMAttr&, const patternForceSymbolID15&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternForceSymbolID15&);

  void
  operator<< (::xercesc::DOMElement&, const patternInstallationSymbolID15&);

  void
  operator<< (::xercesc::DOMAttr&, const patternInstallationSymbolID15&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternInstallationSymbolID15&);

  void
  operator<< (::xercesc::DOMElement&, const patternMETOCSymbolID15&);

  void
  operator<< (::xercesc::DOMAttr&, const patternMETOCSymbolID15&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternMETOCSymbolID15&);

  void
  operator<< (::xercesc::DOMElement&, const patternMGRSGridSquare2&);

  void
  operator<< (::xercesc::DOMAttr&, const patternMGRSGridSquare2&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternMGRSGridSquare2&);

  void
  operator<< (::xercesc::DOMElement&, const patternMOOTWSymbolID15&);

  void
  operator<< (::xercesc::DOMAttr&, const patternMOOTWSymbolID15&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternMOOTWSymbolID15&);

  void
  operator<< (::xercesc::DOMElement&, const patternTacticalGraphicSymbolID15&);

  void
  operator<< (::xercesc::DOMAttr&, const patternTacticalGraphicSymbolID15&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternTacticalGraphicSymbolID15&);

  void
  operator<< (::xercesc::DOMElement&, const patternTimeDTG20&);

  void
  operator<< (::xercesc::DOMAttr&, const patternTimeDTG20&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternTimeDTG20&);

  void
  operator<< (::xercesc::DOMElement&, const patternTimeDTGRelative20&);

  void
  operator<< (::xercesc::DOMAttr&, const patternTimeDTGRelative20&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternTimeDTGRelative20&);

  void
  operator<< (::xercesc::DOMElement&, const patternUTMGridZone3&);

  void
  operator<< (::xercesc::DOMAttr&, const patternUTMGridZone3&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternUTMGridZone3&);

  void
  operator<< (::xercesc::DOMElement&, const patternUUID32&);

  void
  operator<< (::xercesc::DOMAttr&, const patternUUID32&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternUUID32&);

  void
  operator<< (::xercesc::DOMElement&, const patternUUIDRef32&);

  void
  operator<< (::xercesc::DOMAttr&, const patternUUIDRef32&);

  void
  operator<< (::xml_schema::list_stream&,
              const patternUUIDRef32&);

  void
  operator<< (::xercesc::DOMElement&, const text20&);

  void
  operator<< (::xercesc::DOMAttr&, const text20&);

  void
  operator<< (::xml_schema::list_stream&,
              const text20&);

  void
  operator<< (::xercesc::DOMElement&, const text21&);

  void
  operator<< (::xercesc::DOMAttr&, const text21&);

  void
  operator<< (::xml_schema::list_stream&,
              const text21&);

  void
  operator<< (::xercesc::DOMElement&, const textDatum8&);

  void
  operator<< (::xercesc::DOMAttr&, const textDatum8&);

  void
  operator<< (::xml_schema::list_stream&,
              const textDatum8&);

  void
  operator<< (::xercesc::DOMElement&, const textEquipmentType24&);

  void
  operator<< (::xercesc::DOMAttr&, const textEquipmentType24&);

  void
  operator<< (::xml_schema::list_stream&,
              const textEquipmentType24&);

  void
  operator<< (::xercesc::DOMElement&, const textIdentifier64&);

  void
  operator<< (::xercesc::DOMAttr&, const textIdentifier64&);

  void
  operator<< (::xml_schema::list_stream&,
              const textIdentifier64&);

  void
  operator<< (::xercesc::DOMElement&, const textIFF5&);

  void
  operator<< (::xercesc::DOMAttr&, const textIFF5&);

  void
  operator<< (::xml_schema::list_stream&,
              const textIFF5&);

  void
  operator<< (::xercesc::DOMElement&, const textName255&);

  void
  operator<< (::xercesc::DOMAttr&, const textName255&);

  void
  operator<< (::xml_schema::list_stream&,
              const textName255&);

  void
  operator<< (::xercesc::DOMElement&, const textSpecialC2HQ9&);

  void
  operator<< (::xercesc::DOMAttr&, const textSpecialC2HQ9&);

  void
  operator<< (::xml_schema::list_stream&,
              const textSpecialC2HQ9&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VER_0_3_MSDL_SIMPLE_TYPES_1_0_0_HXX
