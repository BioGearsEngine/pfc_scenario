// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "MsdlCodes_1.0.0.hxx"

namespace msdl_1
{
  // enumAnchorPointType
  // 

  enumAnchorPointType::
  enumAnchorPointType (value v)
  : ::xml_schema::string (_xsd_enumAnchorPointType_literals_[v])
  {
  }

  enumAnchorPointType::
  enumAnchorPointType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumAnchorPointType::
  enumAnchorPointType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumAnchorPointType::
  enumAnchorPointType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumAnchorPointType::
  enumAnchorPointType (const enumAnchorPointType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumAnchorPointType& enumAnchorPointType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumAnchorPointType_literals_[v]);

    return *this;
  }


  // enumAirFormationType
  // 

  enumAirFormationType::
  enumAirFormationType (value v)
  : ::xml_schema::string (_xsd_enumAirFormationType_literals_[v])
  {
  }

  enumAirFormationType::
  enumAirFormationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumAirFormationType::
  enumAirFormationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumAirFormationType::
  enumAirFormationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumAirFormationType::
  enumAirFormationType (const enumAirFormationType& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumAirFormationType& enumAirFormationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumAirFormationType_literals_[v]);

    return *this;
  }


  // enumBaseAffiliation
  // 

  enumBaseAffiliation::
  enumBaseAffiliation (value v)
  : ::xml_schema::string (_xsd_enumBaseAffiliation_literals_[v])
  {
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const enumBaseAffiliation& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumBaseAffiliation& enumBaseAffiliation::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumBaseAffiliation_literals_[v]);

    return *this;
  }


  // enumCombatEffectivenessType
  // 

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (value v)
  : ::xml_schema::string (_xsd_enumCombatEffectivenessType_literals_[v])
  {
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const enumCombatEffectivenessType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumCombatEffectivenessType& enumCombatEffectivenessType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumCombatEffectivenessType_literals_[v]);

    return *this;
  }


  // enumCommandRelationshipType
  // 

  enumCommandRelationshipType::
  enumCommandRelationshipType (value v)
  : ::xml_schema::string (_xsd_enumCommandRelationshipType_literals_[v])
  {
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const enumCommandRelationshipType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumCommandRelationshipType& enumCommandRelationshipType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumCommandRelationshipType_literals_[v]);

    return *this;
  }


  // enumCommunicationNetType
  // 

  enumCommunicationNetType::
  enumCommunicationNetType (value v)
  : ::xml_schema::string (_xsd_enumCommunicationNetType_literals_[v])
  {
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const enumCommunicationNetType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumCommunicationNetType& enumCommunicationNetType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumCommunicationNetType_literals_[v]);

    return *this;
  }


  // enumCommunicationServiceType
  // 

  enumCommunicationServiceType::
  enumCommunicationServiceType (value v)
  : ::xml_schema::string (_xsd_enumCommunicationServiceType_literals_[v])
  {
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const enumCommunicationServiceType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumCommunicationServiceType& enumCommunicationServiceType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumCommunicationServiceType_literals_[v]);

    return *this;
  }


  // enumCoordinateSystemType
  // 

  enumCoordinateSystemType::
  enumCoordinateSystemType (value v)
  : ::xml_schema::string (_xsd_enumCoordinateSystemType_literals_[v])
  {
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const enumCoordinateSystemType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumCoordinateSystemType& enumCoordinateSystemType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumCoordinateSystemType_literals_[v]);

    return *this;
  }


  // enumEchelon
  // 

  enumEchelon::
  enumEchelon (value v)
  : ::xml_schema::string (_xsd_enumEchelon_literals_[v])
  {
  }

  enumEchelon::
  enumEchelon (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumEchelon::
  enumEchelon (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumEchelon::
  enumEchelon (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumEchelon::
  enumEchelon (const enumEchelon& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumEchelon& enumEchelon::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumEchelon_literals_[v]);

    return *this;
  }


  // enumForceOwnerType
  // 

  enumForceOwnerType::
  enumForceOwnerType (value v)
  : ::xml_schema::string (_xsd_enumForceOwnerType_literals_[v])
  {
  }

  enumForceOwnerType::
  enumForceOwnerType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumForceOwnerType::
  enumForceOwnerType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumForceOwnerType::
  enumForceOwnerType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumForceOwnerType::
  enumForceOwnerType (const enumForceOwnerType& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumForceOwnerType& enumForceOwnerType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumForceOwnerType_literals_[v]);

    return *this;
  }


  // enumFormationLocationType
  // 

  enumFormationLocationType::
  enumFormationLocationType (value v)
  : ::xml_schema::string (_xsd_enumFormationLocationType_literals_[v])
  {
  }

  enumFormationLocationType::
  enumFormationLocationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationLocationType::
  enumFormationLocationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationLocationType::
  enumFormationLocationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationLocationType::
  enumFormationLocationType (const enumFormationLocationType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumFormationLocationType& enumFormationLocationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumFormationLocationType_literals_[v]);

    return *this;
  }


  // enumFormationType
  // 

  enumFormationType::
  enumFormationType (value v)
  : ::xml_schema::string (_xsd_enumFormationType_literals_[v])
  {
  }

  enumFormationType::
  enumFormationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationType::
  enumFormationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationType::
  enumFormationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFormationType::
  enumFormationType (const enumFormationType& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumFormationType& enumFormationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumFormationType_literals_[v]);

    return *this;
  }


  // enumGroundFormationType
  // 

  enumGroundFormationType::
  enumGroundFormationType (value v)
  : ::xml_schema::string (_xsd_enumGroundFormationType_literals_[v])
  {
  }

  enumGroundFormationType::
  enumGroundFormationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumGroundFormationType::
  enumGroundFormationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumGroundFormationType::
  enumGroundFormationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumGroundFormationType::
  enumGroundFormationType (const enumGroundFormationType& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumGroundFormationType& enumGroundFormationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumGroundFormationType_literals_[v]);

    return *this;
  }


  // enumModelResolutionType
  // 

  enumModelResolutionType::
  enumModelResolutionType (value v)
  : ::xml_schema::string (_xsd_enumModelResolutionType_literals_[v])
  {
  }

  enumModelResolutionType::
  enumModelResolutionType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumModelResolutionType::
  enumModelResolutionType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumModelResolutionType::
  enumModelResolutionType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumModelResolutionType::
  enumModelResolutionType (const enumModelResolutionType& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumModelResolutionType& enumModelResolutionType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumModelResolutionType_literals_[v]);

    return *this;
  }


  // enumMOPPLevelType
  // 

  enumMOPPLevelType::
  enumMOPPLevelType (value v)
  : ::xml_schema::string (_xsd_enumMOPPLevelType_literals_[v])
  {
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const enumMOPPLevelType& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumMOPPLevelType& enumMOPPLevelType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumMOPPLevelType_literals_[v]);

    return *this;
  }


  // enumOrientationType
  // 

  enumOrientationType::
  enumOrientationType (value v)
  : ::xml_schema::string (_xsd_enumOrientationType_literals_[v])
  {
  }

  enumOrientationType::
  enumOrientationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumOrientationType::
  enumOrientationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumOrientationType::
  enumOrientationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumOrientationType::
  enumOrientationType (const enumOrientationType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumOrientationType& enumOrientationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumOrientationType_literals_[v]);

    return *this;
  }


  // enumOverlayType
  // 

  enumOverlayType::
  enumOverlayType (value v)
  : ::xml_schema::string (_xsd_enumOverlayType_literals_[v])
  {
  }

  enumOverlayType::
  enumOverlayType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumOverlayType::
  enumOverlayType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumOverlayType::
  enumOverlayType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumOverlayType::
  enumOverlayType (const enumOverlayType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumOverlayType& enumOverlayType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumOverlayType_literals_[v]);

    return *this;
  }


  // enumReinforcedReducedType
  // 

  enumReinforcedReducedType::
  enumReinforcedReducedType (value v)
  : ::xml_schema::string (_xsd_enumReinforcedReducedType_literals_[v])
  {
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const enumReinforcedReducedType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumReinforcedReducedType& enumReinforcedReducedType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumReinforcedReducedType_literals_[v]);

    return *this;
  }


  // enumSubsurfaceFormationType
  // 

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (value v)
  : ::xml_schema::string (_xsd_enumSubsurfaceFormationType_literals_[v])
  {
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const enumSubsurfaceFormationType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSubsurfaceFormationType& enumSubsurfaceFormationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSubsurfaceFormationType_literals_[v]);

    return *this;
  }


  // enumSupportRelationType
  // 

  enumSupportRelationType::
  enumSupportRelationType (value v)
  : ::xml_schema::string (_xsd_enumSupportRelationType_literals_[v])
  {
  }

  enumSupportRelationType::
  enumSupportRelationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRelationType::
  enumSupportRelationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRelationType::
  enumSupportRelationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRelationType::
  enumSupportRelationType (const enumSupportRelationType& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSupportRelationType& enumSupportRelationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSupportRelationType_literals_[v]);

    return *this;
  }


  // enumSupportRoleType
  // 

  enumSupportRoleType::
  enumSupportRoleType (value v)
  : ::xml_schema::string (_xsd_enumSupportRoleType_literals_[v])
  {
  }

  enumSupportRoleType::
  enumSupportRoleType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRoleType::
  enumSupportRoleType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRoleType::
  enumSupportRoleType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSupportRoleType::
  enumSupportRoleType (const enumSupportRoleType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSupportRoleType& enumSupportRoleType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSupportRoleType_literals_[v]);

    return *this;
  }


  // enumSurfaceFormationType
  // 

  enumSurfaceFormationType::
  enumSurfaceFormationType (value v)
  : ::xml_schema::string (_xsd_enumSurfaceFormationType_literals_[v])
  {
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const enumSurfaceFormationType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSurfaceFormationType& enumSurfaceFormationType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSurfaceFormationType_literals_[v]);

    return *this;
  }


  // enumSymbolClassType
  // 

  enumSymbolClassType::
  enumSymbolClassType (value v)
  : ::xml_schema::string (_xsd_enumSymbolClassType_literals_[v])
  {
  }

  enumSymbolClassType::
  enumSymbolClassType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbolClassType::
  enumSymbolClassType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbolClassType::
  enumSymbolClassType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbolClassType::
  enumSymbolClassType (const enumSymbolClassType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSymbolClassType& enumSymbolClassType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSymbolClassType_literals_[v]);

    return *this;
  }


  // enumSymbologyStandardType
  // 

  enumSymbologyStandardType::
  enumSymbologyStandardType (value v)
  : ::xml_schema::string (_xsd_enumSymbologyStandardType_literals_[v])
  {
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const enumSymbologyStandardType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumSymbologyStandardType& enumSymbologyStandardType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumSymbologyStandardType_literals_[v]);

    return *this;
  }


  // enumFrameShapeModifierType
  // 

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (value v)
  : ::xml_schema::string (_xsd_enumFrameShapeModifierType_literals_[v])
  {
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const enumFrameShapeModifierType& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumFrameShapeModifierType& enumFrameShapeModifierType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumFrameShapeModifierType_literals_[v]);

    return *this;
  }


  // enumWeaponControlStatusType
  // 

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (value v)
  : ::xml_schema::string (_xsd_enumWeaponControlStatusType_literals_[v])
  {
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const char* v)
  : ::xml_schema::string (v)
  {
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const enumWeaponControlStatusType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  enumWeaponControlStatusType& enumWeaponControlStatusType::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_enumWeaponControlStatusType_literals_[v]);

    return *this;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace msdl_1
{
  // enumAnchorPointType
  //

  enumAnchorPointType::
  enumAnchorPointType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumAnchorPointType_convert ();
  }

  enumAnchorPointType::
  enumAnchorPointType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumAnchorPointType_convert ();
  }

  enumAnchorPointType::
  enumAnchorPointType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumAnchorPointType_convert ();
  }

  enumAnchorPointType* enumAnchorPointType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumAnchorPointType (*this, f, c);
  }

  enumAnchorPointType::value enumAnchorPointType::
  _xsd_enumAnchorPointType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumAnchorPointType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumAnchorPointType_indexes_,
                      _xsd_enumAnchorPointType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_enumAnchorPointType_indexes_ + 2 || _xsd_enumAnchorPointType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumAnchorPointType::
  _xsd_enumAnchorPointType_literals_[2] =
  {
    "COORDINATE",
    "POINT_TACTICAL_GRAPHIC"
  };

  const enumAnchorPointType::value enumAnchorPointType::
  _xsd_enumAnchorPointType_indexes_[2] =
  {
    ::msdl_1::enumAnchorPointType::COORDINATE,
    ::msdl_1::enumAnchorPointType::POINT_TACTICAL_GRAPHIC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumAnchorPointType >
  _xsd_enumAnchorPointType_type_factory_init (
    "enumAnchorPointType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumAirFormationType
  //

  enumAirFormationType::
  enumAirFormationType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumAirFormationType_convert ();
  }

  enumAirFormationType::
  enumAirFormationType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumAirFormationType_convert ();
  }

  enumAirFormationType::
  enumAirFormationType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumAirFormationType_convert ();
  }

  enumAirFormationType* enumAirFormationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumAirFormationType (*this, f, c);
  }

  enumAirFormationType::value enumAirFormationType::
  _xsd_enumAirFormationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumAirFormationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumAirFormationType_indexes_,
                      _xsd_enumAirFormationType_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_enumAirFormationType_indexes_ + 1 || _xsd_enumAirFormationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumAirFormationType::
  _xsd_enumAirFormationType_literals_[1] =
  {
    "NOT_SPECIFIED"
  };

  const enumAirFormationType::value enumAirFormationType::
  _xsd_enumAirFormationType_indexes_[1] =
  {
    ::msdl_1::enumAirFormationType::NOT_SPECIFIED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumAirFormationType >
  _xsd_enumAirFormationType_type_factory_init (
    "enumAirFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumBaseAffiliation
  //

  enumBaseAffiliation::
  enumBaseAffiliation (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumBaseAffiliation_convert ();
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumBaseAffiliation_convert ();
  }

  enumBaseAffiliation::
  enumBaseAffiliation (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumBaseAffiliation_convert ();
  }

  enumBaseAffiliation* enumBaseAffiliation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumBaseAffiliation (*this, f, c);
  }

  enumBaseAffiliation::value enumBaseAffiliation::
  _xsd_enumBaseAffiliation_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumBaseAffiliation_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumBaseAffiliation_indexes_,
                      _xsd_enumBaseAffiliation_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_enumBaseAffiliation_indexes_ + 4 || _xsd_enumBaseAffiliation_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumBaseAffiliation::
  _xsd_enumBaseAffiliation_literals_[4] =
  {
    "HOSTILE",
    "FRIEND",
    "NEUTRAL",
    "UNKNOWN"
  };

  const enumBaseAffiliation::value enumBaseAffiliation::
  _xsd_enumBaseAffiliation_indexes_[4] =
  {
    ::msdl_1::enumBaseAffiliation::FRIEND,
    ::msdl_1::enumBaseAffiliation::HOSTILE,
    ::msdl_1::enumBaseAffiliation::NEUTRAL,
    ::msdl_1::enumBaseAffiliation::UNKNOWN
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumBaseAffiliation >
  _xsd_enumBaseAffiliation_type_factory_init (
    "enumBaseAffiliation",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumCombatEffectivenessType
  //

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumCombatEffectivenessType_convert ();
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumCombatEffectivenessType_convert ();
  }

  enumCombatEffectivenessType::
  enumCombatEffectivenessType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumCombatEffectivenessType_convert ();
  }

  enumCombatEffectivenessType* enumCombatEffectivenessType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumCombatEffectivenessType (*this, f, c);
  }

  enumCombatEffectivenessType::value enumCombatEffectivenessType::
  _xsd_enumCombatEffectivenessType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCombatEffectivenessType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumCombatEffectivenessType_indexes_,
                      _xsd_enumCombatEffectivenessType_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enumCombatEffectivenessType_indexes_ + 5 || _xsd_enumCombatEffectivenessType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumCombatEffectivenessType::
  _xsd_enumCombatEffectivenessType_literals_[5] =
  {
    "GREEN",
    "AMBER",
    "RED",
    "BLACK",
    "WHITE"
  };

  const enumCombatEffectivenessType::value enumCombatEffectivenessType::
  _xsd_enumCombatEffectivenessType_indexes_[5] =
  {
    ::msdl_1::enumCombatEffectivenessType::AMBER,
    ::msdl_1::enumCombatEffectivenessType::BLACK,
    ::msdl_1::enumCombatEffectivenessType::GREEN,
    ::msdl_1::enumCombatEffectivenessType::RED,
    ::msdl_1::enumCombatEffectivenessType::WHITE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCombatEffectivenessType >
  _xsd_enumCombatEffectivenessType_type_factory_init (
    "enumCombatEffectivenessType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumCommandRelationshipType
  //

  enumCommandRelationshipType::
  enumCommandRelationshipType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumCommandRelationshipType_convert ();
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumCommandRelationshipType_convert ();
  }

  enumCommandRelationshipType::
  enumCommandRelationshipType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumCommandRelationshipType_convert ();
  }

  enumCommandRelationshipType* enumCommandRelationshipType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumCommandRelationshipType (*this, f, c);
  }

  enumCommandRelationshipType::value enumCommandRelationshipType::
  _xsd_enumCommandRelationshipType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCommandRelationshipType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumCommandRelationshipType_indexes_,
                      _xsd_enumCommandRelationshipType_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_enumCommandRelationshipType_indexes_ + 6 || _xsd_enumCommandRelationshipType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumCommandRelationshipType::
  _xsd_enumCommandRelationshipType_literals_[6] =
  {
    "ORGANIC",
    "ATTACHED",
    "OPCON",
    "TACON",
    "ADCON",
    "NONE"
  };

  const enumCommandRelationshipType::value enumCommandRelationshipType::
  _xsd_enumCommandRelationshipType_indexes_[6] =
  {
    ::msdl_1::enumCommandRelationshipType::ADCON,
    ::msdl_1::enumCommandRelationshipType::ATTACHED,
    ::msdl_1::enumCommandRelationshipType::NONE,
    ::msdl_1::enumCommandRelationshipType::OPCON,
    ::msdl_1::enumCommandRelationshipType::ORGANIC,
    ::msdl_1::enumCommandRelationshipType::TACON
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCommandRelationshipType >
  _xsd_enumCommandRelationshipType_type_factory_init (
    "enumCommandRelationshipType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumCommunicationNetType
  //

  enumCommunicationNetType::
  enumCommunicationNetType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumCommunicationNetType_convert ();
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumCommunicationNetType_convert ();
  }

  enumCommunicationNetType::
  enumCommunicationNetType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumCommunicationNetType_convert ();
  }

  enumCommunicationNetType* enumCommunicationNetType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumCommunicationNetType (*this, f, c);
  }

  enumCommunicationNetType::value enumCommunicationNetType::
  _xsd_enumCommunicationNetType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCommunicationNetType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumCommunicationNetType_indexes_,
                      _xsd_enumCommunicationNetType_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enumCommunicationNetType_indexes_ + 5 || _xsd_enumCommunicationNetType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumCommunicationNetType::
  _xsd_enumCommunicationNetType_literals_[5] =
  {
    "OTHER",
    "COMMAND_NET",
    "OPERATIONS_INTELLIGENCE_NET",
    "ADMIN_LOGISTICS_NET",
    "FIRE_SUPPORT_NET"
  };

  const enumCommunicationNetType::value enumCommunicationNetType::
  _xsd_enumCommunicationNetType_indexes_[5] =
  {
    ::msdl_1::enumCommunicationNetType::ADMIN_LOGISTICS_NET,
    ::msdl_1::enumCommunicationNetType::COMMAND_NET,
    ::msdl_1::enumCommunicationNetType::FIRE_SUPPORT_NET,
    ::msdl_1::enumCommunicationNetType::OPERATIONS_INTELLIGENCE_NET,
    ::msdl_1::enumCommunicationNetType::OTHER
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCommunicationNetType >
  _xsd_enumCommunicationNetType_type_factory_init (
    "enumCommunicationNetType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumCommunicationServiceType
  //

  enumCommunicationServiceType::
  enumCommunicationServiceType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumCommunicationServiceType_convert ();
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumCommunicationServiceType_convert ();
  }

  enumCommunicationServiceType::
  enumCommunicationServiceType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumCommunicationServiceType_convert ();
  }

  enumCommunicationServiceType* enumCommunicationServiceType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumCommunicationServiceType (*this, f, c);
  }

  enumCommunicationServiceType::value enumCommunicationServiceType::
  _xsd_enumCommunicationServiceType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCommunicationServiceType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumCommunicationServiceType_indexes_,
                      _xsd_enumCommunicationServiceType_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_enumCommunicationServiceType_indexes_ + 10 || _xsd_enumCommunicationServiceType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumCommunicationServiceType::
  _xsd_enumCommunicationServiceType_literals_[10] =
  {
    "DATTRF",
    "FAX",
    "IFF",
    "IMAGE",
    "MCI",
    "MHS",
    "TDL",
    "VIDSVC",
    "VOCSVC",
    "NOS"
  };

  const enumCommunicationServiceType::value enumCommunicationServiceType::
  _xsd_enumCommunicationServiceType_indexes_[10] =
  {
    ::msdl_1::enumCommunicationServiceType::DATTRF,
    ::msdl_1::enumCommunicationServiceType::FAX,
    ::msdl_1::enumCommunicationServiceType::IFF,
    ::msdl_1::enumCommunicationServiceType::IMAGE,
    ::msdl_1::enumCommunicationServiceType::MCI,
    ::msdl_1::enumCommunicationServiceType::MHS,
    ::msdl_1::enumCommunicationServiceType::NOS,
    ::msdl_1::enumCommunicationServiceType::TDL,
    ::msdl_1::enumCommunicationServiceType::VIDSVC,
    ::msdl_1::enumCommunicationServiceType::VOCSVC
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCommunicationServiceType >
  _xsd_enumCommunicationServiceType_type_factory_init (
    "enumCommunicationServiceType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumCoordinateSystemType
  //

  enumCoordinateSystemType::
  enumCoordinateSystemType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumCoordinateSystemType_convert ();
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumCoordinateSystemType_convert ();
  }

  enumCoordinateSystemType::
  enumCoordinateSystemType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumCoordinateSystemType_convert ();
  }

  enumCoordinateSystemType* enumCoordinateSystemType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumCoordinateSystemType (*this, f, c);
  }

  enumCoordinateSystemType::value enumCoordinateSystemType::
  _xsd_enumCoordinateSystemType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCoordinateSystemType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumCoordinateSystemType_indexes_,
                      _xsd_enumCoordinateSystemType_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_enumCoordinateSystemType_indexes_ + 4 || _xsd_enumCoordinateSystemType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumCoordinateSystemType::
  _xsd_enumCoordinateSystemType_literals_[4] =
  {
    "MGRS",
    "GDC",
    "UTM",
    "GCC"
  };

  const enumCoordinateSystemType::value enumCoordinateSystemType::
  _xsd_enumCoordinateSystemType_indexes_[4] =
  {
    ::msdl_1::enumCoordinateSystemType::GCC,
    ::msdl_1::enumCoordinateSystemType::GDC,
    ::msdl_1::enumCoordinateSystemType::MGRS,
    ::msdl_1::enumCoordinateSystemType::UTM
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCoordinateSystemType >
  _xsd_enumCoordinateSystemType_type_factory_init (
    "enumCoordinateSystemType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumEchelon
  //

  enumEchelon::
  enumEchelon (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumEchelon_convert ();
  }

  enumEchelon::
  enumEchelon (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumEchelon_convert ();
  }

  enumEchelon::
  enumEchelon (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumEchelon_convert ();
  }

  enumEchelon* enumEchelon::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumEchelon (*this, f, c);
  }

  enumEchelon::value enumEchelon::
  _xsd_enumEchelon_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumEchelon_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumEchelon_indexes_,
                      _xsd_enumEchelon_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_enumEchelon_indexes_ + 21 || _xsd_enumEchelon_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumEchelon::
  _xsd_enumEchelon_literals_[21] =
  {
    "NONE",
    "TEAM",
    "CREW",
    "SQUAD",
    "SECTION",
    "PLATOON",
    "DETACHMENT",
    "COMPANY",
    "BATTERY",
    "TROOP",
    "BATTALION",
    "SQUADRON",
    "REGIMENT",
    "GROUP",
    "BRIGADE",
    "DIVISION",
    "CORPS",
    "ARMY",
    "ARMYGROUP",
    "FRONT",
    "REGION"
  };

  const enumEchelon::value enumEchelon::
  _xsd_enumEchelon_indexes_[21] =
  {
    ::msdl_1::enumEchelon::ARMY,
    ::msdl_1::enumEchelon::ARMYGROUP,
    ::msdl_1::enumEchelon::BATTALION,
    ::msdl_1::enumEchelon::BATTERY,
    ::msdl_1::enumEchelon::BRIGADE,
    ::msdl_1::enumEchelon::COMPANY,
    ::msdl_1::enumEchelon::CORPS,
    ::msdl_1::enumEchelon::CREW,
    ::msdl_1::enumEchelon::DETACHMENT,
    ::msdl_1::enumEchelon::DIVISION,
    ::msdl_1::enumEchelon::FRONT,
    ::msdl_1::enumEchelon::GROUP,
    ::msdl_1::enumEchelon::NONE,
    ::msdl_1::enumEchelon::PLATOON,
    ::msdl_1::enumEchelon::REGIMENT,
    ::msdl_1::enumEchelon::REGION,
    ::msdl_1::enumEchelon::SECTION,
    ::msdl_1::enumEchelon::SQUAD,
    ::msdl_1::enumEchelon::SQUADRON,
    ::msdl_1::enumEchelon::TEAM,
    ::msdl_1::enumEchelon::TROOP
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumEchelon >
  _xsd_enumEchelon_type_factory_init (
    "enumEchelon",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumForceOwnerType
  //

  enumForceOwnerType::
  enumForceOwnerType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumForceOwnerType_convert ();
  }

  enumForceOwnerType::
  enumForceOwnerType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumForceOwnerType_convert ();
  }

  enumForceOwnerType::
  enumForceOwnerType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumForceOwnerType_convert ();
  }

  enumForceOwnerType* enumForceOwnerType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumForceOwnerType (*this, f, c);
  }

  enumForceOwnerType::value enumForceOwnerType::
  _xsd_enumForceOwnerType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumForceOwnerType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumForceOwnerType_indexes_,
                      _xsd_enumForceOwnerType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_enumForceOwnerType_indexes_ + 2 || _xsd_enumForceOwnerType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumForceOwnerType::
  _xsd_enumForceOwnerType_literals_[2] =
  {
    "UNIT",
    "FORCE_SIDE"
  };

  const enumForceOwnerType::value enumForceOwnerType::
  _xsd_enumForceOwnerType_indexes_[2] =
  {
    ::msdl_1::enumForceOwnerType::FORCE_SIDE,
    ::msdl_1::enumForceOwnerType::UNIT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumForceOwnerType >
  _xsd_enumForceOwnerType_type_factory_init (
    "enumForceOwnerType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumFormationLocationType
  //

  enumFormationLocationType::
  enumFormationLocationType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumFormationLocationType_convert ();
  }

  enumFormationLocationType::
  enumFormationLocationType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumFormationLocationType_convert ();
  }

  enumFormationLocationType::
  enumFormationLocationType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumFormationLocationType_convert ();
  }

  enumFormationLocationType* enumFormationLocationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumFormationLocationType (*this, f, c);
  }

  enumFormationLocationType::value enumFormationLocationType::
  _xsd_enumFormationLocationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumFormationLocationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumFormationLocationType_indexes_,
                      _xsd_enumFormationLocationType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_enumFormationLocationType_indexes_ + 2 || _xsd_enumFormationLocationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumFormationLocationType::
  _xsd_enumFormationLocationType_literals_[2] =
  {
    "LEAD_ELEMENT",
    "CENTER_OF_MASS"
  };

  const enumFormationLocationType::value enumFormationLocationType::
  _xsd_enumFormationLocationType_indexes_[2] =
  {
    ::msdl_1::enumFormationLocationType::CENTER_OF_MASS,
    ::msdl_1::enumFormationLocationType::LEAD_ELEMENT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumFormationLocationType >
  _xsd_enumFormationLocationType_type_factory_init (
    "enumFormationLocationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumFormationType
  //

  enumFormationType::
  enumFormationType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumFormationType_convert ();
  }

  enumFormationType::
  enumFormationType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumFormationType_convert ();
  }

  enumFormationType::
  enumFormationType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumFormationType_convert ();
  }

  enumFormationType* enumFormationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumFormationType (*this, f, c);
  }

  enumFormationType::value enumFormationType::
  _xsd_enumFormationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumFormationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumFormationType_indexes_,
                      _xsd_enumFormationType_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_enumFormationType_indexes_ + 4 || _xsd_enumFormationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumFormationType::
  _xsd_enumFormationType_literals_[4] =
  {
    "GROUND",
    "AIR",
    "SURFACE",
    "SUBSURFACE"
  };

  const enumFormationType::value enumFormationType::
  _xsd_enumFormationType_indexes_[4] =
  {
    ::msdl_1::enumFormationType::AIR,
    ::msdl_1::enumFormationType::GROUND,
    ::msdl_1::enumFormationType::SUBSURFACE,
    ::msdl_1::enumFormationType::SURFACE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumFormationType >
  _xsd_enumFormationType_type_factory_init (
    "enumFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumGroundFormationType
  //

  enumGroundFormationType::
  enumGroundFormationType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumGroundFormationType_convert ();
  }

  enumGroundFormationType::
  enumGroundFormationType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumGroundFormationType_convert ();
  }

  enumGroundFormationType::
  enumGroundFormationType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumGroundFormationType_convert ();
  }

  enumGroundFormationType* enumGroundFormationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumGroundFormationType (*this, f, c);
  }

  enumGroundFormationType::value enumGroundFormationType::
  _xsd_enumGroundFormationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumGroundFormationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumGroundFormationType_indexes_,
                      _xsd_enumGroundFormationType_indexes_ + 11,
                      *this,
                      c));

    if (i == _xsd_enumGroundFormationType_indexes_ + 11 || _xsd_enumGroundFormationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumGroundFormationType::
  _xsd_enumGroundFormationType_literals_[11] =
  {
    "COLUMN",
    "STAGGERED_COLUMN",
    "ECHELON_LEFT",
    "ECHELON_RIGHT",
    "LINE",
    "WEDGE",
    "VEE",
    "ASSAULT_VEE",
    "FSE_COLUMN",
    "STACK",
    "NONE"
  };

  const enumGroundFormationType::value enumGroundFormationType::
  _xsd_enumGroundFormationType_indexes_[11] =
  {
    ::msdl_1::enumGroundFormationType::ASSAULT_VEE,
    ::msdl_1::enumGroundFormationType::COLUMN,
    ::msdl_1::enumGroundFormationType::ECHELON_LEFT,
    ::msdl_1::enumGroundFormationType::ECHELON_RIGHT,
    ::msdl_1::enumGroundFormationType::FSE_COLUMN,
    ::msdl_1::enumGroundFormationType::LINE,
    ::msdl_1::enumGroundFormationType::NONE,
    ::msdl_1::enumGroundFormationType::STACK,
    ::msdl_1::enumGroundFormationType::STAGGERED_COLUMN,
    ::msdl_1::enumGroundFormationType::VEE,
    ::msdl_1::enumGroundFormationType::WEDGE
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumGroundFormationType >
  _xsd_enumGroundFormationType_type_factory_init (
    "enumGroundFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumModelResolutionType
  //

  enumModelResolutionType::
  enumModelResolutionType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumModelResolutionType_convert ();
  }

  enumModelResolutionType::
  enumModelResolutionType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumModelResolutionType_convert ();
  }

  enumModelResolutionType::
  enumModelResolutionType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumModelResolutionType_convert ();
  }

  enumModelResolutionType* enumModelResolutionType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumModelResolutionType (*this, f, c);
  }

  enumModelResolutionType::value enumModelResolutionType::
  _xsd_enumModelResolutionType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumModelResolutionType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumModelResolutionType_indexes_,
                      _xsd_enumModelResolutionType_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_enumModelResolutionType_indexes_ + 6 || _xsd_enumModelResolutionType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumModelResolutionType::
  _xsd_enumModelResolutionType_literals_[6] =
  {
    "NONE",
    "MINIMAL",
    "STANDARD",
    "ENHANCED",
    "HIGH",
    "NOT_SPECIFIED"
  };

  const enumModelResolutionType::value enumModelResolutionType::
  _xsd_enumModelResolutionType_indexes_[6] =
  {
    ::msdl_1::enumModelResolutionType::ENHANCED,
    ::msdl_1::enumModelResolutionType::HIGH,
    ::msdl_1::enumModelResolutionType::MINIMAL,
    ::msdl_1::enumModelResolutionType::NONE,
    ::msdl_1::enumModelResolutionType::NOT_SPECIFIED,
    ::msdl_1::enumModelResolutionType::STANDARD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumModelResolutionType >
  _xsd_enumModelResolutionType_type_factory_init (
    "enumModelResolutionType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumMOPPLevelType
  //

  enumMOPPLevelType::
  enumMOPPLevelType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumMOPPLevelType_convert ();
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumMOPPLevelType_convert ();
  }

  enumMOPPLevelType::
  enumMOPPLevelType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumMOPPLevelType_convert ();
  }

  enumMOPPLevelType* enumMOPPLevelType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumMOPPLevelType (*this, f, c);
  }

  enumMOPPLevelType::value enumMOPPLevelType::
  _xsd_enumMOPPLevelType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumMOPPLevelType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumMOPPLevelType_indexes_,
                      _xsd_enumMOPPLevelType_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enumMOPPLevelType_indexes_ + 5 || _xsd_enumMOPPLevelType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumMOPPLevelType::
  _xsd_enumMOPPLevelType_literals_[5] =
  {
    "LEVEL_0",
    "LEVEL_1",
    "LEVEL_2",
    "LEVEL_3",
    "LEVEL_4"
  };

  const enumMOPPLevelType::value enumMOPPLevelType::
  _xsd_enumMOPPLevelType_indexes_[5] =
  {
    ::msdl_1::enumMOPPLevelType::LEVEL_0,
    ::msdl_1::enumMOPPLevelType::LEVEL_1,
    ::msdl_1::enumMOPPLevelType::LEVEL_2,
    ::msdl_1::enumMOPPLevelType::LEVEL_3,
    ::msdl_1::enumMOPPLevelType::LEVEL_4
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumMOPPLevelType >
  _xsd_enumMOPPLevelType_type_factory_init (
    "enumMOPPLevelType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumOrientationType
  //

  enumOrientationType::
  enumOrientationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumOrientationType_convert ();
  }

  enumOrientationType::
  enumOrientationType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumOrientationType_convert ();
  }

  enumOrientationType::
  enumOrientationType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumOrientationType_convert ();
  }

  enumOrientationType* enumOrientationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumOrientationType (*this, f, c);
  }

  enumOrientationType::value enumOrientationType::
  _xsd_enumOrientationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumOrientationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumOrientationType_indexes_,
                      _xsd_enumOrientationType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_enumOrientationType_indexes_ + 2 || _xsd_enumOrientationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumOrientationType::
  _xsd_enumOrientationType_literals_[2] =
  {
    "ORIENT_RIGHT",
    "ORIENT_LEFT"
  };

  const enumOrientationType::value enumOrientationType::
  _xsd_enumOrientationType_indexes_[2] =
  {
    ::msdl_1::enumOrientationType::ORIENT_LEFT,
    ::msdl_1::enumOrientationType::ORIENT_RIGHT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumOrientationType >
  _xsd_enumOrientationType_type_factory_init (
    "enumOrientationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumOverlayType
  //

  enumOverlayType::
  enumOverlayType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumOverlayType_convert ();
  }

  enumOverlayType::
  enumOverlayType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumOverlayType_convert ();
  }

  enumOverlayType::
  enumOverlayType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumOverlayType_convert ();
  }

  enumOverlayType* enumOverlayType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumOverlayType (*this, f, c);
  }

  enumOverlayType::value enumOverlayType::
  _xsd_enumOverlayType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumOverlayType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumOverlayType_indexes_,
                      _xsd_enumOverlayType_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_enumOverlayType_indexes_ + 10 || _xsd_enumOverlayType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumOverlayType::
  _xsd_enumOverlayType_literals_[10] =
  {
    "OPERATIONS",
    "FIRE_SUPPORT",
    "MODIFIED_COMBINED_OBSTACLES",
    "INTEL",
    "RECON_SURVEILLANCE",
    "OBSTACLE",
    "AIR_DEFENSE",
    "LOGISTICS",
    "A2C2",
    "USER_DEFINED"
  };

  const enumOverlayType::value enumOverlayType::
  _xsd_enumOverlayType_indexes_[10] =
  {
    ::msdl_1::enumOverlayType::A2C2,
    ::msdl_1::enumOverlayType::AIR_DEFENSE,
    ::msdl_1::enumOverlayType::FIRE_SUPPORT,
    ::msdl_1::enumOverlayType::INTEL,
    ::msdl_1::enumOverlayType::LOGISTICS,
    ::msdl_1::enumOverlayType::MODIFIED_COMBINED_OBSTACLES,
    ::msdl_1::enumOverlayType::OBSTACLE,
    ::msdl_1::enumOverlayType::OPERATIONS,
    ::msdl_1::enumOverlayType::RECON_SURVEILLANCE,
    ::msdl_1::enumOverlayType::USER_DEFINED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumOverlayType >
  _xsd_enumOverlayType_type_factory_init (
    "enumOverlayType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumReinforcedReducedType
  //

  enumReinforcedReducedType::
  enumReinforcedReducedType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumReinforcedReducedType_convert ();
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumReinforcedReducedType_convert ();
  }

  enumReinforcedReducedType::
  enumReinforcedReducedType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumReinforcedReducedType_convert ();
  }

  enumReinforcedReducedType* enumReinforcedReducedType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumReinforcedReducedType (*this, f, c);
  }

  enumReinforcedReducedType::value enumReinforcedReducedType::
  _xsd_enumReinforcedReducedType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumReinforcedReducedType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumReinforcedReducedType_indexes_,
                      _xsd_enumReinforcedReducedType_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_enumReinforcedReducedType_indexes_ + 3 || _xsd_enumReinforcedReducedType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumReinforcedReducedType::
  _xsd_enumReinforcedReducedType_literals_[3] =
  {
    "R",
    "D",
    "RD"
  };

  const enumReinforcedReducedType::value enumReinforcedReducedType::
  _xsd_enumReinforcedReducedType_indexes_[3] =
  {
    ::msdl_1::enumReinforcedReducedType::D,
    ::msdl_1::enumReinforcedReducedType::R,
    ::msdl_1::enumReinforcedReducedType::RD
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumReinforcedReducedType >
  _xsd_enumReinforcedReducedType_type_factory_init (
    "enumReinforcedReducedType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSubsurfaceFormationType
  //

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSubsurfaceFormationType_convert ();
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSubsurfaceFormationType_convert ();
  }

  enumSubsurfaceFormationType::
  enumSubsurfaceFormationType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSubsurfaceFormationType_convert ();
  }

  enumSubsurfaceFormationType* enumSubsurfaceFormationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSubsurfaceFormationType (*this, f, c);
  }

  enumSubsurfaceFormationType::value enumSubsurfaceFormationType::
  _xsd_enumSubsurfaceFormationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSubsurfaceFormationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSubsurfaceFormationType_indexes_,
                      _xsd_enumSubsurfaceFormationType_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_enumSubsurfaceFormationType_indexes_ + 1 || _xsd_enumSubsurfaceFormationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSubsurfaceFormationType::
  _xsd_enumSubsurfaceFormationType_literals_[1] =
  {
    "NOT_SPECIFIED"
  };

  const enumSubsurfaceFormationType::value enumSubsurfaceFormationType::
  _xsd_enumSubsurfaceFormationType_indexes_[1] =
  {
    ::msdl_1::enumSubsurfaceFormationType::NOT_SPECIFIED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSubsurfaceFormationType >
  _xsd_enumSubsurfaceFormationType_type_factory_init (
    "enumSubsurfaceFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSupportRelationType
  //

  enumSupportRelationType::
  enumSupportRelationType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSupportRelationType_convert ();
  }

  enumSupportRelationType::
  enumSupportRelationType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSupportRelationType_convert ();
  }

  enumSupportRelationType::
  enumSupportRelationType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSupportRelationType_convert ();
  }

  enumSupportRelationType* enumSupportRelationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSupportRelationType (*this, f, c);
  }

  enumSupportRelationType::value enumSupportRelationType::
  _xsd_enumSupportRelationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSupportRelationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSupportRelationType_indexes_,
                      _xsd_enumSupportRelationType_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enumSupportRelationType_indexes_ + 5 || _xsd_enumSupportRelationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSupportRelationType::
  _xsd_enumSupportRelationType_literals_[5] =
  {
    "GS",
    "DS",
    "R",
    "GSR",
    "NONE"
  };

  const enumSupportRelationType::value enumSupportRelationType::
  _xsd_enumSupportRelationType_indexes_[5] =
  {
    ::msdl_1::enumSupportRelationType::DS,
    ::msdl_1::enumSupportRelationType::GS,
    ::msdl_1::enumSupportRelationType::GSR,
    ::msdl_1::enumSupportRelationType::NONE,
    ::msdl_1::enumSupportRelationType::R
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSupportRelationType >
  _xsd_enumSupportRelationType_type_factory_init (
    "enumSupportRelationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSupportRoleType
  //

  enumSupportRoleType::
  enumSupportRoleType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSupportRoleType_convert ();
  }

  enumSupportRoleType::
  enumSupportRoleType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSupportRoleType_convert ();
  }

  enumSupportRoleType::
  enumSupportRoleType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSupportRoleType_convert ();
  }

  enumSupportRoleType* enumSupportRoleType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSupportRoleType (*this, f, c);
  }

  enumSupportRoleType::value enumSupportRoleType::
  _xsd_enumSupportRoleType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSupportRoleType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSupportRoleType_indexes_,
                      _xsd_enumSupportRoleType_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enumSupportRoleType_indexes_ + 5 || _xsd_enumSupportRoleType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSupportRoleType::
  _xsd_enumSupportRoleType_literals_[5] =
  {
    "FIRES",
    "INTELLIGENCE",
    "ENGINEER",
    "CHEMICAL",
    "NOT_SPECIFIED"
  };

  const enumSupportRoleType::value enumSupportRoleType::
  _xsd_enumSupportRoleType_indexes_[5] =
  {
    ::msdl_1::enumSupportRoleType::CHEMICAL,
    ::msdl_1::enumSupportRoleType::ENGINEER,
    ::msdl_1::enumSupportRoleType::FIRES,
    ::msdl_1::enumSupportRoleType::INTELLIGENCE,
    ::msdl_1::enumSupportRoleType::NOT_SPECIFIED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSupportRoleType >
  _xsd_enumSupportRoleType_type_factory_init (
    "enumSupportRoleType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSurfaceFormationType
  //

  enumSurfaceFormationType::
  enumSurfaceFormationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSurfaceFormationType_convert ();
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSurfaceFormationType_convert ();
  }

  enumSurfaceFormationType::
  enumSurfaceFormationType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSurfaceFormationType_convert ();
  }

  enumSurfaceFormationType* enumSurfaceFormationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSurfaceFormationType (*this, f, c);
  }

  enumSurfaceFormationType::value enumSurfaceFormationType::
  _xsd_enumSurfaceFormationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSurfaceFormationType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSurfaceFormationType_indexes_,
                      _xsd_enumSurfaceFormationType_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_enumSurfaceFormationType_indexes_ + 1 || _xsd_enumSurfaceFormationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSurfaceFormationType::
  _xsd_enumSurfaceFormationType_literals_[1] =
  {
    "NOT_SPECIFIED"
  };

  const enumSurfaceFormationType::value enumSurfaceFormationType::
  _xsd_enumSurfaceFormationType_indexes_[1] =
  {
    ::msdl_1::enumSurfaceFormationType::NOT_SPECIFIED
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSurfaceFormationType >
  _xsd_enumSurfaceFormationType_type_factory_init (
    "enumSurfaceFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSymbolClassType
  //

  enumSymbolClassType::
  enumSymbolClassType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSymbolClassType_convert ();
  }

  enumSymbolClassType::
  enumSymbolClassType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSymbolClassType_convert ();
  }

  enumSymbolClassType::
  enumSymbolClassType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSymbolClassType_convert ();
  }

  enumSymbolClassType* enumSymbolClassType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSymbolClassType (*this, f, c);
  }

  enumSymbolClassType::value enumSymbolClassType::
  _xsd_enumSymbolClassType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSymbolClassType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSymbolClassType_indexes_,
                      _xsd_enumSymbolClassType_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_enumSymbolClassType_indexes_ + 6 || _xsd_enumSymbolClassType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSymbolClassType::
  _xsd_enumSymbolClassType_literals_[6] =
  {
    "POINT",
    "LINE",
    "AREA",
    "BOUNDARY",
    "NBC_EVENT",
    "TASK"
  };

  const enumSymbolClassType::value enumSymbolClassType::
  _xsd_enumSymbolClassType_indexes_[6] =
  {
    ::msdl_1::enumSymbolClassType::AREA,
    ::msdl_1::enumSymbolClassType::BOUNDARY,
    ::msdl_1::enumSymbolClassType::LINE,
    ::msdl_1::enumSymbolClassType::NBC_EVENT,
    ::msdl_1::enumSymbolClassType::POINT,
    ::msdl_1::enumSymbolClassType::TASK
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSymbolClassType >
  _xsd_enumSymbolClassType_type_factory_init (
    "enumSymbolClassType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumSymbologyStandardType
  //

  enumSymbologyStandardType::
  enumSymbologyStandardType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumSymbologyStandardType_convert ();
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumSymbologyStandardType_convert ();
  }

  enumSymbologyStandardType::
  enumSymbologyStandardType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumSymbologyStandardType_convert ();
  }

  enumSymbologyStandardType* enumSymbologyStandardType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumSymbologyStandardType (*this, f, c);
  }

  enumSymbologyStandardType::value enumSymbologyStandardType::
  _xsd_enumSymbologyStandardType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSymbologyStandardType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumSymbologyStandardType_indexes_,
                      _xsd_enumSymbologyStandardType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_enumSymbologyStandardType_indexes_ + 2 || _xsd_enumSymbologyStandardType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumSymbologyStandardType::
  _xsd_enumSymbologyStandardType_literals_[2] =
  {
    "MILSTD_2525B",
    "NATO_APP-6"
  };

  const enumSymbologyStandardType::value enumSymbologyStandardType::
  _xsd_enumSymbologyStandardType_indexes_[2] =
  {
    ::msdl_1::enumSymbologyStandardType::MILSTD_2525B,
    ::msdl_1::enumSymbologyStandardType::NATO_APP_6
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSymbologyStandardType >
  _xsd_enumSymbologyStandardType_type_factory_init (
    "enumSymbologyStandardType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumFrameShapeModifierType
  //

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumFrameShapeModifierType_convert ();
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumFrameShapeModifierType_convert ();
  }

  enumFrameShapeModifierType::
  enumFrameShapeModifierType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumFrameShapeModifierType_convert ();
  }

  enumFrameShapeModifierType* enumFrameShapeModifierType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumFrameShapeModifierType (*this, f, c);
  }

  enumFrameShapeModifierType::value enumFrameShapeModifierType::
  _xsd_enumFrameShapeModifierType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumFrameShapeModifierType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumFrameShapeModifierType_indexes_,
                      _xsd_enumFrameShapeModifierType_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_enumFrameShapeModifierType_indexes_ + 10 || _xsd_enumFrameShapeModifierType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumFrameShapeModifierType::
  _xsd_enumFrameShapeModifierType_literals_[10] =
  {
    "PENDING",
    "ASSUMED_FRIEND",
    "SUSPECT",
    "EXERCISE_PENDING",
    "EXERCISE_UNKNOWN",
    "EXERCISE_FRIEND",
    "EXERCISE_NEUTRAL",
    "EXERCISE_ASSUMED_FRIEND",
    "JOKER",
    "FAKER"
  };

  const enumFrameShapeModifierType::value enumFrameShapeModifierType::
  _xsd_enumFrameShapeModifierType_indexes_[10] =
  {
    ::msdl_1::enumFrameShapeModifierType::ASSUMED_FRIEND,
    ::msdl_1::enumFrameShapeModifierType::EXERCISE_ASSUMED_FRIEND,
    ::msdl_1::enumFrameShapeModifierType::EXERCISE_FRIEND,
    ::msdl_1::enumFrameShapeModifierType::EXERCISE_NEUTRAL,
    ::msdl_1::enumFrameShapeModifierType::EXERCISE_PENDING,
    ::msdl_1::enumFrameShapeModifierType::EXERCISE_UNKNOWN,
    ::msdl_1::enumFrameShapeModifierType::FAKER,
    ::msdl_1::enumFrameShapeModifierType::JOKER,
    ::msdl_1::enumFrameShapeModifierType::PENDING,
    ::msdl_1::enumFrameShapeModifierType::SUSPECT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumFrameShapeModifierType >
  _xsd_enumFrameShapeModifierType_type_factory_init (
    "enumFrameShapeModifierType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");

  // enumWeaponControlStatusType
  //

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enumWeaponControlStatusType_convert ();
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enumWeaponControlStatusType_convert ();
  }

  enumWeaponControlStatusType::
  enumWeaponControlStatusType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enumWeaponControlStatusType_convert ();
  }

  enumWeaponControlStatusType* enumWeaponControlStatusType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enumWeaponControlStatusType (*this, f, c);
  }

  enumWeaponControlStatusType::value enumWeaponControlStatusType::
  _xsd_enumWeaponControlStatusType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumWeaponControlStatusType_literals_);
    const value* i (::std::lower_bound (
                      _xsd_enumWeaponControlStatusType_indexes_,
                      _xsd_enumWeaponControlStatusType_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_enumWeaponControlStatusType_indexes_ + 3 || _xsd_enumWeaponControlStatusType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enumWeaponControlStatusType::
  _xsd_enumWeaponControlStatusType_literals_[3] =
  {
    "WEAPONS_FREE",
    "WEAPONS_TIGHT",
    "WEAPONS_HOLD"
  };

  const enumWeaponControlStatusType::value enumWeaponControlStatusType::
  _xsd_enumWeaponControlStatusType_indexes_[3] =
  {
    ::msdl_1::enumWeaponControlStatusType::WEAPONS_FREE,
    ::msdl_1::enumWeaponControlStatusType::WEAPONS_HOLD,
    ::msdl_1::enumWeaponControlStatusType::WEAPONS_TIGHT
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumWeaponControlStatusType >
  _xsd_enumWeaponControlStatusType_type_factory_init (
    "enumWeaponControlStatusType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace msdl_1
{
  ::std::ostream&
  operator<< (::std::ostream& o, enumAnchorPointType::value i)
  {
    return o << enumAnchorPointType::_xsd_enumAnchorPointType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumAnchorPointType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumAnchorPointType >
  _xsd_enumAnchorPointType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumAirFormationType::value i)
  {
    return o << enumAirFormationType::_xsd_enumAirFormationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumAirFormationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumAirFormationType >
  _xsd_enumAirFormationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumBaseAffiliation::value i)
  {
    return o << enumBaseAffiliation::_xsd_enumBaseAffiliation_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumBaseAffiliation& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumBaseAffiliation >
  _xsd_enumBaseAffiliation_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumCombatEffectivenessType::value i)
  {
    return o << enumCombatEffectivenessType::_xsd_enumCombatEffectivenessType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumCombatEffectivenessType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCombatEffectivenessType >
  _xsd_enumCombatEffectivenessType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumCommandRelationshipType::value i)
  {
    return o << enumCommandRelationshipType::_xsd_enumCommandRelationshipType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumCommandRelationshipType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCommandRelationshipType >
  _xsd_enumCommandRelationshipType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumCommunicationNetType::value i)
  {
    return o << enumCommunicationNetType::_xsd_enumCommunicationNetType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumCommunicationNetType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCommunicationNetType >
  _xsd_enumCommunicationNetType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumCommunicationServiceType::value i)
  {
    return o << enumCommunicationServiceType::_xsd_enumCommunicationServiceType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumCommunicationServiceType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCommunicationServiceType >
  _xsd_enumCommunicationServiceType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumCoordinateSystemType::value i)
  {
    return o << enumCoordinateSystemType::_xsd_enumCoordinateSystemType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumCoordinateSystemType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCoordinateSystemType >
  _xsd_enumCoordinateSystemType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumEchelon::value i)
  {
    return o << enumEchelon::_xsd_enumEchelon_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumEchelon& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumEchelon >
  _xsd_enumEchelon_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumForceOwnerType::value i)
  {
    return o << enumForceOwnerType::_xsd_enumForceOwnerType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumForceOwnerType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumForceOwnerType >
  _xsd_enumForceOwnerType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumFormationLocationType::value i)
  {
    return o << enumFormationLocationType::_xsd_enumFormationLocationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumFormationLocationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumFormationLocationType >
  _xsd_enumFormationLocationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumFormationType::value i)
  {
    return o << enumFormationType::_xsd_enumFormationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumFormationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumFormationType >
  _xsd_enumFormationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumGroundFormationType::value i)
  {
    return o << enumGroundFormationType::_xsd_enumGroundFormationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumGroundFormationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumGroundFormationType >
  _xsd_enumGroundFormationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumModelResolutionType::value i)
  {
    return o << enumModelResolutionType::_xsd_enumModelResolutionType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumModelResolutionType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumModelResolutionType >
  _xsd_enumModelResolutionType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumMOPPLevelType::value i)
  {
    return o << enumMOPPLevelType::_xsd_enumMOPPLevelType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumMOPPLevelType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumMOPPLevelType >
  _xsd_enumMOPPLevelType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumOrientationType::value i)
  {
    return o << enumOrientationType::_xsd_enumOrientationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumOrientationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumOrientationType >
  _xsd_enumOrientationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumOverlayType::value i)
  {
    return o << enumOverlayType::_xsd_enumOverlayType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumOverlayType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumOverlayType >
  _xsd_enumOverlayType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumReinforcedReducedType::value i)
  {
    return o << enumReinforcedReducedType::_xsd_enumReinforcedReducedType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumReinforcedReducedType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumReinforcedReducedType >
  _xsd_enumReinforcedReducedType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSubsurfaceFormationType::value i)
  {
    return o << enumSubsurfaceFormationType::_xsd_enumSubsurfaceFormationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSubsurfaceFormationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSubsurfaceFormationType >
  _xsd_enumSubsurfaceFormationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSupportRelationType::value i)
  {
    return o << enumSupportRelationType::_xsd_enumSupportRelationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSupportRelationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSupportRelationType >
  _xsd_enumSupportRelationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSupportRoleType::value i)
  {
    return o << enumSupportRoleType::_xsd_enumSupportRoleType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSupportRoleType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSupportRoleType >
  _xsd_enumSupportRoleType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSurfaceFormationType::value i)
  {
    return o << enumSurfaceFormationType::_xsd_enumSurfaceFormationType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSurfaceFormationType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSurfaceFormationType >
  _xsd_enumSurfaceFormationType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSymbolClassType::value i)
  {
    return o << enumSymbolClassType::_xsd_enumSymbolClassType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSymbolClassType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSymbolClassType >
  _xsd_enumSymbolClassType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumSymbologyStandardType::value i)
  {
    return o << enumSymbologyStandardType::_xsd_enumSymbologyStandardType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumSymbologyStandardType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSymbologyStandardType >
  _xsd_enumSymbologyStandardType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumFrameShapeModifierType::value i)
  {
    return o << enumFrameShapeModifierType::_xsd_enumFrameShapeModifierType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumFrameShapeModifierType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumFrameShapeModifierType >
  _xsd_enumFrameShapeModifierType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, enumWeaponControlStatusType::value i)
  {
    return o << enumWeaponControlStatusType::_xsd_enumWeaponControlStatusType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const enumWeaponControlStatusType& i)
  {
    return o << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumWeaponControlStatusType >
  _xsd_enumWeaponControlStatusType_std_ostream_init;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace msdl_1
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace msdl_1
{
  void
  operator<< (::xercesc::DOMElement& e, const enumAnchorPointType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumAnchorPointType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumAnchorPointType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumAnchorPointType >
  _xsd_enumAnchorPointType_type_serializer_init (
    "enumAnchorPointType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumAirFormationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumAirFormationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumAirFormationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumAirFormationType >
  _xsd_enumAirFormationType_type_serializer_init (
    "enumAirFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumBaseAffiliation& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumBaseAffiliation& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumBaseAffiliation& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumBaseAffiliation >
  _xsd_enumBaseAffiliation_type_serializer_init (
    "enumBaseAffiliation",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumCombatEffectivenessType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumCombatEffectivenessType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumCombatEffectivenessType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCombatEffectivenessType >
  _xsd_enumCombatEffectivenessType_type_serializer_init (
    "enumCombatEffectivenessType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumCommandRelationshipType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumCommandRelationshipType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumCommandRelationshipType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCommandRelationshipType >
  _xsd_enumCommandRelationshipType_type_serializer_init (
    "enumCommandRelationshipType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumCommunicationNetType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumCommunicationNetType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumCommunicationNetType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCommunicationNetType >
  _xsd_enumCommunicationNetType_type_serializer_init (
    "enumCommunicationNetType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumCommunicationServiceType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumCommunicationServiceType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumCommunicationServiceType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCommunicationServiceType >
  _xsd_enumCommunicationServiceType_type_serializer_init (
    "enumCommunicationServiceType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumCoordinateSystemType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumCoordinateSystemType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumCoordinateSystemType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCoordinateSystemType >
  _xsd_enumCoordinateSystemType_type_serializer_init (
    "enumCoordinateSystemType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumEchelon& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumEchelon& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumEchelon& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumEchelon >
  _xsd_enumEchelon_type_serializer_init (
    "enumEchelon",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumForceOwnerType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumForceOwnerType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumForceOwnerType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumForceOwnerType >
  _xsd_enumForceOwnerType_type_serializer_init (
    "enumForceOwnerType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumFormationLocationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumFormationLocationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumFormationLocationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumFormationLocationType >
  _xsd_enumFormationLocationType_type_serializer_init (
    "enumFormationLocationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumFormationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumFormationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumFormationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumFormationType >
  _xsd_enumFormationType_type_serializer_init (
    "enumFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumGroundFormationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumGroundFormationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumGroundFormationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumGroundFormationType >
  _xsd_enumGroundFormationType_type_serializer_init (
    "enumGroundFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumModelResolutionType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumModelResolutionType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumModelResolutionType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumModelResolutionType >
  _xsd_enumModelResolutionType_type_serializer_init (
    "enumModelResolutionType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumMOPPLevelType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumMOPPLevelType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumMOPPLevelType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumMOPPLevelType >
  _xsd_enumMOPPLevelType_type_serializer_init (
    "enumMOPPLevelType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumOrientationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumOrientationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumOrientationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumOrientationType >
  _xsd_enumOrientationType_type_serializer_init (
    "enumOrientationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumOverlayType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumOverlayType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumOverlayType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumOverlayType >
  _xsd_enumOverlayType_type_serializer_init (
    "enumOverlayType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumReinforcedReducedType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumReinforcedReducedType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumReinforcedReducedType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumReinforcedReducedType >
  _xsd_enumReinforcedReducedType_type_serializer_init (
    "enumReinforcedReducedType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSubsurfaceFormationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSubsurfaceFormationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSubsurfaceFormationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSubsurfaceFormationType >
  _xsd_enumSubsurfaceFormationType_type_serializer_init (
    "enumSubsurfaceFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSupportRelationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSupportRelationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSupportRelationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSupportRelationType >
  _xsd_enumSupportRelationType_type_serializer_init (
    "enumSupportRelationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSupportRoleType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSupportRoleType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSupportRoleType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSupportRoleType >
  _xsd_enumSupportRoleType_type_serializer_init (
    "enumSupportRoleType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSurfaceFormationType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSurfaceFormationType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSurfaceFormationType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSurfaceFormationType >
  _xsd_enumSurfaceFormationType_type_serializer_init (
    "enumSurfaceFormationType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSymbolClassType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSymbolClassType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSymbolClassType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSymbolClassType >
  _xsd_enumSymbolClassType_type_serializer_init (
    "enumSymbolClassType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumSymbologyStandardType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumSymbologyStandardType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumSymbologyStandardType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSymbologyStandardType >
  _xsd_enumSymbologyStandardType_type_serializer_init (
    "enumSymbologyStandardType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumFrameShapeModifierType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumFrameShapeModifierType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumFrameShapeModifierType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumFrameShapeModifierType >
  _xsd_enumFrameShapeModifierType_type_serializer_init (
    "enumFrameShapeModifierType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");


  void
  operator<< (::xercesc::DOMElement& e, const enumWeaponControlStatusType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enumWeaponControlStatusType& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enumWeaponControlStatusType& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumWeaponControlStatusType >
  _xsd_enumWeaponControlStatusType_type_serializer_init (
    "enumWeaponControlStatusType",
    "urn:sisostds:scenario:military:data:draft:msdl:1");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

