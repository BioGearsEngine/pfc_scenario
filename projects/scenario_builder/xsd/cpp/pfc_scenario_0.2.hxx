// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PFC_SCENARIO_0_2_HXX
#define PFC_SCENARIO_0_2_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace pfc
{
  namespace schema
  {
    class ScenarioSchema;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "pfc_scenario_complex_types_0.2.hxx"

namespace pfc
{
  namespace schema
  {
    class ScenarioSchema: public ::xml_schema::type
    {
      public:
      // author
      //
      typedef ::pfc::schema::author author_type;
      typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

      const author_type&
      author () const;

      author_type&
      author ();

      void
      author (const author_type& x);

      void
      author (::std::unique_ptr< author_type > p);

      // equipment
      //
      typedef ::pfc::schema::equipment_definition_list equipment_type;
      typedef ::xsd::cxx::tree::traits< equipment_type, char > equipment_traits;

      const equipment_type&
      equipment () const;

      equipment_type&
      equipment ();

      void
      equipment (const equipment_type& x);

      void
      equipment (::std::unique_ptr< equipment_type > p);

      // trauma-definitions
      //
      typedef ::pfc::schema::trauma_definition_list trauma_definitions_type;
      typedef ::xsd::cxx::tree::traits< trauma_definitions_type, char > trauma_definitions_traits;

      const trauma_definitions_type&
      trauma_definitions () const;

      trauma_definitions_type&
      trauma_definitions ();

      void
      trauma_definitions (const trauma_definitions_type& x);

      void
      trauma_definitions (::std::unique_ptr< trauma_definitions_type > p);

      // treatment-plans
      //
      typedef ::pfc::schema::treatment_plan_definition_list treatment_plans_type;
      typedef ::xsd::cxx::tree::traits< treatment_plans_type, char > treatment_plans_traits;

      const treatment_plans_type&
      treatment_plans () const;

      treatment_plans_type&
      treatment_plans ();

      void
      treatment_plans (const treatment_plans_type& x);

      void
      treatment_plans (::std::unique_ptr< treatment_plans_type > p);

      // trauma-sets
      //
      typedef ::pfc::schema::trauma_profile_list trauma_sets_type;
      typedef ::xsd::cxx::tree::traits< trauma_sets_type, char > trauma_sets_traits;

      const trauma_sets_type&
      trauma_sets () const;

      trauma_sets_type&
      trauma_sets ();

      void
      trauma_sets (const trauma_sets_type& x);

      void
      trauma_sets (::std::unique_ptr< trauma_sets_type > p);

      // syllabus
      //
      typedef ::pfc::schema::medical_scenario_syllabus syllabus_type;
      typedef ::xsd::cxx::tree::traits< syllabus_type, char > syllabus_traits;

      const syllabus_type&
      syllabus () const;

      syllabus_type&
      syllabus ();

      void
      syllabus (const syllabus_type& x);

      void
      syllabus (::std::unique_ptr< syllabus_type > p);

      // medical-scenario
      //
      typedef ::pfc::schema::medical_scenario medical_scenario_type;
      typedef ::xsd::cxx::tree::traits< medical_scenario_type, char > medical_scenario_traits;

      const medical_scenario_type&
      medical_scenario () const;

      medical_scenario_type&
      medical_scenario ();

      void
      medical_scenario (const medical_scenario_type& x);

      void
      medical_scenario (::std::unique_ptr< medical_scenario_type > p);

      // works-cited
      //
      typedef ::pfc::schema::citation_list works_cited_type;
      typedef ::xsd::cxx::tree::traits< works_cited_type, char > works_cited_traits;

      const works_cited_type&
      works_cited () const;

      works_cited_type&
      works_cited ();

      void
      works_cited (const works_cited_type& x);

      void
      works_cited (::std::unique_ptr< works_cited_type > p);

      // maps
      //
      typedef ::pfc::schema::maps maps_type;
      typedef ::xsd::cxx::tree::traits< maps_type, char > maps_traits;

      const maps_type&
      maps () const;

      maps_type&
      maps ();

      void
      maps (const maps_type& x);

      void
      maps (::std::unique_ptr< maps_type > p);

      // Constructors.
      //
      ScenarioSchema (const author_type&,
                      const equipment_type&,
                      const trauma_definitions_type&,
                      const treatment_plans_type&,
                      const trauma_sets_type&,
                      const syllabus_type&,
                      const medical_scenario_type&,
                      const works_cited_type&,
                      const maps_type&);

      ScenarioSchema (::std::unique_ptr< author_type >,
                      ::std::unique_ptr< equipment_type >,
                      ::std::unique_ptr< trauma_definitions_type >,
                      ::std::unique_ptr< treatment_plans_type >,
                      ::std::unique_ptr< trauma_sets_type >,
                      ::std::unique_ptr< syllabus_type >,
                      ::std::unique_ptr< medical_scenario_type >,
                      ::std::unique_ptr< works_cited_type >,
                      ::std::unique_ptr< maps_type >);

      ScenarioSchema (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ScenarioSchema (const ScenarioSchema& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ScenarioSchema*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ScenarioSchema&
      operator= (const ScenarioSchema& x);

      virtual 
      ~ScenarioSchema ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< author_type > author_;
      ::xsd::cxx::tree::one< equipment_type > equipment_;
      ::xsd::cxx::tree::one< trauma_definitions_type > trauma_definitions_;
      ::xsd::cxx::tree::one< treatment_plans_type > treatment_plans_;
      ::xsd::cxx::tree::one< trauma_sets_type > trauma_sets_;
      ::xsd::cxx::tree::one< syllabus_type > syllabus_;
      ::xsd::cxx::tree::one< medical_scenario_type > medical_scenario_;
      ::xsd::cxx::tree::one< works_cited_type > works_cited_;
      ::xsd::cxx::tree::one< maps_type > maps_;
    };
  }
}

#include <iosfwd>

namespace pfc
{
  namespace schema
  {
    ::std::ostream&
    operator<< (::std::ostream&, const ScenarioSchema&);
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace pfc
{
  namespace schema
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::pfc::schema::ScenarioSchema >
    Scenario (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace pfc
{
  namespace schema
  {
    void
    operator<< (::xercesc::DOMElement&, const ScenarioSchema&);

    // Serialize to std::ostream.
    //

    void
    Scenario (::std::ostream& os,
              const ::pfc::schema::ScenarioSchema& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Scenario (::std::ostream& os,
              const ::pfc::schema::ScenarioSchema& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Scenario (::std::ostream& os,
              const ::pfc::schema::ScenarioSchema& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Scenario (::xercesc::XMLFormatTarget& ft,
              const ::pfc::schema::ScenarioSchema& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Scenario (::xercesc::XMLFormatTarget& ft,
              const ::pfc::schema::ScenarioSchema& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Scenario (::xercesc::XMLFormatTarget& ft,
              const ::pfc::schema::ScenarioSchema& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Scenario (::xercesc::DOMDocument& d,
              const ::pfc::schema::ScenarioSchema& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Scenario (const ::pfc::schema::ScenarioSchema& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PFC_SCENARIO_0_2_HXX
